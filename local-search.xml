<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Dify的Chatflow实现</title>
    <link href="/2025/03/28/Dify%E7%9A%84Chatflow%E5%AE%9E%E7%8E%B0/"/>
    <url>/2025/03/28/Dify%E7%9A%84Chatflow%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>在上一次的基础上进行一些功能实现。</p><p>通过向大模型描述请求来完成一些服务器端的功能</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>流程 Dify Chatflow 任务流 → 自定义插件构建客户端请求 → 服务器端监听请求，解析请求并处理 →插件接收请求响应，传递结果给LLM 进行优化展示。</p><h2 id="创建任务流"><a href="#创建任务流" class="headerlink" title="创建任务流"></a>创建任务流</h2><p>创建空白应用→Chatflow</p><p>ChatFlow是由多个组件构成的工作流程</p><p><img src="https://i.111666.best/image/4MRRqKxQVG504FjR2SaGTk.png" alt="image"></p><p>在这个工作流程中，每次的对话会被作为输入参数传入到工作流中进行处理</p><p>当前实现的功能 ： </p><ol><li>查询服务器允许执行的命令行工具</li><li>由大模型分析用户指令，从提供的命令列表中组织命令流程下发到服务器端执行</li></ol><p>这里的编排</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">开始-问题分类器-情况1(向服务器端请求查询功能)-交由插件向服务器端发送查询请求-处理响应-回复<br>              -情况2(分析用户需求生成对应指令)-由插件构建请求向服务器请求执行-处理响应-回复<br></code></pre></td></tr></table></figure><h2 id="自定义插件向服务端发送请求"><a href="#自定义插件向服务端发送请求" class="headerlink" title="自定义插件向服务端发送请求"></a>自定义插件向服务端发送请求</h2><p>由 上一节中的设计流程来看我们至少需要构建两个请求 ：</p><p>1 . Get 请求  向服务端请求应用程序列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Desktop_get</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>FetchKey = <span class="hljs-string">&quot;/key&quot;</span><br>Command = <span class="hljs-string">&quot;/command&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        ip = tool_parameters.get(<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        port = tool_parameters.get(<span class="hljs-string">&quot;port&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        key = <span class="hljs-variable language_">self</span>.fetch_key(ip,port)<br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;Command&#125;</span>&quot;</span><br>        headers=&#123;<span class="hljs-string">&quot;X-Api-Key&quot;</span>:key&#125;<br>        res = requests.get(url=url,headers=headers,timeout=<span class="hljs-number">30</span>).json()<br>        <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">self</span>.create_text_message(<span class="hljs-built_in">str</span>(res[<span class="hljs-string">&quot;commands&quot;</span>])<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_key</span>(<span class="hljs-params">self,ip,port</span>) : <br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;FetchKey&#125;</span>&quot;</span><br><br>        js = requests.get(url=url,timeout=<span class="hljs-number">30</span>).json()<br>        <span class="hljs-keyword">return</span> js[<span class="hljs-string">&quot;key&quot;</span>]<br></code></pre></td></tr></table></figure><ol start="2"><li>Post 请求 向服务端发送命令执行列表，由服务端进行命令执行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>EXEC=<span class="hljs-string">&quot;/execute&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHelperTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        content = tool_parameters.get(<span class="hljs-string">&quot;text&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        ip = tool_parameters.get(<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        port = tool_parameters.get(<span class="hljs-string">&quot;port&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;EXEC&#125;</span>&quot;</span><br>        <span class="hljs-built_in">print</span>(url)<br>        key = tool_parameters.get(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        headers=&#123;<span class="hljs-string">&quot;X-Api-Key&quot;</span>:key,<span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/json&quot;</span>&#125;<br>        <span class="hljs-built_in">print</span>(headers)<br>        res = requests.post(url=url,json=json.loads(content),headers=headers,timeout=<span class="hljs-number">30</span>).text<br>        <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">self</span>.create_text_message(res)<br><br></code></pre></td></tr></table></figure><h2 id="构建服务器端接口"><a href="#构建服务器端接口" class="headerlink" title="构建服务器端接口"></a>构建服务器端接口</h2><p>使用flask 构建一个接收以上请求的服务程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify, request<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> pexpect<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">require_key</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorated_function</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(request.headers)<br>        key = request.headers.get(<span class="hljs-string">&#x27;X-API-KEY&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(keys)<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> keys:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;Invalid API key&#x27;</span>&#125;), <span class="hljs-number">401</span><br>        <span class="hljs-keyword">return</span> f(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> decorated_function<br><br><span class="hljs-comment"># 密钥创建路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/key&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_key</span>():<br>    key = <span class="hljs-built_in">str</span>(uuid.uuid4())<br>    keys[key] = <span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(keys)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: key&#125;)<br><br><span class="hljs-comment"># 获取所有功能路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/command&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-meta">@require_key</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_functions</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 获取PATH环境变量中的所有可执行文件</span><br>        result = subprocess.run([<span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-string">&#x27;/server/bin&#x27;</span>], capture_output=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>)<br>        commands = result.stdout.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;commands&#x27;</span>: commands&#125;)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-built_in">str</span>(e)&#125;)<br><span class="hljs-comment"># 执行命令路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/execute&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-meta">@require_key</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    执行传入的命令并返回结果</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    data = request.json<br>    <span class="hljs-built_in">print</span>(data)<br>    commands = data.get(<span class="hljs-string">&#x27;commands&#x27;</span>)<br>    result = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> commands:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;No command provided&#x27;</span>&#125;)<br>    <br>    <span class="hljs-keyword">try</span>:<br>        shell = pexpect.spawn(<span class="hljs-string">&#x27;/bin/bash&#x27;</span>)<br>        <span class="hljs-keyword">for</span> command <span class="hljs-keyword">in</span> commands:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(command, <span class="hljs-built_in">dict</span>):<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Invalid command format&#x27;</span>&#125;)<br>            command_line = []<br>            command_line.append(command[<span class="hljs-string">&quot;command&quot;</span>])<br>            command_line.extend(command[<span class="hljs-string">&quot;args&quot;</span>])<br>            cmd = <span class="hljs-string">&quot; &quot;</span>.join(command_line)<br>            marker = <span class="hljs-string">f&quot;CMD_END_<span class="hljs-subst">&#123;<span class="hljs-built_in">hash</span>(cmd)&#125;</span>&quot;</span><br>            shell.sendline(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;cmd&#125;</span>; echo &#x27;<span class="hljs-subst">&#123;marker&#125;</span>&#x27;&quot;</span>)<br>            shell.expect(marker)<br>            <span class="hljs-comment"># 获取输出</span><br>            output = shell.before.decode().strip()<br>            <span class="hljs-built_in">print</span>(output)<br>            result.append( &#123;<br>                <span class="hljs-string">&#x27;command&#x27;</span>: cmd,<br>                <span class="hljs-string">&#x27;status&#x27;</span>:<span class="hljs-string">&#x27;success&#x27;</span>,<br>                <span class="hljs-string">&#x27;stdout&#x27;</span>: output,<br>            &#125;)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-built_in">str</span>(e)&#125;)<br>    shell.close()<br>    <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>: result&#125;)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>Get 请求返回的消息体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;hexo&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;ls&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;lscpu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;zip&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Post请求接收的消息体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ls&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;/home/codfish&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>启动本地插件调试和服务端</p><h2 id="执行工作流"><a href="#执行工作流" class="headerlink" title="执行工作流"></a>执行工作流</h2><p>向机器人请求查看服务端提供的应用列表 ： </p><p><img src="https://i.111666.best/image/lgRg7jkIDaRm4Fs8moXWkk.png" alt="image"></p><p>向机器人请求查询某个目录下的文件信息：</p><p><img src="https://i.111666.best/image/PI0vurDrzyzDKmIyPWrGCh.jpg" alt="image"></p><p>请求安装python 库：</p><p><img src="https://i.111666.best/image/fY63mSee5VABzV7CFrSHuu.png" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完成了基本功能的实现</p><p>在某些情况下提示词还是会出现异常，需要进一步优化。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WSL2+Dify 配置大模型桌面端资源访问(简单应用)</title>
    <link href="/2025/03/25/WSL2-Dify-%E9%85%8D%E7%BD%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE-%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
    <url>/2025/03/25/WSL2-Dify-%E9%85%8D%E7%BD%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE-%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>最近使用WSL2 做了dify的本地化部署。试着使用工作流的方式实现一个工作流来通过和大模型对话完成对本地资源的访问。</p><h1 id="预配置"><a href="#预配置" class="headerlink" title="预配置"></a>预配置</h1><h2 id="WSL2的本地部署"><a href="#WSL2的本地部署" class="headerlink" title="WSL2的本地部署"></a>WSL2的本地部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --list  <span class="hljs-comment"># 查询支持的wsl子系统发行版本</span><br>wsl --install <span class="hljs-comment"># 安装默认的wsl子系统</span><br></code></pre></td></tr></table></figure><p>部署完成后，配置安装apt源 ，Docker源（镜像有问题可以查询之前的文章），Git配置，以及 一些基本的命令行工具</p><h2 id="Dify-本地部署"><a href="#Dify-本地部署" class="headerlink" title="Dify 本地部署"></a>Dify 本地部署</h2><p>Github 上 <a href="https://github.com/langgenius/dify">https://github.com/langgenius/dify</a> 有部署教程，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> dify<br><span class="hljs-built_in">cd</span> docker<br><span class="hljs-built_in">cp</span> .env.example .<span class="hljs-built_in">env</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><p>安装完毕后 访问本地的<a href="http://localhost/install">http://localhost/install</a>  进行管理员配置</p><p>至此我们获得了一个部署在本地windows子系统上的dify环境</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p><img src="https://i.111666.best/image/YNLclFRYQ3PLOr79iU1PyH.png" alt="image"></p><p>目标是通过和大模型对话，识别其中的关键词来完成和自定义插件中的功能的映射关系。向本地的HTTP服务器发送对应请求。完成功能的执行</p><p>一些未来可行的扩展项</p><ol><li>更好的服务通信方式。wsl2 子系统可以直接对挂载到该系统的windows系统上的文件进行操作。所以存在更快捷方法调用本地资源。但是这可能需要dify提供更丰富的调用方式或者在docker层面上进行一些功能定制，当前只是一个可行性尝试。所以使用了 http的调用-响应模式</li><li>注册， 提供一个通用的PC平台应用发现服务。而不是通过将所有的可执行程序注册为Dify的自定义插件功能。这样更加灵活</li><li>本地的部署+自然语言的请求+插件自定义功能的解耦 目前来看相对还是比较安全。如果需要实现远程的请求调用可能需要更加安全的信息传输方式</li><li>在本地添加应用程序和文件资源的调用记录。</li></ol><h1 id="Dify的自定义插件"><a href="#Dify的自定义插件" class="headerlink" title="Dify的自定义插件"></a>Dify的自定义插件</h1><h2 id="脚手架工具初始化"><a href="#脚手架工具初始化" class="headerlink" title="脚手架工具初始化"></a>脚手架工具初始化</h2><p>官方文档</p><p><a href="https://docs.dify.ai/zh-hans/plugins/quick-start/develop-plugins/initialize-development-tools">https://docs.dify.ai/zh-hans/plugins/quick-start/develop-plugins/initialize-development-tools</a></p><p>下载 Dify的插件脚手架工具 <a href="https://github.com/langgenius/dify-plugin-daemon/tags">https://github.com/langgenius/dify-plugin-daemon/tags</a></p><p>以tools 类型为例  初始化 插件项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dify-plugin-windows-amd64 plugin init <br></code></pre></td></tr></table></figure><p><img src="https://i.111666.best/image/36KrL8MFwMSB0kHm0M7VGs.png" alt="image"><br>name 创建 插件名</p><p>author 插件作者</p><p>description 插件功能描述</p><p>语言 : python</p><p>工具 : tools  (自定义tools 类型插件</p><p><img src="https://i.111666.best/image/htD6C2oNrddvAuEyXVdmep.png" alt="image"></p><p>一些权限的设置</p><p>最终我们得到的是一个这样的工程</p><p>以下是一些比较重要的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">- _assets  <span class="hljs-comment"># 存放一些引用资源</span><br>- provider <span class="hljs-comment"># </span><br>  - someplugin.py <span class="hljs-comment"># 进行一些异常处理</span><br>- someplugin.yaml <span class="hljs-comment"># 插件功能/资源描述 </span><br>- tools    <span class="hljs-comment"># 具体的tools功能实现</span><br>- somefunction.py <span class="hljs-comment"># 具体的功能实现</span><br>- somefunction.yaml <span class="hljs-comment"># 功能/资源描述</span><br>- main.py <span class="hljs-comment"># 函数入口</span><br>- manifest.yaml <span class="hljs-comment">#  插件描述</span><br> <br></code></pre></td></tr></table></figure><h2 id="插件功能定义"><a href="#插件功能定义" class="headerlink" title="插件功能定义"></a>插件功能定义</h2><p>插件通过调用的是_invoke方法来执行对应的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Generator<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">from</span> dify_plugin <span class="hljs-keyword">import</span> Tool<br><span class="hljs-keyword">from</span> dify_plugin.entities.tool <span class="hljs-keyword">import</span> ToolInvokeMessage<br><br>BASE_URL =<span class="hljs-string">&quot;&lt;http://localhost:8080&gt;&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        method = tool_parameters.get(<span class="hljs-string">&quot;method&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        result = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> method == <span class="hljs-string">&quot;desktop_get&quot;</span> :<br>            result = requests.get(BASE_URL).text<br>        <span class="hljs-keyword">yield</span>  <span class="hljs-variable language_">self</span>.create_text_message(<span class="hljs-string">f&#x27;调用了<span class="hljs-subst">&#123;method&#125;</span>,返回<span class="hljs-subst">&#123;result&#125;</span>&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>这里给出了一个简单的http请求调用，使用request模拟http get 请求。并返回接收到的消息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">identity:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">desktop_get</span>      <span class="hljs-comment"># 方法名</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">codfish</span><br>  <span class="hljs-attr">label:</span><br>    <span class="hljs-attr">en_US:</span> <span class="hljs-string">destop_get</span><br>    <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">destop_get</span><br>    <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">destop_get</span><br><span class="hljs-attr">description:</span><br>  <span class="hljs-attr">human:</span><br>    <span class="hljs-attr">en_US:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>  <span class="hljs-attr">llm:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br><span class="hljs-attr">parameters:</span>       <span class="hljs-comment">#自定义参数</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">url</span>     <span class="hljs-comment">#参数名</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span>  <span class="hljs-comment">#参数类型</span><br>    <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">label:</span><br>      <span class="hljs-attr">en_US:</span> <span class="hljs-string">Query</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">查询语句</span><br>      <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">Query</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">human_description:</span><br>      <span class="hljs-attr">en_US:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>      <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>      <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">llm_description:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">form:</span> <span class="hljs-string">llm</span><br><span class="hljs-attr">extra:</span><br>  <span class="hljs-attr">python:</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">tools/desktop_get.py</span>  <span class="hljs-comment">#对应的python实现文件</span><br><br></code></pre></td></tr></table></figure><p>每个tools 插件允许添加多个方法，每个方法需要定义自己的模块文件(.py)和资源描述文件（.yaml）</p><p>其结构为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">tools\\</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction1.py</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction1.yaml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction2.py</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction2.yaml</span><br>  <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><h2 id="插件调试"><a href="#插件调试" class="headerlink" title="插件调试"></a>插件调试</h2><p>通过修改工作目录中的.env.example 为.env</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">INSTALL_METHOD=remote</span><br><span class="hljs-string">REMOTE_INSTALL_HOST=debug.dify.ai</span><br><span class="hljs-string">REMOTE_INSTALL_PORT=5003</span><br><span class="hljs-string">REMOTE_INSTALL_KEY=some_install_key</span><br></code></pre></td></tr></table></figure><p>将dify插件页的调试信息填充到.env中，本地执行main方法，插件会被加载到dify的插件列表中</p><p><img src="https://i.111666.best/image/TmrbwxdMkhWRuygRCXbdGp.png" alt="image"></p><h2 id="创建CHAT任务流"><a href="#创建CHAT任务流" class="headerlink" title="创建CHAT任务流"></a>创建CHAT任务流</h2><p><img src="https://i.111666.best/image/2IgA1P69jBp6amaeczz6ZT.png" alt="image"></p><p>创建大模型组件，并填入模型，国内推荐使用硅基流动。</p><p>在大模型组件中填入模型，填入系统提示词，核心目的是预期输出合理且可控，不要有多余的输出，测试的系统提示词如下(并不能很好的获取到目标方法名，需要后期再调试)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## 角色</span><br><span class="hljs-string">你是一位专业的桌面助理</span><br><span class="hljs-comment">## 任务</span><br><span class="hljs-string">当用户发送查询桌面的请求时，你可以根据对话信息检查是否返回一个调用方法</span><br><span class="hljs-comment">## 当前支持的方法表</span><br><span class="hljs-string">发起桌面请求</span> <span class="hljs-string">=</span> <span class="hljs-string">destop_get</span><br><span class="hljs-comment">## 注意</span><br><span class="hljs-string">不需要</span> <span class="hljs-string">直接回答用户请求，只需要返回一个具体的执行方法</span><br></code></pre></td></tr></table></figure><p>在后续添加自定义组件作为节点， 接收大模型的返回作为输入的参数，进行后续执行</p><p><img src="https://i.111666.best/image/TUxQf8y6eXGsVkuHSLivNL.png" alt="image"></p><p>一个基础的工作链条  启动大模型→发起请求→ 根据请求给出需要执行的方法→传递给插件执行方法→返回执行结果</p><p>大模型正确识别方法名，插件解析方法，执行对应方法。向本地启动的服务器发送请求。得到响应返回结果到对话框</p><p><img src="https://i.111666.best/image/hdRpQxHTCHkU6fLsuc3BTm.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker容器镜像源</title>
    <link href="/2025/03/21/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <url>/2025/03/21/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="关于Docker-容器镜像拉取的问题"><a href="#关于Docker-容器镜像拉取的问题" class="headerlink" title="关于Docker 容器镜像拉取的问题"></a>关于Docker 容器镜像拉取的问题</h2><p>使用docker pull 或者 docker compose up -d 拉取镜像时，经常会遇到以下问题。</p><p>Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/">https://registry-1.docker.io/v2/</a>“: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p><p>原因是镜像源失效或者速率不够导致超时</p><p>绝大部分的文章都不用看，因为失效很快</p><p>可以在Github上关注这个项目随时更新源</p><p><a href="https://github.com/dongyubin/DockerHub">https://github.com/dongyubin/DockerHub</a></p><p>然后修改本地daemon.json 配置</p><p>cat &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>   <span class="hljs-string">&quot;https://docker.mybacc.com&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-string">&quot;https://docker.1ms.run&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-string">&quot;https://dytt.online&quot;</span><br> <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>重启daemon和docker 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl restart docker <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于HEXO的博客搭建</title>
    <link href="/2025/03/21/%E5%9F%BA%E4%BA%8EHEXO%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/03/21/%E5%9F%BA%E4%BA%8EHEXO%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="基于HEXO-FLUID-样式的博客搭建"><a href="#基于HEXO-FLUID-样式的博客搭建" class="headerlink" title="基于HEXO+FLUID 样式的博客搭建"></a>基于HEXO+FLUID 样式的博客搭建</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>7.3版本的Hexo 要求node.js 的版本在18.0以上，centos7 所能拉取到的node.js 版本在11.0 。考虑到需要处理依赖所以直接换成了alibaba cloud 系统</p></li><li><p>安装 npm和hexo-cli 命令行工具</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install npm<br>npm install hexo-cli -g<br></code></pre></td></tr></table></figure></li><li><p>Github 集成</p><p> 因为后续需要设置到github page ，所以先配置git和密钥</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>ssh-keygen  <span class="hljs-comment"># 使用ssh-keygen 创建密钥</span><br><span class="hljs-built_in">cat</span> /root/.ssh/id_rsa.pub  <span class="hljs-comment"># 从目录文件夹查询公钥， </span><br><span class="hljs-comment"># 配置到github  -&gt; settings -&gt; SSH and GPG keys -&gt; New SSH key</span><br><br>dnf install git   <span class="hljs-comment"># 安装git</span><br><br>git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;邮箱&quot;</span><br>    <br>ssh -T git@github.com  <span class="hljs-comment"># 测试到github的连接</span><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="HEXO-框架安装"><a href="#HEXO-框架安装" class="headerlink" title="HEXO 框架安装"></a>HEXO 框架安装</h2><p>初始化hexo ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myhexo/  <span class="hljs-comment">#  初始化文件夹</span><br><span class="hljs-built_in">cd</span> myhexo  <span class="hljs-comment"># 移动到博客目录</span><br>npm install hexo-deployer-git --save  <span class="hljs-comment"># 安装并存储hexo项目</span><br></code></pre></td></tr></table></figure><p>修改部署方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>         <span class="hljs-comment"># 类型是 git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span>    <br>  <span class="hljs-comment">#在github上创建username.github.io的仓库,确认仓库名是否一致！ </span><br>  <span class="hljs-comment">#这里可以使用ssh的方式，也可以使用https的方式，但是ssh更稳定</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span> <span class="hljs-comment"># 设置分支为master</span><br><br></code></pre></td></tr></table></figure><p>修改后 使用 hexo deploy 进行安装，安装过程中会提示输入用户名和密码‘</p><p>用户名就是登录账户的名称</p><p>密码需要通过 settings → Developer Settings → Personal access tokens → Generate new token 创建token  作为密码 </p><p>等待几分钟可以通过访问 <a href="https://username.github.io/">https://username.github.io</a> 查看是否创建成功</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>hexo 支持多种样式风格的插件</p><p>以安装fluid为例 ， 安装插件 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">--save</span> <span class="hljs-string">hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>这时可以将 下载对应主题文件 放到theme 文件夹，在_config.yml配置theme 为fluid</p><p>或者直接在根目录创建 _config.fluid.yml  来进行配置。 _config.fluid.yml 的配置优先级高于 _config.yml  。 一些基本配置 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#标签页主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#语言</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#时区</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#主题</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about  <span class="hljs-comment"># 关于页需要自行创建</span><br></code></pre></td></tr></table></figure><p>扩展配置可以参考 ： <a href="https://fluid-dev.github.io/hexo-fluid-docs/">https://fluid-dev.github.io/hexo-fluid-docs/</a></p><p>在调试时 可以通过</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">g</span> <span class="hljs-string">--debug</span> <span class="hljs-string">来查看具体的配置信息</span>  <span class="hljs-string">如归档标签页的配置信息</span><br><br>  <span class="hljs-attr">&quot;archive&quot;:</span> &#123;<br>    <span class="hljs-attr">&quot;banner_img&quot;:</span> <span class="hljs-string">&quot;/img/default.png&quot;</span>,   <span class="hljs-comment"># 指定背景图片</span><br>    <span class="hljs-attr">&quot;banner_img_height&quot;:</span> <span class="hljs-number">60</span>,  <span class="hljs-comment"># 图片占全屏的比例</span><br>    <span class="hljs-attr">&quot;banner_mask_alpha&quot;:</span> <span class="hljs-number">0.3</span>   <span class="hljs-comment"># 不透明度</span><br>  &#125;<span class="hljs-string">,</span><br><br></code></pre></td></tr></table></figure><p>每次修改后需要使用hexo clean 再进行 生成和部署。</p><p>然后就可以开始 创建文章了,创建后会提示你md文件的地址，就可以进行编辑了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>相关内容 ： <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
