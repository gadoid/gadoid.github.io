<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java编程 VI 网络编程</title>
    <link href="/2025/04/29/Java%E7%BC%96%E7%A8%8B-VI-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/04/29/Java%E7%BC%96%E7%A8%8B-VI-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>socket提供了与外部网络通信的网络接口</p><h2 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h2><p>InetAddress 提供了一些获取ip地址信息的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> InetAddress <span class="hljs-title function_">getByName</span><span class="hljs-params">(String host)</span>     <br><span class="hljs-keyword">static</span> InetAddress[] getAllByName(String host)  <span class="hljs-comment">// 为给定主机名创建一个InetAddress对象</span><br><span class="hljs-keyword">static</span> InetAddress <span class="hljs-title function_">getLocalHost</span><span class="hljs-params">()</span>  <span class="hljs-comment">// 为本地主机创建一个InetAddress对象</span><br><span class="hljs-type">byte</span>[] getAddress()         <span class="hljs-comment">// 获取数字型地址的字节数组</span><br>String <span class="hljs-title function_">getHostAddress</span><span class="hljs-params">()</span>     <span class="hljs-comment">// 以字符串返回主机地址</span><br>String <span class="hljs-title function_">getHostName</span><span class="hljs-params">()</span>        <span class="hljs-comment">// 返回主机名</span><br></code></pre></td></tr></table></figure><h2 id="创建一个Socket-Server"><a href="#创建一个Socket-Server" class="headerlink" title="创建一个Socket Server"></a>创建一个Socket Server</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.* ;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Echoserver</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123; <br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">var</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8189</span>))&#123;<br>            <span class="hljs-keyword">try</span>(<span class="hljs-type">Socket</span> <span class="hljs-variable">incoming</span> <span class="hljs-operator">=</span> s.accept())&#123;<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">inStream</span> <span class="hljs-operator">=</span> incoming.getInputStream();<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outStream</span> <span class="hljs-operator">=</span> incoming.getOutputStream();<br>                <span class="hljs-keyword">try</span>(<span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(inStream, StandardCharsets.UTF_8))&#123;<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outStream,StandardCharsets.UTF_8),<span class="hljs-literal">true</span>);<br>                    out.println(<span class="hljs-string">&quot;Hello! Enter BYE to exit.&quot;</span>);<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">done</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">while</span>(!done&amp;&amp;in.hasNextLine())&#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> in.nextLine();<br>                        out.println(<span class="hljs-string">&quot;Echo:&quot;</span>+line);<br>                        <span class="hljs-keyword">if</span>(line.trim().equals(<span class="hljs-string">&quot;BYE&quot;</span>))<br>                            done = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>      <br>        &#125;;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当前的服务器 只能接受一个用户请求，使用 多线程将它改造为接受多个用户请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.* ;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Echoserver</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123; <br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">var</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8189</span>))&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">incoming</span> <span class="hljs-operator">=</span> s.accept();<br>                <span class="hljs-type">Runnable</span> <span class="hljs-variable">thread_mission</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadedHandler</span>(incoming);<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(thread_mission);<br>                t.start();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket incoming;<br>    ThreadedHandler(Socket incoming)&#123;<br>        <span class="hljs-built_in">this</span>.incoming = incoming;<br>    &#125;<br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inStream</span> <span class="hljs-operator">=</span> incoming.getInputStream();<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outStream</span> <span class="hljs-operator">=</span> incoming.getOutputStream();<br>            <span class="hljs-keyword">try</span>(<span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(inStream, StandardCharsets.UTF_8))&#123;<br>                <span class="hljs-type">var</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outStream,StandardCharsets.UTF_8),<span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">//flush 强制将缓存区数据发送出去。</span><br>                out.println(<span class="hljs-string">&quot;Hello! Enter BYE to exit.&quot;</span>);<br>                <span class="hljs-type">var</span> <span class="hljs-variable">done</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">while</span>(!done&amp;&amp;in.hasNextLine())&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> in.nextLine();<br>                    out.println(<span class="hljs-string">&quot;Echo:&quot;</span>+line);<br>                    <span class="hljs-keyword">if</span>(line.trim().equals(<span class="hljs-string">&quot;BYE&quot;</span>))<br>                        done = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从这里可以看出TCP端口虽然是固定的，但操作系统通过为每个连接分配唯一的 socket（基于四元组标识）来实现多个连接共用一个监听端口。应用程序通常为每个 socket 启动一个线程或事件循环进行数据处理，从而实现高并发连接的处理。</p><h2 id="半关闭"><a href="#半关闭" class="headerlink" title="半关闭"></a>半关闭</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">tar (<span class="hljs-type">var</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(host,port))&#123;<br><span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(socket.getInputStream(),StandardCharsets.UTF_8);<br><span class="hljs-type">var</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(socket.getOutputStream());<br>writer.print(...);<br>writer.flush();<br>socket.shutdownOutput();<br><span class="hljs-keyword">while</span>(in.hasNextLine() !=<span class="hljs-literal">null</span> )<br>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> in.next.line;<br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>java提供了url 对象来对web 数据的访问地址进行封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InputStream</span> <span class="hljs-variable">inStream</span> <span class="hljs-operator">=</span> url.OpenStream();<br><span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(inStream,StandardCharsets.UTF-<span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure><p>urlconnection</p><p>从url中获取更多的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> url.openConnecton();<br></code></pre></td></tr></table></figure><p>URL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">InputStream <span class="hljs-title function_">openStream</span><span class="hljs-params">()</span><br>URLConnection <span class="hljs-title function_">openConnection</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p>URLConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setDoInput</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 设置接收数据状态</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">getDoInput</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取接收护数据的状态</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setDoOutput</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 设置创建发送流</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">getDoOutput</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取发送流的状态</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setIfModifiedSince</span><span class="hljs-params">(<span class="hljs-type">long</span> time)</span><br><span class="hljs-comment">// 获取某个时间点依赖修改的数据</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getIfModifiedSince</span><span class="hljs-params">()</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setConnectTimeout</span><span class="hljs-params">()</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getConnectTimeout</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 设置连接的超时时间</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getReadTimeout</span><span class="hljs-params">()</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setReadTimeout</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 设置读取数据的超时时间</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setRequestProperty</span><span class="hljs-params">(String key ,String value)</span><br>Map&lt;String,List&lt;String&gt;&gt; <span class="hljs-title function_">getRequestProperties</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 设置 /读取 请求头中的属性</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 连接远程资源并获取头部信息</span><br>Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">getHeaderFields</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取响应头映射表</span><br>String <span class="hljs-title function_">getHeaderFileKey</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>String <span class="hljs-title function_">getHeaderField</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br><span class="hljs-comment">// 获取第n个响应头的键/值信息</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getContentLength</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取内容长度</span><br>String <span class="hljs-title function_">getConnentType</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取内容的类型</span><br>String <span class="hljs-title function_">getContentEncoding</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取编码信息</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getDate</span><span class="hljs-params">()</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getExpiration</span><span class="hljs-params">()</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getLastModifed</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取创建日期，超时日期和最后一次修改的日期</span><br>InputStream <span class="hljs-title function_">getInputStream</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取一个输入流</span><br>OutputStream <span class="hljs-title function_">getOutputStream</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取一个输出流</span><br>Object <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><h2 id="HTTP-客户端"><a href="#HTTP-客户端" class="headerlink" title="HTTP 客户端"></a>HTTP 客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newHttpClient()<br><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newBuilder().followRedirects(HttpClient.Redirect.ALWAYS).build()<br><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newBuilder().uri(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;&lt;http://horstmann.com&gt;&quot;</span>)).GET().build()<br><span class="hljs-comment">// 创建 get请求</span><br><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newBuilder().uri(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url)).POST(HttpRequest.BodyPublishers.ofString(jsonString)).build())<br><span class="hljs-comment">// 创建 post请求</span><br></code></pre></td></tr></table></figure><p>通过 HttpResponse 接收客户端响应</p><p>HttpResponse<code>&lt;T&gt;</code> 类 接收一个 经过响应处理器（HttpResponse.BodyHandlers.ofString()）处理的响应对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpResponse&lt;String&gt; response = client.send(request,HttpResponse.BodyHandlers.ofString());<br></code></pre></td></tr></table></figure><p>通过HttpResponses 还可以获取头信息和状态码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> response.statusCode();       <span class="hljs-comment">// 获取状态码信息</span><br><span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">responseHeaders</span> <span class="hljs-operator">=</span> response.headers();   <span class="hljs-comment">// 获取响应头</span><br>Map&lt;String,List&lt;String&gt;&gt; headerMap = responseHeaders.map();  <span class="hljs-comment">// 获取响应头的映射信息</span><br>Optional&lt;String&gt; lastModified = responseHeaders.firstValue(<span class="hljs-string">&quot;Last-Modified&quot;</span>); <span class="hljs-comment">// 获取具体的字段</span><br><br><span class="hljs-type">ExecutorSevice</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executor.newCachedThreadPool();  <span class="hljs-comment">//创建线程池</span><br><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newBuilder().executor(executor).build();  <span class="hljs-comment">// 创建client放入线程池</span><br><br><span class="hljs-type">HttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> HttpRequest.newBuilder().uri(uri).GET().build();<br>client.sendAsync(request, HttpResponse.BodyHandlers.ofString())  <br>.thenAccept(response-&gt;);  <span class="hljs-comment">// 创建异步响应，创建请求，使用client 发送该请求，并通过thenAccept</span><br><span class="hljs-comment">//  来处理得到响应后的任务</span><br></code></pre></td></tr></table></figure><p>方法签名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpClient <br><span class="hljs-keyword">static</span> HttpClient <span class="hljs-title function_">newHttpClient</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 创建一个默认的HttpClient对象</span><br><span class="hljs-keyword">static</span> HttpClient.Builder <span class="hljs-title function_">newBuilder</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 在流中创建一个HttpClient 对象</span><br>&lt;T&gt; HttpResponse&lt;T&gt; <span class="hljs-title function_">send</span><span class="hljs-params">(HttpRequest request , HttpResponse.BodyHandler&lt;T&gt; responseBodyHandler)</span><br><span class="hljs-comment">// client 发送一个请求，返回一个HttpResponse对象</span><br>&lt;T&gt; CompletableFuture&lt;HttpResponse&lt;T&gt;&gt; <span class="hljs-title function_">sendAsync</span><span class="hljs-params">(HttpRequest request, HttpResponse.BodyHandler </span><br><span class="hljs-params">// 使用sendAsync 发送一个异步请求， 后续使用thenAccept接收异步响应的处理</span><br><span class="hljs-params">&lt;T&gt; responseBodyHandler )</span><br><br>HttpClient.Builder<br>HttpClient <span class="hljs-title function_">build</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 创建一个HttpClient 实例（终结方法）</span><br>HttpClient.Builder <span class="hljs-title function_">followRedirects</span><span class="hljs-params">(HttpClient.Redirect policy(ALWAYS, NEVR,NORMAL)</span>)<br><span class="hljs-comment">// 设置客户端接收重定向的策略</span><br>HttpClient.Builder <span class="hljs-title function_">executor</span><span class="hljs-params">(Executor executor)</span><br><span class="hljs-comment">// 将客户端加入指定的执行器</span><br><br>HttpRequest<br>HttpRequest.Builder <span class="hljs-title function_">newBuilder</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 流式调用创建一个request请求</span><br>HttpRequest.Builder<br>HttpRequest <span class="hljs-title function_">build</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 创建一个HttpRequest 实例 （终结方法）</span><br>HttpRequest.Builder <span class="hljs-title function_">uri</span><span class="hljs-params">(URI uri)</span><br><span class="hljs-comment">// 流式调用中指定uri</span><br>HttpRequest.Builder <span class="hljs-title function_">GET</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 指定http get方法</span><br>HttpRequest.Builder <span class="hljs-title function_">DELETE</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 指定 http delete 方法</span><br>HttpRequest.Builder <span class="hljs-title function_">POST</span><span class="hljs-params">(HttpRequest.BodyPublisher bodyPublisher)</span><br><span class="hljs-comment">// 指定 http post 方法 接收一个请求体</span><br>HttpRequest.Builder <span class="hljs-title function_">PUT</span><span class="hljs-params">(HttpRequest.BodyPublisher bodyPublisher)</span><br><span class="hljs-comment">// 指定 http put 方法 接收一个请求头</span><br>HttpResponse<br>T <span class="hljs-title function_">body</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 产生响应体</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">statusCode</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 状态码</span><br>HttpHeaders <span class="hljs-title function_">headers</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 响应头</span><br><br>HttpHeaders<br>Map&lt;String , List&lt;String&gt;&gt; <span class="hljs-title function_">map</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 通过map 获取 httpheaders 的映射</span><br>Optional&lt;String&gt; <span class="hljs-title function_">firstValue</span><span class="hljs-params">(String name)</span><br><span class="hljs-comment">// 获取 头中属性的第一个值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 V 并发</title>
    <link href="/2025/04/29/Java%E7%BC%96%E7%A8%8B-V-%E5%B9%B6%E5%8F%91/"/>
    <url>/2025/04/29/Java%E7%BC%96%E7%A8%8B-V-%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>在java中，通过实现Runnable接口，可以实现多线程的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> ()-&gt;&#123;System.out.println(Thread.currentThread().getName());&#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> ()-&gt;&#123;System.out.println(Thread.currentThread().getName());&#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t2);<br>        m.start();<br>        s.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * Thread-1</span><br><span class="hljs-comment"> * Thread-0</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h2><p>当有多个线程需要共享对同一数据的存取，并且都调用了要对对象进行修改的方法，就会发生竞态条件。因为这些方法是非原子的 ，即 读-处理-存储 并非是同一个操作，这时就会导致读取的数据可能在多个线程间被处理，导致最终的结果不稳定。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>通过定义锁结构，将一系列操作变为原子化操作，即在这一些列操作被完全执行前，其他线程无法对这个共享资源进行操作。</p><p>未加锁，非原子操作导致数据异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_Test</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">100</span>)&#123;<br>                        count++;<br>                        i++;<br>                        System.out.println(<span class="hljs-string">&quot;thread_name: &quot;</span>+ Thread.currentThread().getName() +<span class="hljs-string">&quot;count : &quot;</span> + count);<br>                        Thread.sleep(<span class="hljs-number">10</span>);   <br>                    &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">while</span> ( i &lt; <span class="hljs-number">100</span>)&#123;<br>                        count++;<br>                        i++;<br>                        System.out.println(<span class="hljs-string">&quot;thread_name: &quot;</span>+ Thread.currentThread().getName() +<span class="hljs-string">&quot;count : &quot;</span> + count);<br>                        Thread.sleep(<span class="hljs-number">10</span>);   <br>                    &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t2);<br>        m.start();<br>        s.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对共享变量 count 加锁，程序正常运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_Test</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">100</span>)&#123;<br>                        lock.lock();<br>                        count++;<br>                        lock.unlock(); <br>                        i++;<br>                        System.out.println(<span class="hljs-string">&quot;thread_name: &quot;</span>+ Thread.currentThread().getName() +<span class="hljs-string">&quot;count : &quot;</span> + count);<br>                        Thread.sleep(<span class="hljs-number">10</span>);   <br><br>                    &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">while</span> ( i &lt; <span class="hljs-number">100</span>)&#123;<br>                        lock.lock();<br>                        count++;<br>                        lock.unlock(); <br>                        i++;<br>                        System.out.println(<span class="hljs-string">&quot;thread_name: &quot;</span>+ Thread.currentThread().getName() +<span class="hljs-string">&quot;count : &quot;</span> + count);<br>                        Thread.sleep(<span class="hljs-number">10</span>);   <br><br>                    &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t2);<br>        m.start();<br>        s.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a>synchronized 关键字</h2><p>synchronized 关键字本身是用来声明一个对象作为整体是只可以被某个线程所“独占”的。</p><p>所以通过以下几种方法可以定义不同的控制块</p><table><thead><tr><th>类型</th><th>加锁对象</th><th>影响范围</th></tr></thead><tbody><tr><td><code>synchronized</code>实例方法</td><td>当前实例 (<code>this</code>)</td><td>同一个对象的同步方法互斥</td></tr><tr><td><code>synchronized</code>静态方法</td><td>当前类的 <code>Class</code>对象</td><td>所有实例共享一把锁，互斥</td></tr><tr><td><code>synchronized (obj)</code></td><td>自定义锁对象 (<code>obj</code>)</td><td>只在使用这把锁的代码块互斥</td></tr></tbody></table><p>通过synchronized 来声明一个方法是一个线程安全的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_Test</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;          <br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">storer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>                        operation(-<span class="hljs-number">5</span>);<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">getter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>                        operation(<span class="hljs-number">5</span>);<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                &#125;<br><br>            &#125;;<br>;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(storer);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(getter);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>    <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span>&#123;<br>        count = count + money;<br>      <br>        System.out.println(<span class="hljs-string">&quot;current thread : &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot; , current count : &quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Object-的通知-等待"><a href="#Object-的通知-等待" class="headerlink" title="Object 的通知-等待"></a>Object 的通知-等待</h2><p>通过创建一个对象来，进行数据块的控制，<br>每个对象在JVM中有一个 <strong>监视器锁（Monitor）</strong> ，这是实现synchronized关键字背后的基础。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_Test</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(); <span class="hljs-comment">// 统一监视器锁</span><br>    <span class="hljs-keyword">static</span> List&lt;Integer&gt; array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                            <span class="hljs-keyword">while</span> (array.size() == <span class="hljs-number">10</span>) &#123; <br>                                lock.wait(); <span class="hljs-comment">// 如果满了，等待</span><br>                            &#125;<br>                            array.add(<span class="hljs-number">1</span>); <span class="hljs-comment">// 添加元素</span><br>                            array.add(<span class="hljs-number">1</span>); <span class="hljs-comment">// 添加元素</span><br>                            System.out.println(<span class="hljs-string">&quot;Producer added, size: &quot;</span> + array.size());<br>                            lock.notifyAll(); <span class="hljs-comment">// 唤醒等待的线程</span><br>                        &#125;<br>                        Thread.sleep(<span class="hljs-number">100</span>); <span class="hljs-comment">// 让出CPU</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                            <span class="hljs-keyword">while</span> (array.size() &lt;= <span class="hljs-number">0</span>) &#123; <br>                                lock.wait(); <span class="hljs-comment">// 如果空了，等待</span><br>                            &#125;<br>                            array.remove(<span class="hljs-number">0</span>); <span class="hljs-comment">// 移除元素</span><br>                            System.out.println(<span class="hljs-string">&quot;Consumer removed, size: &quot;</span> + array.size());<br>                            lock.notifyAll(); <span class="hljs-comment">// 唤醒等待的线程</span><br>                        &#125;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(producer);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(consumer);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>所以 控制竞态条件的操作有两种</p><p>1.lock + condition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(); <span class="hljs-comment">// 创建一把锁</span><br><span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition(); <span class="hljs-comment">// 创建一把条件（跟这把锁绑定）</span><br>lock.lock(); <span class="hljs-comment">// 加锁</span><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">while</span> (不满足条件) &#123;<br>        condition.await(); <span class="hljs-comment">// 等待，并释放锁</span><br>    &#125;<br>    <span class="hljs-comment">// 满足条件后继续执行</span><br>    <span class="hljs-comment">// 处理逻辑...</span><br>    condition.signalAll(); <span class="hljs-comment">// 唤醒其他等待线程</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    lock.unlock(); <span class="hljs-comment">// 释放锁</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.synchronized + 对象块控制的等待，通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread_Test</span><span class="hljs-params">()</span> &#123;<br>    array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br>&#125;<br><br><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">store</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span>  InterruptedException&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">this</span>.array.size() &gt;= <span class="hljs-number">10</span>)&#123;<br>        wait();<br>    &#125;<br>    array.add(<span class="hljs-number">1</span>);<br>    System.out.println(array.size());<br>    notifyAll();<br>&#125;<br><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> InterruptedException&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.array.size() &lt;= <span class="hljs-number">0</span>)&#123;<br>        wait();<br>    &#125;<br>    array.remove(<span class="hljs-number">0</span>);<br>    System.out.println(array.size());<br>    notifyAll();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">callable_test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        Callable&lt;Integer&gt; callable = () -&gt; &#123;            <span class="hljs-comment">//实现Callable接口</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>  ;i &lt; <span class="hljs-number">100</span> ; i++)&#123;<br>                a.num++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> a.num;<br>        &#125;;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">futuretask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;Integer&gt;(callable);  <span class="hljs-comment">//将Callable传入 futuretask</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futuretask).start();                      <span class="hljs-comment">// 传入线程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> futuretask.get();                  <span class="hljs-comment">// 从futuretask获取返回值</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();  <br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(a.num);<br>        &#125;<br>      <br><br>    &#125;  <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用执行器"><a href="#使用执行器" class="headerlink" title="使用执行器"></a>使用执行器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// newCachedThreadPool               创建一个线程池</span><br><span class="hljs-comment">// newFixedThreadPool                创建一个固定线程数的线程池</span><br><span class="hljs-comment">// newWorkStealingPool               fork-join 任务的线程池</span><br><span class="hljs-comment">// newSingleThreadPool               只有一个线程的“池”，会顺序地执行提交的任务</span><br><span class="hljs-comment">// newScheduledThreadPool            用于调度执行的固定线程池</span><br><span class="hljs-comment">// newSingleThreadScheduledExecutor  用于调度执行的单线程“池”</span><br></code></pre></td></tr></table></figure><h3 id="向线程池提交线程"><a href="#向线程池提交线程" class="headerlink" title="向线程池提交线程"></a>向线程池提交线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Callable&lt;T&gt; task)</span><br>Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Runable task)</span><br>Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Runable task ,T task)</span><br><br><span class="hljs-type">var</span> <span class="hljs-variable">futuretask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;Integer&gt;(callable);<br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>executor.submit(futuretask);<br>executor.shutdown();<br></code></pre></td></tr></table></figure><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><p>异步本身是为了解决线程执行过程中 线程阻塞导致整体执行效率降低的问题。</p><p>在所有流程被串行执行时，流程中的任务等待响应阻塞后续任务的执行。</p><h2 id="ComplateFuture"><a href="#ComplateFuture" class="headerlink" title="ComplateFuture"></a>ComplateFuture</h2><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>java中创建进程</p><p>通过ProcessBuilder来进行进程创建。</p><p>java中的进程创建是向操作系统申请创建一个全新的进程，并不与</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;gcc&quot;</span>,<span class="hljs-string">&quot;myapp.c&quot;</span>)<br><br>builder = builder.directory(path.toFile());<br><span class="hljs-comment">// 改变工作目录</span><br><span class="hljs-type">OutStream</span> <span class="hljs-variable">processln</span> <span class="hljs-operator">=</span> p.getOutputStream();        <span class="hljs-comment">// 接收标准输出</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">processOut</span> <span class="hljs-operator">=</span> p.getInputStream();      <span class="hljs-comment">// 接收标准输入</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">processError</span> <span class="hljs-operator">=</span> p.getErrorStream();    <span class="hljs-comment">// 接收标准错误</span><br><br><span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;/bin/s&quot;</span>,<span class="hljs-string">&quot;-l&quot;</span>);<br>.directory(Path.of(<span class="hljs-string">&quot;/tmp&quot;</span>).toFile())<br>.start();<br><br><span class="hljs-keyword">try</span> (<span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(process.getInputStream()))&#123;<br><span class="hljs-keyword">while</span> (in.hasNextLine())<br>System.out.println(in.nextLine());<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> process.waitFor();     <span class="hljs-comment">// 等待进程执行结果</span><br><span class="hljs-comment">//或者</span><br><span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> ... ;<br><span class="hljs-keyword">if</span> (process.waitfor(delay,TimeUnit.SECONDS))&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> process.exitValue();<br>...<br>&#125;<span class="hljs-keyword">else</span> &#123; <br>process.destroyForcibly();<br>&#125;<br><br>process.onExit().thenAccept( <br> p-&gt;System.out.println(<span class="hljs-string">&quot;Exit value : &quot;</span>+ p.exitValue()));<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 IV 扩展功能</title>
    <link href="/2025/04/29/Java%E7%BC%96%E7%A8%8B-IV-%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/"/>
    <url>/2025/04/29/Java%E7%BC%96%E7%A8%8B-IV-%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>在java 8 中 ，通过加入默认方法，向java的接口中加入了流处理的功能</p><p>流处理分为3种：</p><p>创建流</p><p>修改流元素</p><p>消费流元素</p><h2 id="流的创建"><a href="#流的创建" class="headerlink" title="流的创建"></a>流的创建</h2><p>使用 Stream.of 创建流对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionToStream</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Stream.of(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bubble</span>(<span class="hljs-number">1</span>),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bubble</span>(<span class="hljs-number">2</span>),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bubble</span>(<span class="hljs-number">3</span>)<br>        ).forEach(System.out::println);<br>        Stream.of(<br>            <span class="hljs-string">&quot;It&#x27;s&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;wonderful&quot;</span>,<span class="hljs-string">&quot;day&quot;</span>,<span class="hljs-string">&quot;for&quot;</span>,<span class="hljs-string">&quot;pie&quot;</span><br>        );<br>        System.out.println();<br>      <br>    &#125;<br>  <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bubble</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Bubble</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = size;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Stream.of 会将 传入的 序列对象转换为 Spliterator 对象来处理这些对象</p><h3 id="使用random创建流"><a href="#使用random创建流" class="headerlink" title="使用random创建流"></a>使用random创建流</h3><p>random 会随机生成 特定类型的对象，作为返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.* ;<br><span class="hljs-keyword">import</span> java.util.stream.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomGenerators</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span> <span class="hljs-params">(Stream&lt;T&gt; stream )</span>&#123;<br>        stream<br>        .limit(<span class="hljs-number">4</span>)<br>        .forEach(System.out::println);<br>        System.out.println(<span class="hljs-string">&quot;++++++++++&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">47</span>);<br>        show(rand.ints().boxed());           <span class="hljs-comment">// 随机产生整数</span><br>        show(rand.longs().boxed());           <span class="hljs-comment">// 随机产生长整型</span><br>        show(rand.doubles().boxed());         <span class="hljs-comment">// 随机产生双精度浮点数</span><br>        show(rand.ints(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>).boxed());       <span class="hljs-comment">// 随机产生10到20之间的整数</span><br>        show(rand.longs(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>).boxed());      <span class="hljs-comment">// 随机产生10到20之间的长整型</span><br>        show(rand.doubles(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>).boxed());    <span class="hljs-comment">// 随机产生10到20之间的双精度浮点数</span><br>        show(rand.ints(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>).boxed());         <span class="hljs-comment">// 随机产生3到9之间的整数,长度为3</span><br>        show(rand.longs(<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">22</span>).boxed());      <span class="hljs-comment">// 随机产生12到22之间的长整型,长度为3</span><br>        show(rand.doubles(<span class="hljs-number">3</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12.3</span>).boxed());  <span class="hljs-comment">// 随机产生11到12.3之间的双精度浮点数,长度为3</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用range构造流"><a href="#使用range构造流" class="headerlink" title="使用range构造流"></a>使用range构造流</h3><p>range 是将某个范围内的值作为返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.util.stream.IntStream.range;<br><br><span class="hljs-comment">//import static java.util.stream.IntStream</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ranges</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> ; i &lt; <span class="hljs-number">20</span> ; i++)&#123;result+=i ;&#125;<br>        System.out.println(result);<br>        result = <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : range(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>).toArray())&#123;<br>            result+=i ;<br>        &#125;<br>        System.out.println(result);<br>        System.out.println(range(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>).sum());<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="generate"><a href="#generate" class="headerlink" title="generate()"></a>generate()</h3><p>generate 接收一个实现了supplier类的实现类，类中定义 了一个获取方法来每次获取目标对象中的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.* ;<br><span class="hljs-keyword">import</span> java.util.function.*;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Supplier</span>&lt;String&gt;&#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">35</span>);<br>    <span class="hljs-type">char</span>[] letter = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>.toCharArray();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> + letter[rand.nextInt(letter.length)];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> Stream.generate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Generator</span>())<br>        .limit(<span class="hljs-number">30</span>)<br>        .collect(Collectors.joining());<br>        System.out.println(word);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="iterate"><a href="#iterate" class="headerlink" title="iterate()"></a>iterate()</h3><p>iterate 则是作为一个接口 ，每次通过调用函数来创建值作为其流的返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.stream.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fibonacci</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;<br>    Stream &lt;Integer&gt; numbers()&#123;<br>        <span class="hljs-keyword">return</span> Stream.iterate(<span class="hljs-number">0</span>,i-&gt;&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> x+i;<br>            x = i;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fibonacci</span>().numbers()<br>        .limit(<span class="hljs-number">10</span>)<br>        .forEach(System.out::println);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p>通过Arrays中的stream方法可以将数组转换为流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.utils.*;<br><span class="hljs-keyword">import</span> java.util.stream.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStreams</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>Arrays.stream(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">3.14159</span>,<span class="hljs-number">2.718</span>,<span class="hljs-number">1.618</span>&#125;)<br>.forEach(n-&gt;System.out.format(<span class="hljs-string">&quot;%f&quot;</span>,n));<br>)<br>System.out.println();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="修改流"><a href="#修改流" class="headerlink" title="修改流"></a>修改流</h2><p>peek() 用于查看流而非修改</p><p>sorted() 对数据进行排序</p><p>distinct() 移除重复元素</p><p>map() 将函数应用于流中的对象</p><p>option() 查询对象中是否存在请求端值</p><h2 id="终结流"><a href="#终结流" class="headerlink" title="终结流"></a>终结流</h2><p>toArray() 将流转换为一个数组</p><p>foreach() 对流中的每个元素进行执行</p><p>collect() 将元素收集到一个结果集合中</p><p>reduce() 组合所有元素</p><p>allMatch() 匹配元素</p><p>findFirst() 选择一个元素</p><p>findAny() 返回一个包含某个元素的Optional</p><p>count() 统计流中元素的数量</p><p>min()</p><p>max()</p><h1 id="文件的流式读取"><a href="#文件的流式读取" class="headerlink" title="文件的流式读取"></a>文件的流式读取</h1><h3 id="InputStream（抽象类）"><a href="#InputStream（抽象类）" class="headerlink" title="InputStream（抽象类）"></a>InputStream（抽象类）</h3><ul><li><code>FileInputStream</code> - 从文件读取字节</li><li><code>ByteArrayInputStream</code> - 从字节数组读取字节</li><li><code>FilterInputStream</code> - 装饰器的基类<ul><li><code>BufferedInputStream</code> - 使用缓冲区提高读取效率</li><li><code>DataInputStream</code> - 读取基本数据类型</li><li><code>ObjectInputStream</code> - 读取对象</li></ul></li><li><code>PipedInputStream</code> - 与PipedOutputStream配对，用于线程间通信</li><li><code>SequenceInputStream</code> - 将多个InputStream合并成一个</li></ul><h3 id="OutputStream（抽象类）"><a href="#OutputStream（抽象类）" class="headerlink" title="OutputStream（抽象类）"></a>OutputStream（抽象类）</h3><ul><li><code>FileOutputStream</code> - 向文件写入字节</li><li><code>ByteArrayOutputStream</code> - 向字节数组写入字节</li><li><code>FilterOutputStream</code> - 装饰器的基类<ul><li><code>BufferedOutputStream</code> - 使用缓冲区提高写入效率</li><li><code>DataOutputStream</code> - 写入基本数据类型</li><li><code>ObjectOutputStream</code> - 写入对象</li><li><code>PrintStream</code> - 打印各种数据值的便捷方式（例如System.out）</li></ul></li><li><code>PipedOutputStream</code> - 与PipedInputStream配对，用于线程间通信</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Java I/O流示例代码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaIOExamples</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            byteStreamExample();<br>            characterStreamExample();<br>            bufferedStreamExample();<br>            dataStreamExample();<br>            objectStreamExample();<br>          <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">byteStreamExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建输入输出流</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;source.txt&quot;</span>);<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;destination.txt&quot;</span>);<br>          <br>            <span class="hljs-comment">// 读取和写入</span><br>            <span class="hljs-type">int</span> byteData;<br>            <span class="hljs-keyword">while</span> ((byteData = fis.read()) != -<span class="hljs-number">1</span>) &#123;<br>                fos.write(byteData);<br>            &#125;<br>          <br>            System.out.println(<span class="hljs-string">&quot;文件复制完成（使用字节流）&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭资源（始终在finally块中进行）</span><br>            <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) fis.close();<br>            <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>) fos.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">characterStreamExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建输入输出流</span><br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;source.txt&quot;</span>);<br>            fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;destination.txt&quot;</span>);<br>          <br>            <span class="hljs-comment">// 读取和写入</span><br>            <span class="hljs-type">int</span> charData;<br>            <span class="hljs-keyword">while</span> ((charData = fr.read()) != -<span class="hljs-number">1</span>) &#123;<br>                fw.write(charData);<br>            &#125;<br>          <br>            System.out.println(<span class="hljs-string">&quot;文件复制完成（使用字符流）&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭资源</span><br>            <span class="hljs-keyword">if</span> (fr != <span class="hljs-literal">null</span>) fr.close();<br>            <span class="hljs-keyword">if</span> (fw != <span class="hljs-literal">null</span>) fw.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bufferedStreamExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建输入输出流</span><br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;source.txt&quot;</span>));<br>            bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;destination.txt&quot;</span>));<br>          <br>            <span class="hljs-comment">// 按行读取和写入</span><br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                bw.write(line);<br>                bw.newLine(); <span class="hljs-comment">// 写入一个换行符</span><br>            &#125;<br>          <br>            System.out.println(<span class="hljs-string">&quot;文件复制完成（使用缓冲流）&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭资源</span><br>            <span class="hljs-keyword">if</span> (br != <span class="hljs-literal">null</span>) br.close();<br>            <span class="hljs-keyword">if</span> (bw != <span class="hljs-literal">null</span>) bw.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataStreamExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 写入基本数据类型</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data.bin&quot;</span>))) &#123;<br>            dos.writeInt(<span class="hljs-number">100</span>);<br>            dos.writeFloat(<span class="hljs-number">123.45f</span>);<br>            dos.writeBoolean(<span class="hljs-literal">true</span>);<br>            dos.writeUTF(<span class="hljs-string">&quot;Hello, Java I/O!&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 读取基本数据类型</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data.bin&quot;</span>))) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> dis.readInt();<br>            <span class="hljs-type">float</span> <span class="hljs-variable">floatValue</span> <span class="hljs-operator">=</span> dis.readFloat();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">boolValue</span> <span class="hljs-operator">=</span> dis.readBoolean();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> dis.readUTF();<br>          <br>            System.out.println(<span class="hljs-string">&quot;读取的数据：&quot;</span> + intValue + <span class="hljs-string">&quot;, &quot;</span> + floatValue + <span class="hljs-string">&quot;, &quot;</span> + <br>                               boolValue + <span class="hljs-string">&quot;, &quot;</span> + strValue);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">objectStreamExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 创建一个可序列化的类的实例</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">30</span>);<br>      <br>        <span class="hljs-comment">// 写入对象</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;person.obj&quot;</span>))) &#123;<br>            oos.writeObject(person);<br>            System.out.println(<span class="hljs-string">&quot;对象已写入文件&quot;</span>);<br>        &#125;<br>      <br>        <span class="hljs-comment">// 读取对象</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;person.obj&quot;</span>))) &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">readPerson</span> <span class="hljs-operator">=</span> (Person) ois.readObject();<br>            System.out.println(<span class="hljs-string">&quot;读取的对象：&quot;</span> + readPerson);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>  <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testa</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>  <span class="hljs-number">1</span>/<span class="hljs-number">0</span>; <br>           System.out.println(<span class="hljs-string">&quot;try&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;catch a error&quot;</span>);  <br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;finally&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Java 中，运行时异常对象通常由 JVM 在执行某些操作时（如除以零、空指针访问、数组越界）主动创建。一旦创建，异常对象会通过 JVM 的异常分发机制沿着调用栈向上传播。当遇到匹配的 <code>catch</code> 块时，该块中的异常变量引用（如 <code>catch (IOException e)</code> 中的 <code>e</code>）将自动与该异常对象绑定，从而允许程序员访问异常的详细信息并决定如何处理。</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerException</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SimpleException&#123;<br>        System.out.println(<span class="hljs-string">&quot;Throw SimpleException from f()&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleException</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">InnerException</span> <span class="hljs-variable">ie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerException</span>();<br>        <span class="hljs-keyword">try</span>&#123;<br>            ie.f();<br>        &#125;<span class="hljs-keyword">catch</span>(SimpleException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Caught it!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Exception 是所有异常类的基类</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.net.URI;<br><span class="hljs-keyword">import</span> java.nio.file.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PathInfo</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String id ,Object p)</span>&#123;<br>        System.out.println(id+p);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">(  Path p )</span>&#123;<br>        show(<span class="hljs-string">&quot;toString:\\n &quot;</span>, pbr>        show(<span class="hljs-string">&quot;Exists: &quot;</span>,Files.exists(p));<br>        show(<span class="hljs-string">&quot;RegularFile: &quot;</span>, Files.isRegularFile(p));<br>        show(<span class="hljs-string">&quot;Absolute: &quot;</span>, Files.isDirectory(p));<br>        show(<span class="hljs-string">&quot;FileName: &quot;</span>, p.getFileName());<br>        show(<span class="hljs-string">&quot;Filename : &quot;</span>,p.isAbsolute());<br>        show(<span class="hljs-string">&quot;Parent: &quot;</span>, p.getParent());<br>        show(<span class="hljs-string">&quot;Root: &quot;</span>, p.getRoot());<br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>));<br>        info(Paths.get(<span class="hljs-string">&quot;C:&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>,<span class="hljs-string">&quot;to&quot;</span>,<span class="hljs-string">&quot;nowhere&quot;</span>,<span class="hljs-string">&quot;NoFile.txt&quot;</span>));<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;PathInfo.java&quot;</span>);<br>        info(p);<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">ap</span> <span class="hljs-operator">=</span> p.toAbsolutePath();<br>        info(ap);<br>        info(ap.getParent());<br>        <span class="hljs-keyword">try</span> &#123;<br>            info(p.getParent());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e);<br>        &#125;<br>        <span class="hljs-type">URI</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> p.toUri();<br>        System.out.println(<span class="hljs-string">&quot;URI: &quot;</span> + u);<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">puri</span> <span class="hljs-operator">=</span> Paths.get(u);<br>        System.out.println(Files.exists(puri));<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> puri.toFile();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 Path对象来管理 路径对象。通过File对象来管理文件对象。通过Files来判断路径指向的文件类型</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2><p>字符串本身是储存在堆中的，当进行字符串对象的传递，本质是传递了该字符串的引用</p><p>而当对字符串进行拼接操作时，其流程是 ：</p><p>通过引用 查询到堆中的字符串，计算待拼接字符串的大小，申请对应大小电脑内存，将每个字符串存入新的字符数组中，返回新的对该字符数组的引用。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法名</th><th>说明</th><th>示例</th><th>返回值</th></tr></thead><tbody><tr><td><code>length()</code></td><td>获取字符串长度</td><td><code>&quot;hello&quot;.length()</code></td><td><code>5</code></td></tr><tr><td><code>isEmpty()</code></td><td>是否为空字符串</td><td><code>&quot;&quot;.isEmpty()</code></td><td><code>true</code></td></tr><tr><td><code>isBlank()</code></td><td>是否全为空白字符（Java 11+）</td><td><code>&quot;  &quot;.isBlank()</code></td><td><code>true</code></td></tr><tr><td><code>charAt(int index)</code></td><td>获取指定位置字符</td><td><code>&quot;abc&quot;.charAt(1)</code></td><td><code>&#39;b&#39;</code></td></tr><tr><td><code>equals(String s)</code></td><td>内容相等（区分大小写）</td><td><code>&quot;Hi&quot;.equals(&quot;hi&quot;)</code></td><td><code>false</code></td></tr><tr><td><code>equalsIgnoreCase(String s)</code></td><td>内容相等（忽略大小写）</td><td><code>&quot;Hi&quot;.equalsIgnoreCase(&quot;hi&quot;)</code></td><td><code>true</code></td></tr><tr><td><code>compareTo(String s)</code></td><td>字典序比较</td><td><code>&quot;abc&quot;.compareTo(&quot;bcd&quot;)</code></td><td><code>-1</code></td></tr><tr><td><code>contains(CharSequence s)</code></td><td>是否包含子串</td><td><code>&quot;hello&quot;.contains(&quot;ell&quot;)</code></td><td><code>true</code></td></tr><tr><td><code>startsWith(String s)</code></td><td>是否以 s 开头</td><td><code>&quot;java&quot;.startsWith(&quot;ja&quot;)</code></td><td><code>true</code></td></tr><tr><td><code>endsWith(String s)</code></td><td>是否以 s 结尾</td><td><code>&quot;java&quot;.endsWith(&quot;va&quot;)</code></td><td><code>true</code></td></tr><tr><td><code>indexOf(String s)</code></td><td>第一次出现位置</td><td><code>&quot;hello&quot;.indexOf(&quot;l&quot;)</code></td><td><code>2</code></td></tr><tr><td><code>lastIndexOf(String s)</code></td><td>最后一次出现位置</td><td><code>&quot;hello&quot;.lastIndexOf(&quot;l&quot;)</code></td><td><code>3</code></td></tr><tr><td><code>substring(int begin)</code></td><td>从索引开始截取</td><td><code>&quot;hello&quot;.substring(2)</code></td><td><code>&quot;llo&quot;</code></td></tr><tr><td><code>substring(int begin, int end)</code></td><td>截取区间 [begin, end)</td><td><code>&quot;hello&quot;.substring(1, 4)</code></td><td><code>&quot;ell&quot;</code></td></tr><tr><td><code>trim()</code></td><td>去除首尾空格</td><td><code>&quot;  hi  &quot;.trim()</code></td><td><code>&quot;hi&quot;</code></td></tr><tr><td><code>strip()</code></td><td>去除首尾 Unicode 空白（Java 11+）</td><td><code>&quot;　hi　&quot;.strip()</code></td><td><code>&quot;hi&quot;</code></td></tr><tr><td><code>replace(old, new)</code></td><td>替换所有子串</td><td><code>&quot;a-b&quot;.replace(&quot;-&quot;, &quot;:&quot;)</code></td><td><code>&quot;a:b&quot;</code></td></tr><tr><td><code>replaceFirst(regex, new)</code></td><td>替换第一个匹配项</td><td><code>&quot;abc123&quot;.replaceFirst(&quot;\\\\d&quot;, &quot;X&quot;)</code></td><td><code>&quot;abcX23&quot;</code></td></tr><tr><td><code>replaceAll(regex, new)</code></td><td>替换所有匹配项</td><td><code>&quot;abc123&quot;.replaceAll(&quot;\\\\d&quot;, &quot;&quot;)</code></td><td><code>&quot;abc&quot;</code></td></tr><tr><td><code>toUpperCase()</code></td><td>转大写</td><td><code>&quot;java&quot;.toUpperCase()</code></td><td><code>&quot;JAVA&quot;</code></td></tr><tr><td><code>toLowerCase()</code></td><td>转小写</td><td><code>&quot;JAVA&quot;.toLowerCase()</code></td><td><code>&quot;java&quot;</code></td></tr><tr><td><code>split(String regex)</code></td><td>按正则分割成数组</td><td><code>&quot;a,b,c&quot;.split(&quot;,&quot;)</code></td><td><code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></td></tr><tr><td><code>join(delimiter, ...)</code></td><td>静态方法，连接字符串</td><td><code>String.join(&quot;-&quot;, &quot;a&quot;, &quot;b&quot;)</code></td><td><code>&quot;a-b&quot;</code></td></tr><tr><td><code>toCharArray()</code></td><td>转为字符数组</td><td><code>&quot;abc&quot;.toCharArray()</code></td><td><code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code></td></tr><tr><td><code>valueOf(Object o)</code></td><td>任意对象转字符串</td><td><code>String.valueOf(123)</code></td><td><code>&quot;123&quot;</code></td></tr><tr><td><code>matches(regex)</code></td><td>是否整体匹配正则</td><td><code>&quot;123&quot;.matches(&quot;\\\\d+&quot;)</code></td><td><code>true</code></td></tr><tr><td><code>repeat(int n)</code></td><td>重复字符串 n 次（Java 11+）</td><td><code>&quot;a&quot;.repeat(3)</code></td><td><code>&quot;aaa&quot;</code></td></tr><tr><td><code>stripLeading()</code></td><td>去除前导空白（Java 11+）</td><td><code>&quot;  hi&quot;.stripLeading()</code></td><td><code>&quot;hi&quot;</code></td></tr><tr><td><code>stripTrailing()</code></td><td>去除后导空白（Java 11+）</td><td><code>&quot;hi  &quot;.stripTrailing()</code></td><td><code>&quot;hi&quot;</code></td></tr><tr><td><code>lines()</code></td><td>拆分为行的 Stream（Java 11+）</td><td><code>&quot;a\\nb\\nc&quot;.lines()</code></td><td><code>Stream&lt;String&gt;</code></td></tr></tbody></table><h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><p>用于接收 用户输入</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>next()</code></td><td>读取一个单词（遇到空格&#x2F;换行停止）</td></tr><tr><td><code>nextLine()</code></td><td>读取一整行（直到回车）</td></tr><tr><td><code>nextInt()</code>&#x2F;<code>nextDouble()</code>&#x2F;<code>nextBoolean()</code></td><td>读取整数&#x2F;浮点数&#x2F;布尔值</td></tr><tr><td><code>hasNextInt()</code></td><td>检查下一个是否是整数</td></tr><tr><td><code>close()</code></td><td>关闭输入流（最佳实践）</td></tr></tbody></table><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射是一种可以帮我们获取到对象实际实现类的方法</p><p>当我们进行了向上转型之后，在引用声明侧。我们只能使用引用调用基类的属性和方法。而当我们希望执行 其实际具有的方法时 就无法查看到其方法，所以可以通过反射来查询其本身所具备的方法和属性，再通过向下转型调用对应的方法</p><p>可以通过</p><p>type.getclass() 获取到类信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Anmial</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal is eating&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Anmial</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        System.out.println(Cat.class);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a.getClass();<br>        System.out.println(c.getName());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Anmial</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat is eating&quot;</span>);<br>        System.out.println(Cat.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建的 实例a通过getClass() 获取到的类信息为 Cat</p><p>也可以通过 类字面量查询类的类名 比如 Cat.class 输出 class Cat</p><p>可以通过泛型 来限定 class引用接收的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericClassReferences</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">intClass</span> <span class="hljs-operator">=</span> <span class="hljs-type">int</span>.class;<br>        intClass = <span class="hljs-type">double</span>.class;<br>        Class&lt;Integer&gt; genericIntClass = <span class="hljs-type">int</span>.class;<br>        genericIntClass = Integer.class;<br>        <span class="hljs-comment">// genericIntClass = double.class; //不可用</span><br>        System.out.println(intClass);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对反射的引用声明要求其是某个类的基类，所引用的对象仍然是具体的某个子类。</p><p>因为对于编译器来说，它只记录了已声明对象的类型信息，当你获取它的基类时，并不清楚基类的内容，而清楚所获得的类范围是大于子类的，所以需要使用&lt;? super FancyToy&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericToyTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class&lt;FancyToy&gt; ftc = FancyToy.class;                      <span class="hljs-comment">// 获取类的类对象</span><br>        <span class="hljs-type">FancyToy</span> <span class="hljs-variable">fancyToy</span> <span class="hljs-operator">=</span> ftc.getConstructor().newInstance();    <span class="hljs-comment">// 创建实例</span><br>        Class &lt;? <span class="hljs-built_in">super</span>  FancyToy&gt; up = ftc.getSuperclass();        <span class="hljs-comment">// 获取类对象的基类</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> up.getConstructor().newInstance();            <span class="hljs-comment">// 创建实例</span><br>      <br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ftc.getMethod(<span class="hljs-string">&quot;f&quot;</span>);     <span class="hljs-comment">// 查询子类中的方法 f</span><br>        method.invoke(fancyToy);                <span class="hljs-comment">// 执行 输出fancy</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> up.getMethod(<span class="hljs-string">&quot;f&quot;</span>);     <span class="hljs-comment">// 查询基类中的方法  f</span><br>        method1.invoke(obj);                    <span class="hljs-comment">// 执行 输出 f</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> up.getMethod(<span class="hljs-string">&quot;f&quot;</span>);     <span class="hljs-comment">// 查询基类中的方法  f</span><br>        method1.invoke(fancyToy);               <span class="hljs-comment">// 执行 输出fancy</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Toy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Toy</span><span class="hljs-params">()</span>&#123;    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;f&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FancyToy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Toy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FancyToy</span><span class="hljs-params">()</span>&#123; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;fancy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么使用基类中的方法调用子类对象 仍然会执行子类中的函数？</p><p>因为 在类加载过程中，实例方法被维护在vtable中，对于具体的方法实现是动态绑定的。</p><p>而在反射中使用getMethod 接收到的也是一个记录有函数偏移信息的结构体。</p><p>当开始执行时，会在子类对象中根据这个偏移查询函数进行执行。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">InvocationHandlerhanlder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>(proxy,method,args)&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable)&#123;<br><span class="hljs-keyword">return</span> method.invoke(target,args);<br>&#125;;<br><br>&#125;<br><br><span class="hljs-comment">// 通过匿名类重写了InvocationHandler 接口。</span><br><br><span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(target.getclass().getClassLoader(),target.getclass().getInterfaces(),handler);<br><span class="hljs-comment">// 将被代理类的加载器信息和接口信息传入。</span><br><span class="hljs-comment">// 后续通过proxy 代理执行原类型的方法</span><br><br></code></pre></td></tr></table></figure><p>类实现 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    Object proxied;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicProxy</span><span class="hljs-params">(Object proxied)</span> &#123;<br>        <span class="hljs-built_in">this</span>.proxied = proxied;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;**** proxy: &quot;</span> + proxy.getClass() + <span class="hljs-string">&quot;, method: &quot;</span> + method + <span class="hljs-string">&quot;, args: &quot;</span> + args);<br>        <span class="hljs-keyword">if</span>(args != <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">for</span>(Object arg : args) <br>                System.out.println(<span class="hljs-string">&quot;&quot;</span>+ arg);<br>        <span class="hljs-keyword">return</span> method.invoke(proxied, args);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleDynamicProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">(Interface iface)</span> &#123;<br>        iface.doSomething();<br>        iface.somethingElse(<span class="hljs-string">&quot;bonobo&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RealObject</span> <span class="hljs-variable">real</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealObject</span>();<br>        consumer(real);<br>        <span class="hljs-type">Interface</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Interface) Proxy.newProxyInstance(<br>            Interface.class.getClassLoader(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Interface.class&#125;,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicProxy</span>(real));<br>        consumer(proxy);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>反射提供了一种在对象之外构建业务流程的过程。</p><p>通过“反射”和“接口” 我们可以达成业务和数据的分离。在框架设计过程中只需要关注于具体的功能实现，而对象则更像是一种数据供应商。在每个阶段只需要关注具体需要的字段和功能，而不在需要去关注对象。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型是一种用于声明通用类&#x2F;通用函数的手段，当希望向类中（通常是容器）中添加不定类型的对象时，可以先通过泛型进行类设计，再后续的对象创建过程中再通过声明传入的类型进行使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedStack</span>&lt;E&gt;&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt;&#123;<br>        E item;<br>        Node&lt;E&gt; next;<br>        Node()&#123;item=<span class="hljs-literal">null</span>;next=<span class="hljs-literal">null</span>;&#125;<br>        Node(E item , Node&lt;E&gt; next)&#123;<br>            <span class="hljs-built_in">this</span>.item=item;<br>            <span class="hljs-built_in">this</span>.next=next;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-title function_">end</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> item==<span class="hljs-literal">null</span> &amp;&amp; next==<span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; top = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E item)</span>&#123;<br>        top = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(item,top);<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> top.item;<br>        <span class="hljs-keyword">if</span>(!top.end())<br>            top = top.next;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>泛型本质上是对编译器类型检查能力的一种扩展。通过在代码中引入类型参数，开发者可以为类和方法引入灵活的类型约束，使得在实例化时由具体类型替代这些通用类型，从而实现编译期的类型安全检查。这为容器类等通用结构提供了一种统一而安全的类型解决方案。</p><p>需要强调的是，Java 泛型的实现机制基于 <strong>类型擦除</strong> ，即在编译阶段，所有泛型类型参数会被替换为其限定的上界类型（默认为 <code>Object</code>），在生成的字节码中不再保留泛型类型信息。因此，泛型是一种 <strong>编译期语法机制</strong> ，并不属于 JVM 的运行时功能扩展，JVM 在加载和执行阶段对泛型完全无感。</p><p>泛型所带来的最大价值之一，是提升了类与方法的复用性。通过引入类型参数，开发者可以在不牺牲类型安全的前提下复用逻辑代码。与此同时，JVM 通过放弃对泛型参数的运行时类型保留，避免了类型膨胀带来的性能与兼容性问题，从而在设计上取得了 <strong>类型安全性与运行效率之间的平衡</strong> 。</p><p>它会在编译阶段 对泛型内部的声明进行擦除，但是如果从内部元素获取类信息仍然可以正常获取 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Frob</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fnorkle</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Quark</span>&lt;Q&gt;&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Particle</span>&lt;POSITION,MOMENTUM&gt;&#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LostInfomation</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Frob&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frob</span>());<br>        Map&lt;Frob,Fnorkle&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Quark&lt;Fnorkle&gt; quark = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Quark</span>&lt;Fnorkle&gt;();<br>        Particle&lt;Long,Double&gt; p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Particle</span>&lt;&gt;();<br>        System.out.println(list.get(<span class="hljs-number">0</span>).getClass());<br>        System.out.println(Arrays.toString(quark.getClass().getTypeParameters()));<br>        System.out.println(Arrays.toString(p.getClass().getTypeParameters()));<br>        System.out.println(Arrays.toString(list.getClass().getTypeParameters()));<br>        System.out.println(Arrays.toString(map.getClass().getTypeParameters()));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Frob</span>  <span class="hljs-comment">// 仍然可以获取类中的元素信息</span><br>[Q]<br>[POSITION, MOMENTUM]<br>[E]<br>[K, V]<br></code></pre></td></tr></table></figure><p>可以为泛型设置边界</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hasf</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="再谈对象"><a href="#再谈对象" class="headerlink" title="再谈对象"></a>再谈对象</h1><p>在我们最初对java的内存模型讨论中，已经知道java中所有进行的声明本质上都是对堆上创建的对象的应用。这种引用可以理解为是一种可以进行安全访问的指针。</p><p>当使用多个声明指向同一个对象时，多个声明都是对同一个对象的引用别名，这意味着当通过某个别名获取目标对象并进行修改时，其他的别名对对象的属性读取也会发生修改。这是因为任何一个引用进行的修改都是对引用对象本体进行的修改</p><h2 id="引用与值"><a href="#引用与值" class="headerlink" title="引用与值"></a>引用与值</h2><p>在讨论“引用传递”和“值传递”时，本质上需要回答一个核心问题：<strong>函数调用时，到底传入了什么？</strong></p><p>回到 C 语言的设计，所有变量在传入函数时，都会在新的栈帧中创建一个局部副本。</p><ul><li>如果传入的是普通值（如 <code>int</code>），则创建的是值的副本；</li><li>如果传入的是指针，则创建的是指针值（地址）的副本。</li></ul><p>从严格意义上讲， <strong>C语言中所有的传递都是值传递</strong> ；只是当传递的是指针时，可以通过指针副本间接修改原始内存，从而表现出“引用效果”。</p><p>在更现代的语言（如 Java 和 Python）中，所有对象在传递时，传入的是 <strong>对象引用的副本</strong> 。变量本身持有的是一个指向对象的引用，而不是对象本体。</p><p>因此：</p><ul><li>如果在函数中修改引用指向的对象内容，外部对象也会被改变；</li><li>如果在函数中重新赋值给引用（让引用指向新的对象），则不会影响外部原引用。</li></ul><p>来看下面两个例子：</p><ol><li><code>test_plus(a,b)</code><br>传入的是整数 <code>a</code>、<code>b</code> 的值副本。函数内部修改 <code>a</code>，但不会影响外部 <code>a</code>，因为它们是不同的局部变量。</li><li><code>test_plus1(n)</code><br>传入的是对象 <code>n</code> 的引用副本。函数内部通过 <code>n</code> 访问并修改了 <code>n.a</code>。由于副本和原引用指向同一块对象，因此外部的 <code>n.a</code> 也发生了变化。</li></ol><p>因此，在引用与实际对象分离的语言中，我们应更多关注 <strong>对引用指向对象的操作</strong> ，而不是单纯地纠结于传递机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span> ;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>  ;<br>        test_plus(a,b);<br>        <span class="hljs-type">Number</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">8</span>,<span class="hljs-number">10</span>);<br>        System.out.println(a);<br>        test_plus1(n);<br>        System.out.println(n.a);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">test_plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        a = a+b;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">test_plus1</span><span class="hljs-params">(Number n)</span>&#123;<br>        n.a = n.a+n.b;<br>        <span class="hljs-keyword">return</span> n.a;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span>&#123;<br>    <span class="hljs-type">int</span> a ;<br>    <span class="hljs-type">int</span> b ;<br>    Number(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)&#123;<br>        <span class="hljs-built_in">this</span>.a = a;<br>        <span class="hljs-built_in">this</span>.b = b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="克隆对象"><a href="#克隆对象" class="headerlink" title="克隆对象"></a>克隆对象</h2><p>我们知道了所有的函数本质的上都是在传递引用的“值” 那么在某些对象不想被修改时，就需要对对象进行复制：在堆上重新创建一个相同的对象并将引用指向它。</p><p>Java中提供了 clone方法来创建对象，但是clone 只会对目标对象进行浅层克隆。如果对象中存在对其他对象的引用仍然指向得是同一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Duplo</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n ;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Duplo</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<span class="hljs-built_in">this</span>.n = n;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Duplo <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (Duplo) <span class="hljs-built_in">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> n; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> n )</span>&#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span>&#123; <span class="hljs-built_in">this</span>.n++;&#125;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Integer.toString(n);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalCopy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Duplo <span class="hljs-title function_">g</span><span class="hljs-params">(Duplo v)</span>&#123;<br>        v.increment();<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Duplo <span class="hljs-title function_">f</span><span class="hljs-params">(Duplo v)</span>&#123;<br>        v = v.clone();<br>        v.increment();<br>        <span class="hljs-keyword">return</span>  v;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Duplo</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Duplo</span>(<span class="hljs-number">11</span>);<br>        <span class="hljs-type">Duplo</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> g(a);<br>        System.out.println(<span class="hljs-string">&quot;a == b:&quot;</span> + (a==b)+<span class="hljs-string">&quot;\\na=&quot;</span> +a +<span class="hljs-string">&quot;\\nb=&quot;</span> +b+<span class="hljs-string">&quot;\\n&quot;</span>);<br>        <span class="hljs-type">Duplo</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Duplo</span>(<span class="hljs-number">47</span>);<br>        <span class="hljs-type">Duplo</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> f(c);<br>        System.out.println(<span class="hljs-string">&quot;c == d:&quot;</span> + (c==d)+<span class="hljs-string">&quot;\\nc=&quot;</span> +c +<span class="hljs-string">&quot;\\nd=&quot;</span> +d+<span class="hljs-string">&quot;\\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test&#123;&#125;<br><br><span class="hljs-comment">// @Target指定注解应用的位置</span><br><span class="hljs-comment">// @Retention 指定注解可用的阶段  源代码，类文件，运行时</span><br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 III 集合</title>
    <link href="/2025/04/22/Java%E7%BC%96%E7%A8%8B-III-%E9%9B%86%E5%90%88/"/>
    <url>/2025/04/22/Java%E7%BC%96%E7%A8%8B-III-%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>集合是java中用来持有对象的一种”容器“。它具体表现为实现了两个基本接口</p><p><img src="blob:https://111666.best/d4ac7bc3-8f43-4d93-897e-d2595072cb67" alt="image"></p><h2 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h2><p>一个由单独元素组成的序列，而这些元素需要符合一条或多条规则</p><p>List : 必须按照元素的插入顺序来进行保存</p><p>Set : 中不能存在重复元素</p><p>Queue : 按照排队顺序输出元素</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>一组键值对象，通过键来查找值。map通过一个对象来查找另一个对象</p><h2 id="向集合中添加元素"><a href="#向集合中添加元素" class="headerlink" title="向集合中添加元素"></a>向集合中添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddingGroups</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Collection&lt;Integer&gt; collection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>));<br>        Integer[] moreInts = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>        collection.addAll(Arrays.asList(moreInts));<br>        <span class="hljs-keyword">for</span>(Integer i : collection)&#123;<br>            System.out.println(i);<br>        &#125;<br>        <span class="hljs-comment">// Ragged array</span><br>        List&lt;Integer&gt; list = Arrays.asList(moreInts);<br>        list.set(<span class="hljs-number">0</span>, <span class="hljs-number">99</span>);<br>        System.out.println(list.get(<span class="hljs-number">0</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="打印集合"><a href="#打印集合" class="headerlink" title="打印集合"></a>打印集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.* <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintingCollections</span>&#123;<br><span class="hljs-keyword">static</span> Collection <span class="hljs-title function_">fill</span><span class="hljs-params">(Collection&lt; String &gt; collection)</span>&#123;<br>collection.add(<span class="hljs-string">&quot;rat&quot;</span>);<br>collection.add(<span class="hljs-string">&quot;cat&quot;</span>);<br>collection.add(<span class="hljs-string">&quot;dog&quot;</span>);<br>collection.add(<span class="hljs-string">&quot;dog&quot;</span>);<br><span class="hljs-keyword">return</span> collection;<br>&#125;<br><br> <span class="hljs-keyword">static</span>  Map <span class="hljs-title function_">fill</span><span class="hljs-params">(Map&lt;String&gt; map)</span>&#123;<br> map.put(<span class="hljs-string">&quot;rat&quot;</span>,<span class="hljs-string">&quot;Fuzzy&quot;</span>);<br> map.put(<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;Rats&quot;</span>);<br> map.put(<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;Bosco&quot;</span>);<br> map.put(<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;Spot&quot;</span>);<br> <span class="hljs-keyword">return</span> map ;<br>  &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashset</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>()));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>list的创建和常用函数 （以arraylist为例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListExample</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 创建一个 List，使用 ArrayList 实现类</span><br>List&lt;String&gt; fruits = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 1. add() 添加元素</span><br>    fruits.add(<span class="hljs-string">&quot;Apple&quot;</span>);<br>    fruits.add(<span class="hljs-string">&quot;Banana&quot;</span>);<br>    fruits.add(<span class="hljs-string">&quot;Orange&quot;</span>);<br>    fruits.add(<span class="hljs-string">&quot;Grapes&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;原始列表：&quot;</span> + fruits); <span class="hljs-comment">// [Apple, Banana, Orange, Grapes]</span><br><br>    <span class="hljs-comment">// 2. get(int index) 获取指定位置的元素</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> fruits.get(<span class="hljs-number">0</span>);<br>    System.out.println(<span class="hljs-string">&quot;第一个水果是：&quot;</span> + first); <span class="hljs-comment">// Apple</span><br><br>    <span class="hljs-comment">// 3. set(int index, E element) 替换指定位置的元素</span><br>    fruits.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Blueberry&quot;</span>); <span class="hljs-comment">// 替换 Banana</span><br>    System.out.println(<span class="hljs-string">&quot;修改后的列表：&quot;</span> + fruits); <span class="hljs-comment">// [Apple, Blueberry, Orange, Grapes]</span><br><br>    <span class="hljs-comment">// 4. remove(int index) 根据下标删除</span><br>    fruits.remove(<span class="hljs-number">2</span>); <span class="hljs-comment">// 删除 Orange</span><br>    System.out.println(<span class="hljs-string">&quot;删除后的列表：&quot;</span> + fruits); <span class="hljs-comment">// [Apple, Blueberry, Grapes]</span><br><br>    <span class="hljs-comment">// 5. remove(Object o) 根据对象删除</span><br>    fruits.remove(<span class="hljs-string">&quot;Apple&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;删除 Apple 后：&quot;</span> + fruits); <span class="hljs-comment">// [Blueberry, Grapes]</span><br><br>    <span class="hljs-comment">// 6. contains(Object o) 判断是否包含某个元素</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">hasGrapes</span> <span class="hljs-operator">=</span> fruits.contains(<span class="hljs-string">&quot;Grapes&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;包含 Grapes？&quot;</span> + hasGrapes); <span class="hljs-comment">// true</span><br><br>    <span class="hljs-comment">// 7. size() 返回元素个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> fruits.size();<br>    System.out.println(<span class="hljs-string">&quot;列表长度：&quot;</span> + size); <span class="hljs-comment">// 2</span><br><br>    <span class="hljs-comment">// 8. isEmpty() 判断是否为空</span><br>    System.out.println(<span class="hljs-string">&quot;列表是否为空？&quot;</span> + fruits.isEmpty()); <span class="hljs-comment">// false</span><br><br>    <span class="hljs-comment">// 9. clear() 清空列表</span><br>    fruits.clear();<br>    System.out.println(<span class="hljs-string">&quot;清空后的列表：&quot;</span> + fruits); <span class="hljs-comment">// []</span><br><br>    <span class="hljs-comment">// 10. addAll(Collection&lt;? extends E&gt; c) 添加一整个集合</span><br>    List&lt;String&gt; newFruits = List.of(<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Peach&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>);<br>    fruits.addAll(newFruits);<br>    System.out.println(<span class="hljs-string">&quot;添加多个水果：&quot;</span> + fruits); <span class="hljs-comment">// [Mango, Peach, Cherry]</span><br><br>    <span class="hljs-comment">// 11. indexOf(Object o) 获取元素第一次出现的位置</span><br>    System.out.println(<span class="hljs-string">&quot;Peach 的位置：&quot;</span> + fruits.indexOf(<span class="hljs-string">&quot;Peach&quot;</span>)); <span class="hljs-comment">// 1</span><br><br>    <span class="hljs-comment">// 12. for-each 遍历</span><br>    <span class="hljs-keyword">for</span> (String fruit : fruits) &#123;<br>        System.out.println(<span class="hljs-string">&quot;水果：&quot;</span> + fruit);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>set 中不允许出现重复的对象值，</p><p>常用方法示例（以hashset为例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个 HashSet（最常用的 Set 实现）</span><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 1. add(E e) 添加元素（不会添加重复元素）</span><br>        set.add(<span class="hljs-string">&quot;Apple&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;Banana&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;Orange&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;Apple&quot;</span>); <span class="hljs-comment">// 重复添加无效</span><br><br>        System.out.println(<span class="hljs-string">&quot;集合内容：&quot;</span> + set); <span class="hljs-comment">// [Banana, Apple, Orange]（无序且不重复）</span><br><br>        <span class="hljs-comment">// 2. contains(Object o) 判断是否包含某个元素</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasApple</span> <span class="hljs-operator">=</span> set.contains(<span class="hljs-string">&quot;Apple&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;包含 Apple？&quot;</span> + hasApple); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 3. remove(Object o) 删除元素</span><br>        set.remove(<span class="hljs-string">&quot;Orange&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除 Orange 后：&quot;</span> + set); <span class="hljs-comment">// [Banana, Apple]</span><br><br>        <span class="hljs-comment">// 4. size() 获取集合中元素个数</span><br>        System.out.println(<span class="hljs-string">&quot;集合大小：&quot;</span> + set.size()); <span class="hljs-comment">// 2</span><br><br>        <span class="hljs-comment">// 5. isEmpty() 判断集合是否为空</span><br>        System.out.println(<span class="hljs-string">&quot;集合是否为空？&quot;</span> + set.isEmpty()); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 6. clear() 清空集合</span><br>        set.clear();<br>        System.out.println(<span class="hljs-string">&quot;清空后：&quot;</span> + set); <span class="hljs-comment">// []</span><br><br>        <span class="hljs-comment">// 7. addAll(Collection&lt;? extends E&gt; c) 添加一整个集合</span><br>        Set&lt;String&gt; newSet = Set.of(<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Peach&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>);<br>        set.addAll(newSet);<br>        System.out.println(<span class="hljs-string">&quot;添加多个元素：&quot;</span> + set); <span class="hljs-comment">// [Mango, Peach, Cherry]</span><br><br>        <span class="hljs-comment">// 8. 遍历 Set（使用增强 for 循环）</span><br>        <span class="hljs-keyword">for</span> (String fruit : set) &#123;<br>            System.out.println(<span class="hljs-string">&quot;遍历元素：&quot;</span> + fruit);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>常用的map 方法（以hashmap为例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个 HashMap（最常用的 Map 实现）</span><br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 1. put(K key, V value) 添加键值对</span><br>        map.put(<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-number">3</span>);<br>        map.put(<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-number">5</span>);<br>        map.put(<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 重复 key，会覆盖旧值</span><br>        System.out.println(<span class="hljs-string">&quot;原始 Map：&quot;</span> + map); <span class="hljs-comment">// &#123;Banana=2, Apple=4, Orange=5&#125;</span><br><br>        <span class="hljs-comment">// 2. get(Object key) 根据 key 获取 value</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">appleCount</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;Apple&quot;</span>); <br>        System.out.println(<span class="hljs-string">&quot;Apple 数量：&quot;</span> + appleCount); <span class="hljs-comment">// 4</span><br><br>        <span class="hljs-comment">// 3. containsKey(Object key) 是否包含某个 key</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasBanana</span> <span class="hljs-operator">=</span> map.containsKey(<span class="hljs-string">&quot;Banana&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;包含 Banana？&quot;</span> + hasBanana); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 4. containsValue(Object value) 是否包含某个 value</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasValue5</span> <span class="hljs-operator">=</span> map.containsValue(<span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">&quot;包含值 5？&quot;</span> + hasValue5); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 5. remove(Object key) 移除指定 key 对应的映射</span><br>        map.remove(<span class="hljs-string">&quot;Banana&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;移除 Banana 后：&quot;</span> + map); <span class="hljs-comment">// &#123;Apple=4, Orange=5&#125;</span><br><br>        <span class="hljs-comment">// 6. size() 返回映射关系数量</span><br>        System.out.println(<span class="hljs-string">&quot;Map 大小：&quot;</span> + map.size()); <span class="hljs-comment">// 2</span><br><br>        <span class="hljs-comment">// 7. isEmpty() 是否为空</span><br>        System.out.println(<span class="hljs-string">&quot;Map 是否为空？&quot;</span> + map.isEmpty()); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 8. keySet() 获取所有 key 组成的 Set</span><br>        System.out.println(<span class="hljs-string">&quot;所有 key：&quot;</span> + map.keySet()); <span class="hljs-comment">// [Apple, Orange]</span><br><br>        <span class="hljs-comment">// 9. values() 获取所有 value 组成的 Collection</span><br>        System.out.println(<span class="hljs-string">&quot;所有 value：&quot;</span> + map.values()); <span class="hljs-comment">// [4,</span><br><br></code></pre></td></tr></table></figure><h2 id="Collection类的作用"><a href="#Collection类的作用" class="headerlink" title="Collection类的作用"></a>Collection类的作用</h2><p>在 C&#x2F;C++ 语言中，程序员常常需要手动管理内存，并通过指针操作实现数据结构（如数组、链表、哈希表等）的动态存储与访问。<strong>Java 中的 Collection 框架正是对这些底层容器机制的抽象与封装</strong>，提供了更安全、可扩展、面向对象的容器解决方案。</p><h3 id="Collection-的本质与作用"><a href="#Collection-的本质与作用" class="headerlink" title="Collection 的本质与作用"></a>Collection 的本质与作用</h3><p>在面向对象编程中，虽然一切皆对象，但对象之间的组织、管理与批量操作仍需借助容器结构。Java 使用 <code>Collection</code> 接口抽象了这类 <strong>“容器型对象”</strong> 的基本行为规范，定义了数据的<strong>添加、删除、遍历、查询</strong>等操作方式，类似于标准容器库（STL）在 C++ 中的角色。</p><h3 id="底层结构与三大经典实现"><a href="#底层结构与三大经典实现" class="headerlink" title="底层结构与三大经典实现"></a>底层结构与三大经典实现</h3><p>Java 中常见的容器实现，底层源于三种经典数据结构，每种都针对特定的操作场景做出了效率取舍：</p><table><thead><tr><th>实现方式</th><th>底层结构</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td><code>Array</code></td><td>数组</td><td>随机访问快（O(1)）</td><td>插入&#x2F;删除效率低，扩容成本高</td></tr><tr><td><code>Linked</code></td><td>链表</td><td>插入&#x2F;删除快（O(1)）</td><td>查询慢（O(n)）</td></tr><tr><td><code>Hash</code></td><td>哈希表</td><td>快速定位（O(1) 近似）</td><td>不支持顺序，可能存在哈希冲突</td></tr></tbody></table><ul><li><strong>数组（Array）</strong>：通过“地址 + 偏移”的方式实现快速定位，适用于频繁查询但不常变动的场景。</li><li><strong>链表（Linked List）</strong>：适合频繁插入&#x2F;删除，但不适用于大规模随机访问。</li><li><strong>哈希表（Hash Table）</strong>：通过哈希函数定位存储位置，实现高效的键值映射查询。</li></ul><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>一种函数式的执行方式，在java中 因为java定义的接口是要求执行一个方法，所以可以通过这种方式，直接定义符合该接口目的的方法作为一个待执行的“类”交给应用去调用执行。本质是<strong>编译器帮你自动创建了一个实现了某个函数式接口的匿名对象，并将其赋值给一个接口类型的引用变量</strong>，你再通过这个引用去调用它的方法</p><p>使用方法 ： 定义一个只有一个函数签名的接口，在调用时直接声明基于该接口的引用 然后</p><p>() → 重写接口定义的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaFeastures</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">sayHi</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;hi&quot;</span>);<br>        hi.hi();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">sayHi</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的 匿名类实现 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaFeastures</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">sayHi</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sayHi</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hi&quot;</span>);<br>    &#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">sayHi</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 II 面向对象</title>
    <link href="/2025/04/22/Java%E7%BC%96%E7%A8%8B-II-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2025/04/22/Java%E7%BC%96%E7%A8%8B-II-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="初始化和清理"><a href="#初始化和清理" class="headerlink" title="初始化和清理"></a>初始化和清理</h1><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>构造器是在创建对象时，将类的成员属性进行初始化过程的一种函数</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rock</span> &#123;<br>Rock()&#123;<br>System.out.print(<span class="hljs-string">&quot;Rock&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当需要进行实例化创建时，类会根据传入的参数列表选择构造器进行对象的初始化。</p><p>这个叫做 构造器重载。 通过不同的函数列表来决定 调用哪个构造器。</p><p>当未定义构造器时，实际上是执行了一个无参的构造器。</p><p><strong>构造方法并不负责“创建对象”本身，它负责的是“初始化已经分配好的对象”</strong></p><p>也就是说：”new” 才是真正负责对象创建和内存分配的关键，构造方法是“后处理器”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rock</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rock</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rock</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rock</span>(<span class="hljs-number">1.0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rock</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rock without parameter&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rock</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rock with int parameter&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rock</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rock with double parameter&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>在构造方法或者实例方法中，如果需要调用同一个类定义下的结构（属性&#x2F;方法）</p><p>可以使用this关键字进行调用，this作为创建后的实例对象的引用</p><h2 id="构造器中调用构造器"><a href="#构造器中调用构造器" class="headerlink" title="构造器中调用构造器"></a>构造器中调用构造器</h2><p>必须在构造器的第一行中调用另一个构造器</p><p>其实很类似于python中的默认参数的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Flower</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">petalCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;initial value&quot;</span>;<br>    Flower(<span class="hljs-type">int</span> petals) &#123;<br>        petalCount = petals;<br>        System.out.println(<span class="hljs-string">&quot;Constructor w/ int arg only, petalCount = &quot;</span> + petalCount);<br>    &#125;<br>    Flower(String ss)&#123;<br>        System.out.println(<span class="hljs-string">&quot;Constructor w/ String arg only, s = &quot;</span> + ss);<br>    &#125;<br>    Flower(String s, <span class="hljs-type">int</span> petals) &#123;<br>        <span class="hljs-built_in">this</span>(petals);<br>        <span class="hljs-built_in">this</span>.s = s;<br>        System.out.println(<span class="hljs-string">&quot;String &amp; int args&quot;</span>);<br>    &#125;<br>    Flower() &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;hi&quot;</span>, <span class="hljs-number">47</span>);<br>        System.out.println(<span class="hljs-string">&quot;default constructor&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printPetalCount</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;petalCount = &quot;</span> + petalCount + <span class="hljs-string">&quot; s = &quot;</span> + s);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Flower</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flower</span>();<br>        x.printPetalCount();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在Java中 </p><p>类成员变量，静态成员变量。都会在其具体的被执行过程中被JVM默认初始化</p><p>值类型 被初始化为0 ， 引用类型被初始化为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Flower</span> &#123;<br>    <span class="hljs-type">int</span> petalCount ;<br>    <span class="hljs-keyword">static</span> Piece p ;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Flower</span> <span class="hljs-variable">flower</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flower</span>();<br>        System.out.println(flower.petalCount);<br>        System.out.println(p);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Piece</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">90</span>  ;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>而对于局部变量 （即参与函数执行的变量）必须在java文件中就进行相应的变量定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Flower</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> i  ;<br>        System.out.println(i);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/* PS D:\Flask_Project&gt; java Flower.java</span><br><span class="hljs-comment"> *Flower.java:9: 错误: 可能尚未初始化变量i</span><br><span class="hljs-comment"> *       System.out.println(i);</span><br><span class="hljs-comment"> *                          ^</span><br><span class="hljs-comment"> * 1 个错误</span><br><span class="hljs-comment"> * 错误: 编译失败</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>因为在编译时 </p><p>对于类的行为 ：编译器确认类的结构，对类中的成员变量进行初始化</p><p>对于方法的行为 ： 先构建局部变量表，再对方法中定义的代码进行执行，强制局部变量必须手动初始化</p><h2 id="初始化与初始化顺序"><a href="#初始化与初始化顺序" class="headerlink" title="初始化与初始化顺序"></a>初始化与初始化顺序</h2><p>对于 变量 通过赋值操作符来进行变量的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitMethod</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span>&#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInstance</span>&#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者在外部进行声明，在构造方法或者初始化代码块中进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitMethod</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> value1 ;<br>    <span class="hljs-type">int</span> value2 ;<br>    <span class="hljs-keyword">static</span> &#123;<br>        value1 = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    &#123;<br>        value2 = <span class="hljs-number">2</span>; <br>    &#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span>&#123;<br>        System.out.println(value1);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InitMethod</span>().value2);<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitMethod</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> value1;<br><span class="hljs-type">int</span> value2;  <br>InitMethod()&#123;<br>value1 = <span class="hljs-number">1</span>;<br>value2 = <span class="hljs-number">2</span>; <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span>&#123;<br>&#125;<br><br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInstance</span>&#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>java中的 引用声明 虽然是自由的，但是必须要保证 声明发生在调用前</p><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><p>java中接受两种数组的声明 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a1;<br><span class="hljs-type">int</span> a1[];<br></code></pre></td></tr></table></figure><p>数组声明是一种引用类型，所以初始化会被初始化为null。并且a2&#x3D;a1 意味着a2和a1指向同一个对象</p><p>数组的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><span class="hljs-type">int</span>[] a2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h1><p>通过 type … object_name 来接收多个相同类型的对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">OptionalTrailingArguments</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> <span class="hljs-keyword">required</span>,String... trailing</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;required:&quot;</span>+<span class="hljs-keyword">required</span>+<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">for</span>(String s:trailing)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(s+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        f(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;one&quot;</span>);<br>        f(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-string">&quot;three&quot;</span>);<br>        f(<span class="hljs-number">0</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><p>定义了一个枚举。</p><p>枚举中的内容可以用于switch分支判断</p><p>.values() 遍历枚举类中的值</p><p>.ordinal() 返回值的顺序 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Select</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span>(Option asd : Option.values())&#123;<br>            <span class="hljs-keyword">switch</span> (asd)&#123;<br>                <span class="hljs-keyword">case</span> A:<br>                    System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> B:<br>                    System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> C:<br>                    System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> D:<br>                    System.out.println(<span class="hljs-string">&quot;D&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> E:<br>                    System.out.println(<span class="hljs-string">&quot;E&quot;</span>);<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(asd.ordinal());<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">enum</span>  <span class="hljs-title class_">Option</span>&#123;<br>    A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h1><p>在方法中可以使用”var”来进行自动的类型推断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Plumbus</span>&#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeInference</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hello1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        <span class="hljs-type">Plumbus</span> <span class="hljs-variable">plumbus</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plumbus</span>();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">plumbus1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plumbus</span>();<br><br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticMethod</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">plumbus1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plumbus</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>类中的字段类型必须在类加载时静态确定，以保证类的内存布局可被 JVM 构建。而 <code>var</code> 依赖编译器对赋值表达式进行类型推导，适用于方法体内的局部变量，不适合用于类字段这种结构性定义。</p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>java中的引用管理路径是通过包声明来实现。</p><p>通过 反转的URL 来定义某个文件的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span>  com.codfish.java.Localclass <br><span class="hljs-comment">// 意味着从java class path中查询到 com 文件夹下的</span><br>📁 [classpath]/<br>└── 📁 com/<br>    └── 📁 codfish/<br>        └── 📁 java/<br>            └── Localclass.java<br><span class="hljs-comment">//最终查询到Localclass.java这个文件</span><br><span class="hljs-comment">// 所以在环境变量中添加classpath 是用于查询 java工程的根路径</span><br></code></pre></td></tr></table></figure><h1 id="实现隐藏"><a href="#实现隐藏" class="headerlink" title="实现隐藏"></a>实现隐藏</h1><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><h3 id="public-声明本类-方法-是一个可以被任意调用的组件"><a href="#public-声明本类-方法-是一个可以被任意调用的组件" class="headerlink" title="public 声明本类&#x2F;方法 是一个可以被任意调用的组件"></a>public 声明本类&#x2F;方法 是一个可以被任意调用的组件</h3><h3 id="private-声明-方法-在本类之外是不可见的，不可以被调用"><a href="#private-声明-方法-在本类之外是不可见的，不可以被调用" class="headerlink" title="private 声明 方法 在本类之外是不可见的，不可以被调用"></a>private 声明 方法 在本类之外是不可见的，不可以被调用</h3><h3 id="protect-允许子类调用继承的父类中声明的protect方法"><a href="#protect-允许子类调用继承的父类中声明的protect方法" class="headerlink" title="protect 允许子类调用继承的父类中声明的protect方法"></a>protect 允许子类调用继承的父类中声明的protect方法</h3><h3 id="default（无声明）-类-方法-本文件中可以任意调用"><a href="#default（无声明）-类-方法-本文件中可以任意调用" class="headerlink" title="default（无声明） 类&#x2F;方法 本文件中可以任意调用"></a>default（无声明） 类&#x2F;方法 本文件中可以任意调用</h3><p>类只有两种访问权限（public和 default ）</p><p>通过访问控制，实现了一种功能和实现的解耦，调用者只需要关注声明为public的方法，因为他们只需要关注对象所提供的功能，而实现者更加关注于private方法 来更好的优化功能的实现。</p><h1 id="对象设计"><a href="#对象设计" class="headerlink" title="对象设计"></a>对象设计</h1><p>在面向对象编程中通常有这样几种 对象的关联关系</p><h3 id="组合（has-a）"><a href="#组合（has-a）" class="headerlink" title="组合（has a）"></a>组合（has a）</h3><p>多个对象作为另一个对象共同完成功能。通过组织这些对象的功能和执行流程来完成自身的功能</p><h3 id="继承-（is-a"><a href="#继承-（is-a" class="headerlink" title="继承 （is a)"></a>继承 （is a)</h3><p>一个对象是另一个对象的实现，具备原对象的全部功能和属性。只是会根据不同的因素具体实现不同</p><h3 id="委托-（delegates-to）"><a href="#委托-（delegates-to）" class="headerlink" title="委托 （delegates to）"></a>委托 （delegates to）</h3><p>一个对象作为中间代理人，将某个功能指定给另一个对象去完成。</p><h1 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h1><p>final关键字用于将 引用 和 目标进行绑定</p><p>final 修饰类 该类不能被继承</p><p>final 修饰方法 则 该方法不能被重写</p><p>final 修饰变量  只能在声明处或者构造器中初始化 基础变量的值不能被更改，引用类型的 final 变量不能再指向其他对象，但原对象的内部状态仍可变化。</p><p>final 让“名字与所指对象”之间的绑定<strong>在编译期或类加载期就确定下来</strong>，不能再动态更换，<strong>失去了 Java 中多态或延迟绑定的一部分可能性</strong>。</p><h1 id="对象创建过程中的加载"><a href="#对象创建过程中的加载" class="headerlink" title="对象创建过程中的加载"></a>对象创建过程中的加载</h1><p>当创建对象时</p><p>如果类未被加载到jvm中，则需要从类初始化开始</p><p>查询父类是否进行加载</p><p>执行父类静态代码块，静态变量（按序加载）<br>执行子类静态代码块，静态变量（按序加载）</p><p>执行父类代码块，构造方法（按序加载）</p><p>执行子类代码块，构造方法（按序加载）</p><p>返回指向新创建的引用。结束创建过程</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态提供了另一个维度的接口与实现分离</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>在java中 允许将一个对象声明为其父类。而当调用时调用的则是子类中实现的对应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Polymorphism</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>        animal.makeSound();<br><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        dog.makeSound();<br><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat.makeSound();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The animal makes a sound&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The dog barks&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The cat meows&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="构造过程中的函数调用"><a href="#构造过程中的函数调用" class="headerlink" title="构造过程中的函数调用"></a>构造过程中的函数调用</h2><p>在父类构造器中调用被子类重写的函数，依然调用的是子类重写的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyConstructors</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoundGlyph</span>(<span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Glyph</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Glyph.draw()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Glyph</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Glyph() before draw()&quot;</span>);<br>        draw();<br>        System.out.println(<span class="hljs-string">&quot;Glyph() after draw()&quot;</span>);<br><br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoundGlyph</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Glyph</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">radius</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    RoundGlyph(<span class="hljs-type">int</span> r) &#123;<br>        radius = r;<br>        System.out.println(<span class="hljs-string">&quot;RoundGlyph.RoundGlyph(), radius = &quot;</span> + radius);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RoundGlyph.draw(), radius = &quot;</span> + radius);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="抽象方法与抽象类"><a href="#抽象方法与抽象类" class="headerlink" title="抽象方法与抽象类"></a>抽象方法与抽象类</h2><p>一些类的设计是为了定义共同的标准和形式，其本身以及定义的方法并不是用来进行实例化或者方法调用的。这样的类被称为抽象类。</p><p>java中也提供了抽象方法的声明</p><p>存在抽象方法的类被称为抽象类</p><p>当有类想继承抽象类时，作为一个实现类必须重写抽象类中的抽象方法，作为抽象类则可以直接继承</p><h2 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h2><p>接口是面向设计的一种完全抽象，通过定义一系列的函数签名，使得符合该规则的类能够完成接口所描述的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AnInterface</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">firstMethod</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">secondMetho</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在后续的java版本中 又允许向接口中添加 默认方法。这样可以在不改变接口设计的同时，向接口中扩充方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">interfaceIneterfaceWithDefault&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">firstMethod</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">secondMethod</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">newMethod</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;new Method&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以向接口添加静态方法，意味着接口内可以包含供它使用的工具集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Operation</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runOps</span><span class="hljs-params">(Operation ... ops)</span>&#123;<br><span class="hljs-keyword">for</span>(Operatoin op : ops)<br>op.execute();<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String msg)</span>&#123;<br>System.out.println(msg)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><table><thead><tr><th>特性</th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td>组合</td><td>可以在新类中组合多个接口</td><td>只能继承一个抽象类</td></tr><tr><td>状态</td><td>不能包含字段</td><td>可以包含字段</td></tr><tr><td>默认方法与抽象方法</td><td>默认方法不需要在子类中实现</td><td>抽象方法必须在子类里实现</td></tr><tr><td>构造器</td><td>不能有构造器</td><td>可以有构造器</td></tr><tr><td>访问权限</td><td>隐式的public</td><td>可以为protoct</td></tr></tbody></table><h2 id="回到面向对象"><a href="#回到面向对象" class="headerlink" title="回到面向对象"></a>回到面向对象</h2><p>在应用开发中，从表面上看，<strong>继承&#x2F;多态、抽象类&#x2F;方法以及接口</strong>似乎都能实现类似的功能。这不禁让我们思考：为何 Java 语言还要提供这些彼此相近的机制？</p><p>此时，我们不妨回到“面向对象”的核心理念来思考这个问题。在前文的讨论中我们提到，对象设计的关键在于：<strong>对象的行为是服务于特定功能的</strong>。换言之，对象所拥有的方法和属性，其本质目的是为了在业务系统中承载功能逻辑与状态维护。</p><p>在实际的业务场景中，一个对象往往具备多重功能。在某些特定流程中，对象自身的整体结构并不是最关键的，<strong>而是其中某个特定的行为或能力构成了流程的核心。</strong>当我们只关心这个特定行为时，我们实际上是在“抽象地使用这个对象的某个切面”。此时，对象的这个方法就成为了我们所关注的抽象能力——<strong>只要实现了这个方法，流程就能正常运行。</strong></p><p>从这个角度出发，我们可以重新理解三种语言机制的区别：</p><ul><li><strong>继承与多态</strong>：通过继承机制，子类可以基于父类实现不同的行为，从而在不修改接口的前提下，通过多态支持多种功能实现。这强调的是<strong>“共性基础上的差异表达”</strong>。</li><li><strong>抽象类与抽象方法</strong>：定义了某类对象在行为和状态上应具备的“模板”，为子类提供统一的结构约束与默认实现，强调的是<strong>“部分实现 + 行为约束”</strong>的组合设计。</li><li><strong>接口（Interface）</strong>：接口更专注于定义<strong>一组与业务流程相关的能力</strong>，它关注的是“对象能做什么”，而非“对象是什么”。接口强调的是<strong>功能契约</strong>，便于实现解耦与组合。</li></ul><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h3 id="成员内部类："><a href="#成员内部类：" class="headerlink" title="成员内部类："></a>成员内部类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parcell</span>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Content</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Destination</span>&#123;                    <span class="hljs-comment">// 内部类定义</span><br>        <span class="hljs-keyword">private</span> String label;<br>        Destination(String whereTo)&#123;<br>            label = whereTo;<br>        &#125;<br>        String <span class="hljs-title function_">readLabel</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> label;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ship</span><span class="hljs-params">(String dest)</span>&#123;<br>        <span class="hljs-type">Content</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Content</span>();<br>        <span class="hljs-type">Destination</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Destination</span>(dest);<br>        System.out.println(d.readLabel());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Parcell</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parcell</span>();<br>        p.ship(<span class="hljs-string">&quot;Tasmania&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="将成员内部类的实例以函数调用返回。可以看到-内部类可以对类中的私有属性进行调用"><a href="#将成员内部类的实例以函数调用返回。可以看到-内部类可以对类中的私有属性进行调用" class="headerlink" title="将成员内部类的实例以函数调用返回。可以看到 内部类可以对类中的私有属性进行调用"></a>将成员内部类的实例以函数调用返回。可以看到 内部类可以对类中的私有属性进行调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sequence</span>&#123;<br>    <span class="hljs-keyword">private</span> Object[] items;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sequence</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span>&#123;<br>        items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[size];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object x)</span>&#123;<br>        <span class="hljs-keyword">if</span>(next &lt; items.length)&#123;<br>            items[next++] = x;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SequenceSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Selector</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">end</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> i == items.length;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">current</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> items[i];<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">if</span>(i &lt; items.length)&#123;<br>                i++;<br>            &#125;<br>        &#125;<br>        &#125;<br>    <span class="hljs-keyword">public</span> Selector <span class="hljs-title function_">selector</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequenceSelector</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Sequence</span> <span class="hljs-variable">sequence</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sequence</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            sequence.add(Integer.toString(i));<br>        &#125;<br>        <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> sequence.selector();<br>        <span class="hljs-keyword">while</span>(!selector.end())&#123;<br>            System.out.print(selector.current() + <span class="hljs-string">&quot; &quot;</span>);<br>            selector.next();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Selector</span>&#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">end</span><span class="hljs-params">()</span>;<br>    Object <span class="hljs-title function_">current</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="内部类可以通过-outter-this-获取到外部类的实例"><a href="#内部类可以通过-outter-this-获取到外部类的实例" class="headerlink" title="内部类可以通过 outter.this 获取到外部类的实例"></a>内部类可以通过 outter.this 获取到外部类的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DotThis</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123; System.out.println(<span class="hljs-string">&quot;DotThis.f()&quot;</span>)&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br><span class="hljs-keyword">public</span> DotThis <span class="hljs-title function_">outer</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> DotThis.<span class="hljs-built_in">this</span> ;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> Inner <span class="hljs-title function_">inner</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">DotThis</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DotThis</span>();<br>DotThis.<span class="hljs-type">Inner</span> <span class="hljs-variable">dti</span> <span class="hljs-operator">=</span> dt.inner();<br>dti.outer().f();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="而-外部类可以通过-outter的实例-new-创建内部类的实例"><a href="#而-外部类可以通过-outter的实例-new-创建内部类的实例" class="headerlink" title="而 外部类可以通过 outter的实例 new 创建内部类的实例"></a>而 外部类可以通过 outter的实例 new 创建内部类的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DotNew</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">DotNew</span> <span class="hljs-variable">dn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DotNew</span>();<br>DotNew.<span class="hljs-type">Inner</span> <span class="hljs-variable">dni</span> <span class="hljs-operator">=</span> dn.new.Inner();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>即通过外部类的.this 获取外部类的实例</p><p><a href="http://通过外部类实例的.new/">通过外部类实例的.new</a> 创建内部类的对象</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parcel5</span> &#123;<br><span class="hljs-keyword">public</span> Destination <span class="hljs-title function_">destination</span><span class="hljs-params">(String s )</span>&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PDestination</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Destination</span>&#123;<br><span class="hljs-keyword">private</span> String label;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">PDestination</span><span class="hljs-params">(String whereTo)</span>&#123;<br>label = whereTo;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">readLabel</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> label;&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PDestination</span>(s);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Parcel5</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parcel5</span>();<br><span class="hljs-type">Destination</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> p.destination(<span class="hljs-string">&quot;Tasmania&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类提供了 一种实现 即不用通过正式的类声明，而是直接通过实现接口方法的方式创建一个满足要求的对象来进行使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span>  <span class="hljs-title class_">Parcel7</span>&#123;<br><span class="hljs-keyword">public</span> Contents <span class="hljs-title function_">contents</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contents</span>()&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> i; &#125;<br>&#125;;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Parcel7</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parcel7</span>();<br><span class="hljs-type">Contents</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p.contents();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设计内部类的目的-："><a href="#设计内部类的目的-：" class="headerlink" title="设计内部类的目的 ："></a>设计内部类的目的 ：</h3><h3 id="1-逻辑关联和作用域管理"><a href="#1-逻辑关联和作用域管理" class="headerlink" title="1. 逻辑关联和作用域管理"></a>1. <strong>逻辑关联和作用域管理</strong></h3><ul><li>当一个类的定义仅对另一个类有意义时，就可以将它定义为内部类。</li><li>内部类的存在<strong>强化了“组合而非继承”的关系</strong>，让你表达“这个类只属于那个类”的语义。</li></ul><h3 id="2-访问外部类的私有成员"><a href="#2-访问外部类的私有成员" class="headerlink" title="2. 访问外部类的私有成员"></a>2. <strong>访问外部类的私有成员</strong></h3><ul><li>内部类可以<strong>无障碍访问外部类的所有成员</strong>（包括 <code>private</code> 字段和方法）。</li><li>这提供了一种灵活的方式来“增强”外部类功能，而<strong>不依赖继承</strong>。</li></ul><h3 id="3-封装和隐藏"><a href="#3-封装和隐藏" class="headerlink" title="3. 封装和隐藏"></a>3. <strong>封装和隐藏</strong></h3><ul><li>内部类本质上是<strong>外部类的一部分实现细节</strong>，可以不暴露给外部用户。</li></ul><h3 id="4-对事件处理-回调逻辑的支持"><a href="#4-对事件处理-回调逻辑的支持" class="headerlink" title="4. 对事件处理&#x2F;回调逻辑的支持"></a>4. <strong>对事件处理&#x2F;回调逻辑的支持</strong></h3><ul><li>在 GUI 编程中（如 Swing），匿名内部类、局部内部类常用于事件监听器，实现响应逻辑。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 I 基础</title>
    <link href="/2025/04/21/Java%E7%BC%96%E7%A8%8B-I-%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/04/21/Java%E7%BC%96%E7%A8%8B-I-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>———— 基于《On Java》  </p><h2 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a><strong>什么是对象？</strong></h2><p>在许多编程书籍和技术博客中，对象常被定义为“一个真实存在的实体”或“方法和属性的集合”。</p><p>然而，这些定义往往只停留在表层，并未真正解释“<strong>什么是对象</strong>”这一核心问题。比如，“实体”本身是什么意思？为什么属性和方法的组合可以称为一个‘对象’？带着这些问题，我们可以从设计层面重新思考对象的本质。</p><h3 id="设计层面：对象是面向目的的实体特征与行为的抽象。"><a href="#设计层面：对象是面向目的的实体特征与行为的抽象。" class="headerlink" title="设计层面：对象是面向目的的实体特征与行为的抽象。"></a><strong>设计层面：对象是面向目的的实体特征与行为的抽象。</strong></h3><h3 id="什么是实体？"><a href="#什么是实体？" class="headerlink" title="什么是实体？"></a><strong>什么是实体？</strong></h3><p>动物是不是一种实体？房屋是不是一种实体？房屋？比特币呢？笛卡尔的“我思故我在”呢？</p><p>实体并不一定是以“真实存在”作为必要条件的，实体的重要特征是“一种可描述的概念”。比如“独角兽”是一只长有犄角和翅膀的马，比如“西方的恶龙覆盖有厚厚的鳞片能够喷吐火焰”。这些概念的重点不是“真实存在”，而是“可描述”。推而广之，一些抽象概念也可以作为“实体”，比如 FIFO的队列，代理模式中的代理概念。</p><p>这样我们就可以得到实体的定义 “一种可描述的概念”（无论它是否真的存在）</p><h3 id="那么什么是对象？"><a href="#那么什么是对象？" class="headerlink" title="那么什么是对象？"></a><strong>那么什么是对象？</strong></h3><p>我们永远没办法将一个实体完整地用计算机语言去描述。但可以将特征和行为抽象出来，作为我们用计算机去模拟这个物体的方法。这暗含着对象设计是面向功能的，有取舍的。因为我们实际关注的不是实体到底是怎么样的，而是关注实体通过哪些特征和行为达成了我们想要的结果。当我们考虑一头牛的时候，在虚拟世界里，我们不会去考虑牛住在哪里，何时休息。考虑的是我们为了达成目的，需要”供应“什么，“产出”什么。所以我们在设计时真正构建的对象是以目的为核心，对实体特征和行为的抽象。目的是我们的最终结果，而实体的特征和行为是为了达成目的所必须的组件</p><h3 id="实现层面：对象是经过结构化组织的内存。"><a href="#实现层面：对象是经过结构化组织的内存。" class="headerlink" title="实现层面：对象是经过结构化组织的内存。"></a><strong>实现层面：对象是经过结构化组织的内存。</strong></h3><h3 id="内存与对象"><a href="#内存与对象" class="headerlink" title="内存与对象"></a><strong>内存与对象</strong></h3><p>程序员对内存和程序结构拥有近乎完全的控制权。他们可以自由地决定每一个内存地址的用途，这在空间受限的场景中显得尤为高效，可以最大限度地压榨出每一字节的潜力。但也导致了一些问题：</p><p>在功能设计的初期就需要周全的考虑对象（结构体）的设计，不然会加大后期的维护，重构，新增功能的复杂度。</p><p>编程人员对程序有绝对的权限，意味着相同的功能可能会设计不同的系统来处理相同的流程，如内存分配&#x2F;回收。消息处理。对于多人开发的大型系统会增加系统的复杂度。</p><p>在这一层面上，一些更现代的编程语言选择放弃了C语言的“自由“，现代系统的设计都是层次化的，当我进行上层数据的处理时，仍然要去关心最底层的内存是如何排布的显然是一个不够高效的做法。因此它们开始去预定义一些结构化的内存，从”内存交给你，你来从0开始完成系统“，到“由我提供一些基础组件，你在这个基础之上组织系统”。通过对内存块的结构化设计，将“设计-实现”的问题，变成了“组织-实现”。</p><p>另一方面因为所有基础模块是编程语言预先定义的，所以在后期使用时，作为内存-系统的中间层（如一些虚拟机程序），可以对系统中的内存使用进行更好的控制，这样既可以通过系统的管理，将已加载的功能模块灵活复用，也可以更好的提供系统级的监控管理，像垃圾回收，对象的动态加载创建等，对于更上层的编程人员来说，进行类设计，对象设计。反而是一些顺便带来的好处。</p><h3 id="那么什么是面向对象？"><a href="#那么什么是面向对象？" class="headerlink" title="那么什么是面向对象？"></a><strong>那么什么是面向对象？</strong></h3><p>当我们明白了对象是一种可描述的概念，并且对象设计的核心是面向功能的，以及为什么使用对象而不是直接使用内存来设计我们的系统。那么面向对象就是在设计系统时，首先完成对系统功能的抽象，将系统的实现变为多个核心对象之间的消息通信和方法调用。如：</p><p>对数据进行存储和维护而设计的类，如用户类，仓库类</p><p>对数据组织结构进行抽象的类，如数据包类，工厂类</p><p>以某种操作流程为核心建模的设计的类，队列、栈</p><p>通过这种方式，我们不仅构建了更具结构化的系统，同时也提升了系统的可读性、可维护性与可扩展性 —— 这正是面向对象设计的核心价值所在。</p><h2 id="一些扩展性设计内容"><a href="#一些扩展性设计内容" class="headerlink" title="一些扩展性设计内容"></a>一些扩展性设计内容</h2><h3 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h3><p>允许向对象发出请求，让它执行一些操作，对于你想要解决的问题中的任何元素，你都可以在程序中用对象来呈现</p><h3 id="一段程序实际上就是多个对象通过发送消息来通知彼此要干什么"><a href="#一段程序实际上就是多个对象通过发送消息来通知彼此要干什么" class="headerlink" title="一段程序实际上就是多个对象通过发送消息来通知彼此要干什么"></a>一段程序实际上就是多个对象通过发送消息来通知彼此要干什么</h3><p>通过将现有的几个对象打包在一起，你就创建了一种新的对象。</p><h3 id="每一个对象都有类型。"><a href="#每一个对象都有类型。" class="headerlink" title="每一个对象都有类型。"></a>每一个对象都有类型。</h3><p>每个对象都是通过类生成的实例，类 就等同于 类型，一个类最为显著的特征是 你可以发送什么消息给它</p><h3 id="同一个类型的对象可以接收相同的消息"><a href="#同一个类型的对象可以接收相同的消息" class="headerlink" title="同一个类型的对象可以接收相同的消息"></a>同一个类型的对象可以接收相同的消息</h3><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><h2 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ATypeName</span> &#123;<br><span class="hljs-comment">// 类具体实现</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类中允许定义两类元素-方法和属性"><a href="#类中允许定义两类元素-方法和属性" class="headerlink" title="类中允许定义两类元素: 方法和属性"></a>类中允许定义两类元素: 方法和属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataOnly</span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">double</span> d ;<br><span class="hljs-type">boolean</span> b ;<br>&#125;<br><br><span class="hljs-type">DataOnly</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOnly</span>();<br><span class="hljs-comment">/* DataOnly    类声明</span><br><span class="hljs-comment"> * data        变量名</span><br><span class="hljs-comment"> * new         关键字用于 申请内存，调用初始化方法，返回指向该对象的指针</span><br><span class="hljs-comment"> * DataOnly()  调用类创建实现的对象</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="通过”-”-访问对象的成员"><a href="#通过”-”-访问对象的成员" class="headerlink" title="通过”.” 访问对象的成员"></a>通过”.” 访问对象的成员</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">data.i = <span class="hljs-number">47</span>;<br>data.d = <span class="hljs-number">1.1</span>;<br>data.b = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>基本类型的初始化</p><p>java中会自动进行类中定义的变量的初始化</p><p>函数中的局部变量不会主动进行初始化，但是会被jvm检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span>           <span class="hljs-literal">false</span> <br><span class="hljs-type">char</span>              \u0000 <span class="hljs-literal">null</span><br><span class="hljs-title function_">byte</span>              <span class="hljs-params">(<span class="hljs-type">byte</span>)</span><span class="hljs-number">0</span><br><span class="hljs-type">short</span>             (<span class="hljs-type">short</span>)<span class="hljs-number">0</span><br><span class="hljs-type">int</span>               <span class="hljs-number">0</span><br><span class="hljs-type">long</span>              <span class="hljs-number">0L</span><br><span class="hljs-type">float</span>             <span class="hljs-number">0.0f</span><br><span class="hljs-type">double</span>            <span class="hljs-number">0.0d</span><br></code></pre></td></tr></table></figure><h1 id="方法，参数以及返回值"><a href="#方法，参数以及返回值" class="headerlink" title="方法，参数以及返回值"></a>方法，参数以及返回值</h1><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ReturnType <span class="hljs-title function_">methodName</span><span class="hljs-params">(<span class="hljs-comment">/* 参数列表 */</span>)</span>&#123;<br><span class="hljs-comment">// 方法体</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义一个带参的方法"><a href="#定义一个带参的方法" class="headerlink" title="定义一个带参的方法"></a>定义一个带参的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">storage</span> <span class="hljs-params">(Strings s)</span>&#123;<br><span class="hljs-keyword">return</span> s.length() * <span class="hljs-number">2</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h2><p>通过static关键字来对 类中的属性和方法进行管理，使它们从属于类，直接与类进行绑定。这样在使用时可以直接通过调用类来完成对这些属性和方法的设置与绑定。</p><p>这里可以结合我们的上一节进行思考，即通过static 关键字使得 对应的方法和属性存储在类结构中的静态字段，并且在类加载阶段就通过索引完成了与类的绑定。</p><p>当类中的静态属性或者方法被调用时，也会触发类的初始化</p><p>定义一个静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticTest</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">47</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Java程序的示例"><a href="#Java程序的示例" class="headerlink" title="Java程序的示例"></a>Java程序的示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//objects/HelloDate.java</span><br><span class="hljs-keyword">import</span> java.util.* ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloDate</span>&#123;<br><span class="hljs-keyword">public</span> staic <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.print(<span class="hljs-string">&quot;Hello, it&#x27;s: &quot;</span>)<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// import 向文件中导入需要的库</span><br><span class="hljs-comment">// public class HelloDate&#123;&#125;  </span><br><span class="hljs-comment">// 声明一个公有类，这意味着允许其他所有对象对这个类进行访问</span><br><span class="hljs-comment">// class 定义这是一个类 HelloDate 类名 后续是该类的代码块</span><br><span class="hljs-comment">// public static void main(String[] args)</span><br><span class="hljs-comment">// 定义了一个静态公有方法main，这意味着它是由从类中调用的。返回值是void</span><br><span class="hljs-comment">// 后续是参数列表，声明了接收一个字符数组 args 作为参数。后续是函数的函数体</span><br><span class="hljs-comment">// System.out.println() </span><br><span class="hljs-comment">// 调用了来自System.out库中的println() 方法，它接收一个字符信息并且在打印后换行</span><br><br></code></pre></td></tr></table></figure><p>java文件需要进行一个编译&#x2F;执行的过程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">javac HelloDate.java <span class="hljs-comment"># 将java文件编译为字节码文件HelloData.class</span><br>java HelloData       <span class="hljs-comment"># 执行编译后的文件</span><br><span class="hljs-comment"># 在较新版本的java 中可以直接使用java 执行java文件</span><br>java HelloData.java<br><br><span class="hljs-comment"># 两种情况均会输出 ：</span><br>Hello , it<span class="hljs-string">&#x27;s Sat Apr 19 16:53:22 CST 2025</span><br></code></pre></td></tr></table></figure><p>编程风格 </p><p>类名通常遵循大驼峰命名法</p><p>类似 ： AllTheColosOfTheRainbow  首字母大写</p><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="左值与右值"><a href="#左值与右值" class="headerlink" title="左值与右值"></a>左值与右值</h2><p>在使用操作符赋值时，需要确定 “&#x3D;” 两边的能力。</p><p>左值 ： 必须是一个独特的命名变量</p><p>右值 ： 可以是任何常量，变量或者可以产生值的表达式</p><p>左值具有特殊性，即可以通过左值确定的查询到右值的内容</p><p>而右值必须是一个可返回的值。（即存在的值）</p><h2 id="当左值指向一个对象"><a href="#当左值指向一个对象" class="headerlink" title="当左值指向一个对象"></a>当左值指向一个对象</h2><p>一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tank</span>&#123;<br><span class="hljs-type">int</span>  level ;<br>  <span class="hljs-comment">// static int level ;</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Assignment</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Tank</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tank</span>();<br><span class="hljs-comment">//Tank t2 = t1 ;</span><br><span class="hljs-type">Tank</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tank</span>();<br>t1.level = <span class="hljs-number">9</span> ;<br>t2.level = <span class="hljs-number">47</span> ;<br>System.out.println(<span class="hljs-string">&quot;1: t1.level &quot;</span>+t1.level+<span class="hljs-string">&quot;,t2.level: &quot;</span>+ t2.level);<br>t1.level = <span class="hljs-number">27</span>;<br>System.out.println(<span class="hljs-string">&quot;3: t1.level &quot;</span>+t1.level+<span class="hljs-string">&quot;,t2.level: &quot;</span>+ t2.level);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 情况1 level 没有被 static 修饰，那么它会作为一个实例变量被处理，</span><br><span class="hljs-comment">// 当Tank t1 和Tank t2 分布创建了对应的Tank() 对象时，t1.level 和t2.level是互相独立的</span><br><span class="hljs-comment">// 情况2 将level作为一个静态变量处理，那么它会随着类加载被初始化为0.</span><br><span class="hljs-comment">// 创建的t1,t2两个实例中查询到的都是同一个level变量，所以当t2修改level时，t1中也会产生响应的修改</span><br><span class="hljs-comment">// 情况3 创建了t1的对象，并创建t2指向t1。 这时t1和t2都是对new Tank()的引用</span><br><span class="hljs-comment">// 所以当t1修改了level的值时，过程是t1 查询到它引用的对象中level变量的值，并修改</span><br><span class="hljs-comment">// 这时的t2也是指向该对象的，所以当t1修改后，t2去查询变量的值时已经变为了修改后的值。</span><br></code></pre></td></tr></table></figure><p>方法调用中的别面馆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Letter</span> &#123;<br><span class="hljs-type">char</span> c;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PassObject</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(Letter y)</span>&#123;<br>y.c = <span class="hljs-string">&#x27;z&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Letter</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Letter</span>();<br>x.c = <span class="hljs-string">&#x27;a&#x27;</span>;<br>System.out.println(<span class="hljs-string">&quot;1: x.c: &quot;</span>+ x.c);<br>f(x);<br>System.out.println(<span class="hljs-string">&quot;2: x.c: &quot;</span>+ x.c);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当传入一个对象作为函数的参数时，对该对象的属性进行修改，也会对原对象产生修改。</p><p>本质是因为向函数传递的值本身就是一个对象的地址，即使是作为副本被传进去，仍然会获取到源对象</p><h1 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.* ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathOps</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">47</span>);<br><span class="hljs-type">int</span> i , j , k ;<br>j = rand.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>System.out.println(<span class="hljs-string">&quot;j : &quot;</span>+ j );<br>k = rand.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>System.out.println(<span class="hljs-string">&quot;j : &quot;</span>+ j );<br>i = j + k ;<br>System.out.println(<span class="hljs-string">&quot;j + k : &quot;</span> + i );<br>i = j - k ;<br>System.out.println(<span class="hljs-string">&quot;j - k : &quot;</span> + i );<br>i = k / j ;<br>System.out.println(<span class="hljs-string">&quot;j / k : &quot;</span> + i );<br>i = k * j ;<br>System.out.println(<span class="hljs-string">&quot;j * k : &quot;</span> + i );<br>i = k % j ;<br>System.out.println(<span class="hljs-string">&quot;j % k : &quot;</span> + i );<br>j %= k;<br>System.out.println(<span class="hljs-string">&quot;j %= k : &quot;</span> + j );<br><span class="hljs-type">float</span> u,v,w ;<br>v = rand.nextFloat();<br>System.out.pruntln(<span class="hljs-string">&quot;v : &quot;</span>+ v );<br>w = rand.nextFloat();<br>System.out.pruntln(<span class="hljs-string">&quot;w : &quot;</span>+ w );<br>u = v + w ;<br>System.out.pruntln(<span class="hljs-string">&quot;v + w : &quot;</span> + u );<br>u = v - w ;<br>System.out.pruntln(<span class="hljs-string">&quot;v - w : &quot;</span> + u );<br>u = w / v ;<br>System.out.pruntln(<span class="hljs-string">&quot;v / w : &quot;</span> + u );<br>u = w * v ;<br>System.out.pruntln(<span class="hljs-string">&quot;v * w : &quot;</span> + u );<br>u = w % v ;<br>System.out.pruntln(<span class="hljs-string">&quot;v % w : &quot;</span> + u );<br>v %= w;<br>System.out.pruntln(<span class="hljs-string">&quot;v %= w : &quot;</span> + v );<br>&#125;<br>&#125;<br><span class="hljs-comment">// nextInt() 获取一个随机整数， nextFloat()获取一个随机浮点数</span><br></code></pre></td></tr></table></figure><h1 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h1><p>“ - ” 反转变量符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span> ;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> -i ; <span class="hljs-comment">// c = -4 ;</span><br></code></pre></td></tr></table></figure><p>“++” 自增操作符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span> ;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + i++ ;         <span class="hljs-comment">// i++ 先返回i原值参与运算，再将i自增</span><br>System.out.println(<span class="hljs-string">&quot;c: &quot;</span>+c+<span class="hljs-string">&quot;, i: &quot;</span>+i);  <span class="hljs-comment">// 输出 6，5</span><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + ++i ;         <span class="hljs-comment">// ++i  先对i进行自增运算，再进行外部运算</span><br>System.out.println(<span class="hljs-string">&quot;d: &quot;</span>+d+<span class="hljs-string">&quot;, i: &quot;</span>+i);  <span class="hljs-comment">// 输出 8, 6</span><br></code></pre></td></tr></table></figure><p>“ - - ” 自减运算 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span> ;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + i-- ;         <span class="hljs-comment">// i++ 先返回i原值参与运算，再将i自增</span><br>System.out.println(<span class="hljs-string">&quot;c: &quot;</span>+c+<span class="hljs-string">&quot;, i: &quot;</span>+i); <span class="hljs-comment">// 输出 6，3</span><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + --i ;         <span class="hljs-comment">// ++i  先对i进行自增运算，再进行外部运算</span><br>System.out.println(<span class="hljs-string">&quot;d: &quot;</span>+d+<span class="hljs-string">&quot;, i: &quot;</span>+i);  <span class="hljs-comment">// 输出 4, 2</span><br></code></pre></td></tr></table></figure><h1 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h1><h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><p>“&#x3D;&#x3D;” 用于 判断两个对象的地址是否一致，</p><p>.equals 用于判断 两个对象的值是否一致</p><p>在java 9 以及以后的版本中 ：</p><p>-127 - 127   作为缓存整数值，当使用 value 或valueof 时，会使用同一个int对象。所以这时的 value和 valueOf 都会返回true</p><p>128 +  则都需要通过 new 来创建  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Equivalence</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String desc , Integer n1 , Integer n2)</span>&#123;<br>System.out.println(desc + <span class="hljs-string">&quot;:&quot;</span>);<br>System.out.println(<br><span class="hljs-string">&quot;%d==%d %b %b%n&quot;</span>, n1 , n2 , n1 == n2 , n1.equals(n2));<br>&#125;<br><span class="hljs-meta">@SuppressWarnings(&quot;deprecation&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> value ;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> value ;<br>show(<span class="hljs-string">&quot;Automatic&quot;</span>,i1,i2);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(value);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(value);<br>show(<span class="hljs-string">&quot;new Integer()&quot;</span>,r1,r2);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> Integer.valueOf(value);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> Integer.valueOf(value);<br>show(<span class="hljs-string">&quot;Integer.valueOf()&quot;</span>, v1 , v2);<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> value ;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> value ;<br>System.out.println(<span class="hljs-string">&quot;Primitive int :&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;%d==%d %b%n&quot;</span>, x, y, x == y);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>test(<span class="hljs-number">127</span>);<br>test(<span class="hljs-number">128</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bool</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Random</span> <span class="hljs-variable">rnd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">47</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> rnd.nextInt(<span class="hljs-number">100</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> rnd.nextInt(<span class="hljs-number">100</span>);<br>System.out.println(<span class="hljs-string">&quot;i=&quot;</span>+i);<br>System.out.println(<span class="hljs-string">&quot;j=&quot;</span>+j);<br>System.out.println(<span class="hljs-string">&quot;i &gt; j is &quot;</span> + (i&gt;j) );<br>System.out.println(<span class="hljs-string">&quot;i &lt; j is &quot;</span> + (i&lt;j) );<br>System.out.println(<span class="hljs-string">&quot;i&gt;=j is &quot;</span> + (i&gt;=j) );<br>System.out.println(<span class="hljs-string">&quot;i&lt;=j is &quot;</span> + (i&lt;=j) );<br>System.out.println(<span class="hljs-string">&quot;i==j is &quot;</span> + (i==j) );<br>System.out.println(<span class="hljs-string">&quot;i!=j is &quot;</span> + (i!=j) );<br>System.out.println(<span class="hljs-string">&quot;i&lt;10 &amp;&amp; j&gt;10 is &quot;</span> + ((i&lt;<span class="hljs-number">10</span>) &amp;&amp; (j&gt;<span class="hljs-number">10</span>))  );<br>System.out.println(<span class="hljs-string">&quot;i&lt;10 || j&gt;10 is &quot;</span> + ((i&lt;<span class="hljs-number">10</span>) || (j&gt;<span class="hljs-number">10</span>))  );<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="短路"><a href="#短路" class="headerlink" title="短路"></a>短路</h2><p>当进行逻辑运算时，中间的某个条件为false, 就不会再去执行后续条件的判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShortCircuit</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test1</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;test1(&quot;</span>+val+<span class="hljs-string">&quot;)&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;result: &quot;</span>+(val&lt;<span class="hljs-number">1</span>));<br><span class="hljs-keyword">return</span> val&lt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;test2(&quot;</span>+val+<span class="hljs-string">&quot;)&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;result: &quot;</span>+(val&lt;<span class="hljs-number">2</span>));<br><span class="hljs-keyword">return</span> val&lt;<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test3</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;test3(&quot;</span>+val+<span class="hljs-string">&quot;)&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;result: &quot;</span>+(val&lt;<span class="hljs-number">3</span>));<br><span class="hljs-keyword">return</span> val&lt;<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> test1(<span class="hljs-number">0</span>) &amp;&amp; test2(<span class="hljs-number">2</span>) &amp;&amp; test3(<span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-string">&quot;expression is &quot;</span> + b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h2><p>可以通过一些字面值来表示某些对象的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x2f</span>;  <span class="hljs-comment">//十六进制</span><br>System.out.println(<span class="hljs-string">&quot;i1 : &quot;</span>+Integer.toBinaryString(i1));<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x2F</span>; <span class="hljs-comment">//十六进制</span><br>System.out.println(<span class="hljs-string">&quot;i2 : &quot;</span>+Integer.toBinaryString(i2));<br><span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0177</span>; <span class="hljs-comment">//八进制</span><br>System.out.println(<span class="hljs-string">&quot;i3 : &quot;</span>+Integer.toBinaryString(i3));<br><span class="hljs-type">char</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xffff</span>; <span class="hljs-comment">//十六进制</span><br>System.out.println(<span class="hljs-string">&quot;r : &quot;</span>+Integer.toBinaryString(r));<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7f</span>; <span class="hljs-comment">//八进制</span><br>System.out.println(<span class="hljs-string">&quot;b : &quot;</span>+Integer.toBinaryString(b));<br><span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7fff</span>; <span class="hljs-comment">//十六进制</span><br>System.out.println(<span class="hljs-string">&quot;s : &quot;</span>+Integer.toBinaryString(s));<br><span class="hljs-type">long</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">200L</span>; <br><span class="hljs-type">long</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200l</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>System.out.println(<span class="hljs-string">&quot;n1 : &quot;</span>+Long.toBinaryString(n1));<br>System.out.println(<span class="hljs-string">&quot;n2 : &quot;</span>+Long.toBinaryString(n2));<br>System.out.println(<span class="hljs-string">&quot;n3 : &quot;</span>+Long.toBinaryString(n3));<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="按位运算和位运算"><a href="#按位运算和位运算" class="headerlink" title="按位运算和位运算"></a>按位运算和位运算</h2><p>按位运算是以二进制形式，对每一位进行与或非</p><p>位运算是直接操作值的位移运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ;<br>System.out.println((i&amp;j));     <span class="hljs-comment">// 与   不同输出0, 相同输出1 所以输出0</span><br>System.out.println((i|j));     <span class="hljs-comment">// 或   有1取1  输出 15</span><br>System.out.println((i^j));     <span class="hljs-comment">// 非   不同输出1, 相同输出0 所以输出15</span><br>System.out.println((j&lt;&lt;<span class="hljs-number">1</span>));    <span class="hljs-comment">// 位运算   向左移1位  即 01 -&gt; 10</span><br>System.out.println((j&gt;&gt;<span class="hljs-number">1</span>));    <span class="hljs-comment">// 位运算   向右移1位  即 10 -&gt; 01</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><p>通过使用 ？ 来进行判断的快速赋值 。 这时要求  两个值必须存在返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> &gt; <span class="hljs-number">3</span> ? <span class="hljs-number">4</span> : <span class="hljs-number">5</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><p>if <statement>… else 根据条件判断决定执行的流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span> ;<br><span class="hljs-keyword">if</span> (a==<span class="hljs-number">3</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;a is 3&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a==<span class="hljs-number">4</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;a is 4&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;a is not 3&quot;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><br><span class="hljs-keyword">while</span>(a&gt;<span class="hljs-number">5</span>)&#123;<br>a++;<br>&#125;<br><span class="hljs-comment">// while 循环 </span><br><span class="hljs-keyword">do</span> &#123;<br>a++;<br>&#125;<span class="hljs-keyword">while</span>(a&gt;<span class="hljs-number">5</span>);<br><span class="hljs-comment">// do while 循环  代码块至少会被执行一次</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>a++;<br>&#125;<br><span class="hljs-comment">// for 循环 , for中允许使用“,” 定义多个值</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用for … in 来进行迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a : f)&#123;<br>System.out.println(a);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环中的控制符"><a href="#循环中的控制符" class="headerlink" title="循环中的控制符"></a>循环中的控制符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">break</span> <span class="hljs-comment">// 跳出当前循环</span><br><span class="hljs-keyword">continue</span> <span class="hljs-comment">// 跳过本次循环的后续步骤，继续循环</span><br><span class="hljs-keyword">return</span> <span class="hljs-comment">// 从函数中返回</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">somenum</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br><span class="hljs-keyword">while</span> (a &lt; <span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">if</span>(a ==<span class="hljs-number">6</span> )&#123;<br>a++;<br><span class="hljs-keyword">continue</span>;        <span class="hljs-comment">// 跳过后续流程，执行下一次循环</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == <span class="hljs-number">7</span>)&#123;<br>a++;<br><span class="hljs-keyword">break</span>;           <span class="hljs-comment">// 跳出循环</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == <span class="hljs-number">8</span>)&#123;<br><span class="hljs-keyword">return</span> a ;       <span class="hljs-comment">//  直接返回</span><br>&#125;<br>a++;<br>&#125;<br><span class="hljs-keyword">return</span> a ;<br>&#125;<br><br><span class="hljs-comment">// 因为当a==7时  a继续自增了 之后break -&gt; return 。所以最后输出 8</span><br></code></pre></td></tr></table></figure><h2 id="swtich-多条件分支时可以使用switch"><a href="#swtich-多条件分支时可以使用switch" class="headerlink" title="swtich 多条件分支时可以使用switch"></a>swtich 多条件分支时可以使用switch</h2><p>也可以使用字符串进行分支选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">somenum</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br><span class="hljs-keyword">while</span> (a &lt;= <span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">switch</span>(a)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span> :<br>System.out.println(<span class="hljs-string">&quot;a is 6&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span> :<br>System.out.println(<span class="hljs-string">&quot;a is 7&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span> :<br>System.out.println(<span class="hljs-string">&quot;a is 8&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span> :<br>System.out.println(<span class="hljs-string">&quot;a is 9&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span> :<br>System.out.println(<span class="hljs-string">&quot;a is not 6,7,8,9&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>a++;<br>&#125;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">return</span> a ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 VIIII Web框架 Flask</title>
    <link href="/2025/04/18/Python%E7%BC%96%E7%A8%8B-VIIII-Web%E6%A1%86%E6%9E%B6-Flask/"/>
    <url>/2025/04/18/Python%E7%BC%96%E7%A8%8B-VIIII-Web%E6%A1%86%E6%9E%B6-Flask/</url>
    
    <content type="html"><![CDATA[<p>跟着Flask文档，编写一个基于Flask的Web 服务器</p><h1 id="启动Flask"><a href="#启动Flask" class="headerlink" title="启动Flask"></a>启动Flask</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello,World&quot;</span><br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> FLASK_APP=hello.py  <br>python -m flask run<br>使 flask 服务器开始运行<br></code></pre></td></tr></table></figure><p>这里主要定义了一个路由“&#x2F;” 和 调用方法的关系。启动服务器后对对应的路径进行访问</p><p>通过指定 —host&#x3D;0.0.0.0 允许操作系统监听所有公开IP的请求</p><h2 id="路由中的变量定义"><a href="#路由中的变量定义" class="headerlink" title="路由中的变量定义"></a>路由中的变量定义</h2><table><thead><tr><th><code>string</code></th><th>（缺省值） 接受任何不包含斜杠的文本</th></tr></thead><tbody><tr><td><code>int</code></td><td>接受正整数</td></tr><tr><td><code>float</code></td><td>接受正浮点数</td></tr><tr><td><code>path</code></td><td>类似 <code>string</code> ，但可以包含斜杠</td></tr><tr><td><code>uuid</code></td><td>接受 UUID 字符串</td></tr></tbody></table><h2 id="url-for"><a href="#url-for" class="headerlink" title="url_for()"></a>url_for()</h2><p>url_for 可以通过具体的函数名返回其所对应的资源路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profile</span>(<span class="hljs-params">username</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&#125;\&#x27;s profile&#x27;</span>.<span class="hljs-built_in">format</span>(escape(username))<br><span class="hljs-keyword">with</span> app.test_request_context():<br><span class="hljs-built_in">print</span>(url_for(<span class="hljs-string">&#x27;profile&#x27;</span>,username=<span class="hljs-string">&#x27;Codfish&#x27;</span>))  <span class="hljs-comment"># 输出/user/codfish</span><br></code></pre></td></tr></table></figure><h2 id="定义http请求方法对应的处理"><a href="#定义http请求方法对应的处理" class="headerlink" title="定义http请求方法对应的处理"></a>定义http请求方法对应的处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">return</span> do_the_login()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> show_the_login_form()<br></code></pre></td></tr></table></figure><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p><strong><code>url_for(&#39;static&#39;, filename=&#39;style.css&#39;)</code></strong></p><p>静态文件和路径的映射</p><h2 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&#x27;</span></span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/name&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>)<br><span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;hello.html&#x27;</span>,name=name)<br><br></code></pre></td></tr></table></figure><p>模板可以用来直接向其中填充调用方法中的变量信息，模板会帮助进行后期的替换</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flaskimport request<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br><span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>f = request.files[<span class="hljs-string">&#x27;the_file&#x27;</span>]<br>f.save(<span class="hljs-string">&#x27;/var/www/uploads/uploaded_file.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里说的是接收文件上传请求将文件保存到服务器。<br>f &#x3D; request.files[‘the_file’]  从请求中获取文件信息</p><p>f.save(‘&#x2F;var&#x2F;www&#x2F;uploads&#x2F;uploaded_file.txt’)  将文件保存到目标路径</p><h2 id="获取Cookies"><a href="#获取Cookies" class="headerlink" title="获取Cookies"></a>获取Cookies</h2><p>request中存在一个对象用来存储所有的cookies </p><p>这里是 获取名为username的cookies信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    username = request.cookies.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    <span class="hljs-comment"># use cookies.get(key) instead of cookies[key] to not get a</span><br>    <span class="hljs-comment"># KeyError if the cookie is missing.</span><br></code></pre></td></tr></table></figure><p>对应的向客户端设置cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> make_response<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    resp = make_response(render_template(...))<br>    resp.set_cookie(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;the username&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp<br></code></pre></td></tr></table></figure><h2 id="使用重定向-，转移到另一个路径"><a href="#使用重定向-，转移到另一个路径" class="headerlink" title="使用重定向 ，转移到另一个路径"></a>使用重定向 ，转移到另一个路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> abort, redirect, url_for<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="将用户跳转到错误页面"><a href="#将用户跳转到错误页面" class="headerlink" title="将用户跳转到错误页面"></a>将用户跳转到错误页面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">abort(<span class="hljs-number">401</span>) <span class="hljs-comment"># 返回 401 错误页面</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">404</span></span>) </span><span class="hljs-comment"># 定制出错页面</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">page_not_found</span>(<span class="hljs-params">error</span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;page_not_found.html&#x27;</span>), <span class="hljs-number">404</span>   <span class="hljs-comment"># 最后返回的是状态码</span><br></code></pre></td></tr></table></figure><h2 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h2><p>支持多种返回类型自动转换</p><p>响应对象   →  直接返回</p><p>字符串 → 包装字符串和缺省参数 返回</p><p>字典  → 使用jsonfy创建一个返回对象</p><p>元组 → 接收类型为（response，status） (response,headers) 以及（response,status,headers）类型的项目 会将信息组装成新的响应</p><p>或者使用make_response() 构建响应返回</p><p>或者  直接 返回json 字段</p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>session 对象用于储存同用户的多个请求的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, redirect, url_for, escape, request<br><br>app = Flask(__name__)<br><br><span class="hljs-comment"># Set the secret key to some random bytes. Keep this really secret!</span><br>app.secret_key = <span class="hljs-string">b&#x27;_5#y2L&quot;F4Q8z\n\xec]/&#x27;</span>          <span class="hljs-comment">#使用前需要设置密钥</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">in</span> session:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Logged in as %s&#x27;</span> % escape(session[<span class="hljs-string">&#x27;username&#x27;</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are not logged in&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        session[<span class="hljs-string">&#x27;username&#x27;</span>] = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;form method=&quot;post&quot;&gt;</span><br><span class="hljs-string">            &lt;p&gt;&lt;input type=text name=username&gt;</span><br><span class="hljs-string">            &lt;p&gt;&lt;input type=submit value=Login&gt;</span><br><span class="hljs-string">        &lt;/form&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    <span class="hljs-comment"># remove the username from the session if it&#x27;s there</span><br>    session.pop(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">app.logger.debug(<span class="hljs-string">&#x27;A value for debugging&#x27;</span>)<br>app.logger.warning(<span class="hljs-string">&#x27;A warning occurred (%d apples)&#x27;</span>, <span class="hljs-number">42</span>)<br>app.logger.error(<span class="hljs-string">&#x27;An error occurred&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Web后端框架的核心功能在于</p><p>HTTP请求处理 - 将请求文本处理为请求对象</p><p>路由资源 - 在框架中定义路由资源添加的方法，以及如何根据请求查找到对应的路径</p><p>响应构建 - 请求结束后的响应是如何组装的，以什么形式返回响应</p><p>扩展功能 - 一些协助构建整个服务的扩展功能，比如模板渲染，动态资源路径</p><h1 id="WSGI-（Web-Server-Gateway-Interface）"><a href="#WSGI-（Web-Server-Gateway-Interface）" class="headerlink" title="WSGI （Web Server Gateway Interface）"></a>WSGI （Web Server Gateway Interface）</h1><p>wsgi 是定义 web server（可以理解为端口监听，线程管理，以及socket的部分） 如何与实际应用（http请求处理，报文头分析等具体的函数处理部分）交互的接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">application</span>(<span class="hljs-params">environ, start_response</span>):<br><span class="hljs-comment"># environ 是请求的数据信息, start_reponse 是webserver 的回调函数</span><br>...<br><span class="hljs-comment"># 接收到请求体后的功能处理部分</span><br><br>    <span class="hljs-comment"># 调用回调函数，告诉服务器响应的状态码和头部</span><br>    start_response(<span class="hljs-string">&quot;200 OK&quot;</span>, [(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/plain&quot;</span>)])<br>    <br>    <span class="hljs-comment"># 返回响应体（是一个可迭代对象）</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">b&quot;Hello, WSGI World!&quot;</span>]<br><br></code></pre></td></tr></table></figure><p>这里定义了 web server 需要将请求内容以及一个用于向其写入状态码信息和响应头的回调函数传入。在接口内部需要进行请求处理，处理完毕后，调用回调函数写入状态码和响应头</p><p>最终将响应体通过return 返回。</p><h2 id="Flask-的wsgi实现"><a href="#Flask-的wsgi实现" class="headerlink" title="Flask 的wsgi实现"></a>Flask 的wsgi实现</h2><p>flask 对于wsgi的实现主要有3部分</p><ol><li>定义了一个请求对象<code>RequestContext</code>，将请求体中的内容封装到对象中。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestContext</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, app, environ</span>):<br>        <span class="hljs-variable language_">self</span>.request = app.request_class(environ)   <span class="hljs-comment"># 构造 Request 对象</span><br>        <span class="hljs-variable language_">self</span>.session = app.open_session(<span class="hljs-variable language_">self</span>.request)<br>        <span class="hljs-variable language_">self</span>.app = app<br>        ...<br></code></pre></td></tr></table></figure><ol><li><p>定义了一个上下文栈，将请求对象压入栈中</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> werkzeug.local <span class="hljs-keyword">import</span> LocalStack<br><br>_request_ctx_stack = LocalStack()<br><br></code></pre></td></tr></table></figure></li><li><p>定义了一个代理对象request，使flask不必真正的将RequestContext 对象传入函数，而是通过代理获取外部的作用域来查询RequestContext中的属性</p></li><li><p>构建了app 这样一个可调用对象来实现wsgi接口，底层是通过wsgi_app 函数来完成整个过程的执行，app对象本身是为了存储一些中间状态</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flask</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, environ, start_response</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.wsgi_app(environ, start_response)<br></code></pre></td></tr></table></figure><h2 id="实现一个轻量框架"><a href="#实现一个轻量框架" class="headerlink" title="实现一个轻量框架"></a>实现一个轻量框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> wsgiref.simple_server <span class="hljs-keyword">import</span> make_server<br><span class="hljs-keyword">from</span> werkzeug.local <span class="hljs-keyword">import</span> LocalStack, LocalProxy<br><br><span class="hljs-comment"># === 上下文栈 ===</span><br>_request_ctx_stack = LocalStack()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_lookup_request</span>():<br>    top = _request_ctx_stack.top<br>    <span class="hljs-keyword">if</span> top <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;No request context&quot;</span>)<br>    <span class="hljs-keyword">return</span> top[<span class="hljs-string">&#x27;request&#x27;</span>]<br><br><span class="hljs-comment"># 全局代理变量</span><br>request = LocalProxy(_lookup_request)<br><br><span class="hljs-comment"># === Request 和 Response 封装 ===</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, environ</span>):<br>        <span class="hljs-variable language_">self</span>.method = environ[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.path = environ[<span class="hljs-string">&#x27;PATH_INFO&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.environ = environ<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Response</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, body, status=<span class="hljs-string">&quot;200 OK&quot;</span>, headers=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-variable language_">self</span>.body = [body.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)]<br>        <span class="hljs-variable language_">self</span>.status = status<br>        <span class="hljs-variable language_">self</span>.headers = headers <span class="hljs-keyword">or</span> [(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html&quot;</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, environ, start_response</span>):<br>        start_response(<span class="hljs-variable language_">self</span>.status, <span class="hljs-variable language_">self</span>.headers)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.body<br><br><span class="hljs-comment"># === Flask Mini 框架核心 ===</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MiniFlask</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.routes = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">route</span>(<span class="hljs-params">self, path</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">f</span>):<br>            <span class="hljs-variable language_">self</span>.routes[path] = f<br>            <span class="hljs-keyword">return</span> f<br>        <span class="hljs-keyword">return</span> decorator<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wsgi_app</span>(<span class="hljs-params">self, environ, start_response</span>):<br>        <span class="hljs-comment"># 构造 request 上下文并压入栈</span><br>        req = Request(environ)<br>        _request_ctx_stack.push(&#123;<span class="hljs-string">&#x27;request&#x27;</span>: req&#125;)<br>        <span class="hljs-keyword">try</span>:<br>            handler = <span class="hljs-variable language_">self</span>.routes.get(req.path)<br>            <span class="hljs-keyword">if</span> handler <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;404 Not Found&quot;</span>, <span class="hljs-string">&quot;404 NOT FOUND&quot;</span>)(<br>                    environ, start_response<br>                )<br>            result = handler()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(result, Response):<br>                <span class="hljs-keyword">return</span> result(environ, start_response)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> Response(<span class="hljs-built_in">str</span>(result))(environ, start_response)<br>        <span class="hljs-keyword">finally</span>:<br>            _request_ctx_stack.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, environ, start_response</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.wsgi_app(environ, start_response)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">5000</span></span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Running on http://<span class="hljs-subst">&#123;host&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">with</span> make_server(host, port, <span class="hljs-variable language_">self</span>) <span class="hljs-keyword">as</span> httpd:<br>            httpd.serve_forever()<br><br><span class="hljs-comment"># === 示例使用 ===</span><br>app = MiniFlask()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Hello, your method is <span class="hljs-subst">&#123;request.method&#125;</span>&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/hi&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hi</span>():<br>    <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;&lt;h1&gt;Hi there!&lt;/h1&gt;&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br></code></pre></td></tr></table></figure><p>这里面实现了我们上述的几个关键点</p><ol><li>定义了 对http请求的封装</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, environ</span>):<br>        <span class="hljs-variable language_">self</span>.method = environ[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.path = environ[<span class="hljs-string">&#x27;PATH_INFO&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.environ = environ<br></code></pre></td></tr></table></figure><ol><li>定义了一个上下文栈，在消息到达时，将请求存储上下文栈，响应后将请求弹出</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">_request_ctx_stack = LocalStack()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_lookup_request</span>():<br>    top = _request_ctx_stack.top<br>    <span class="hljs-keyword">if</span> top <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;No request context&quot;</span>)<br>    <span class="hljs-keyword">return</span> top[<span class="hljs-string">&#x27;request&#x27;</span>]<br><br></code></pre></td></tr></table></figure><ol><li>一个对于上下文栈中请求的代理</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">request = LocalProxy(_lookup_request)<br></code></pre></td></tr></table></figure><ol><li>实现 wsgi接口，接收请求环境信息和回调函数，返回最终的响应体</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wsgi_app</span>(<span class="hljs-params">self, environ, start_response</span>):<br>    <span class="hljs-comment"># 构造 request 上下文并压入栈</span><br>    req = Request(environ)<br>    _request_ctx_stack.push(&#123;<span class="hljs-string">&#x27;request&#x27;</span>: req&#125;)<br>    <span class="hljs-keyword">try</span>:<br>        handler = <span class="hljs-variable language_">self</span>.routes.get(req.path)<br>        <span class="hljs-keyword">if</span> handler <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;404 Not Found&quot;</span>, <span class="hljs-string">&quot;404 NOT FOUND&quot;</span>)(<br>                environ, start_response<br>            )<br>        result = handler()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(result, Response):<br>            <span class="hljs-keyword">return</span> result(environ, start_response)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Response(<span class="hljs-built_in">str</span>(result))(environ, start_response)<br>    <span class="hljs-keyword">finally</span>:<br>        _request_ctx_stack.pop()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 VIII HTTP服务</title>
    <link href="/2025/04/17/Python%E7%BC%96%E7%A8%8B-VIII-HTTP%E6%9C%8D%E5%8A%A1/"/>
    <url>/2025/04/17/Python%E7%BC%96%E7%A8%8B-VIII-HTTP%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="网络与应用层"><a href="#网络与应用层" class="headerlink" title="网络与应用层"></a>网络与应用层</h1><p>从服务处理的角度来看，网络的核心目的在于<strong>通过协议控制，实现请求端与服务端之间数据的完整交互</strong>。</p><p>对请求端和服务端而言，中间层的报文封装、转发、路由等行为是不可感知的。<strong>网络层和传输层共同构建了一个抽象的“一致交互环境”</strong>，使得远端传输的数据能够被“原封不动地”接收并存储到本地缓存，供应用逻辑处理。</p><p>正因为中间网络的不可见性与“穿透性”，网络层与传输层的协议设计更强调<strong>通用性与可靠性</strong>。它们的关注点在于数据的可靠传递与顺序控制，而不是数据的具体内容，因此协议结构通常具有<strong>严格的头部格式与字段定义</strong>，以保证设备间的互通与协议的一致性。</p><p>相较之下，<strong>应用层协议更关注的是“如何处理数据”</strong>。它所需考虑的，是服务需要哪些输入字段、输出以何种格式表达。因而，应用层协议具备更强的<strong>灵活性与语义扩展性</strong>，核心是围绕字段的<strong>定义、解析与业务映射</strong>，完成服务端与请求端的语义协同。</p><p>网络层和传输层协议通常强调<strong>字段的控制意义和状态管理功能</strong>，例如通过设置特定位（如 TCP 的 SYN、ACK、FIN）来标识连接状态或数据传输的阶段，以及通过 IP 层的 TTL、标志位等控制报文的转发行为。</p><p>相比之下，应用层协议更强调<strong>字段的语义描述性</strong>，即字段用于表达请求的操作类型、参数内容或格式要求，具体的状态（如会话是否有效、登录是否成功）通常由客户端和服务端通过各自的逻辑来维护。应用层字段本身通常<strong>不维护传输状态</strong>，而是作为触发状态变化或状态校验的依据。</p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="HTTP协议是什么？"><a href="#HTTP协议是什么？" class="headerlink" title="HTTP协议是什么？"></a>HTTP协议是什么？</h2><p>HTTP 是一种基于请求-响应模式的应用层协议，客户端通过构建结构化的请求报文（包括请求方法、资源路径、请求头和可选的请求体）来描述其访问意图，服务端根据这些信息进行解析、路由、处理，并生成结构化的响应返回。</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>HTTP请求包含三部分</p><p>1.请求行：说明请求类型（GET、POST 等）、资源路径和协议版本。</p><p>请求行描述了 请求的资源对象，以及请求的方法。</p><p>2.请求头：携带客户端环境、请求意图、身份验证、缓存规则等元数据。</p><p>请求头描述了一些交互的控制信息，</p><p>3.请求体（可选）：例如 POST 请求中发送的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">请求示例<br><br>GET /index.html HTTP/1.1<br>Host: [www.example.com](http://www.example.com/)<br>User-Agent: MyBrowser/2.0<br>Connection: keep-alive<br>Accept: text/html<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">响应示例 <br><br>HTTP/1.1 200 OK<br>Content-Type: text/html<br>Content-Length: 75<br>Cache-Control: max-age=3600<br>Connection: keep-alive<br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, HTTP/1.1!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Python的HTTP实现示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>HOST = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>   <span class="hljs-comment"># 监听所有地址</span><br>PORT = <span class="hljs-number">4623</span>       <span class="hljs-comment"># 监听端口</span><br>PATH_ROUTE = &#123;&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">path_add</span>(<span class="hljs-params">path_name</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wapper</span>(<span class="hljs-params">func</span>) :<br>        PATH_ROUTE[path_name] = func<br>    <span class="hljs-keyword">return</span> wapper<br><br><span class="hljs-meta">@path_add(<span class="hljs-params"><span class="hljs-string">&quot;/home&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_home_method</span>(<span class="hljs-params">conn</span>):<br>    response_body = <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World! Here is home page&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><br>    response = (<br>        <span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n&quot;</span><br>        <span class="hljs-string">f&quot;Content-Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(response_body.encode())&#125;</span>\r\n&quot;</span><br>        <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span><br>        <span class="hljs-string">&quot;Connection: close\r\n&quot;</span><br>        <span class="hljs-string">&quot;\r\n&quot;</span><br>        <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;response_body&#125;</span>&quot;</span><br>    )<br><br>    conn.sendall(response.encode())<br>    conn.close()<br><br><span class="hljs-meta">@path_add(<span class="hljs-params"><span class="hljs-string">&quot;/index&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_index_method</span>(<span class="hljs-params">conn</span>):<br>    response_body = <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World! Here is index page&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><br>    response = (<br>        <span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n&quot;</span><br>        <span class="hljs-string">f&quot;Content-Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(response_body.encode())&#125;</span>\r\n&quot;</span><br>        <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span><br>        <span class="hljs-string">&quot;Connection: close\r\n&quot;</span><br>        <span class="hljs-string">&quot;\r\n&quot;</span><br>        <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;response_body&#125;</span>&quot;</span><br>    )<br><br>    conn.sendall(response.encode())<br>    conn.close()<br><br><span class="hljs-comment"># 创建 socket</span><br>server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>server_socket.bind((HOST, PORT))<br>server_socket.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;HTTP Server running at http://<span class="hljs-subst">&#123;HOST&#125;</span>:<span class="hljs-subst">&#123;PORT&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    client_conn, client_addr = server_socket.accept()<br>    request = client_conn.recv(<span class="hljs-number">1024</span>).decode()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n----- Received request from <span class="hljs-subst">&#123;client_addr&#125;</span> -----&quot;</span>)<br>    <span class="hljs-built_in">print</span>(request.strip())<br>    <br>    content = request.splitlines()<br>    method,path,protocol = content[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot; &quot;</span>)<br>    rout_name = path.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> rout_name <span class="hljs-keyword">in</span> PATH_ROUTE :<br>        PATH_ROUTE[rout_name]()<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span> :<br><br>        <span class="hljs-comment"># 构造 HTTP 响应内容</span><br>        response_body = <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><br>        response = (<br>            <span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n&quot;</span><br>            <span class="hljs-string">f&quot;Content-Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(response_body.encode())&#125;</span>\r\n&quot;</span><br>            <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span><br>            <span class="hljs-string">&quot;Connection: close\r\n&quot;</span><br>            <span class="hljs-string">&quot;\r\n&quot;</span><br>            <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;response_body&#125;</span>&quot;</span><br>        )<br><br>        client_conn.sendall(response.encode())<br>        client_conn.close()<br><br></code></pre></td></tr></table></figure><p>可以看到 其工作流程：</p><ol><li>创建TCP 服务器，绑定网卡地址和端口地址</li></ol><p>2.开始监听外部请求</p><p>3.定义循环来处理接收到的消息</p><p>4.接收到的http请求被处理成字符串 请求头一般包含 方法，路径，协议版本 和一些头控制信息</p><ol start="5"><li>可以通过请求头解析出对应的路径，这里设计了一个装饰器，将被装饰的函数添加到整体的路由字典中，当请求头中的字段存在于字典中时执行对应的函数，否则执行默认函数。默认函数会将默认的响应头和HTML字段，对http请求做出响应。</li></ol><p>整体上HTTP的工作流程是 ：</p><p>服务器监听→ 服务端发起请求→ 服务端分析文本信息，路由到请求的目标资源，执行对应的函数，将数据返回给请求端，关闭socket。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 VII 网络编程</title>
    <link href="/2025/04/17/Python%E7%BC%96%E7%A8%8B-VII-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/04/17/Python%E7%BC%96%E7%A8%8B-VII-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是网络？"><a href="#什么是网络？" class="headerlink" title="什么是网络？"></a>什么是网络？</h1><p>是OSI的7层模型？ 还是TCP&#x2F;IP 协议簇？wifi&#x2F;移动通信的空口互联？ 又或者是内核进程的虚拟数据转发？</p><ul><li>网络的本质基于预定义的通信协议通过物理介质（或虚拟物理介质如虚拟端口，虚拟mac地址）在设备间进行数据传输的一种组织结构。<ul><li>网络是“有层次”的，无论是固网通信还是空口通信。数据包的传输都在进行一个“封装-解封装”的过程</li><li>网络是“动态”的，端到端的网络通信，需要网卡持续监听外部网络接收到的数据包，并通过中断触发内核来对数据包进行处理</li></ul></li></ul><h1 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP&#x2F;IP协议栈"></a>TCP&#x2F;IP协议栈</h1><p>在其他的网络内容会具体介绍网络的转发和传输。这里只是简单讲解下TCP&#x2F;IP 协议</p><p>网络是一种基于多层通信的数据传输模式</p><p>网络模型一开始由OSI 预先定义 即7层网络结构 ：</p><p>物理层：                                                   比特流的传输、电气特性、机械特性</p><p>数据链路层：                                          将比特率转换为物理信号。并进行基础的网络设备控制</p><p>网络层：                                                   提供数据的转发，寻址。以及基础的网络质量检测</p><p>传输层：                                                   封装，承载数据。与对端设备建立连接通道。进行数据传输</p><p>会话层：                                                   管理会话连接的建立、维护和终止</p><p>表示层：                                                   处理数据格式转换、加密解密、压缩解压缩</p><p>应用层：                                                   设计应用数据结构如何在设备间进行连接，处理，解析                                                </p><p>在实现层面上应用较多的是TCP&#x2F;IP协议栈，设计了4层网络结构 ：</p><p>链路层：                                                   数据到介质的转换，通常由网卡等硬件进行。</p><p>网络层：                                                   进行数据的转发，寻址。以及基础的网络质量检测</p><p>传输层：                                                   封装，承载数据。与对端建立连接。进行数据传输</p><p>应用层：                                                   设计应用数据结构如何在设备间进行连接，处理，解析 </p><p>在数据传输过程中，每一层都具备对应的头部，来更好的控制数据的转发和对应协议的识别。</p><p>通过这种设计，允许将一端的信息&#x2F;代码&#x2F;数据传输到另外一端，并被解析执行。</p><h1 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h1><p>socket 起源于linux概念，国内一般称为套接字。它实际上是一种linux内核网络协议栈上的描述符资源。也可以理解为一种网络协议接口，通过socket,我们可以创建多种不同的网络协议，并将数据使用各种网络协议传输到对端，而不需要去考虑每种协议的具体实现。</p><h1 id="socket-底层实现的简单描述"><a href="#socket-底层实现的简单描述" class="headerlink" title="socket 底层实现的简单描述"></a>socket 底层实现的简单描述</h1><p>上面我们已经说明了socket是一种网络协议接口，它对上提供了数据层，网络层数据传输的功能。对下提供了发送数据包所必须的IP，端口，协议头设计。</p><p>在实现上。网络协议栈中，在这一层定义了sock接口。然后定义了通用的C函数指针，再在不同的传输层协议上根据不同的协议描述进行不同的实现。在收发包时，在sock层拆封网络层协议头，识别网络层中的协议号，将数据包转发给对应的结构去处理。转发到对应结构后，通过强制转换，转换为对应的协议数据包来进行进一步的数据解析</p><h2 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h2><p>通常使用的比较多的是UDP协议和TCP协议</p><h3 id="UDP（协议号17）"><a href="#UDP（协议号17）" class="headerlink" title="UDP（协议号17）"></a>UDP（协议号17）</h3><p>UDP协议，通常被认为是无连接的，因为协议本身只定义了原，目端口号信息。将应用层数据写入UDP数据包中，传输到对端的设备的目的端口，不存在连接过程和保活，重传等用来保证数据完整性的设计。但是可以在其上层进行这些可靠性设计。所以UDP优点是传输效率高，无论是数据发送层面还是包信息利用率上。而缺点是无连接，当发送掉包时，会导致整个数据不完整，需要在应用层再进行完整性确认。</p><h3 id="TCP（协议号6）"><a href="#TCP（协议号6）" class="headerlink" title="TCP（协议号6）"></a>TCP（协议号6）</h3><p>TCP协议，与UDP不同，TCP中定义了复杂的控制字段，并设计了状态机来标识TCP传输过程中的每一个阶段，它提供了连接过程，重传，保活等机制来在传输层保护数据的完整性。在TCP中，数据是流式传输的。它并非UDP那样进行用户的写入-打包-发送。而是存在两个 接收&#x2F;发送的缓存队列，每次从其中获取一定量的字符发送到对端。</p><h1 id="Python中的socket"><a href="#Python中的socket" class="headerlink" title="Python中的socket"></a>Python中的socket</h1><p>python中同样提供了socket的标准库用于进行网络编程</p><p>一个最简单的UDP echo server 实现 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)                 <br><span class="hljs-comment">#创建socket对象，AF_INET 指定了使用IP协议，SOCK_DGRAM指定是UDP</span><br>sock.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">5560</span>))<br><span class="hljs-comment">#绑定IP地址和端口号 本地主机使用127.0.0.1</span><br>buffer = <span class="hljs-number">10240</span><br><span class="hljs-comment">#设置接收缓存块的大小，接收到的数据包会被存放在缓存中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;server start&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> : <span class="hljs-comment">#设置接收/发送循环</span><br>    message,addr = sock.recvfrom(buffer)      <span class="hljs-comment">#从socket中接收数据，返回值为一个接收到的信息和ip地址和端口的元组</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;recevie message <span class="hljs-subst">&#123;message.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)&#125;</span> from <span class="hljs-subst">&#123;addr&#125;</span>&quot;</span>)      <span class="hljs-comment">#从数据包解码字符串并打印</span><br>    send_message = <span class="hljs-string">f&quot;recevie message <span class="hljs-subst">&#123;message.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)&#125;</span> from <span class="hljs-subst">&#123;addr&#125;</span>&quot;</span>.encode()<br>    sock.sendto(send_message,addr)      <span class="hljs-comment">#将收到的信息发送回原地址</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 客户端</span><br><span class="hljs-keyword">import</span> socket <br>buff = <span class="hljs-number">10240</span><br>sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>    message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入消息:&quot;</span>)<br>    sock.sendto(message.encode(),(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">5560</span>))<br>    message,addr = sock.recvfrom(buff)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;receive message <span class="hljs-subst">&#123;message&#125;</span> from <span class="hljs-subst">&#123;addr&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>这其中有几个主要过程 ： </p><p>1.调用socket函数，传入协议族，数据类型，返回 socket结构体。它本身是一种多态实现，帮助我们屏蔽了UDP，TCP甚至网络层协议的差异性，根据我们传递的参数创建对应的UDP或者TCP套接字实例</p><p>2.当我们传入的是AF_INET，SOCK_DGRAM时，返回的是一个UDP 套接字对象。</p><p>3.将套接字对象与对应的网卡进行绑定，（端口号是内核用于转发数据报的逻辑标识。当服务器收到目的地址为127.0.0.1 端口号为5560的 UDP包时，会将数据包转发给对应的上层应用程序处理，实际上就是将拆除协议头的数据报文写入 socket 接收缓冲区中）</p><p>4.设置了接收数据所使用的缓存大小</p><p>5.设置while 循环 使用 recvfrom 获取数据，接收到的是对端传来的字节数据和对端的地址端口信息</p><ol start="6"><li>使用sendto 向目标地址发送数据。</li></ol><p>socket 过程常用函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">server = socket.socket()  <span class="hljs-comment"># 定义协议族和协议信息，返回对应的协议套接字实例</span><br>server.bind((ip,port))  <span class="hljs-comment"># 将套接字与网卡进行绑定</span><br>server.recvfrom(buffer_size) <span class="hljs-comment">#接收经过buffer_size限制大小的数据，返回字节消息和远端的IP 端口信息</span><br>server.sendto(message,addr) <span class="hljs-comment">#向目标网络发送数据，传入待发送的字符和远端的IP 端口信息</span><br>server.listen() <span class="hljs-comment">#用于TCP,执行后打开对应的网络端口监听</span><br>server.accept() <span class="hljs-comment">#当创建的TCP接收到连接请求后，通过这个方法返回一个socket的子链接公用底层的端口和IP信息</span><br>sock.recv()     <span class="hljs-comment">#因为TCP 是有连接的，确认绑定关系后，不需要再指定IP和端口信息</span><br>sock.send()     <span class="hljs-comment">#同上</span><br>client.connect((ip,port)) <span class="hljs-comment">#TCP客户端的调用，指定对端地址和端口进行TCP连接</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 VI 多任务处理</title>
    <link href="/2025/04/16/Python%E7%BC%96%E7%A8%8B-VI-%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86/"/>
    <url>/2025/04/16/Python%E7%BC%96%E7%A8%8B-VI-%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统视角下的任务执行"><a href="#操作系统视角下的任务执行" class="headerlink" title="操作系统视角下的任务执行"></a>操作系统视角下的任务执行</h1><p>在操作系统中，所有的程序都是以<strong>进程或线程的形式</strong>被调度执行的。</p><h3 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h3><p>进程是程序被加载到内存后的运行时实例，是操作系统进行资源分配和调度的基本单位。</p><p>进程负责管理其所需的各种资源，包括但不限于用户空间中的代码段、堆、栈、动态链接库，以及通过内核中的 <code>task_struct</code> 结构体关联的系统资源，例如命名空间、文件挂载点、网络接口、用户权限、信号处理、共享内存和信号量等。</p><h3 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h3><p>线程是进程内的一个执行单元，是操作系统调度的最小单位。</p><p>线程与进程的区别在于资源的共享方式：</p><p>多个线程可以共享同一个进程的用户空间资源（如内存、文件描述符、信号处理器等），但每个线程依然会拥有自己独立的 <code>task_struct</code>、内核栈和调度上下文。</p><p>在线程创建时，可以通过 <code>clone()</code> 系统调用指定共享哪些资源，从而实现不同粒度的资源隔离或共享。</p><h3 id="什么是任务调度？"><a href="#什么是任务调度？" class="headerlink" title="什么是任务调度？"></a>什么是任务调度？</h3><p>操作系统通过 <code>task_struct</code> 结构体来描述每一个可调度实体（无论是进程还是线程）。</p><p>当一个进程或线程被创建时，内核会为其分配一个 <code>task_struct</code>，并将其加入调度器的就绪队列中，等待 CPU 分配时间片进行执行。</p><h3 id="多线程对调度的影响"><a href="#多线程对调度的影响" class="headerlink" title="多线程对调度的影响"></a>多线程对调度的影响</h3><p>由于每个线程都对应一个独立的 <code>task_struct</code>，因此操作系统会将它们作为<strong>独立的调度实体</strong>进行调度。</p><p>例如：</p><p>假设系统中共有 10 个任务（调度实体）在等待 CPU，而某进程只包含一个线程，那么它获得 CPU 的概率约为 1&#x2F;10。</p><p>当该进程创建了一个新线程后，它就拥有了两个 <code>task_struct</code>，调度概率提升至约 2&#x2F;11，从而提高了该进程整体的执行频率和并发能力。</p><p>这种方式尤其适用于多核处理器架构，能够实现多个线程在不同 CPU 核心上同时运行，提升整体性能和响应速度。</p><h1 id="Python中的多任务处理"><a href="#Python中的多任务处理" class="headerlink" title="Python中的多任务处理"></a>Python中的多任务处理</h1><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>如上面所讲，多线程就是通过在系统层面使用clone指定共享资源区在内核创建新的task_struct 增加被系统调度的可能性，在python中，使用threading模块来构建python的多线程应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例1 创建函数，将函数添加到多线程对象中启动多线程</span><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>,<span class="hljs-number">100</span>):                                       <br>        <span class="hljs-built_in">print</span>(i)<br><br>session1 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread1&quot;</span>)          <span class="hljs-comment">#创建线程1,指定线程1执行的方法</span><br>session2 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread2&quot;</span>)          <span class="hljs-comment">#创建线程2,指定线程2执行的方法</span><br>session1.start()                                                  <span class="hljs-comment">#创建c层面的线程结构</span><br>session2.start()                                                  <span class="hljs-comment">#创建c层面的线程结构</span><br>session1.join()                                                   <span class="hljs-comment">#执行线程1</span><br>session2.join()                                                   <span class="hljs-comment">#执行线程2</span><br><span class="hljs-comment"># session1和session2 分别正常输出</span><br></code></pre></td></tr></table></figure><p>这时，session1和session2 分别正常输出，因为函数中所使用的变量都是在栈中创建的，而不同线程的栈空间是相互独立的，所以不存在影响。</p><p>调用同一个对象读写时 这时就会出现输出与目标输出不一致的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例2 创建一个类，通过操作类中的属性，来查看多线程操作时可能出现的问题</span><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">count1</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num</span>):<br>        <span class="hljs-variable language_">self</span>.num = num<br>a = count1(<span class="hljs-number">0</span>)<br>test_max = <span class="hljs-number">10000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">count_t, <span class="hljs-built_in">max</span></span>):<br>    <span class="hljs-keyword">while</span> count_t.num &lt; <span class="hljs-built_in">max</span>:                <br>        time.sleep(<span class="hljs-number">0.001</span>)               <span class="hljs-comment">#增加执行时间，增加线程切换的可能性</span><br>        count_t.num += <span class="hljs-number">1</span><br><br>session1 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread1&quot;</span>,args=(a,test_max))<br>session2 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread2&quot;</span>,args=(a,test_max))<br>session3 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread3&quot;</span>,args=(a,test_max))<br>session4 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread4&quot;</span>,args=(a,test_max))<br>session5 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread5&quot;</span>,args=(a,test_max))<br><br>session1.start()<br>session2.start()<br>session3.start()<br>session4.start()<br>session5.start()<br><br>session1.join()<br>session2.join()<br>session3.join()<br>session4.join()<br>session5.join()<br><br><span class="hljs-comment"># 输出 10005（不固定）</span><br></code></pre></td></tr></table></figure><p>基于类继承实现多线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例3 基于类继承实现多线程</span><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">anum</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num</span>):<br>        <span class="hljs-variable language_">self</span>.num = num<br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">count1</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num,<span class="hljs-built_in">max</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.num = num<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">max</span> = <span class="hljs-built_in">max</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.num.num&lt;<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">max</span>:<br>            time.sleep(<span class="hljs-number">0.001</span>) <br>            <span class="hljs-variable language_">self</span>.num.num += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br>num1 = anum(<span class="hljs-number">0</span>)<br>session1 = count1(num1,<span class="hljs-number">1000</span>)<br>session2 = count1(num1,<span class="hljs-number">1000</span>)<br>session3 = count1(num1,<span class="hljs-number">1000</span>)<br>session4 = count1(num1,<span class="hljs-number">1000</span>)<br>session5 = count1(num1,<span class="hljs-number">1000</span>)<br>session1.start()<br>session2.start()<br>session3.start()<br>session4.start()<br>session5.start()<br>session1.join()<br>session2.join()<br>session3.join()<br>session4.join()<br>session5.join()<br><span class="hljs-built_in">print</span>(num1.num)<br><span class="hljs-comment"># 最终结果同样存在问题</span><br></code></pre></td></tr></table></figure><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>在Python中，支持两种多进程的创建方式 ：</p><ol><li>通过fork 创建进程  即复制当前进程创建一个进程</li><li>spawn ， 重新加载解释器创建进程</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> multiprocessing<br>multiprocessing.set_start_method(<span class="hljs-string">&quot;spawn&quot;</span>)  <span class="hljs-comment"># 设置解释器创建进程  </span><br>multiprocessing.set_start_method(<span class="hljs-string">&quot;fork&quot;</span>)  <span class="hljs-comment"># 设置fork创建进程</span><br></code></pre></td></tr></table></figure><p>进程的创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用Process 传入worker函数在新进程中执行</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> running in PID: <span class="hljs-subst">&#123;os.getpid()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    processes = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        p = Process(target=worker, args=(<span class="hljs-string">f&#x27;Process-<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>,))<br>        processes.append(p)<br>        p.start()<br><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> processes:<br>        p.join()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 继承Process类 ， 重写run方法创建进程</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProcess</span>(<span class="hljs-title class_ inherited__">Process</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> running in PID: <span class="hljs-subst">&#123;os.getpid()&#125;</span>&quot;</span>)<br><br>p = MyProcess(<span class="hljs-string">&quot;CustomProcess&quot;</span>)<br>p.start()<br>p.join()<br></code></pre></td></tr></table></figure><h2 id="再次理解多进程-多线程"><a href="#再次理解多进程-多线程" class="headerlink" title="再次理解多进程&#x2F;多线程"></a>再次理解多进程&#x2F;多线程</h2><p>我们可以看到多进程或者多线程在python中的实现都是通过 传入函数-启动线程&#x2F;进程对象，或者继承thread或process类，重写run方法来实现的。这本质上对应着‘通过载入函数&#x2F;对象定义创建可调度体’这一过程</p><p>同时要注意的是，Python文件中定义的线程&#x2F;进程创建过程并不能与执行后的行为直接关联。对于线程来说，创建过程是 加载Python文件到内存中，创建线程，创建后的所有线程仍然可以使用文件中定义的对象。但是需要注意线程安全问题。而对于进程来说，当进程被创建后，在系统层面上是创建了一个原解释器的副本(fork) 或者 一个新的python解释器进程（spawn）。这时新进程已经和原进程的内存空间进行了隔离。相当于将 Python文件的副本加载到了两个进程中，各自的后续修改和使用已经完全隔离，如果需要进程交互，则需要进行一些进程间通信的设计。</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程是一种异步编程设计，首先它将定义好的任务顺序执行到等待点，如何将任务注册到任务等待队列中当条件达成后，唤醒等待队列中的任务继续执行。协程不依赖系统时间片调度，而采用协作式调度模式（cooperative scheduling）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name, delay</span>):                                       <span class="hljs-comment">#定义了一个异步函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> 开始执行&quot;</span>)                                       <span class="hljs-comment">#前半部分执行</span><br>    <span class="hljs-keyword">await</span> asyncio.sleep(delay)                                       <span class="hljs-comment">#await将栈帧挂起</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> 执行结束（等待了 <span class="hljs-subst">&#123;delay&#125;</span> 秒）&quot;</span>)                     <span class="hljs-comment">#等待过后继续执行</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 并发运行多个协程</span><br>    <span class="hljs-keyword">await</span> asyncio.gather(                           <br>        task(<span class="hljs-string">&quot;任务A&quot;</span>, <span class="hljs-number">2</span>),                                      <br>        task(<span class="hljs-string">&quot;任务B&quot;</span>, <span class="hljs-number">1</span>),<br>        task(<span class="hljs-string">&quot;任务C&quot;</span>, <span class="hljs-number">3</span>)<br>    )<br><br>asyncio.run(main())<br><span class="hljs-comment"># 定义了多个协程执行。</span><br><span class="hljs-comment"># 其执行过程为 taskA , taskB, taskC 被python解释器解释,按次序执行,执行到await后被挂起,注册到事件循环的“挂起任务队列”中</span><br></code></pre></td></tr></table></figure><h1 id="多任务处理的局限性"><a href="#多任务处理的局限性" class="headerlink" title="多任务处理的局限性"></a>多任务处理的局限性</h1><h2 id="多线程的问题-线程安全问题"><a href="#多线程的问题-线程安全问题" class="headerlink" title="多线程的问题- 线程安全问题"></a>多线程的问题- 线程安全问题</h2><p>多线程可以提高程序被执行的效率，但是在经过CPU执行后回写的过程中，因为线程是共享内存资源的，所以会存在资源的写入问题。</p><p>程序的实际运行过程并非简单的执行-写入。而是分步骤：</p><ul><li>加载内存器中的值到寄存器</li><li>寄存器执行运算，返回运算结果</li><li>将运算结果写回内存</li></ul><p>而在多个线程执行时，如果都对同一块内存进行处理，这个结果是不可预知的，会出现：</p><ul><li>加载内存器中的值到寄存器（线程1）</li><li>寄存器执行运算，返回运算结果（线程1）</li><li>CPU资源被抢占，发生上下文切换，切换至线程2执行</li><li>加载内存器中的值到寄存器（线程2）</li><li>寄存器执行运算，返回运算结果（线程2）</li><li>将运算结果写回内存，线程2退出，切换至线程1执行</li><li>将运算结果写回内存（线程1）</li></ul><p>这可能导致数据被覆盖，造成操作丢失（即‘写冲突’）</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>锁是一种由操作系统定义的同步原语。保护了一个线程在访问内存时，将其他尝试获取该资源的线程阻塞，直到处理资源的线程释放它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">count1</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num</span>):<br>        <span class="hljs-variable language_">self</span>.lock = threading.Lock()<br>        <span class="hljs-variable language_">self</span>.num = num<br>a = count1(<span class="hljs-number">0</span>)<br>test_max = <span class="hljs-number">10000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">count_t, <span class="hljs-built_in">max</span></span>):<br>    <span class="hljs-keyword">while</span> count_t.num &lt; <span class="hljs-built_in">max</span>:                <br>        time.sleep(<span class="hljs-number">0.001</span>)<br>        count_t.lock.acquire()<br>        <span class="hljs-keyword">if</span> count_t.num &gt;= <span class="hljs-built_in">max</span> :<br>            count_t.lock.release()<br>            <span class="hljs-keyword">break</span><br>        count_t.num += <span class="hljs-number">1</span><br>        count_t.lock.release()<br>session1 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread1&quot;</span>,args=(a,test_max))<br>session2 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread2&quot;</span>,args=(a,test_max))<br>session3 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread3&quot;</span>,args=(a,test_max))<br>session4 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread4&quot;</span>,args=(a,test_max))<br>session5 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread5&quot;</span>,args=(a,test_max))<br><br>session1.start()<br>session2.start()<br>session3.start()<br>session4.start()<br>session5.start()<br><br>session1.join()<br>session2.join()<br>session3.join()<br>session4.join()<br>session5.join()<br></code></pre></td></tr></table></figure><p>还有如信号量，允许设置当前最多可以执行的线程数量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">sem_t</span> = threading.<span class="hljs-built_in">Semaphore</span>(<span class="hljs-number">1</span>)<br><span class="hljs-type">sem_t</span>.<span class="hljs-built_in">acquire</span>()  # 请求信号量<br><span class="hljs-type">sem_t</span>.<span class="hljs-built_in">release</span>()  # 释放信号量<br><br></code></pre></td></tr></table></figure><p>以及一些其他的用来保证线程安全的设计</p><h1 id="多线程问题-数据通信"><a href="#多线程问题-数据通信" class="headerlink" title="多线程问题 - 数据通信"></a>多线程问题 - 数据通信</h1><p>对于多个进程来说，因为每个进程的管理的资源是相互独立的，所以就不存在执行结果被其他进程覆盖的可能性。但是又会出现另一个问题，因为即使多个进程之间的操作是互相独立的，不同进程间需要通过一些方法进行数据传递，才能完成通信。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列是通过定义了一个数据结构，在两个进程间完成收发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>(<span class="hljs-params">q</span>):<br>    q.put(<span class="hljs-string">&quot;你好&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;收到：&quot;</span>, q.get())<br><br>q = Queue()<br>Process(target=producer, args=(q,)).start()<br>Process(target=consumer, args=(q,)).start()<br><br></code></pre></td></tr></table></figure><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道定义了点对点的 进程间通信方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Pipe<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">conn</span>):<br>    conn.send(<span class="hljs-string">&quot;hello&quot;</span>)<br>    conn.close()<br><br>parent_conn, child_conn = Pipe()<br>Process(target=worker, args=(child_conn,)).start()<br><span class="hljs-built_in">print</span>(parent_conn.recv())<br><br></code></pre></td></tr></table></figure><h3 id="一些共享内存页-映射表-比如Value-Array或者SharedMemory"><a href="#一些共享内存页-映射表-比如Value-Array或者SharedMemory" class="headerlink" title="一些共享内存页&#x2F;映射表 比如Value,Array或者SharedMemory"></a>一些共享内存页&#x2F;映射表 比如Value,Array或者SharedMemory</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Value, Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">v</span>):<br>    v.value += <span class="hljs-number">1</span><br><br>v = Value(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># &#x27;i&#x27; = int           # 实际上是直接使用了内核中的内存存储了这个变量</span><br>p = Process(target=add, args=(v,))<br>p.start()<br>p.join()<br><span class="hljs-built_in">print</span>(v.value)<br><br></code></pre></td></tr></table></figure><h3 id="基于系统的文件描述符-缓冲结构"><a href="#基于系统的文件描述符-缓冲结构" class="headerlink" title="基于系统的文件描述符&#x2F;缓冲结构"></a>基于系统的文件描述符&#x2F;缓冲结构</h3><p>文件： 一个进程向系统写入文件，另一个进程接收文件并读取</p><p>Socket： 套接字，通过网络协议栈转发</p><p>不过实现原理都是基于操作系统中的一些内存映射机制，或者实现在内核内的缓存机制来完成的。任务处理设计整体的使用场景较为复杂，且很多都依赖于实际场景的设计实现，后期再进一步扩充这一部分内容。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 V 模块与库</title>
    <link href="/2025/04/16/Python%E7%BC%96%E7%A8%8B-V-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%BA%93/"/>
    <url>/2025/04/16/Python%E7%BC%96%E7%A8%8B-V-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>在Python中，是以模块进行代码组织的。单独的python文件，由多个python文件组成的文件夹。都可以作为模块导入其他文件中，这样在其他文件中定义的函数或者类就可以在当前文件中进行使用，方便程序设计人员更好的组织整个工程的结构。</p><p>一些导入模块的方式 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Person <span class="hljs-keyword">import</span> Person                    <span class="hljs-comment">#从Person.py模块中导入Person类</span><br><span class="hljs-keyword">from</span> Anmial <span class="hljs-keyword">import</span> Dog                       <span class="hljs-comment">#从Anmial文件夹中导入Dog模块</span><br><span class="hljs-keyword">from</span> Anmial.Dog <span class="hljs-keyword">import</span> dog                   <span class="hljs-comment">#从Anmial文件夹的Dog模块中导入dog类</span><br><span class="hljs-keyword">from</span> Anmial.Cat <span class="hljs-keyword">import</span> cat <span class="hljs-keyword">as</span> mimi           <span class="hljs-comment">#从Anmial文件夹的cat模块中导入cat类,并设计别名 mimi</span><br></code></pre></td></tr></table></figure><h1 id="库"><a href="#库" class="headerlink" title="库"></a>库</h1><p>一些被设计好的Python文件模块被称为库，即一个提供特定功能的python 函数&#x2F;类仓库</p><p>库通常分为两种:</p><p>随Python一起安装的，提供了一些核心功能的库 被称为官方库，通常存储在</p><p>Python\Python313\Lib</p><p>一些优秀的，可以提供扩展功能的 被称为第三方库，通常存储在</p><p>Python\Python313\Lib\site-packages</p><h2 id="第三方库可以通过pip-的python库管理工具来安装"><a href="#第三方库可以通过pip-的python库管理工具来安装" class="headerlink" title="第三方库可以通过pip 的python库管理工具来安装"></a>第三方库可以通过pip 的python库管理工具来安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install requests                      <span class="hljs-comment"># 安装requests库</span><br>pip uninstall requests                    <span class="hljs-comment"># 卸载requests库</span><br>pip <span class="hljs-built_in">list</span>                                  <span class="hljs-comment"># 查询已安装的python第三方库</span><br></code></pre></td></tr></table></figure><h1 id="官方库"><a href="#官方库" class="headerlink" title="官方库"></a>官方库</h1><p>介绍一些比较常用的官方库</p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>time库主要用来获取unix时间，以及执行暂停</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>time.time()                               <span class="hljs-comment"># 获取当前的unix时间</span><br>time.strftime(<span class="hljs-string">&quot;%Y %m %d -%H:%M:%S&quot;</span>)  <span class="hljs-comment"># 按照给定的字符串格式输出时间，默认将当前unix时间按格式输出</span><br>time.strptime(<span class="hljs-string">&quot;2017-12-08:5-32-11&quot;</span>,<span class="hljs-string">&quot;%Y-%m-%d:%H-%M-%S&quot;</span>)) <span class="hljs-comment"># 将接收到的时间字符拆分位元组</span><br>time.sleep(<span class="hljs-number">1</span>)                         <span class="hljs-comment"># 休眠时间 传入秒</span><br></code></pre></td></tr></table></figure><h2 id="os"><a href="#os" class="headerlink" title="os"></a>os</h2><p>os库提供了一些基于当前操作系统的操作，也提供了多种向系统终端执行命令的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.mkdir()               <span class="hljs-comment">#创建文件夹</span><br>os.chdir()               <span class="hljs-comment">#修改当前路径</span><br>os.getcwd()              <span class="hljs-comment">#获取当前的路径</span><br>os.system(<span class="hljs-string">&quot;dir&quot;</span>)         <span class="hljs-comment">#向系统发送命令</span><br></code></pre></td></tr></table></figure><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>json 库是用于json文件的处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hello.json&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f :<br>    content1 = json.load(f)<br><span class="hljs-comment"># 直接加载文件到python</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hello.json&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f :<br>    content2 = f.read()<br>    content2 = json.loads(content2)<br><span class="hljs-comment"># 将字符串解析为dict </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;goodbye.json&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f :<br>    json.dump(content1, f)<br><span class="hljs-comment"># 将字符串解析为json写入文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;goodby2e.json&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f :<br>    json.dump(content2,f,indent=<span class="hljs-number">4</span>)<br> <span class="hljs-comment"># 直接向文件对象中写入</span><br></code></pre></td></tr></table></figure><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><p>re是用于对文本进行正则表达式匹配</p><p>正则表达式是一种字符匹配规则，通过一些通配符的组合来达成筛选符合结构规则的数据</p><p>一些常用的通配规则</p><p>[0-9] [\d]  匹配所有0-9的整数字符</p><p>. 匹配任意字符</p><p>.*匹配一个到多个任意字符</p><p>[a-z] 匹配小写字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>a = <span class="hljs-string">&quot;456jaoijgeio123feqagvbjm&quot;</span><br><br><span class="hljs-built_in">print</span>(re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;[1-9]&#123;3&#125;&quot;</span>,a ).group(<span class="hljs-number">0</span>))  <span class="hljs-comment"># 通过.group 获取匹配到的文本</span><br>d = re.finditer(<span class="hljs-string">&quot;[1-9]&#123;3&#125;&quot;</span>,a )           <span class="hljs-comment"># 使用finditer会会的一个匹配对象的可迭代对象</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d :<br>    <span class="hljs-built_in">print</span>(i.group())                     <span class="hljs-comment"># 访问可迭代对象</span><br></code></pre></td></tr></table></figure><h2 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a>argparse</h2><p>argpare 库 允许自定义参数，并对传入的参数进行解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><br><span class="hljs-comment"># 创建 ArgumentParser 对象</span><br>parser = argparse.ArgumentParser(description=<span class="hljs-string">&quot;Simple calculator&quot;</span>)<br><br><span class="hljs-comment"># 添加参数</span><br>parser.add_argument(<span class="hljs-string">&quot;--x&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;First integer&quot;</span>)<br>parser.add_argument(<span class="hljs-string">&quot;--y&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Second integer&quot;</span>)<br>parser.add_argument(<span class="hljs-string">&quot;--op&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&quot;add&quot;</span>, choices=[<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-string">&quot;sub&quot;</span>, <span class="hljs-string">&quot;mul&quot;</span>, <span class="hljs-string">&quot;div&quot;</span>], <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Operation&quot;</span>)<br><br><span class="hljs-comment"># 解析参数</span><br>args = parser.parse_args()<br><br><span class="hljs-comment"># 执行运算</span><br><span class="hljs-keyword">if</span> args.op == <span class="hljs-string">&quot;add&quot;</span>:<br>    result = args.x + args.y<br><span class="hljs-keyword">elif</span> args.op == <span class="hljs-string">&quot;sub&quot;</span>:<br>    result = args.x - args.y<br><span class="hljs-keyword">elif</span> args.op == <span class="hljs-string">&quot;mul&quot;</span>:<br>    result = args.x * args.y<br><span class="hljs-keyword">elif</span> args.op == <span class="hljs-string">&quot;div&quot;</span>:<br>    result = args.x / args.y<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br><br><span class="hljs-comment">#示例</span><br><br>python calc.py --x <span class="hljs-number">3</span> --y <span class="hljs-number">5</span> --op add <br><span class="hljs-comment"># 执行3+5 ，并返回结果</span><br></code></pre></td></tr></table></figure><h2 id="configparser"><a href="#configparser" class="headerlink" title="configparser"></a>configparser</h2><p>configparser库用于对 配置文件（.ini）进行读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">例如 ：<br>[database]<br>host = localhost<br>port = <span class="hljs-number">3306</span><br>user = root<br>password = <span class="hljs-number">123456</span><br><br>[logging]<br>level = DEBUG<br>logfile = app.log<br><br><span class="hljs-keyword">import</span> configparser<br><br><span class="hljs-comment"># 创建配置解析器</span><br>config = configparser.ConfigParser()<br><br><span class="hljs-comment"># 读取配置文件</span><br>config.read(<span class="hljs-string">&quot;config.ini&quot;</span>)<br><br><span class="hljs-comment"># 获取具体值</span><br>host = config.get(<span class="hljs-string">&quot;database&quot;</span>, <span class="hljs-string">&quot;host&quot;</span>)<br>port = config.getint(<span class="hljs-string">&quot;database&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>)<br>log_level = config.get(<span class="hljs-string">&quot;logging&quot;</span>, <span class="hljs-string">&quot;level&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Database host: <span class="hljs-subst">&#123;host&#125;</span>&quot;</span>)       <span class="hljs-comment"># localhost</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Database port: <span class="hljs-subst">&#123;port&#125;</span>&quot;</span>)       <span class="hljs-comment"># 3306</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Log level: <span class="hljs-subst">&#123;log_level&#125;</span>&quot;</span>)      <span class="hljs-comment"># DEBUG</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 IV 数据与函数扩展</title>
    <link href="/2025/04/15/Python%E7%BC%96%E7%A8%8B-IV-%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95/"/>
    <url>/2025/04/15/Python%E7%BC%96%E7%A8%8B-IV-%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<p><em>python中，定义了一些有用的特性帮助编程人员丰富功能的处理过程</em></p><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>在 类设计思想中 有一条开闭原则 “对扩展开放，对修改关闭”。 在前面的内容中，我们已经讨论过一些 python对于封装特性的处理。 这里的装饰器就是用于对已定义类进行功能扩展的一种方法。</p><p>如property 通过为方法装饰property,可以将方法伪装成属性调用，而不是直接对类中的属性进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.__name = name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.__name<br><span class="hljs-meta">    @name.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.__name = name<br>        <br>        <br>preson1 = person(<span class="hljs-string">&quot;wang&quot;</span>)<br><span class="hljs-built_in">print</span>(preson1.name)<br><span class="hljs-comment"># output wang</span><br>preson1.name = <span class="hljs-string">&quot;zhao&quot;</span><br><span class="hljs-built_in">print</span>(preson1.name)<br><span class="hljs-comment"># output zhao</span><br></code></pre></td></tr></table></figure><p>由这个例子可以看出，通过@property ，并未对原始类进行修改，但是对它最终行为产生了影响</p><h2 id="如何定义一个装饰器"><a href="#如何定义一个装饰器" class="headerlink" title="如何定义一个装饰器"></a>如何定义一个装饰器</h2><p>装饰器的本质是定义一个函数 接收一个函数作为参数， 并在函数内部再定义一个函数，将接收进来的参数在该函数内执行，最终返回该函数</p><p>因为之前讨论过 “__call__” 方法在接收参数这方面和函数一致，所以有两种定义方法</p><p>装饰器的基础定义 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_hello</span>(<span class="hljs-params">func</span>):                              <span class="hljs-comment"># 定义装饰函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wapper</span>(<span class="hljs-params">*args ,**kwargs</span>) :                 <span class="hljs-comment"># 定义内部函数, 在这一层接收原函数的参数</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello user&quot;</span>)                   <span class="hljs-comment"># 执行函数前的预处理</span><br>            func(*args ,**kwargs)                 <span class="hljs-comment"># 函数执行 </span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;goodbye user&quot;</span>)                 <span class="hljs-comment"># 函数结束</span><br>    <span class="hljs-keyword">return</span> wapper                                 <span class="hljs-comment"># 将构建的函数作为返回值</span><br><br><span class="hljs-meta">@add_hello                                        </span><span class="hljs-comment"># 将装饰器添加在函数定义上</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base_function</span>(<span class="hljs-params">parameter</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;this is a parmeter <span class="hljs-subst">&#123;parameter&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this is a base function&quot;</span>) <br><br><br>base_function(<span class="hljs-string">&quot;hello&quot;</span>)<br><br><span class="hljs-comment"># 执行 </span><br><span class="hljs-comment"># hello user                                      # 预处理</span><br><span class="hljs-comment"># this is a parmeter hello                        # 函数代码块执行</span><br><span class="hljs-comment"># this is a base function                         # 函数代码块执行</span><br><span class="hljs-comment"># goodbye user                                    # 结束</span><br><br></code></pre></td></tr></table></figure><p>扩展1 : 装饰器本身也可以接收参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*outter_args,**outter_kwargs</span>):            <span class="hljs-comment"># 定义装饰函数，这一层接收装饰器参数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_hello</span>(<span class="hljs-params">func</span>):                          <span class="hljs-comment"># 定义内部函数, 这一层接收函数</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wapper</span>(<span class="hljs-params">*args ,**kwargs</span>) :             <span class="hljs-comment"># 定义实际的装饰器函数, 接收函数的变量</span><br>                <span class="hljs-built_in">print</span>(outter_args[<span class="hljs-number">0</span>])             <span class="hljs-comment"># 打印接收到的装饰器参数</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello user&quot;</span>)               <span class="hljs-comment"># 预处理</span><br>                func(*args ,**kwargs)             <span class="hljs-comment"># 函数执行</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;goodbye user&quot;</span>)             <span class="hljs-comment"># 结束</span><br>        <span class="hljs-keyword">return</span> wapper                             <span class="hljs-comment"># 返回装饰器函数</span><br>    <span class="hljs-keyword">return</span> add_hello                              <span class="hljs-comment"># 返回外层函数</span><br><br><span class="hljs-meta">@add(<span class="hljs-params"><span class="hljs-string">&quot;hi&quot;</span></span>)                                        </span><span class="hljs-comment"># 添加带参装饰器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base_function</span>(<span class="hljs-params">parameter</span>):                     <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;this is a parmeter <span class="hljs-subst">&#123;parameter&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this is a base function&quot;</span>) <br><br><br>base_function(<span class="hljs-string">&quot;hello&quot;</span>)                    <br><br><span class="hljs-comment"># 输出                                             </span><br><span class="hljs-comment"># hi                                              # 接收到的装饰器参数</span><br><span class="hljs-comment"># hello user                                      # 预处理</span><br><span class="hljs-comment"># this is a parmeter hello                        # 函数代码执行</span><br><span class="hljs-comment"># this is a base function                         # 函数代码执行</span><br><span class="hljs-comment"># goodbye user                                    # 结束</span><br></code></pre></td></tr></table></figure><p>扩展2：装饰器装饰在类上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*outter_args,**outter_kwargs</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_hello</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wapper</span>(<span class="hljs-params">*args ,**kwargs</span>) :<br>                <span class="hljs-built_in">print</span>(outter_args[<span class="hljs-number">0</span>])<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello user&quot;</span>)<br>                m = func(*args ,**kwargs)         <span class="hljs-comment"># 主要要将实例创建的对象返回，这里执行的实际上是对象的初始化</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;goodbye user&quot;</span>)<br>                <span class="hljs-keyword">return</span> m <br>        <span class="hljs-keyword">return</span> wapper<br>    <span class="hljs-keyword">return</span> add_hello<br><br><span class="hljs-meta">@add(<span class="hljs-params"><span class="hljs-string">&quot;hi&quot;</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;class person is on initing&quot;</span>)<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self,message</span>):<br>        <span class="hljs-built_in">print</span>(message)<br><br>p = person()<br>p(<span class="hljs-string">&quot;hello&quot;</span>)<br><br><span class="hljs-comment"># 输出                                             </span><br><span class="hljs-comment"># hi                                              # 打印接收到的装饰器参数</span><br><span class="hljs-comment"># hello user                                      # 预处理</span><br><span class="hljs-comment"># class person is on initing                      # 类调用</span><br><span class="hljs-comment"># goodbye user                                    # 结束</span><br><span class="hljs-comment"># hello                                           # 实例的调用</span><br></code></pre></td></tr></table></figure><p>装饰器是一种语法糖，其本质是通过多层嵌套函数实现的运行时函数增强机制。</p><p>顺序是 定义函数传入装饰器参数-定义函数传入函数-定义函数传入原函数参数-定义函数传入原函数。然后再逐层返回，另外就是用到了python的作用域机制，即定义的内部函数对外部的局部变量是可以访问的</p><p>扩展3 ：使用类定义装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">add</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):                      <span class="hljs-comment"># 接收的装饰器 参数 相当于执行了初始化</span><br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self,func</span>):                      <span class="hljs-comment"># 接收函数</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wapper</span>(<span class="hljs-params">*args,**kwargs</span>):               <span class="hljs-comment"># 接收函数的参数</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name)                      <span class="hljs-comment"># 获取到的实例属性</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello user&quot;</span>)                   <span class="hljs-comment"># 预处理</span><br>            func(*args)                           <span class="hljs-comment"># 执行函数</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;goodby user&quot;</span>)                  <span class="hljs-comment"># 结束</span><br>        <span class="hljs-keyword">return</span> wapper                             <span class="hljs-comment"># 返回函数</span><br><br><span class="hljs-meta">@add(<span class="hljs-params"><span class="hljs-string">&quot;codfish&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base_function</span>(<span class="hljs-params">parameter</span>):                     <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;this is a parmeter <span class="hljs-subst">&#123;parameter&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this is a base function&quot;</span>) <br><br>base_function(<span class="hljs-string">&quot;base_parameter&quot;</span>)<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-comment"># codfish                                         # 接收到的装饰器参数</span><br><span class="hljs-comment"># hello user                                      # 预处理</span><br><span class="hljs-comment"># this is a parmeter base_parameter               # 函数执行</span><br><span class="hljs-comment"># this is a base function                         # 函数执行</span><br><span class="hljs-comment"># goodby user                                     # 结束</span><br></code></pre></td></tr></table></figure><p>可以看到以类作为装饰器的大体逻辑是一致的 无非就是 函数和参数传入位置发生了变化</p><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>迭代器是一种让创建的实例获得如列表或者元组等结构一样，允许使用for 循环遍历整个数据结构中的元素的特性。其本质是通过实现两个魔术方法实现的 “__iter__” 和 “__next__”</p><p>“__iter__” 会返回一个可迭代对象</p><p>“__next__” 则是会获取可迭代对象中的下一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">num_group</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.num = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.num+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.num &gt; <span class="hljs-number">10</span> :<br>            <span class="hljs-keyword">raise</span> StopIteration<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.num<br>    <br><br>a = num_group()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a))                                   <span class="hljs-comment"># 既可以通过next(a) 获取迭代对象中的下一个返回</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:                                      <span class="hljs-comment"># 也可以通过遍历来完成迭代对象的值遍历</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>与 通过列表中查询数据不同，Python 还提供了一个组件 yield来生成数据。</p><p>在一个函数中定义了yield关键字后，该函数被称为生成器。</p><p>当执行到该函数时，会返回一个生成器对象。这个生成器对象会保留其执行所使用的栈帧结构。</p><p>当运行到yield关键字时，会将值返回，生成器对象暂停，并完整保留当前的执行状态。当生成器对象的代码执行完毕后，生成器对象会退出等待GC回收。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">num=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>        <span class="hljs-keyword">yield</span> num                                 <span class="hljs-comment"># 声明了yield,python 会将这个函数作为生成器处理</span><br>        <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">10</span> :<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">100</span><br>        num+=<span class="hljs-number">1</span><br>        <br>b = count()                                       <span class="hljs-comment"># 执行函数返回一个生成器对象</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b :<br>    <span class="hljs-built_in">print</span>(i)                                      <span class="hljs-comment"># for 循环会持续调用生成器的 __next__() 方法，直到捕获到 StopIteration 异常，表示迭代结束。</span><br></code></pre></td></tr></table></figure><h1 id="内建的作用域设置函数-setattr-getattr-delattr"><a href="#内建的作用域设置函数-setattr-getattr-delattr" class="headerlink" title="内建的作用域设置函数 setattr,getattr,delattr"></a>内建的作用域设置函数 setattr,getattr,delattr</h1><p>在python中命名空间决定了一个对象都可以访问哪些对象，而通过setattr,getattr和delattr 可以直接对对象的命名空间进行操作，来修改对象的访问权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>:                                     <span class="hljs-comment"># 定义一个类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):                      <span class="hljs-comment"># 重写构造函数</span><br>        <span class="hljs-variable language_">self</span>.name = name <br><br><span class="hljs-built_in">delattr</span>(person,<span class="hljs-string">&quot;__init__&quot;</span>)                        <span class="hljs-comment"># 删除person类中的构造函数定义</span><br>someone = person()                                <span class="hljs-comment"># 对象正常创建</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>:                                     <span class="hljs-comment"># 定义空累 person</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):                          <span class="hljs-comment"># 定义全局方法 __init__</span><br>    <span class="hljs-variable language_">self</span>.name = name <br><span class="hljs-built_in">setattr</span>(person,<span class="hljs-string">&quot;__init__&quot;</span>,__init__)               <span class="hljs-comment"># 将方法设置到person的命名空间</span><br>c = person(<span class="hljs-string">&quot;wang&quot;</span>)                                <span class="hljs-comment"># 正常实例化</span><br><span class="hljs-built_in">print</span>(c.name)                                     <span class="hljs-comment"># 输出 “wang”</span><br></code></pre></td></tr></table></figure><p>从这里我们可以看出 python中的类和方法的关系是松散绑定的。</p><p>并且还是实时的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>:<br>    <span class="hljs-keyword">pass</span><br>person1 = person(<span class="hljs-string">&quot;wang&quot;</span>)                          <span class="hljs-comment"># person1创建失败</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>    <span class="hljs-variable language_">self</span>.name = name <br><span class="hljs-built_in">setattr</span>(person,<span class="hljs-string">&quot;__init__&quot;</span>,__init__)<br>person2 = person(<span class="hljs-string">&quot;wang&quot;</span>)                          <span class="hljs-comment"># person2创建成功</span><br><span class="hljs-built_in">print</span>(c.name)<br></code></pre></td></tr></table></figure><p>由此我们也可以看出python 在执行阶段是逐行解释的</p><p>利用这个特性，可以对python的代码进行流程控制等操作</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 III 魔术方法</title>
    <link href="/2025/04/15/Python-%E7%BC%96%E7%A8%8B-III-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
    <url>/2025/04/15/Python-%E7%BC%96%E7%A8%8B-III-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><em>Python中用于对对象进行的一些控制和通用处理 是通过魔术方法来实现</em></p><h1 id="什么是魔术方法"><a href="#什么是魔术方法" class="headerlink" title="什么是魔术方法"></a>什么是魔术方法</h1><p>通过__function_name__ 来定义魔术方法，但是需要注意通常的魔术方法是python预置的，所以function_name通常是python中定义过的魔术方法名。</p><p>Python的魔术方法如果没有在类中进行定义，则是被隐式定义的（或者说由基类继承而来）</p><p>如最常见的__init__ 也是一个魔术方法。它发生在Python实例的构建阶段，通过__init__ 来完成对类定义属性的初始赋值 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#定义一个 类的初始化方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>) :<br> <span class="hljs-variable language_">self</span>.name = name<br></code></pre></td></tr></table></figure><p>这样 name就从一个局部变量成为一个person实例的实例属性</p><h1 id="“-new-”"><a href="#“-new-”" class="headerlink" title="“__new__”"></a>“__new__”</h1><p>不太常用，但在进行类设计过程中用到的__new__ 也是一个魔术方法，它发生在初始化之前，用于向堆中申请内存，以及对实例的创建过程进行控制，返回的是类的实例（将创建的内存空间返回），最常见的是单例模式的定义 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">knife</span> :<br>    _instance = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 类变量，保存单例实例</span><br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>      <span class="hljs-keyword">if</span> cls._instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>          <span class="hljs-comment"># 创建唯一实例</span><br>          cls._instance = <span class="hljs-built_in">super</span>(knife, cls).__new__(cls)<br>      <span class="hljs-keyword">return</span> cls._instance<br></code></pre></td></tr></table></figure><h1 id="“-str-”"><a href="#“-str-”" class="headerlink" title="“__str__”"></a>“__str__”</h1><p>“__str__”  用于重写对象的字符串打印</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name        <span class="hljs-comment"># 将打印字符定义为self.name，不然则返回person对象的内存地址</span><br><br><span class="hljs-built_in">print</span>(person(<span class="hljs-string">&quot;wang&quot;</span>))<br></code></pre></td></tr></table></figure><h1 id="“-eq-”"><a href="#“-eq-”" class="headerlink" title="“__eq__”"></a>“__eq__”</h1><p>“__eq__”等一些魔术方法，用于重新定义运算处理的逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>        <span class="hljs-variable language_">self</span>.age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.age==value.age<br><br>c = person(<span class="hljs-string">&quot;wang&quot;</span>,<span class="hljs-number">26</span>)<br>d = person(<span class="hljs-string">&quot;zhao&quot;</span>,<span class="hljs-number">26</span>)<br><span class="hljs-built_in">print</span>(c == d )<br></code></pre></td></tr></table></figure><h1 id="“-len-”"><a href="#“-len-”" class="headerlink" title="“__len__”"></a>“__len__”</h1><p>还有一些魔术方法用于处理一些内置函数的调用,当某些内置函数被调用时，实际调用的这些魔术方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>        <span class="hljs-variable language_">self</span>.age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>np = person(<span class="hljs-string">&quot;zhao&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(np))    <span class="hljs-comment">#重新定义了__len__ ,会根据方法的返回值返回，这里打印0</span><br><br></code></pre></td></tr></table></figure><h1 id="“enter-“-“-exit-”"><a href="#“enter-“-“-exit-”" class="headerlink" title="“enter “ &#x2F; “ __exit__”"></a>“<strong>enter</strong> “ &#x2F; “ __exit__”</h1><p>“<strong>enter</strong> ”&#x2F; “__exit__” 主要在使用with语句 时的会触发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyResource</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打开资源&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;释放资源&quot;</span>)<br><br><span class="hljs-keyword">with</span> MyResource() <span class="hljs-keyword">as</span> r:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;处理中...&quot;</span>)<br>  <br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-comment"># 打开资源</span><br><span class="hljs-comment"># 处理中...</span><br><span class="hljs-comment"># 释放资源</span><br></code></pre></td></tr></table></figure><h1 id="“-call-”"><a href="#“-call-”" class="headerlink" title="“__call__”"></a>“__call__”</h1><p>“<strong>call__” 方法允许对象创建的实例变为可调用的，即允许向实例传入参数，使实例也可以进行一些功能的处理。__call</strong> 和 函数在传入参数执行的行为上是一致的，但是在调用和查询方面的具体实现不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">button</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,status=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-variable language_">self</span>.status = status<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.status :<br>            <span class="hljs-variable language_">self</span>.status = <span class="hljs-literal">False</span> <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the light is closed&quot;</span>)<br>        <span class="hljs-keyword">else</span> : <br>            <span class="hljs-variable language_">self</span>.status =<span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the light is on&quot;</span>)<br><br>light_button =button()        <span class="hljs-comment"># 创建button 实例</span><br>light_button()                <span class="hljs-comment"># 执行实例 status : False -&gt; True</span><br>light_button()                <span class="hljs-comment"># 执行实例 status : True -&gt; False</span><br><span class="hljs-comment"># 输出</span><br><span class="hljs-comment"># the light is on</span><br><span class="hljs-comment"># the light is closed</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 II 面向对象</title>
    <link href="/2025/04/15/Python%E7%BC%96%E7%A8%8B-II-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2025/04/15/Python%E7%BC%96%E7%A8%8B-II-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p><em>Python 是一门面向对象的语言，但是我们仍需要讨论的是 什么是<strong>面向对象</strong>？</em></p><h1 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a>什么是对象？</h1><p>在许多编程书籍和技术博客中，对象常被定义为“一个真实存在的实体”或“方法和属性的集合”。</p><p>然而，这些定义往往只停留在表层，并未真正解释“<strong>什么是对象</strong>”这一核心问题。比如，“实体”本身是什么意思？为什么属性和方法的组合可以称为一个‘对象’？带着这些问题，我们可以从设计层面重新思考对象的本质。</p><h2 id="设计层面：对象是面向目的的实体特征与行为的抽象"><a href="#设计层面：对象是面向目的的实体特征与行为的抽象" class="headerlink" title="设计层面：对象是面向目的的实体特征与行为的抽象"></a>设计层面：对象是面向目的的实体特征与行为的抽象</h2><h3 id="什么是实体？"><a href="#什么是实体？" class="headerlink" title="什么是实体？"></a>什么是实体？</h3><p>动物是不是一种实体？房屋是不是一种实体？房屋？比特币呢？笛卡尔的“我思故我在”呢？</p><p>实体并不一定是以“真实存在”作为必要条件的，实体的重要特征是“一种可描述的概念”。比如“独角兽”是一只长有犄角和翅膀的马，比如“西方的恶龙覆盖有厚厚的鳞片能够喷吐火焰”。这些概念的重点不是“真实存在”，而是“可描述”。推而广之，一些抽象概念也可以作为“实体”，比如 FIFO的队列，代理模式中的代理概念。</p><p>这样我们就可以得到实体的定义 “一种可描述的概念”（无论它是否真的存在）</p><h3 id="那么什么是对象？"><a href="#那么什么是对象？" class="headerlink" title="那么什么是对象？"></a>那么什么是对象？</h3><p>我们永远没办法将一个实体完整地用计算机语言去描述。但可以将特征和行为抽象出来，作为我们用计算机去模拟这个物体的方法。这暗含着对象设计是面向功能的，有取舍的。因为我们实际关注的不是实体到底是怎么样的，而是关注实体通过哪些特征和行为达成了我们想要的结果。当我们考虑一头牛的时候，在虚拟世界里，我们不会去考虑牛住在哪里，何时休息。考虑的是我们为了达成目的，需要”供应“什么，“产出”什么。所以我们在设计时真正构建的对象是以目的为核心，对实体特征和行为的抽象。目的是我们的最终结果，而实体的特征和行为是为了达成目的所必须的组件</p><h2 id="实现层面：对象是经过结构化组织的内存"><a href="#实现层面：对象是经过结构化组织的内存" class="headerlink" title="实现层面：对象是经过结构化组织的内存"></a>实现层面：对象是经过结构化组织的内存</h2><h3 id="内存与对象"><a href="#内存与对象" class="headerlink" title="内存与对象"></a>内存与对象</h3><p>程序员对内存和程序结构拥有近乎完全的控制权。他们可以自由地决定每一个内存地址的用途，这在空间受限的场景中显得尤为高效，可以最大限度地压榨出每一字节的潜力。但也导致了一些问题：</p><ol><li>在功能设计的初期就需要周全的考虑对象（结构体）的设计，不然会加大后期的维护，重构，新增功能的复杂度。</li><li>编程人员对程序有绝对的权限，意味着相同的功能可能会设计不同的系统来处理相同的流程，如内存分配&#x2F;回收。消息处理。对于多人开发的大型系统会增加系统的复杂度。</li></ol><p>在这一层面上，一些更现代的编程语言选择放弃了C语言的“自由“，现代系统的设计都是层次化的，当我进行上层数据的处理时，仍然要去关心最底层的内存是如何排布的显然是一个不够高效的做法。因此它们开始去预定义一些结构化的内存，从”内存交给你，你来从0开始完成系统“，到“由我提供一些基础组件，你在这个基础之上组织系统”。通过对内存块的结构化设计，将“设计-实现”的问题，变成了“组织-实现”。</p><p>另一方面因为所有基础模块是编程语言预先定义的，所以在后期使用时，作为内存-系统的中间层（如一些虚拟机程序），可以对系统中的内存使用进行更好的控制，这样既可以通过系统的管理，将已加载的功能模块灵活复用，也可以更好的提供系统级的监控管理，像垃圾回收，对象的动态加载创建等，对于更上层的编程人员来说，进行类设计，对象设计。反而是一些顺便带来的好处。</p><h3 id="那么什么是面向对象？"><a href="#那么什么是面向对象？" class="headerlink" title="那么什么是面向对象？"></a>那么什么是面向对象？</h3><p>当我们明白了对象是一种可描述的概念，并且对象设计的核心是面向功能的，以及为什么使用对象而不是直接使用内存来设计我们的系统。那么面向对象就是在设计系统时，首先完成对系统功能的抽象，将系统的实现变为多个核心对象之间的消息通信和方法调用。如：</p><ul><li>对数据进行存储和维护而设计的类，如用户类，仓库类</li><li>对数据组织结构进行抽象的类，如数据包类，工厂类</li><li>以某种操作流程为核心建模的设计的类，队列、栈</li></ul><p>通过这种方式，我们不仅构建了更具结构化的系统，同时也提升了系统的可读性、可维护性与可扩展性 —— 这正是面向对象设计的核心价值所在。</p><h1 id="谈谈Python"><a href="#谈谈Python" class="headerlink" title="谈谈Python"></a>谈谈Python</h1><p>当我们完全的理解了什么是面向对象之后，这时我们又要再回过头来，谈谈为什么Python是面向对象的。</p><h2 id="Python的对象"><a href="#Python的对象" class="headerlink" title="Python的对象"></a>Python的对象</h2><p>在我看来，Python的对象设计可以用变态来形容。在它的程序中的任何变量&#x2F;对象&#x2F;实例都是被作为结构化的内存存储在系统当中的，并且可以便捷的访问。它提供了一种怪异的自由度，像一家杂货店，仿佛在告诉你，只要你想找任何商品（对象）。都可以便捷的帮你找到，只提供对象的交付，生命周期管理，剩下的任何内容都交由你处理。</p><h2 id="作为“组织者”的我们"><a href="#作为“组织者”的我们" class="headerlink" title="作为“组织者”的我们"></a>作为“组织者”的我们</h2><p>于是，作为使用 Python 的开发者，我们不再是单纯的“编写者”，而更像是<strong>系统的组织者与行为的策划者</strong>。</p><p>我们面对的不是一块空白的内存，而是一张庞杂却灵活的工具清单——类、函数、装饰器、生成器、魔术方法、元类……Python 把构建系统所需的砖瓦都提前摆好，而我们需要做的，是以<strong>对象为基石，以功能为目标</strong>，组织它们构建出一个可运行、可维护、可理解的系统。</p><p>另外虽然面向对象提供了结构化的设计方式，但在某些场景下，简单的函数或模块化设计可能更高效，Python的灵活性允许开发者自由选择。</p><h2 id="封装，继承和多态"><a href="#封装，继承和多态" class="headerlink" title="封装，继承和多态"></a>封装，继承和多态</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装指的是 ，当对象已经被设计为一个完整的整体时，内部的一些属性或方法不再能作为公共功能提供给外界调用。在Python中表现为对方法，类的伪私有化，属性的封装和内部函数的闭包设计</p><ul><li><strong>方法和类的伪私有化</strong></li></ul><p>当将方法设置为__function_name后，执行过程中会将方法名替换为_ClassName__name,避免方法被直接调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.public_var = <span class="hljs-string">&quot;我是公开的&quot;</span><br>        <span class="hljs-variable language_">self</span>.__private_var = <span class="hljs-string">&quot;我是&#x27;私有&#x27;的&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__private_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这是&#x27;私有&#x27;方法&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>属性的封装</strong></li></ul><p>将属性设置为私有属性,通过方法调用来完成属性的设置。避免了属性直接通过”.”获取到被篡改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, score</span>):<br>        <span class="hljs-variable language_">self</span>._name = name    <span class="hljs-comment"># 使用单下划线表示不应直接访问</span><br>        <span class="hljs-variable language_">self</span>._score = score  <span class="hljs-comment"># 使用单下划线表示不应直接访问</span><br>    <br><span class="hljs-meta">    @property  </span><span class="hljs-comment"># 读取器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._name<br>    <br><span class="hljs-meta">    @property  </span><span class="hljs-comment"># 读取器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">score</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._score<br>    <br><span class="hljs-meta">    @score.setter  </span><span class="hljs-comment"># 设置器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">score</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(value, <span class="hljs-built_in">int</span>):<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;成绩必须是整数&quot;</span>)<br>        <span class="hljs-keyword">if</span> value &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> value &gt; <span class="hljs-number">100</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;成绩必须在0到100之间&quot;</span>)<br>        <span class="hljs-variable language_">self</span>._score = value<br></code></pre></td></tr></table></figure><ul><li>闭包</li></ul><p>闭包提供了一个隐藏函数内部实现，将数据在内部处理的方法，只在外部定义返回的变量，而将具体的过程放在内部进行处理，让外部无非直接访问内部的执行逻辑。python中的闭包不是典型的 OOP 封装，但它提供了类似‘数据私有性’的能力，因此可以理解为一种过程式封装形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">counter_factory</span>(<span class="hljs-params">start=<span class="hljs-number">0</span>, step=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-comment"># 在外部函数中定义的变量</span><br>    count = start<br>    <br>    <span class="hljs-comment"># 内部函数，形成闭包</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>():<br>        <span class="hljs-comment"># 使用nonlocal关键字，表明我们要修改外部函数的变量</span><br>        <span class="hljs-keyword">nonlocal</span> count<br>        <span class="hljs-comment"># 保存当前值</span><br>        current = count<br>        <span class="hljs-comment"># 更新计数</span><br>        count += step<br>        <span class="hljs-comment"># 返回计数值</span><br>        <span class="hljs-keyword">return</span> current<br>    <br>    <span class="hljs-comment"># 返回内部函数，不执行它</span><br>    <span class="hljs-keyword">return</span> counter<br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承指的是，当一个子类对父类进行继承之后，子类拥有了对父类的所有方法和属性的访问权限。(对经过私有声明的属性和方法可以以特殊形式访问到)。这就完成了is-a 的关系，继承通常用于在同一类别下子类的快速创建，以及为多态的实现提供可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_sound</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;一些声音&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;显示动物信息&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;名称：<span class="hljs-subst">&#123;self.name&#125;</span>, 年龄：<span class="hljs-subst">&#123;self.age&#125;</span>岁&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;狗类，继承自动物类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, breed</span>):<br>        <span class="hljs-comment"># 调用父类的__init__方法</span><br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        <span class="hljs-variable language_">self</span>.breed = breed  <span class="hljs-comment"># 狗的品种</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_sound</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;重写父类的方法&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;汪汪汪！&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;扩展父类的方法&quot;&quot;&quot;</span><br>        basic_info = <span class="hljs-built_in">super</span>().info()<br>        <span class="hljs-comment"># 添加子类特有的信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;basic_info&#125;</span>, 品种：<span class="hljs-subst">&#123;self.breed&#125;</span>&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wag_tail</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;子类特有的方法&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span>摇了摇尾巴&quot;</span><br><span class="hljs-comment"># 创建实例并测试</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 创建一个Animal实例</span><br>    generic_animal = Animal(<span class="hljs-string">&quot;小动物&quot;</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(generic_animal.info())<br>    <span class="hljs-built_in">print</span>(generic_animal.make_sound())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">30</span>)<br>    <span class="hljs-comment"># 创建一个Dog实例</span><br>    my_dog = Dog(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;金毛&quot;</span>)<br>    <span class="hljs-comment"># 测试继承的属性和方法</span><br>    <span class="hljs-built_in">print</span>(my_dog.info())  <span class="hljs-comment"># 使用重写的方法</span><br>    <span class="hljs-built_in">print</span>(my_dog.make_sound())  <span class="hljs-comment"># 使用重写的方法</span><br>    <span class="hljs-built_in">print</span>(my_dog.wag_tail())  <span class="hljs-comment"># 使用子类特有的方法</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态指的是，当一个函数接收父类型作为参数时，通过传入继承自父类的子类。调用同一个方法会得到不同的行为，在python中，因为弱类型的实现，不太好关注到多态的明显特征。因为在函数调用时，python并不是以传入的对象是否继承自某个父类，而是以传入的对象是否具备某种方法来进行执行。所以如果想实现更标准的多态，需要对传入的对象进行类型上的判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># 基类中的方法是抽象的</span><br><br><span class="hljs-comment"># 定义子类，继承自Animal</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;汪汪!&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;喵喵!&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;嘎嘎!&quot;</span><br><br><span class="hljs-comment"># 多态函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">animal_sound</span>(<span class="hljs-params">animal</span>):<br>    <span class="hljs-comment"># 同一个函数调用会根据对象的实际类型产生不同的结果</span><br>    <span class="hljs-comment"># 这就是多态的体现</span><br>    <span class="hljs-keyword">return</span> animal.speak()<br><br><span class="hljs-comment"># 创建不同动物的实例</span><br>dog = Dog()<br>cat = Cat()<br>duck = Duck()<br><br><span class="hljs-comment"># 使用相同的函数调用不同类型的对象</span><br><span class="hljs-built_in">print</span>(animal_sound(dog))  <span class="hljs-comment"># 输出: 汪汪!</span><br><span class="hljs-built_in">print</span>(animal_sound(cat))  <span class="hljs-comment"># 输出: 喵喵!</span><br><span class="hljs-built_in">print</span>(animal_sound(duck))  <span class="hljs-comment"># 输出: 嘎嘎!</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Devops</title>
    <link href="/2025/04/15/Devops/"/>
    <url>/2025/04/15/Devops/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试技术</title>
    <link href="/2025/04/15/%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
    <url>/2025/04/15/%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>测试技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP</title>
    <link href="/2025/04/15/HTTP/"/>
    <url>/2025/04/15/HTTP/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2025/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2025/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2025/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tcp/ip</title>
    <link href="/2025/04/15/tcp-ip/"/>
    <url>/2025/04/15/tcp-ip/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>TCP/IP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP/IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 I 基础</title>
    <link href="/2025/04/14/Python%E7%BC%96%E7%A8%8B-I/"/>
    <url>/2025/04/14/Python%E7%BC%96%E7%A8%8B-I/</url>
    
    <content type="html"><![CDATA[<h1 id="Python编程-I"><a href="#Python编程-I" class="headerlink" title="Python编程 I"></a>Python编程 I</h1><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br><span class="hljs-comment"># 函数(&quot;传入参数&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h3><p>我们可以设置一个变量名再将其打印 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">message = <span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><h3 id="命名要求和风格"><a href="#命名要求和风格" class="headerlink" title="命名要求和风格"></a>命名要求和风格</h3><p>变量名接受的字符 ： 大小写字母，数字，下划线。数字不能在首位出现</p><p>风格：</p><p>大驼峰式(常用于类定义，函数定义) ：  ThisIsAVariableDefine</p><p>小驼峰式(常用于类定义，函数定义) ：  thisIsAVariableDefin</p><p>下划线风格(常用于变量声明)  :  my_variable</p><p>变量名尽可能起得容易理解。</p><h3 id="变量是什么"><a href="#变量是什么" class="headerlink" title="变量是什么"></a>变量是什么</h3><p>在我们的最初讨论中，变量是一个通过映射与实际对象建立关系的标识符。</p><p>当然目前可以理解为一个标签用来寻找我们真正想处理的内容</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是一种python的<strong>数据类型</strong></p><p>直接就可以定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&quot;string&quot;</span><br>str1.upper()  <span class="hljs-comment"># 将字符串转换为全部大写，输出 ： STRING</span><br>str1.lower()  <span class="hljs-comment"># 将字符串转换为全部小写，输出 ： string</span><br>str1.title()  <span class="hljs-comment"># 将字符串转换为首字母大写，输出 ：String</span><br></code></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>python 提供多种字符串的输出方式</p><p>同时可以使用’\char’ 来在字符串中添加转义字符</p><p>\t 制表符</p><p>\n 换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">StringA = <span class="hljs-string">&quot;a&quot;</span><br>StringB = <span class="hljs-string">&quot;b&quot;</span><br>StringC = <span class="hljs-string">&quot;c&quot;</span><br>StringD = <span class="hljs-string">&quot;d&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello %s&quot;</span> % StringA)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello &quot;</span>+StringB)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hello <span class="hljs-subst">&#123;StringC&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(StringD))<br><span class="hljs-comment"># 输出 ：</span><br><span class="hljs-comment"># hello a</span><br><span class="hljs-comment"># hello b</span><br><span class="hljs-comment"># hello c</span><br><span class="hljs-comment"># hello d</span><br></code></pre></td></tr></table></figure><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>整数</p><p>python支持数学运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a,b,c,d = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <br><span class="hljs-built_in">print</span>(a+b)      <span class="hljs-comment"># 加法 输出 3</span><br><span class="hljs-built_in">print</span>(a-b)      <span class="hljs-comment"># 减法 输出 -1</span><br><span class="hljs-built_in">print</span>(b*c)      <span class="hljs-comment"># 乘法 输出 6</span><br><span class="hljs-built_in">print</span>(c/d)      <span class="hljs-comment"># 除法 输出3/4</span><br><span class="hljs-built_in">print</span>(d//<span class="hljs-number">4</span>)     <span class="hljs-comment"># 整除  输出1</span><br><span class="hljs-built_in">print</span>(d%c)      <span class="hljs-comment"># 取余数 输出1</span><br><span class="hljs-built_in">print</span>(d**b)     <span class="hljs-comment"># 计算平方 输出 16</span><br></code></pre></td></tr></table></figure><p>浮点数</p><p>同样支持数学运算，在有浮点数参与的计算种会被自动转化为浮点数</p><p>常量</p><p>Python 中通常用大写来标记一个量为常量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">MAX_VALUE = <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>python 使用两种风格的注释  单行注释 #  和  多行注释 “”” … “””</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单行注释</span><br><span class="hljs-string">&quot;&quot;&quot; 多行</span><br><span class="hljs-string">注释 &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表是一种能够容纳多个元素的数据结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">lst1 = <span class="hljs-built_in">list</span>()  <span class="hljs-comment">#显式创建空列表</span><br>lst2 = []      <span class="hljs-comment">#隐式创建空列表</span><br></code></pre></td></tr></table></figure><p>python中的列表不会限制列表中元素的类型，也不会限制整个列表的长度</p><p>一些通用函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">lst1 = <span class="hljs-built_in">list</span>()<br>lst2 = [<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>]<br> <br>lst1.append(<span class="hljs-number">1</span>)                 <span class="hljs-comment"># 向列表中添加元素              [1]</span><br>lst1.append(<span class="hljs-string">&quot;hi&quot;</span>)              <span class="hljs-comment"># 添加其他类型的元素            [1, &#x27;hi&#x27;]</span><br>lst1.remove(<span class="hljs-number">1</span>)                 <span class="hljs-comment"># 删除列表中的元素              [&#x27;hi&#x27;]</span><br>lst1.extend(lst2)              <span class="hljs-comment"># 将lst2中的元素添加到lst1      [&#x27;hi&#x27;, 2, 5, 8, 9, 7, 6, 2, 3, 9]</span><br>lst1.reverse()                 <span class="hljs-comment"># 反转列表                      [9, 3, 2, 6, 7, 9, 8, 5, 2, &#x27;hi&#x27;]</span><br>lst1.pop()                     <span class="hljs-comment"># 弹出末尾元素赋值给变量         [9, 3, 2, 6, 7, 9, 8, 5, 2]</span><br></code></pre></td></tr></table></figure><h1 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h1><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>对于想读取列表中的每个元素，可以使用for in 来进行读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst2 :       <span class="hljs-comment"># i作为临时变量使用用来获取lst2中的元素</span><br>    <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot;,&quot;</span>)      <span class="hljs-comment"># end=  设置输出的结束符</span><br><span class="hljs-comment"># 输出 2,5,8,9,7,6,2,3,9,</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(lst2)):  <span class="hljs-comment"># 也可以使用range来完成循环，每次执行会将i增加1</span><br>    <span class="hljs-built_in">print</span>(lst2[i],end=<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-comment"># 输出 2,5,8,9,7,6,2,3,9,</span><br><span class="hljs-comment"># range的范围是前闭后开</span><br><span class="hljs-built_in">range</span> 还可以按步长输出<br></code></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>当需要创建类似 [1,2,3,4,5,6,7,8,9]的列表时，可以直接通过for循环创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">lst3 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>,<span class="hljs-number">10</span>)] <br><span class="hljs-comment"># 创建列表 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></code></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>如果想获取列表中的部分元素可以通过下标对某位置的元素进行获取 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lst3[<span class="hljs-number">0</span>]    <span class="hljs-comment"># 获取第一个元素 即0</span><br>lst3[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]  <span class="hljs-comment"># 获取第3-5个元素的子列表</span><br>lst3[::-<span class="hljs-number">1</span>] <span class="hljs-comment"># 获取反转列表</span><br></code></pre></td></tr></table></figure><h2 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h2><p>有些情况下需要对列表进行复制操作，这时需要考虑是否会对源列表有影响</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lst0 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]                   <span class="hljs-comment">#定义了一个列表的数据结构</span><br>lst4 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,lst0]      <span class="hljs-comment">#添加到另一个列表中</span><br>lst5 = lst4[::]                  <span class="hljs-comment">#复制列表lst4到lst5</span><br>lst5[-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>                  <span class="hljs-comment">#修改5中的lst0</span><br><span class="hljs-built_in">print</span>(lst0)                      <span class="hljs-comment"># 输出[2,2,3] 发现lst0也被改动了。</span><br></code></pre></td></tr></table></figure><p>这是因为python中 复制列表时，传递过去的都是变量的值，但是对于引用变量（可以理解为包含多个元素的变量，如列表），返回的是该变量的存储位置。所以当修改该变量中的值的时候，还是对原对象进行了修改。所以在复制列表等引用数据类型的时候需要:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lst0 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>lst4 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,lst0]<br>lst6 = copy.deepcopy(lst4)        <span class="hljs-comment">#遍历元素，判断存在引用类型的元素，创建新引用元素加入列表</span><br>lst6[-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(lst0)<br></code></pre></td></tr></table></figure><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>在python中，元组是对于一组不可变数据的类型称呼，被定义的元组在后续的使用中不可以被修改</p><p>这种设计是对应一些数据的只读属性，防止后期被篡改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = （<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>）           <span class="hljs-comment">#使用圆括号定义元组</span><br>tuple2 = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>               <span class="hljs-comment">#隐式定义元组</span><br>tuple3 = <span class="hljs-number">1</span>,                  <span class="hljs-comment">#或者使用,定义只有一个元素的元组</span><br></code></pre></td></tr></table></figure><p>元组也支持前述中列表的遍历，切片操作。只是不能修改其中的数据，这是由解释器控制的</p><h1 id="判断表达式"><a href="#判断表达式" class="headerlink" title="判断表达式"></a>判断表达式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a =<span class="hljs-string">&#x27;c&#x27;</span><br><span class="hljs-keyword">if</span> a == <span class="hljs-string">&#x27;a&#x27;</span> :                            <span class="hljs-comment"># 判断条件1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s is here&quot;</span> % a)<br><span class="hljs-keyword">elif</span> a == <span class="hljs-string">&#x27;b&#x27;</span>  :                      <span class="hljs-comment"># 判断条件2 可以跟多个else if + 判断条件</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> is here&quot;</span>)<br><span class="hljs-keyword">else</span> :                                   <span class="hljs-comment"># 其他情况</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; is here&quot;</span>.<span class="hljs-built_in">format</span>(a))<br></code></pre></td></tr></table></figure><h2 id="判断条件"><a href="#判断条件" class="headerlink" title="判断条件"></a>判断条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">!= 不等于<br>== 等于<br><span class="hljs-keyword">is</span> 用于引用变量判断是否是同一个对象<br><span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> 用于引用变量判断是否非同一个对象<br><span class="hljs-keyword">in</span> 判断某元素是否中是否包含该元素<br><span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> 判断某元素是否不含有某元素<br><span class="hljs-literal">True</span>  值为真<br><span class="hljs-literal">False</span> 值为假<br><br></code></pre></td></tr></table></figure><h2 id="多条件处理"><a href="#多条件处理" class="headerlink" title="多条件处理"></a>多条件处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">and</span>  <span class="hljs-string">&quot;且&quot;</span> 拼接多个条件判断<br><span class="hljs-keyword">or</span>   <span class="hljs-string">&quot;或&quot;</span> 拼接多个条件判断<br><br></code></pre></td></tr></table></figure><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典是一种键值对的结构 通过对应的键可以进行值的访问。</p><p>字典可以接收任意的元素作为键和值，但是要保证键的唯一性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = <span class="hljs-built_in">dict</span>()                        <span class="hljs-comment">#显式创建</span><br>dict2 = &#123;<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;                <span class="hljs-comment">#隐式创建</span><br>dict3 = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;codfish&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;28&quot;</span>&#125;<br>dict3.update(dict2)                   <span class="hljs-comment">#将dict2中的键值对更新到dict3中</span><br>dict3[<span class="hljs-string">&quot;name&quot;</span>]                         <span class="hljs-comment">#获取键name对应的值</span><br>dict3[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;someone&quot;</span>             <span class="hljs-comment">#设置修改name键对应的值</span><br>dict3.get(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;default value&quot;</span>)     <span class="hljs-comment">#获取一个键的值,不存在对应键的时候返回默认值</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dict3.keys():                <span class="hljs-comment">#遍历打印所有的键</span><br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dict3.values():              <span class="hljs-comment">#遍历打印所有的值</span><br>    <span class="hljs-built_in">print</span>(j)<br><br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> dict3.items() :            <span class="hljs-comment">#通过.items 获取键和值</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;your <span class="hljs-subst">&#123;k&#125;</span> is <span class="hljs-subst">&#123;v&#125;</span>&quot;</span>)<br> <br></code></pre></td></tr></table></figure><h1 id="接收输入"><a href="#接收输入" class="headerlink" title="接收输入"></a>接收输入</h1><p>python中使用“input” 接收数据，返回的是一个字符串类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input your age&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(age))   <span class="hljs-comment"># type返回变量的类型， 输出为&lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>除了使用for 之外，还可以使用while进行循环控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">counter = <span class="hljs-number">10</span><br><span class="hljs-keyword">while</span> counter &gt; <span class="hljs-number">3</span> :<br><span class="hljs-keyword">if</span> counter == <span class="hljs-number">6</span> :<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;current is %d &quot;</span> % counter)          <br><span class="hljs-keyword">elif</span> counter == <span class="hljs-number">7</span> :<br>  <span class="hljs-keyword">continue</span>                          <span class="hljs-comment">#跳过本次循环,循环继续</span><br><span class="hljs-keyword">elif</span> counter == <span class="hljs-number">4</span> :<br><span class="hljs-keyword">break</span>                             <span class="hljs-comment">#跳出while循环执行后续工作流</span><br><span class="hljs-keyword">else</span> :<br>  <span class="hljs-built_in">print</span>(counter) <br>  <br>输出:<br>PS D:\Software&gt; python .\anmial.py<br><span class="hljs-number">10</span><br><span class="hljs-number">9</span><br><span class="hljs-number">8</span><br>current <span class="hljs-keyword">is</span> <span class="hljs-number">6</span> <br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数是一段执行特定功能的代码块，当某些功能在多个位置重复使用时，使用函数可以提高代码复用，提升编程效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python 中的函数定义</span><br><span class="hljs-keyword">def</span>              <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name</span>):<br><span class="hljs-comment">#函数声明保留字  函数名   参数信息</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hello <span class="hljs-subst">&#123;name&#125;</span>&quot;</span>)<br> <br>say_hello(<span class="hljs-string">&quot;codfish&quot;</span>)  <span class="hljs-comment">#调用函数 输出 hello codfish</span><br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>python的 参数支持灵活的定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>()    <span class="hljs-comment"># 无参情况</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name</span>)  <span class="hljs-comment"># 传入一个参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name,time=<span class="hljs-string">&quot;evening&quot;</span></span>) <span class="hljs-comment"># 传入多个参数，且有默认值的参数，有默认值的参数需要位于最后。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name,*args</span>)  <span class="hljs-comment"># 接收name 和多个参数，返回一个元组arg给函数处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name,**kwargs</span>)  <span class="hljs-comment"># 将传入的指定变量名的参数作为一个字典变量kwargs 传入函数处理</span><br>  <br></code></pre></td></tr></table></figure><h2 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h2><p>形式参数 是用来说明函数功能，作为替代符，使得函数功能的定义完整</p><p>实际参数 是真正需要被处理的参数。</p><p>在这里  实参同样要注意 值和引用的问题，当传入引用对象的时候，函数 操作的仍然是你的实际对象。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>python 可以接收任意类型的值作为返回值返回给接收它的变量，也可以返回多个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_test</span>():                 <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>              <span class="hljs-comment">#也可以接收多个值的返回，本质是元组的映射</span><br>a,b,c,d,e = return_test()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>在面向对象编程中，类是用来描述一类具有相同功能或组件的事物的抽象模板，通过在类中定义属性和方法（类中的函数），来完成对事物功能的抽象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>          <span class="hljs-comment"># 定义类 Dog</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):        <span class="hljs-comment"># __init__ 用于为后续创建的狗的实例赋值</span><br><span class="hljs-variable language_">self</span>.name = name         <br><span class="hljs-variable language_">self</span>.age = age<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> is barking&quot;</span>)  <span class="hljs-comment"># 小狗具备的功能</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">walk</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> is walking&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>类作为抽象事务的模板，那么由类创造的实例就是对具体事务在计算机上的抽象，通过对类的调用，我们可以得到该类的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dog =  Dog(<span class="hljs-string">&quot;旺柴&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)   <span class="hljs-comment"># 创建了一只名叫旺柴的3岁的狗</span><br><span class="hljs-built_in">print</span>(dog.name)          <span class="hljs-comment"># 打印狗的名字</span><br>dog.bark()               <span class="hljs-comment"># 执行狗叫的方法</span><br></code></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>在python中，使用open&#x2F;close关键字来进行 文件的操作开闭操作</p><p>通过encoding 指定文件的字符集</p><p>通过 ‘rwa’ 指定文件的读写模式 r 只读 w只写 a追加 r以字节序读取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> content :       <span class="hljs-comment">#打开文件,使用with时 不需要使用close关闭这个作用域结束后会自动关闭文件</span><br>    a = content.read()                                    <span class="hljs-comment">#读取文件内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))                                        <span class="hljs-comment">#文件内容默认以字符串类型被读取</span><br></code></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>在程序执行过程中，接收到了不符合预期的参数等一些情况会使得程序产生异常。我们可以通过</p><p>try-except-finally 来完成异常的捕捉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span> :<br>    <span class="hljs-number">8</span>/<span class="hljs-number">0</span>                                     <span class="hljs-comment"># 触发除数异常</span><br><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e  :            <span class="hljs-comment"># 将异常接收为一个异常对象，可以进行打印或者返回</span><br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;it&#x27;s done&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的加载过程与内存模型</title>
    <link href="/2025/04/14/Python%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/04/14/Python%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python的加载过程与内存模型-CPython实现"><a href="#Python的加载过程与内存模型-CPython实现" class="headerlink" title="Python的加载过程与内存模型(CPython实现)"></a>Python的加载过程与内存模型(CPython实现)</h1><h1 id="Python的加载过程"><a href="#Python的加载过程" class="headerlink" title="Python的加载过程"></a>Python的加载过程</h1><p><img src="https://i.111666.best/image/vJcRKHO4PyR94YrSC7j0IS.png" alt="image"></p><h2 id="编译时"><a href="#编译时" class="headerlink" title="编译时"></a>编译时</h2><p>Python 与其他语言一样也具有编译过程 ，将Python文件转换为字节码文件供解释器进行下一步的处理。进行语义分析，语法分析，具象生成树，抽象生成树，最终将文件转换为字节码。</p><p>对对象的预处理:</p><p>对于左值（变量名）会在编译期被加入名称表（<code>co_names</code>），并加入到 一个名称表元组中。</p><p>对于右侧创建的变量，根据类型的不同，加入到常量表中。</p><p>将全局变量替换为名称表中的索引，而索引映射了对应的常量对象指针</p><p>在python文件中的变量声明”a &#x3D; 3”  变成了 “名字表中‘a’的内存地址  指向了常量表中‘3’的内存地址”</p><p>为了操作更加方便灵活，类定义中的类变量则直接被装载到类的命名空间进行管理。</p><p>将局部变量替换为局部变量表+插槽</p><h2 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h2><p>将python字节码文件加载到虚拟机。不同的python组件会执行不同的装载行为。最终将对象加载到命名空间，进行执行。</p><h1 id="组件加载过程"><a href="#组件加载过程" class="headerlink" title="组件加载过程"></a>组件加载过程</h1><p>Python的加载逻辑是将文件中定义的内容 转换为 各个层级维护的命名空间中的映射关系。进行调用时 通过查询命名空间，找到对应的待执行内容(类，方法，变量)，执行。</p><h2 id="组件和类的加载"><a href="#组件和类的加载" class="headerlink" title="组件和类的加载:"></a>组件和类的加载:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    x = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val</span>):<br>        <span class="hljs-variable language_">self</span>.val = val<br></code></pre></td></tr></table></figure><p>等价于 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">namespace = &#123;&#125;<br><span class="hljs-built_in">exec</span>(code_object_for_class_A, <span class="hljs-built_in">globals</span>(), namespace)<br>A = <span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;A&quot;</span>, (<span class="hljs-built_in">object</span>,), namespace)<br></code></pre></td></tr></table></figure><p>组件和类的加载过程：</p><p>定义一个了命名空间（内存申请）</p><p>使用code_object 加载类A中的元素定义到命名空间</p><p>再在外层将类与该命名空间绑定（实际上也将A添加到外部的命名空间）</p><p>cpython 使用code_object这个对象实现了向类中添加其所属元素的加载过程</p><h2 id="函数-方法"><a href="#函数-方法" class="headerlink" title="函数&#x2F;方法"></a>函数&#x2F;方法</h2><p>方法中同样会创建一个code object 对象，但是不会将变量-引用转换成k-v模式加入到函数的命名空间，而是作为字节码存储在命名空间中，当方法被执行时，函数会调用字节码文件执行，创建一系列的参数元组，然后通过索引→key→value 的调用方式查询待处理的对象</p><h2 id="实例的创建"><a href="#实例的创建" class="headerlink" title="实例的创建"></a>实例的创建</h2><p>在python中创建一个实例 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br><span class="hljs-variable language_">self</span>.name = name <br><br>nobody = person(<span class="hljs-string">&quot;nobody&quot;</span>)<br><span class="hljs-comment"># 1. 隐式调用了__new__ 方法 person.__new__(person,name), </span><br><span class="hljs-comment"># 查询类命名空间中的__new__new 方法并执行,接收参数传入，是因为在实例构造期间，传入的参数并不一定只是进行字段的初始化，</span><br><span class="hljs-comment"># 也可能参与实例的构造过程</span><br><span class="hljs-comment"># 2. 调用__init__ 方法， person.__init__(self,name),</span><br><span class="hljs-comment"># 查询定义的__init__方法，接收传入参数并对对象中的字段进行初始化。</span><br></code></pre></td></tr></table></figure><h2 id="函数的执行"><a href="#函数的执行" class="headerlink" title="函数的执行"></a>函数的执行</h2><p>在python中调用一个方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello &quot;</span>, name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;variable in func say_hello &quot;</span>+say_hello.__code__.co_varnames[<span class="hljs-number">0</span>])<br>    say_hello(<span class="hljs-string">&quot;codfish&quot;</span>)<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-comment">#&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000016CCC307850&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;d:\\Software\\age.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;say_hello&#x27;: &lt;function say_hello at 0x0000016CCC2DFB00&gt;&#125;</span><br><span class="hljs-comment"># 对应 外部的locals()</span><br><span class="hljs-comment"># variable in func say_hello name</span><br><span class="hljs-comment"># 对应 print(&quot;variable in func say_hello &quot;+say_hello.__code__.co_varnames[0]) 打印say_hello</span><br><span class="hljs-comment"># 函数中的常量池信息0</span><br><span class="hljs-comment">#&#123;&#x27;name&#x27;: &#x27;codfish&#x27;&#125;</span><br><span class="hljs-comment"># 函数内部的locals()</span><br><span class="hljs-comment"># hello  codfish</span><br><span class="hljs-comment"># 函数的最终打印</span><br><span class="hljs-comment"># 因为python 函数中的对象表是会多次创建的，所以函数中保留的是code_object 字节码，每次都</span><br><span class="hljs-comment"># 会执行创建对象表的过程。</span><br><span class="hljs-comment"># 1. 打印本地的命名空间</span><br><span class="hljs-comment"># 2. 查询函数中的参数信息-&gt;name</span><br><span class="hljs-comment"># 3. 执行say_hello，可以从命名空间中查询到say_hello并执行</span><br><span class="hljs-comment"># 4. 打印内部的命名空间，可以看到name与codfish 进行了绑定</span><br><span class="hljs-comment"># 5. 执行print打印name，内部是用索引去查询name对应的实参，但仍然维护了一个命名空间</span><br></code></pre></td></tr></table></figure><h2 id="方法的执行"><a href="#方法的执行" class="headerlink" title="方法的执行"></a>方法的执行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">someone</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.name=name<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__dict__)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello &quot;</span>, <span class="hljs-variable language_">self</span>.name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())            <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;variable in func say_hello &quot;</span>+someone.say_hello.__code__.co_varnames[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;someone&#x27;s namespace:&quot;</span>,someone.__dict__)<br>    someone(<span class="hljs-string">&#x27;codfish&#x27;</span>).say_hello()<br> <span class="hljs-comment"># 输出</span><br> <span class="hljs-comment"># &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;someone&#x27;, &#x27;__firstlineno__&#x27;: 1&#125;</span><br> <span class="hljs-comment"># Python 的类定义和函数定义都是“执行过程”，不是声明语法。</span><br> <span class="hljs-comment"># 当解释器遇到 class MyClass:，它就立即执行整个类体中的代码，从上到下顺序执行。</span><br> <span class="hljs-comment"># def 代表执行加载这个函数定义到命名空间中</span><br> <span class="hljs-comment"># &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;someone&#x27;, &#x27;__firstlineno__&#x27;: 1, &#x27;__init__&#x27;: &lt;function someone.__init__ at 0x000001C90E681440&gt;, &#x27;say_hello&#x27;: &lt;function someone.say_hello at 0x000001C90E6E4720&gt;&#125;</span><br> <span class="hljs-comment"># 执行过程 只会执行类声明次一级的代码，函数定义的代码块会作为字节码被存储到__code__中</span><br> <span class="hljs-comment"># &#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x000001C90E6F7850&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;d:\\Software\\age.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;someone&#x27;: &lt;class &#x27;__main__.someone&#x27;&gt;&#125;</span><br> <span class="hljs-comment"># 全局命名空间</span><br> <span class="hljs-comment"># variable in func say_hello self</span><br> <span class="hljs-comment"># 查询到的第一个参数，对于方法第一个参数为self.</span><br> <span class="hljs-comment"># someone&#x27;s namespace: &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__firstlineno__&#x27;: 1, &#x27;__init__&#x27;: &lt;function someone.__init__ at 0x000001C90E681440&gt;, &#x27;say_hello&#x27;: &lt;function someone.say_hello at 0x000001C90E6E4720&gt;, &#x27;__static_attributes__&#x27;: (&#x27;name&#x27;,), &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;someone&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;someone&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span><br> <span class="hljs-comment"># 装载后的类命名空间</span><br> <span class="hljs-comment"># &#123;&#x27;self&#x27;: &lt;__main__.someone object at 0x000001C90E5E70E0&gt;, &#x27;name&#x27;: &#x27;codfish&#x27;&#125;</span><br> <span class="hljs-comment"># 初始化方法__init__的命名空间</span><br> <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;codfish&#x27;&#125;</span><br> <span class="hljs-comment"># 实例的命名空间</span><br> <span class="hljs-comment"># &#123;&#x27;self&#x27;: &lt;__main__.someone object at 0x000001C90E5E70E0&gt;&#125;</span><br> <span class="hljs-comment"># 由函数维护的命名空间</span><br> <span class="hljs-comment"># hello  codfish</span><br> <span class="hljs-comment"># 最终打印</span><br></code></pre></td></tr></table></figure><h2 id="命名空间的查询"><a href="#命名空间的查询" class="headerlink" title="命名空间的查询"></a>命名空间的查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">locals</span>() <span class="hljs-comment"># 当前作用域（动态）当前栈帧中的局部变量字典查看当前函数、类体、模块的局部变量</span><br><span class="hljs-built_in">globals</span>() <span class="hljs-comment"># 当前模块级作用域当前模块的全局变量字典查看模块的全局变量、函数、类等</span><br>__dict__ <span class="hljs-comment"># 对象自身的属性字典显式定义的变量（不含继承/内建属性）查看对象自己的属性</span><br><span class="hljs-built_in">dir</span>()     <span class="hljs-comment"># 对象+继承链所有可访问属性名的列表（字符串）补全、IDE 自动提示、调试</span><br></code></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>python是通过命名空间来管理每个对象的访问权限的。</p><p>所以调用都遵循着 当调用函数，类时，查询当前层的命名空间，检索对应的函数名，类名信息。找到对应的函数，类的位置，进行执行。</p><p>那么我们可以看看python是如何实现多态的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">anmial</span> :<br><span class="hljs-comment"># 创建基类，定义eat方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&quot; eat nothing, still hungry&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">duck</span>(<span class="hljs-title class_ inherited__">anmial</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name=<span class="hljs-string">&quot;duck&quot;</span></span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br><span class="hljs-comment">#        super().__init__(name)</span><br><span class="hljs-comment"># 定义子类继承基类，传递name 子类的self.name 和 使用super().__init__(name)对父类的self</span><br><span class="hljs-comment"># 进行初始化效果相同，说明self仍然是同一个实例（内存对象）。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span>(<span class="hljs-title class_ inherited__">anmial</span>) :<br><span class="hljs-comment"># 定义子类猫，重写eat方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name=<span class="hljs-string">&quot;cat&quot;</span></span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&quot; eat some fish&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span>(<span class="hljs-title class_ inherited__">anmial</span>):<br><span class="hljs-comment"># 定义子类狗，重新eat方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name=<span class="hljs-string">&quot;dog&quot;</span></span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&quot; eat some bones&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ghost</span> :<br><span class="hljs-comment"># 定义普通类鬼，具有相同的方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name=<span class="hljs-string">&quot;ghost&quot;</span></span>) :<br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name+ <span class="hljs-string">&quot; eat some blood&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br><span class="hljs-comment"># 定义普通类人，不具备eat方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name=<span class="hljs-string">&quot;person&quot;</span></span>) :<br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">want_eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name+ <span class="hljs-string">&quot; eat some noodls&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">toldAnmialToEat</span>(<span class="hljs-params">anmial</span>):<br><span class="hljs-comment"># 定义了一个函数接收传入的基类，调用eat方法</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    anmial.eat()<br><br>toldAnmialToEat(duck())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(duck))<br>toldAnmialToEat(cat())<br>toldAnmialToEat(dog())<br>toldAnmialToEat(ghost())<br>toldAnmialToEat(person())<br><span class="hljs-comment"># 执行</span><br><span class="hljs-comment"># &#123;&#x27;anmial&#x27;: &lt;__main__.duck object at 0x000002A92EFA6F90&gt;&#125;</span><br><span class="hljs-comment"># duck eat nothing, still hungry</span><br><span class="hljs-comment"># duck 未实现自己的方法所以使用了父类的方法</span><br><span class="hljs-comment"># [&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__firstlineno__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__getstate__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__static_attributes__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;eat&#x27;]</span><br><span class="hljs-comment"># duck 由父类继承了eat 方法</span><br><span class="hljs-comment"># &#123;&#x27;anmial&#x27;: &lt;__main__.cat object at 0x000002A92EFA6F90&gt;&#125;</span><br><span class="hljs-comment"># cat eat some fish</span><br><span class="hljs-comment"># 调用了cat的方法</span><br><span class="hljs-comment"># &#123;&#x27;anmial&#x27;: &lt;__main__.dog object at 0x000002A92EFA6F90&gt;&#125;</span><br><span class="hljs-comment"># dog eat some bones</span><br><span class="hljs-comment"># 调用了dog的方法</span><br><span class="hljs-comment"># &#123;&#x27;anmial&#x27;: &lt;__main__.ghost object at 0x000002A92EFA6F90&gt;&#125;</span><br><span class="hljs-comment"># ghost eat some blood</span><br><span class="hljs-comment"># 调用了ghost的方法</span><br><span class="hljs-comment"># &#123;&#x27;anmial&#x27;: &lt;__main__.person object at 0x000002A92EFA6F90&gt;&#125;</span><br><span class="hljs-comment"># Traceback (most recent call last):</span><br><span class="hljs-comment"># person 不具备此方法，报错</span><br></code></pre></td></tr></table></figure><p>可以看出 </p><p>1.子类会从父类那里继承它没有重新的方法。</p><p>2.当子类重写了方法后，会执行子类的方法</p><ol start="3"><li><p>非子类但具有相同方法的类也可以正确执行，说明函数的定义只是声明式约束，不会进行类的检查</p></li><li><p>当传入的类不具备方法时，会报错。由3，4说明还是根据命名空间中的功能列表来进行的函数执行</p></li></ol><h1 id="变量，引用，类型和对象"><a href="#变量，引用，类型和对象" class="headerlink" title="变量，引用，类型和对象"></a>变量，引用，类型和对象</h1><p>通过分析，我们可以看到Python中的所有对象都是由命名空间来组织和维护的。</p><p><strong>变量</strong> ： python中的变量名在字节码中是以名称索引的形式出现，并存于名称表中。</p><p><strong>引用</strong> ： 引用在python中表现为一种“间接”的引用，它不是通过标识符→实际对象的地址指针→获取实际的对象。而是通过创建了标识符对象→标识符加入name表→实际对象加入常量表→通过命名空间完成映射绑定。再通过命名空间中的k-v关系查询到实际被调用的对象。</p><p><strong>类型</strong> ： Python是弱类型语言的正是基于这种引用的实现来构建的。虽然在底层Python的对象依然是存在类型的，但键与值之间的关系是基于映射关系，而不是指针。由于键值映射的动态性，类型检查在运行时进行，名称本身不携带类型信息</p><p><strong>对象</strong> ：同样是因为这种引用的构建，Python中的一切皆对象实施的更加彻底——- 变量名也是作为对象存储的。这样的设计让我们不必深入底层才能获取到类，函数的创建信息，只需要找到其中的映射关系，就能对类或者函数中的属性进行操作修改。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java的加载过程与内存模型</title>
    <link href="/2025/04/12/Java%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/04/12/Java%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java的加载过程与内存模型"><a href="#Java的加载过程与内存模型" class="headerlink" title="Java的加载过程与内存模型"></a>Java的加载过程与内存模型</h1><h1 id="Java加载组件"><a href="#Java加载组件" class="headerlink" title="Java加载组件"></a>Java加载组件</h1><p><img src="https://i.111666.best/image/ZCNHcuLH23gTkkNwTwgjfA.png" alt="image"></p><h2 id="编译时"><a href="#编译时" class="headerlink" title="编译时"></a>编译时</h2><p>进行java文件的编译，最终转换为字节码文件</p><h2 id="类加载时"><a href="#类加载时" class="headerlink" title="类加载时"></a>类加载时</h2><ul><li>类加载器(ClassLoader)：负责加载类文件</li><li>加载(Loading)：读取类文件并创建二进制表示</li><li>连接(Linking)：分为三个子步骤<ul><li>验证：确保类文件结构正确</li><li>准备：为静态变量分配内存并设置初始值</li><li>解析：将符号引用转换为直接引用</li></ul></li><li>初始化(Initialization)：执行类的静态初始化代码</li><li>使用(Using)：程序中使用类</li><li>卸载(Unload)：类被JVM卸载</li></ul><h2 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h2><ul><li>JVM运行时内存区：<ul><li>元空间(Metaspace)：存储类信息、常量和静态变量</li><li>堆(Heap)：存储对象实例和数组</li><li>虚拟机栈(JVM Stack)：包含方法调用的栈帧和局部变量表</li><li>程序计数器(PC Register)：记录当前执行的指令地址</li></ul></li><li>执行引擎(Execution Engine)：<ul><li>解释器(Interpreter)：逐条解释执行字节码</li><li>JIT编译器：将热点代码编译为本地机器码，提高执行效率</li><li>垃圾回收器(GC)：自动管理内存，回收不再使用的对象</li><li>本地方法接口(JNI)：调用本地方法</li><li>本地方法库：C&#x2F;C++实现的方法和操作系统API</li></ul></li><li>执行过程：<ul><li>加载类的字节码</li><li>解析字节码</li><li>根据代码热度决定使用解释执行或JIT编译</li><li>执行生成的机器码</li><li>必要时调用系统API</li><li>自动进行内存管理和垃圾回收</li></ul></li></ul><h1 id="Java代码块的存储位置和加载流程"><a href="#Java代码块的存储位置和加载流程" class="headerlink" title="Java代码块的存储位置和加载流程"></a>Java代码块的存储位置和加载流程</h1><h2 id="类加载流程"><a href="#类加载流程" class="headerlink" title="类加载流程"></a>类加载流程</h2><h3 id="编译时-1"><a href="#编译时-1" class="headerlink" title="编译时"></a>编译时</h3><p>将 Java 源文件编译为字节码文件（.class），期间编译器为每个方法建立局部变量表，<br>使用插槽（slot）索引来管理变量引用和原始类型的存储。</p><p>编译器根据方法类型（静态&#x2F;成员方法）和变量来源（this、参数、局部变量）决定变量在局部变量表中的排布顺序。</p><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><p>类加载器将 class 文件加载到 JVM，并在元空间中构建 class 元信息（如 instanceKlass）<br>将字段、方法、常量池、接口等信息组织到元空间结构中。</p><p>静态方法、final 方法、private 方法在加载时即可确定其调用目标，无需在运行时通过虚方法表进行分派。</p><p>JVM 构建字段布局信息（field layout），根据字段描述符计算字段在类和对象中的偏移地址。</p><p>同时将类常量池中的符号引用解析为直接引用（符号引用 → 具体类、字段或方法的内存地址）。</p><h3 id="运行时-1"><a href="#运行时-1" class="headerlink" title="运行时"></a>运行时</h3><p>当类首次被主动使用（如 new 操作）时，如果尚未初始化，则触发 <code>&lt;clinit&gt;</code> 静态初始化流程。</p><p>JVM 执行静态变量初始化和静态代码块，初始化类的元数据。</p><p>实例化时，JVM 查询该类实例所需的内存布局，并向堆内存申请对应大小空间。</p><p>JVM 在执行构造函数前，会先执行成员变量的初始化表达式和实例初始化块。</p><p>这些初始化代码由编译器编译时插入到 <code>&lt;init&gt;</code> 构造方法的开头。</p><p>构造函数执行时，按局部变量表加载 this 引用和方法参数，进入对象初始化流程。</p><p>JVM  根据字段描述符数组的偏移量以及继承结构，为每个成员变量分配偏移地址，按偏移将数据写入堆中对象实例。</p><p>构造函数执行完成后，将对象的引用（oop 指针）返回给调用者，通常压入操作数栈以供后续使用。</p><p>调用实例方法时，JVM 通过对象中的类元数据指针访问虚方法表（vtable），<br>按方法签名找到对应方法的偏移并执行。</p><p>static,final,private方法 在前期进行了静态绑定，不需要查询虚方法表，通过静态绑定（确定方法地址）执行</p><h2 id="Java成员组件的存储位置和执行时间点"><a href="#Java成员组件的存储位置和执行时间点" class="headerlink" title="Java成员组件的存储位置和执行时间点"></a>Java成员组件的存储位置和执行时间点</h2><table><thead><tr><th>类型</th><th>定义方式</th><th>执行时间点</th><th>存储位置</th><th>描述</th></tr></thead><tbody><tr><td>静态常量</td><td><code>static final</code> 修饰字段</td><td>编译期内联 或 类加载时</td><td>字节码中为常量池引用；可能内联进调用类</td><td>编译器常将其内联优化，若为编译期常量，不依赖类初始化</td></tr><tr><td>静态变量</td><td><code>static</code> 修饰的字段</td><td>类加载时，初始化阶段</td><td>存储在元空间</td><td>所有对象共享；存在于元空间中</td></tr><tr><td>静态初始化块</td><td><code>static &#123; ... &#125;</code></td><td>类加载时，静态变量之后</td><td>存储在元空间</td><td>通常用于复杂的静态初始化逻辑</td></tr><tr><td>实例变量</td><td>普通字段（无 <code>static</code>）</td><td>对象创建时，构造器之前</td><td>存储在堆上</td><td>每个对象独立拥有</td></tr><tr><td>初始化块</td><td><code>&#123; ... &#125;</code> （非 static）</td><td>对象创建时，实例变量之后、构造器之前</td><td>存储在堆上</td><td>主要用于多个构造器共享的初始化代码</td></tr><tr><td>构造器</td><td><code>ClassName(...) &#123; ... &#125;</code></td><td>对象创建时，初始化块之后</td><td>存储在元空间</td><td>实例构造函数，用于完成对象的最终初始化</td></tr><tr><td>方法（成员方法）</td><td><code>public void method() &#123; ... &#125;</code></td><td>被调用时执行</td><td>存储在元空间</td><td>普通成员函数</td></tr><tr><td>静态方法</td><td><code>public static void method() &#123;&#125;</code></td><td>被调用时执行</td><td>存储在元空间</td><td>不依赖对象即可调用的方法</td></tr></tbody></table><h1 id="类模板在内存中的布局"><a href="#类模板在内存中的布局" class="headerlink" title="类模板在内存中的布局"></a>类模板在内存中的布局</h1><p><img src="https://i.111666.best/image/eYQb80Ibcp8dKCKG71JnVA.png" alt="image"></p><h2 id="变量，引用，类型和对象"><a href="#变量，引用，类型和对象" class="headerlink" title="变量，引用，类型和对象"></a>变量，引用，类型和对象</h2><p>通过上面的分析，我们可以看出 ：</p><p>Java 文件中声明的变量名，本质上是对对象的引用标识。在编译和加载过程中，它们会被转化为对具体内存位置的间接访问方式：<br>静态变量会在类加载后映射为元空间中的字段引用；<br>局部变量则被分配到局部变量表中的索引（slot），在运行时与具体对象地址建立关联。</p><p>这使我们可以重新理解 Java 的多态定义：父类类型的引用可以指向子类对象。编译器仅根据引用的静态类型进行方法合法性校验，而对象在运行时的实际类型仍然是子类。当调用实例方法时，JVM 会根据对象实际类型查找其虚方法表（vtable），以确定最终调用的具体方法实现。父类引用的作用仅在于提供一种统一的行为接口，而不关注行为的具体实现。</p><p>所以 ，在java中 ： </p><p>变量名（引用） → 编译，加载后被编译为直接引用或局部变量表中的索引</p><p>类型 → 变量的声明类型决定了其可用的操作（行为接口），而对象的实际类型由右侧的实例化过程决定，并影响运行时的动态方法分派。</p><p>对象 → 对象的存储和行为依赖于修饰词声明和对象的具体创建过程，会分布在 </p><ul><li>代码（常量数值直接嵌入）</li><li>常量池（static final 修饰的非数值类型）</li><li>元空间（静态变量）</li><li>堆（new 或反射构建的对象）</li><li>栈（局部变量）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C的加载过程与内存模型</title>
    <link href="/2025/04/11/C%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/04/11/C%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h1><h3 id="预处理→编译→汇编→链接→装载→执行"><a href="#预处理→编译→汇编→链接→装载→执行" class="headerlink" title="预处理→编译→汇编→链接→装载→执行"></a>预处理→编译→汇编→链接→装载→执行</h3><h3 id="预处理-处理以-开头的预处理指令，例如-include、-define、-ifdef-等。"><a href="#预处理-处理以-开头的预处理指令，例如-include、-define、-ifdef-等。" class="headerlink" title="预处理 : 处理以 # 开头的预处理指令，例如 #include、#define、#ifdef 等。"></a>预处理 : 处理以 <code>#</code> 开头的预处理指令，例如 <code>#include</code>、<code>#define</code>、<code>#ifdef</code> 等。</h3><ul><li>宏展开</li><li>文件包含展开</li><li>条件编译判断</li></ul><h3 id="编译-将预处理后的-C-代码转换成汇编代码。"><a href="#编译-将预处理后的-C-代码转换成汇编代码。" class="headerlink" title="编译 : 将预处理后的 C 代码转换成汇编代码。"></a>编译 : 将预处理后的 C 代码转换成汇编代码。</h3><ul><li>语法分析（解析语法结构）</li><li>语义分析（变量类型检查）</li></ul><h3 id="汇编-将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。"><a href="#汇编-将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。" class="headerlink" title="汇编 : 将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。"></a>汇编 : 将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。</h3><h3 id="链接-将一个或多个-o-文件与所需的库文件（比如标准库-libc）合并，解决函数调用、变量引用等符号地址。"><a href="#链接-将一个或多个-o-文件与所需的库文件（比如标准库-libc）合并，解决函数调用、变量引用等符号地址。" class="headerlink" title="链接 : 将一个或多个 .o 文件与所需的库文件（比如标准库 libc）合并，解决函数调用、变量引用等符号地址。"></a>链接 : 将一个或多个 <code>.o</code> 文件与所需的库文件（比如标准库 <code>libc</code>）合并，解决函数调用、变量引用等符号地址。</h3><h3 id="装载-将链接生成的可执行文件加载到内存中，准备好运行环境。"><a href="#装载-将链接生成的可执行文件加载到内存中，准备好运行环境。" class="headerlink" title="装载 : 将链接生成的可执行文件加载到内存中，准备好运行环境。"></a>装载 : 将链接生成的可执行文件加载到内存中，准备好运行环境。</h3><h3 id="执行-程序入口通常是-start-函数，由链接器提供，之后会调用-main-。"><a href="#执行-程序入口通常是-start-函数，由链接器提供，之后会调用-main-。" class="headerlink" title="执行 : 程序入口通常是 _start 函数，由链接器提供，之后会调用 main()。"></a>执行 : <strong>程序入口通常是 <code>_start</code> 函数</strong>，由链接器提供，之后会调用 <code>main()</code>。</h3><ul><li>用户编写的程序从 <code>main()</code> 开始运行。</li><li>程序执行时：<ul><li>初始化全局变量</li><li>执行 <code>main()</code> 函数</li><li>程序返回时调用 <code>exit()</code></li></ul></li></ul><h1 id="加载后的C语言内存结构"><a href="#加载后的C语言内存结构" class="headerlink" title="加载后的C语言内存结构"></a>加载后的C语言内存结构</h1><p>C语言通过链接和装载 将数据分布到一些固定的位置</p><p>.text 代码段 用于放置只读的字节码指令 .rodata 段也会放置在附近</p><p>.data 数据段 用于存放已经初始化全局变量和静态变量</p><p>.bss 段            用于存放未初始化和初始化为0的全局变量和静态变量。</p><p>堆区               用于存放程序执行后动态分配的内存</p><p><img src="https://i.111666.best/image/QRNWyUFQUutntsad2LJIex.png" alt="image"></p><h1 id="变量，指针与类型"><a href="#变量，指针与类型" class="headerlink" title="变量，指针与类型"></a>变量，指针与类型</h1><p>在 C 语言中，变量的声明意味着：编译器会在内存中为这个变量分配一块空间，并为它分配一个可供程序访问的“名称”或“标签”。这个标签（变量名）本质上是对该内存地址的一种<strong>静态引用方式</strong>。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> c = <span class="hljs-number">0</span> ; <br><span class="hljs-comment">// 为变量 c 分配了一个 int 类型（通常是 4 字节）的空间，并初始化为 0</span><br> <br><span class="hljs-type">char</span> a[] = &#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><span class="hljs-comment">// 分配了一个大小为 sizeof(a) 的字符数组，内存上是一块连续空间，存储了具体的字符数据</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">person</span>&#123;</span><br><span class="hljs-type">int</span> age ;<br><span class="hljs-comment">//char name[10]; 无法赋值</span><br><span class="hljs-type">char</span>* name ;<br>&#125; person;<br><span class="hljs-comment">// 为结构体变量 h 分配了一块空间，包含了 int（age）和指针（name）两个成员</span><br>person h;<br>h.name = <span class="hljs-string">&quot;codfish&quot;</span>;<br><span class="hljs-comment">//  找到结构体中的char指针类型结构name, 将该指针指向“codfish” 的地址</span><br>h.age = <span class="hljs-number">12</span>;<br><span class="hljs-comment">//  找到结构体中的intl类型age, 向其所在的内存地址写入“12”</span><br></code></pre></td></tr></table></figure><p>变量名可以看作是对该内存空间的一个<strong>静态引用标签</strong>，通过它我们可以对这块内存进行读写。</p><p>在这个视角下，“<strong>地址</strong>”本身也可以看作是一种值，而<strong>指针类型</strong>就是<strong>专门用于存储地址值的类型</strong>。指针变量的值是一个地址，通过这个地址可以间接访问另一个变量或内存区域。因此，指针本质上是一种<strong>间接寻址的变量类型</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">3</span> ;   <span class="hljs-comment">// 开辟了一块内存空间，存储的值为3</span><br><span class="hljs-type">int</span> * p = &amp;a ;  <span class="hljs-comment">// 开辟了一块内存空间, 存储的值为a的存储地址</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*p);  <span class="hljs-comment">//  打印 p 指向地址中存储的值，即 a</span><br></code></pre></td></tr></table></figure><p>在 C 语言中，<strong>左值（lvalue）</strong>代表的是一个可寻址、可写入的内存位置，是程序运行中频繁操作的对象。而<strong>右值（rvalue）</strong>通常是一个临时值，不具备可寻址性，用完即弃。</p><p>例如：</p><ul><li>变量 <code>a</code> 是左值，你可以取地址 <code>&amp;a</code>，也可以对它赋值。</li><li>表达式 <code>a + 1</code> 是右值，它是一个计算结果，不能取地址。</li><li>字符串 <code>&quot;codfish&quot;</code> 是一个右值常量，其内容在编译期就固定，通常被保存在 <strong>只读数据段（.rodata）</strong> 中。</li></ul><p>因此：</p><blockquote><p>左值是程序运行时可操作的内存实体，而右值更多地体现为临时性和只读性。其中某些右值（如字符串字面量、常量表达式）确实会保存在 .rodata 段中，但大多数右值只是临时计算结果，可能存在于寄存器中，或者根本不会在物理内存中长期保留。</p></blockquote><p>最后回到上文，在结构体中如果定义的char name[10]；则无法使用字符串直接完成初始化。因为这时 结构体中定义的是一个 10个字节长度 char 数组，而接收的右值是一个字符指针。两边的类型并不能匹配，所以无法完成赋值，只能对该数组中的每一位分别进行赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">human.name[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;C&#x27;</span>;<br>human.name[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;o&#x27;</span>;<br>human.name[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;d&#x27;</span>;<br>human.name[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;f&#x27;</span>;<br>human.name[<span class="hljs-number">4</span>] = <span class="hljs-string">&#x27;i&#x27;</span>;<br>human.name[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;s&#x27;</span>;<br>human.name[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>human.name[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>  <br><span class="hljs-comment">// 输出</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ myc]# ./test<br>hello ,<span class="hljs-number">12</span> years old<span class="hljs-string">&#x27;s  Codfish</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bash 快捷指令清单</title>
    <link href="/2025/04/10/Bash-%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <url>/2025/04/10/Bash-%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h1 id="光标移动类"><a href="#光标移动类" class="headerlink" title="光标移动类"></a>光标移动类</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + A</code></td><td>移动光标到行首</td></tr><tr><td><code>Ctrl + E</code></td><td>移动光标到行尾</td></tr><tr><td><code>Alt + B</code></td><td>向左移动一个单词</td></tr><tr><td><code>Alt + F</code></td><td>向右移动一个单词</td></tr><tr><td><code>Ctrl + B</code></td><td>向左移动一个字符</td></tr><tr><td><code>Ctrl + F</code></td><td>向右移动一个字符</td></tr><tr><td><code>Ctrl + XX</code></td><td>在行首与当前位置之间跳转</td></tr></tbody></table><h1 id="编辑命令类"><a href="#编辑命令类" class="headerlink" title="编辑命令类"></a>编辑命令类</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + U</code></td><td>删除从光标到行首的内容</td></tr><tr><td><code>Ctrl + K</code></td><td>删除从光标到行尾的内容</td></tr><tr><td><code>Ctrl + W</code></td><td>删除光标前一个“词”</td></tr><tr><td><code>Alt + D</code></td><td>删除光标后的一个“词”</td></tr><tr><td><code>Ctrl + D</code></td><td>删除光标所在字符（或退出 shell）</td></tr><tr><td><code>Ctrl + H</code></td><td>删除光标前一个字符（退格）</td></tr><tr><td><code>Ctrl + T</code></td><td>交换光标前的两个字符</td></tr><tr><td><code>Alt + T</code></td><td>交换光标前后两个词</td></tr></tbody></table><h1 id="剪切与粘贴"><a href="#剪切与粘贴" class="headerlink" title="剪切与粘贴"></a>剪切与粘贴</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + U/K/W</code></td><td>剪切内容，会保存在剪贴板中</td></tr><tr><td><code>Ctrl + Y</code></td><td>粘贴（插入）刚才剪切的内容</td></tr><tr><td><code>Alt + Y</code></td><td>粘贴历史中更早的剪切内容（循环）</td></tr></tbody></table><h1 id="历史命令操作"><a href="#历史命令操作" class="headerlink" title="历史命令操作"></a>历史命令操作</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + R</code></td><td>反向搜索历史命令</td></tr><tr><td><code>Ctrl + S</code></td><td>正向搜索历史命令（可能需配置）</td></tr><tr><td><code>Ctrl + P</code></td><td>上一条历史命令（等同 ↑）</td></tr><tr><td><code>Ctrl + N</code></td><td>下一条历史命令（等同 ↓）</td></tr><tr><td><code>Alt + .</code></td><td>插入上一条命令的最后一个参数</td></tr></tbody></table><h1 id="命令行组合操作"><a href="#命令行组合操作" class="headerlink" title="命令行组合操作"></a>命令行组合操作</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + O</code></td><td>执行当前命令并加载下一条历史命令</td></tr><tr><td><code>Ctrl + L</code></td><td>清屏（等同 <code>clear</code> 命令）</td></tr><tr><td><code>Ctrl + G</code></td><td>退出当前操作（如搜索、粘贴等）</td></tr></tbody></table><h1 id="补全与自动化"><a href="#补全与自动化" class="headerlink" title="补全与自动化"></a>补全与自动化</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>补全命令、文件或路径</td></tr><tr><td><code>Alt + ?</code></td><td>显示所有可能的补全项</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis 部署与查询命令</title>
    <link href="/2025/04/10/Redis-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/10/Redis-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis的安装部署"><a href="#Redis的安装部署" class="headerlink" title="Redis的安装部署"></a>Redis的安装部署</h1><p>使用系统的包管理器来安装redis ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install redis <br></code></pre></td></tr></table></figure><p>或者直接通过容器拉取redis容器 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br>docker run -d   --name my-redis   -p 6379:6379   redis:latest<br></code></pre></td></tr></table></figure><h1 id="Redis-文件配置"><a href="#Redis-文件配置" class="headerlink" title="Redis 文件配置"></a>Redis 文件配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# whereis redis<br>redis: /usr/lib64/redis /etc/redis.conf<br><br><span class="hljs-comment"># 重要配置</span><br><span class="hljs-built_in">bind</span> 127.0.0.1 ::1 <br><span class="hljs-comment"># 配置环回口监听， 如果需要从外部访问要改为 bind 0.0.0.0</span><br>port 6379  <br><span class="hljs-comment"># 传输端口，默认6379</span><br>daemonize no  <br><span class="hljs-comment"># 是否作为后台进程执行，默认是no 即前台运行</span><br>requirepass yourpassword<br><span class="hljs-comment"># 配置数据库密码</span><br><span class="hljs-comment"># 启动redis 服务器</span><br>redis-server  path/your_redis.conf<br><span class="hljs-comment"># 需要使用自定义的配置文件启动，自定义配置才会生效</span><br></code></pre></td></tr></table></figure><h1 id="配置Redis作为服务在服务器上启动"><a href="#配置Redis作为服务在服务器上启动" class="headerlink" title="配置Redis作为服务在服务器上启动"></a>配置Redis作为服务在服务器上启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置.services文件</span><br>[Unit]<br>Description=Redis In-Memory Data Store<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/usr/bin/redis-server /etc/my_redis/redis.conf <span class="hljs-comment"># 定义启动项</span><br>ExecStop=/usr/bin/redis-cli -a yourpassword shutdown <span class="hljs-comment"># 定义结束过程</span><br>Restart=always<br>User=redis<br>Group=redis<br><br><span class="hljs-comment"># Optional: Make sure redis has permission to write to the PID/log/data files</span><br>RuntimeDirectory=redis<br>RuntimeDirectoryMode=0755<br><br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-comment">#需要注意配置为linux服务时，要将daemonize设置为no</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-comment">#重新加载守护进程配置</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> redis<br><span class="hljs-comment">#配置redis开机启动</span><br><span class="hljs-built_in">sudo</span> systemctl start redis<br><span class="hljs-comment">#启动redis</span><br>redis-cli -p your_port -a your_password <br><span class="hljs-comment">#进入redis</span><br></code></pre></td></tr></table></figure><h1 id="Redis支持的数据结构与常用查询"><a href="#Redis支持的数据结构与常用查询" class="headerlink" title="Redis支持的数据结构与常用查询"></a>Redis支持的数据结构与常用查询</h1><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><p>KEYS 查看符合模板的所有key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 匹配符含义</span><br><span class="hljs-comment"># *匹配任意个字符</span><br>127.0.0.1:6380&gt; keys *<br> 1) <span class="hljs-string">&quot;people&quot;</span><br> 2) <span class="hljs-string">&quot;b&quot;</span><br> 3) <span class="hljs-string">&quot;25&quot;</span><br> 4) <span class="hljs-string">&quot;user&quot;</span><br><span class="hljs-comment"># ?匹配任意单个字符</span><br>127.0.0.1:6380&gt; keys ?<br>1) <span class="hljs-string">&quot;b&quot;</span><br><span class="hljs-comment"># [abc]匹配 a 或 b 或 c</span><br>127.0.0.1:6380&gt; keys [eb]<br>1) <span class="hljs-string">&quot;b&quot;</span><br>2) <span class="hljs-string">&quot;e&quot;</span><br></code></pre></td></tr></table></figure><p>DEL 删除一个指定的key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; del e<br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>EXISTS 判断key是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; exists b<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; exists e<br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><p>EXPIRE 给一个key设置有效期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">EXPIRE  item  scends<br>TTL <span class="hljs-comment"># 查询剩余有效期</span><br>127.0.0.1:6380&gt; <span class="hljs-built_in">set</span> a 5<br>OK<br>127.0.0.1:6380&gt; expire a 10<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) 8<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) -2<br>127.0.0.1:6380&gt; get a<br>(nil)<br></code></pre></td></tr></table></figure><h2 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h2><p>String</p><ul><li>string</li><li>int</li><li>float</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>set&#x2F;get 设置&#x2F;获取 k-v 键值对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> key value<br><span class="hljs-comment"># 设置 k-v 键值对</span><br>get key <br>- value<br><span class="hljs-comment"># 获取对应key的值</span><br></code></pre></td></tr></table></figure><p>mset&#x2F;mget 同时设置&#x2F;获取多组键值对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; mset z 15 y 12 x 18<br>OK<br>127.0.0.1:6380&gt; mget z y x<br>1) <span class="hljs-string">&quot;15&quot;</span><br>2) <span class="hljs-string">&quot;12&quot;</span><br>3) <span class="hljs-string">&quot;18&quot;</span><br><br></code></pre></td></tr></table></figure><p>incr 指定对应键的值自增</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; incr z<br>(<span class="hljs-built_in">integer</span>) 16<br></code></pre></td></tr></table></figure><p>incrby 自增自定义步长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; incrby z 8<br>(<span class="hljs-built_in">integer</span>) 24<br></code></pre></td></tr></table></figure><p>incrbyfloat 增加浮点数数值步长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; incrbyfloat z 0.5<br><span class="hljs-string">&quot;24.5&quot;</span><br></code></pre></td></tr></table></figure><p>setnx  设置值，如果该key已经存在数值，则不会修改原值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; setnx z 12<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6380&gt; get z<br><span class="hljs-string">&quot;24.5&quot;</span><br></code></pre></td></tr></table></figure><p>setex 设置k-v 并设置超时时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; setex z 10 18<br>OK<br>127.0.0.1:6380&gt; ttl z<br>(<span class="hljs-built_in">integer</span>) 8<br>127.0.0.1:6380&gt; ttl z<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; ttl z<br>(<span class="hljs-built_in">integer</span>) -2<br>127.0.0.1:6380&gt; get z<br>(nil)<br></code></pre></td></tr></table></figure><h2 id="Hash-哈希表（散列表）"><a href="#Hash-哈希表（散列表）" class="headerlink" title="Hash 哈希表（散列表）"></a>Hash 哈希表（散列表）</h2><p>hset&#x2F;hget  向哈希表中设置&#x2F;读取k-v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hset m name luccy<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; hget m name<br><span class="hljs-string">&quot;luccy&quot;</span><br></code></pre></td></tr></table></figure><p>hmset&#x2F;hmget 向哈希表中一次性设置多对k-v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hmset o age 12 name joi<br>OK<br>127.0.0.1:6380&gt; hmget o age name<br>1) <span class="hljs-string">&quot;12&quot;</span><br>2) <span class="hljs-string">&quot;joi&quot;</span><br></code></pre></td></tr></table></figure><p>hgetall 获取hask中的所有键值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hgetall o<br>1) <span class="hljs-string">&quot;age&quot;</span><br>2) <span class="hljs-string">&quot;12&quot;</span><br>3) <span class="hljs-string">&quot;name&quot;</span><br>4) <span class="hljs-string">&quot;joi&quot;</span><br></code></pre></td></tr></table></figure><p>hkeys&#x2F;hvals获取所有键&#x2F;值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hkeys o<br>1) <span class="hljs-string">&quot;age&quot;</span><br>2) <span class="hljs-string">&quot;name&quot;</span><br>127.0.0.1:6380&gt; hvals o<br>1) <span class="hljs-string">&quot;12&quot;</span><br>2) <span class="hljs-string">&quot;joi&quot;</span><br></code></pre></td></tr></table></figure><p>HINCRBY 向hash中的某个键指定步长自增</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hincrby o age 3<br>(<span class="hljs-built_in">integer</span>) 15<br></code></pre></td></tr></table></figure><p>HSETNX 向hash中的某个键设置值，如果已经存在值，则保留原值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hsetnx o age 18<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6380&gt; hget o age<br><span class="hljs-string">&quot;15&quot;</span><br></code></pre></td></tr></table></figure><h2 id="List-列表（实现为一个双向链表）"><a href="#List-列表（实现为一个双向链表）" class="headerlink" title="List 列表（实现为一个双向链表）"></a>List 列表（实现为一个双向链表）</h2><p>LPUSH&#x2F;LPOP 从左侧插入&#x2F;弹出值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; lpush q 28 29 30<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6380&gt; lpop q 1<br>1) <span class="hljs-string">&quot;30&quot;</span><br><span class="hljs-comment"># 插入多个值时，是依次从左侧插入值，所以30处于链表头部</span><br></code></pre></td></tr></table></figure><p>RPUSH&#x2F;RPOP 从右侧插入&#x2F;弹出值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; rpush q 18 19 20<br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6380&gt; rpop q 1<br>1) <span class="hljs-string">&quot;20&quot;</span><br><span class="hljs-comment"># 右侧插入多个值时，每个新插入的值插入在尾部，所以20处于尾部</span><br></code></pre></td></tr></table></figure><p>LRANGE key start end 查询给出范围内的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; lrange q 0 4<br>1) <span class="hljs-string">&quot;29&quot;</span><br>2) <span class="hljs-string">&quot;28&quot;</span><br>3) <span class="hljs-string">&quot;18&quot;</span><br>4) <span class="hljs-string">&quot;19&quot;</span><br></code></pre></td></tr></table></figure><p>BLPOP  设置阻塞时间的右侧弹出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; blpop q 5<br>(nil)<br>(5.07s)<br><span class="hljs-comment"># 注意这里弹出超过list长度的值会弹出最右侧的值</span><br></code></pre></td></tr></table></figure><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h2><p>SADD 向set中添加元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sadd p 1 2 3 4 5<br>(<span class="hljs-built_in">integer</span>) 5<br></code></pre></td></tr></table></figure><p>SREM  移除set中的元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; srem p 1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; sinter p<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br></code></pre></td></tr></table></figure><p>SCARD  返回set中元素的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; scard p<br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><p>SISMEMBER key member 判断是否存在于set中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sismember p 5<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; sismember p 6<br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><p>SMEMBERS 获取所有成员</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; smembers p<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br></code></pre></td></tr></table></figure><p>SINTER key1 key2  求key1 与key2的交集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; smembers p<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br>127.0.0.1:6380&gt; sadd j 2 5 8 9 12<br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6380&gt; sinter p j<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;5&quot;</span><br></code></pre></td></tr></table></figure><p>SDIFF    差集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sdiff p j<br>1) <span class="hljs-string">&quot;3&quot;</span><br>2) <span class="hljs-string">&quot;4&quot;</span><br>127.0.0.1:6380&gt; sdiff j p<br>1) <span class="hljs-string">&quot;8&quot;</span><br>2) <span class="hljs-string">&quot;9&quot;</span><br>3) <span class="hljs-string">&quot;12&quot;</span><br><span class="hljs-comment"># 左并联</span><br></code></pre></td></tr></table></figure><p>SUNION 求key1 key2 的并集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sunion p j<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br>5) <span class="hljs-string">&quot;8&quot;</span><br>6) <span class="hljs-string">&quot;9&quot;</span><br>7) <span class="hljs-string">&quot;12&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Sortedset-有序集合"><a href="#Sortedset-有序集合" class="headerlink" title="Sortedset 有序集合"></a>Sortedset 有序集合</h2><p>ZADD  key score member 设置权重并添加成员</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zadd r 24 48<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; zadd r 17 56 19 62 4 77<br></code></pre></td></tr></table></figure><p>ZREM key member</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrem r 48<br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>ZSCORE key member  获取成员权重</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zscore r 77<br><span class="hljs-string">&quot;4&quot;</span><br></code></pre></td></tr></table></figure><p>ZRANK key member 获取成员序号 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrank r 62<br>(<span class="hljs-built_in">integer</span>) 3<br></code></pre></td></tr></table></figure><p>ZCARD key 获取元素个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zcard r<br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><p>ZCOUNT key min max 根据权重获取数据的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zcard r<br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><p>ZINCRBY  根据成员，向其权重自增 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zincrby r 2 62<br><span class="hljs-string">&quot;21&quot;</span><br></code></pre></td></tr></table></figure><p>ZRANGE  根据排序筛选范围内的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrange r 2 90<br>1) <span class="hljs-string">&quot;36&quot;</span><br>2) <span class="hljs-string">&quot;56&quot;</span><br>3) <span class="hljs-string">&quot;62&quot;</span><br><br></code></pre></td></tr></table></figure><p>ZRANGEBYSCORE根据权重筛选范围内的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrangebyscore r 2 90<br>1) <span class="hljs-string">&quot;52&quot;</span><br>2) <span class="hljs-string">&quot;77&quot;</span><br>3) <span class="hljs-string">&quot;36&quot;</span><br>4) <span class="hljs-string">&quot;56&quot;</span><br>5) <span class="hljs-string">&quot;62&quot;</span><br></code></pre></td></tr></table></figure><p>ZDIFF 取多个有序集合的差集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zdiff 2 s r<br>1) <span class="hljs-string">&quot;82&quot;</span><br>2) <span class="hljs-string">&quot;63&quot;</span><br>3) <span class="hljs-string">&quot;48&quot;</span><br></code></pre></td></tr></table></figure><p>ZINTER 取多个有序集合的交集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zinter 3 s r t<br>1) <span class="hljs-string">&quot;56&quot;</span><br></code></pre></td></tr></table></figure><p>ZUNION 取多个有序集合的并集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zunion 3 s r t<br>1) <span class="hljs-string">&quot;52&quot;</span><br>2) <span class="hljs-string">&quot;76&quot;</span><br>3) <span class="hljs-string">&quot;77&quot;</span><br>4) <span class="hljs-string">&quot;36&quot;</span><br>5) <span class="hljs-string">&quot;82&quot;</span><br>6) <span class="hljs-string">&quot;62&quot;</span><br>7) <span class="hljs-string">&quot;63&quot;</span><br>8) <span class="hljs-string">&quot;48&quot;</span><br>9) <span class="hljs-string">&quot;56&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell VIII 观测</title>
    <link href="/2025/04/09/Shell-VIII-%E8%A7%82%E6%B5%8B/"/>
    <url>/2025/04/09/Shell-VIII-%E8%A7%82%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<p>留坑 perf和ebpf</p>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell VII VIM</title>
    <link href="/2025/04/09/Shell-VII-VIM/"/>
    <url>/2025/04/09/Shell-VII-VIM/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-VII-VIM-md"><a href="#Shell-VII-VIM-md" class="headerlink" title="Shell-VII-VIM.md"></a>Shell-VII-VIM.md</h1><h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><p><strong>Vim</strong> 是一个高度可定制的 <strong>文本编辑器</strong></p><h1 id="启动与退出"><a href="#启动与退出" class="headerlink" title="启动与退出"></a>启动与退出</h1><h2 id="VIM支持三种模式-："><a href="#VIM支持三种模式-：" class="headerlink" title="VIM支持三种模式 ："></a>VIM支持三种模式 ：</h2><ul><li>**普通模式 (Normal)**：默认模式，用于浏览和操作文本。</li><li>**插入模式 (Insert)**：输入文本，按 <code>i</code> 进入。</li><li>**命令模式 (Command-line)**：输入冒号 <code>:</code> 命令。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>vim filename        <span class="hljs-comment"># 打开文件</span><br>vim +n filename     <span class="hljs-comment"># 打开文件并跳转到第n行</span><br><br><span class="hljs-comment"># 退出:</span><br><span class="hljs-comment">#- `:q`：退出</span><br><span class="hljs-comment">#- `:q!`：强制退出不保存</span><br><span class="hljs-comment">#- `:w`：保存</span><br><span class="hljs-comment">#- `:wq` 或 `ZZ`：保存并退出</span><br><span class="hljs-comment">#- `:x`：与 `:wq` 相同</span><br><span class="hljs-comment">#- `:e!`：放弃修改并重新加载</span><br></code></pre></td></tr></table></figure><h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><h3 id="1-基本移动"><a href="#1-基本移动" class="headerlink" title="1. 基本移动"></a>1. 基本移动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">`h`：左，`l`：右，`j`：下，`k`：上<br>`0`：行首，`^`：首个非空字符，`$`：行尾<br>`w`：下一个词，`b`：前一个词，`e`：词尾<br></code></pre></td></tr></table></figure><h3 id="2-高速移动"><a href="#2-高速移动" class="headerlink" title="2. 高速移动"></a>2. 高速移动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">`gg`：跳转到文件开头<br>`G`：跳转到文件末尾<br>`nG`：跳到第 n 行<br>`H`/`M`/`L`：屏幕顶部/中部/底部<br>`Ctrl-d`/`Ctrl-u`：向下/向上滚动半页<br>`%`：匹配括号跳转<br></code></pre></td></tr></table></figure><h1 id="插入与删除"><a href="#插入与删除" class="headerlink" title="插入与删除"></a>插入与删除</h1><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">`i`：当前字符前<br>`I`：行首<br>`a`：当前字符后<br>`A`：行尾<br>`o`：当前行下方新开一行<br>`O`：当前行上方新开一行<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">`x`：删除当前字符<br>`<span class="hljs-built_in">dd</span>`：删除当前行<br>`dw`：删除一个词<br>`d$`：删除至行尾<br>`d0`：删除至行首<br></code></pre></td></tr></table></figure><h1 id="复制、粘贴、撤销"><a href="#复制、粘贴、撤销" class="headerlink" title="复制、粘贴、撤销"></a>复制、粘贴、撤销</h1><h3 id="复制（Yank）"><a href="#复制（Yank）" class="headerlink" title="复制（Yank）"></a>复制（Yank）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">`yy`：复制当前行<br>`yw`：复制一个词<br>`y$`：复制至行尾<br>`v`：进入可视模式，选择后 `y`<br></code></pre></td></tr></table></figure><h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">`p` ：粘贴<br></code></pre></td></tr></table></figure><h3 id="撤销与重做"><a href="#撤销与重做" class="headerlink" title="撤销与重做"></a>撤销与重做</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">`u`：撤销<br>`Ctrl-r`：重做<br></code></pre></td></tr></table></figure><h1 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h1><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">`/pattern`：向下查找<br>`?pattern`：向上查找<br>`n`/`N`：下一个/上一个匹配<br></code></pre></td></tr></table></figure><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">vim<br>复制编辑<br><span class="hljs-symbol">:%s/old/new/g</span>        <span class="hljs-comment"># 替换整篇文件中所有匹配</span><br><span class="hljs-symbol">:</span><span class="hljs-number">1</span>,<span class="hljs-number">10</span>s/old/new/g     <span class="hljs-comment"># 替换第1至10行</span><br><span class="hljs-symbol">:%s/old/new/gc</span>       <span class="hljs-comment"># 替换前确认</span><br><br></code></pre></td></tr></table></figure><h1 id="窗口与标签页"><a href="#窗口与标签页" class="headerlink" title="窗口与标签页"></a>窗口与标签页</h1><h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">`:<span class="hljs-built_in">split</span>` 或 `:sp`：水平分屏<br>`:vsplit` 或 `:vsp`：垂直分屏<br>`Ctrl-w w`：在窗口间切换<br>`Ctrl-w h/j/k/l`：方向切换<br>`Ctrl-w q`：关闭当前窗口<br></code></pre></td></tr></table></figure><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">`:tabnew filename`：新建标签页<br>`:tabn` / `:tabp`：下一个/上一个标签页<br>`gt` / `gT`：标签页切换<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell VI Shell编程</title>
    <link href="/2025/04/09/Shell-VI-Shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/04/09/Shell-VI-Shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-VI-Shell编程-md"><a href="#Shell-VI-Shell编程-md" class="headerlink" title="Shell-VI-Shell编程.md"></a>Shell-VI-Shell编程.md</h1><h1 id="什么是Shell编程？"><a href="#什么是Shell编程？" class="headerlink" title="什么是Shell编程？"></a>什么是Shell编程？</h1><p>Shell 编程是一种基于 Shell 解释器语法规则，结合环境变量和命令行参数，通过组织和控制系统命令以实现自动化任务与进程管理的脚本语言。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>父进程的变量在子进程中不可见，需要使用export声明需要的变量或者使用 . <a href="http://child.sh/">child.sh</a> 执行</p><p>shell中声明变量赋值变量名必须严格紧贴赋值符合“&#x3D;”</p><h2 id="基础变量"><a href="#基础变量" class="headerlink" title="基础变量"></a>基础变量</h2><p>Shell(bash)本身提供了一些基础变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$?                      <span class="hljs-comment">#储存了上一次的执行结果，用于对步骤执行结果的判断</span><br><span class="hljs-variable">$1</span>-<span class="hljs-variable">$9</span>                   <span class="hljs-comment">#储存了传入的位置参数</span><br><span class="hljs-variable">$#</span>                      <span class="hljs-comment">#传递的参数个数</span><br><span class="hljs-variable">$@</span>                      <span class="hljs-comment">#传递的所有参数</span><br>$*                      <span class="hljs-comment">#传递的所有参数 ，作为一个整体</span><br>$$                      <span class="hljs-comment">#进程的pid</span><br>$!                      <span class="hljs-comment">#上一个后台命令的pid</span><br><span class="hljs-variable">$_</span>                      <span class="hljs-comment">#上一个命令的最后一个参数</span><br><span class="hljs-variable">$IFS</span>                  <span class="hljs-comment">#输入字段分隔符（默认是空格、Tab、换行）</span><br><span class="hljs-variable">$RANDOM</span>                <span class="hljs-comment">#生成一个0~32767 的随机数</span><br><span class="hljs-variable">$LINENO</span>                 <span class="hljs-comment">#当前脚本中的行号</span><br><span class="hljs-variable">$UID</span> / <span class="hljs-variable">$EUID</span>          <span class="hljs-comment">#当前用户的 UID（真实/有效）</span><br><span class="hljs-variable">$PWD</span>                  <span class="hljs-comment">#当前目录</span><br><span class="hljs-variable">$HOME</span>                  <span class="hljs-comment">#当前用户的主目录</span><br><span class="hljs-variable">$PATH</span>                  <span class="hljs-comment">#系统查找命令的路径列表</span><br><span class="hljs-variable">$SHELL</span>                <span class="hljs-comment">#当前默认的 shell 路径</span><br></code></pre></td></tr></table></figure><p>通过使用上述的变量，编写第一个shell脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;Give me a name: &quot;</span> name<br><span class="hljs-built_in">echo</span> hello <span class="hljs-variable">$name</span><br><span class="hljs-built_in">echo</span> your home path is <span class="hljs-variable">$HOME</span><br><span class="hljs-built_in">echo</span> current <span class="hljs-built_in">dir</span> is <span class="hljs-variable">$PWD</span><br><br>Give me a name: Codfish<br>hello Codfish<br>your home path is /root<br>current <span class="hljs-built_in">dir</span> is /home/codfish/my_bash<br></code></pre></td></tr></table></figure><h2 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=<span class="hljs-string">&quot;Alice&quot;</span>              <span class="hljs-comment"># 普通变量（默认是字符串）</span><br><span class="hljs-built_in">declare</span> -i age=18         <span class="hljs-comment"># 整数变量</span><br><span class="hljs-built_in">readonly</span> pi=3.14          <span class="hljs-comment"># 只读变量</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/new    <span class="hljs-comment"># 环境变量</span><br>arr=(apple banana cherry) <span class="hljs-comment"># 数组变量</span><br><span class="hljs-built_in">declare</span> -A user           <span class="hljs-comment"># 关联数组（Bash 4+）</span><br>user[<span class="hljs-built_in">id</span>]=001<br></code></pre></td></tr></table></figure><h1 id="引用和执行"><a href="#引用和执行" class="headerlink" title="引用和执行"></a>引用和执行</h1><h2 id="’’，”“，以及"><a href="#’’，”“，以及" class="headerlink" title="&#96;&#96; ,’’，”“，以及$(())"></a>&#96;&#96; ,’’，”“，以及$(())</h2><p>以上都可以作为字符串向shell脚本中的变量赋值。</p><p>反引号 <code>  </code>   ： 获取命令执行后的结果作为变量的值(过时)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hi=<span class="hljs-string">&quot;hello&quot;</span><br>hi1=`<span class="hljs-built_in">echo</span> hello`<br><br>result : hello<br></code></pre></td></tr></table></figure><p>单引号‘’ ： 输出字符串，完全不解析 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>hi2=<span class="hljs-string">&#x27;echo $hi&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi2</span><br><br>result : <span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi1</span><br></code></pre></td></tr></table></figure><p>双引号‘’ ： 输出含变量空格信息 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hi3=<span class="hljs-string">&quot;echo <span class="hljs-variable">$hi</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi3</span><br><br>result : <span class="hljs-built_in">echo</span> hello<br></code></pre></td></tr></table></figure><p>$()’ ： 获取命令执行后的结果作为变量的值,支持嵌套</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hi4=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi4</span><br><br>result : hello<br></code></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>算术运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">+   <span class="hljs-comment">#加法</span><br>-   <span class="hljs-comment">#减法</span><br>*    <span class="hljs-comment">#乘法</span><br>/    <span class="hljs-comment">#除法（整数除法）</span><br>%   <span class="hljs-comment">#取余</span><br>++ <span class="hljs-comment">#自增（前/后都支持）</span><br>-- <span class="hljs-comment">#自减</span><br>** <span class="hljs-comment">#幂运算（Bash 4.0+ 支持）</span><br></code></pre></td></tr></table></figure><p>整数比较运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-eq <span class="hljs-comment">#等于</span><br>-ne <span class="hljs-comment">#不等于</span><br>-gt  <span class="hljs-comment">#大于</span><br>-lt <span class="hljs-comment">#小于</span><br>-ge <span class="hljs-comment">#大于等于</span><br>-le <span class="hljs-comment">#小于等于</span><br></code></pre></td></tr></table></figure><p>字符比较运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">= 或 == <span class="hljs-comment">#字符串相等</span><br>!=     <span class="hljs-comment">#字符串不等</span><br>&lt;       <span class="hljs-comment">#字典序小于（仅 [[ ]]）</span><br>&gt;       <span class="hljs-comment">#字典序大于（仅 [[ ]]）</span><br>-z     <span class="hljs-comment">#字符串为空</span><br>-n     <span class="hljs-comment">#字符串非空</span><br></code></pre></td></tr></table></figure><p>逻辑运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">用于 []<br>-a    <span class="hljs-comment">#AND（与）</span><br>-o    <span class="hljs-comment">#OR（或）</span><br>用于 [[]] 或(())<br>&amp;&amp;    <span class="hljs-comment">#与</span><br>`<br>!      <span class="hljs-comment">#非（取反）</span><br></code></pre></td></tr></table></figure><p>文件测试运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">-e            <span class="hljs-comment">#文件存在</span><br>-f            <span class="hljs-comment">#是普通文件</span><br>-d            <span class="hljs-comment">#是目录</span><br>-L            <span class="hljs-comment">#是符号链接</span><br>-r            <span class="hljs-comment">#有读权限</span><br>-w            <span class="hljs-comment">#有写权限</span><br>-x            <span class="hljs-comment">#有执行权限</span><br>-s            <span class="hljs-comment">#文件非空</span><br>file1 -nt file2<span class="hljs-comment">#file1 比 file2 新</span><br>file1 -ot file2<span class="hljs-comment">#file1 比 file2 旧</span><br></code></pre></td></tr></table></figure><p>位运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&amp;             <span class="hljs-comment">#按位与</span><br>^             <span class="hljs-comment">#按位异或</span><br>~             <span class="hljs-comment">#按位取反</span><br>&lt;&lt;           <span class="hljs-comment">#左移</span><br>&gt;&gt;           <span class="hljs-comment">#右移</span><br></code></pre></td></tr></table></figure><p>赋值运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">=             <span class="hljs-comment">#赋值</span><br>+=           <span class="hljs-comment">#加后赋值</span><br>-=           <span class="hljs-comment">#减后赋值</span><br>*=           <span class="hljs-comment">#乘后赋值</span><br>/=           <span class="hljs-comment">#除后赋值</span><br>%=           <span class="hljs-comment">#取余后赋值</span><br>&lt;&lt;=           <span class="hljs-comment">#左移后赋值</span><br>&gt;&gt;=           <span class="hljs-comment">#右移后赋值</span><br>&amp;=           <span class="hljs-comment">#位与赋值</span><br>^=           <span class="hljs-comment">#位异或赋值</span><br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>整数判断&#x2F;运算</strong></th><th><code>(( ))</code></th></tr></thead><tbody><tr><td><strong>字符串判断</strong></td><td><code>[[ ]]</code> （或 <code>[ ]</code>）</td></tr><tr><td><strong>文件测试</strong></td><td><code>[ ]</code></td></tr><tr><td><strong>组合条件（逻辑与或）</strong></td><td><code>[[ ]]</code></td></tr></tbody></table><h1 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h1><h2 id="tips-1"><a href="#tips-1" class="headerlink" title="tips"></a>tips</h2><p>变量不能紧贴判断符号[ ]</p><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ condition1 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-comment"># condition1为真执行</span><br><span class="hljs-keyword">elif</span> [condition2]; <span class="hljs-keyword">then</span><br><span class="hljs-comment"># condition2为真执行</span><br><span class="hljs-keyword">else</span><br><span class="hljs-comment"># 条件均不满足时执行</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> $变量 <span class="hljs-keyword">in</span><br>    模式1)<br>        命令1<br>        ;;<br>    模式2)<br>        命令2<br>        ;;<br>    *)<br>        默认命令<br>        ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> val1 val2 val3; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 循环体</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> ((i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)); <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> [ 条件 ]; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 循环体</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="until语句"><a href="#until语句" class="headerlink" title="until语句"></a>until语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">until</span> [ 条件 ]; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 循环体</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="break-中断并跳出当前循环"><a href="#break-中断并跳出当前循环" class="headerlink" title="break 中断并跳出当前循环"></a>break 中断并跳出当前循环</h3><h3 id="continue-跳过本次循环执行下一次循环"><a href="#continue-跳过本次循环执行下一次循环" class="headerlink" title="continue 跳过本次循环执行下一次循环"></a>continue 跳过本次循环执行下一次循环</h3><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> myfunc &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello from myfunc&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">myfunc</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello from myfunc&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数传入"><a href="#参数传入" class="headerlink" title="参数传入"></a>参数传入</h3><blockquote><p>Shell 函数不需要事先声明类型，调用时直接以空格分隔传递参数，函数内部用 $1、$2 等方式访问。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">greet</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$1</span>!&quot;</span><br>&#125;<br><br>greet <span class="hljs-string">&quot;Alice&quot;</span>  <span class="hljs-comment"># 输出：Hello, Alice!</span><br><br></code></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p><code>return</code> 用于返回状态码（0~255），而 <code>echo</code> 用于将值输出给命令替换（<code>$(...)</code>）来接收。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">check_even</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ $(( <span class="hljs-variable">$1</span> % <span class="hljs-number">2</span> )) -eq 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">return</span> 0<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">return</span> 1<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>check_even 4<br><span class="hljs-built_in">echo</span> $?<br><span class="hljs-comment"># 或者 接收echo的输出</span><br><span class="hljs-function"><span class="hljs-title">check_even2</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ $(( <span class="hljs-variable">$1</span> % <span class="hljs-number">2</span> )) -eq 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;even&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;odd&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>res=$(check_even2 5)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$res</span><br><br></code></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 允许定义局部变量</span><br><span class="hljs-function"><span class="hljs-title">myfunc</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> var=<span class="hljs-string">&quot;secret&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Inside: <span class="hljs-variable">$var</span>&quot;</span><br>&#125;<br>myfunc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Outside: <span class="hljs-variable">$var</span>&quot;</span>   <span class="hljs-comment"># var 不存在</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell V grep sed awk</title>
    <link href="/2025/04/09/Shell-V-grep-sed-awk/"/>
    <url>/2025/04/09/Shell-V-grep-sed-awk/</url>
    
    <content type="html"><![CDATA[<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>Shell中 提供了“|” 的管道实现，来帮助用户更快捷的处理过程流</p><p>当运行 a | b | c 后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Parent Process<br>├── fork() --&gt; Child 1 runs `a`<br>│    stdout --&gt; pipe1[1]<br>├── fork() --&gt; Child 2 runs `b`<br>│    stdin &lt;-- pipe1[0], stdout --&gt; pipe2[1]<br>├── fork() --&gt; Child 3 runs `c`<br>     stdin &lt;-- pipe2[0]<br></code></pre></td></tr></table></figure><p>当a命令在向b进行输出后，b就已经开始执行了。</p><p>通过管道的连接，可以让我们更加灵活的获取目标值</p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>grep 支持全局的文本查询和检索</p><p>grep 支持定义搜索内容 + 文件进行筛选</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;partten&quot;</span>  file<br></code></pre></td></tr></table></figure><p>也可以通过其他命令得到stdout 使用管道进行检索</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> file | grep <span class="hljs-string">&quot;partten&quot;</span><br></code></pre></td></tr></table></figure><p>常用的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -i  忽略查询的大小写</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -i a<br>aAbBcCdDeEfF<br><span class="hljs-comment"># -o  只返回匹配规则的值</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -o a<br>a<br><span class="hljs-comment"># -v  反向筛选</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -v a<br>gG hH iI jJ kK lL<br>mM nN<br><span class="hljs-comment"># 基本正则匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -G [A-Z]<br>aA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br><span class="hljs-comment"># 扩展正则匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -E [a-zA-Z]&#123;2&#125;<br>aA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br><br></code></pre></td></tr></table></figure><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><p>sed 是一个文本替换工具</p><p>sed也可以设置规则 替换文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ hello]# sed <span class="hljs-string">&quot;s/a/A/&quot;</span> hello.txt<br>AA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br></code></pre></td></tr></table></figure><p>也可以接收stdout，修改流中的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;s/a/A/&#x27;</span><br>AA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br></code></pre></td></tr></table></figure><p>注意直接使用 sed 进行替换并不会修改原文本内容，需要修改文本内容需要加”-i”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;[num]s/old/new/[g]&#x27;</span>  进行全局/某一行替换 <br><span class="hljs-string">&#x27;[num]d&#x27;</span>              不显示/删除某一行<br><span class="hljs-string">&#x27;[num][i|a]\[text]&#x27;</span>   在某行前/后 追加文本<br><span class="hljs-string">&#x27;-n  &quot;[num],[num]p&quot;&#x27;</span>  打印行区间文本<br><span class="hljs-string">&#x27;-e&#x27;</span>                  多个执行文本规则      <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#sed &#x27;s/old/new/&#x27;只替换每行第一个匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;s/a/A/&#x27;</span><br>AA bB cC dD eE fF<br>AA hH iI jJ kK lL<br>mM nN<br><span class="hljs-comment"># sed &#x27;s/old/new/g&#x27;替换每行所有匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;s/b/B/g&#x27;</span><br>aA BB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN BB BBB<br><span class="hljs-comment"># sed &#x27;2s/old/new/&#x27;只替换第3行的匹配项</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;3s/b/B/g&#x27;</span><br>aA bB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN BB BBB<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;3s/b/B/&#x27;</span><br>aA bB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN BB bbb<br><span class="hljs-comment"># sed &#x27;2d&#x27;删除第2行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;2d&#x27;</span><br>aA bB cC dD eE fF<br>mM nN bB bbb<br><span class="hljs-comment"># sed &#x27;/^$/d&#x27;删除所有空行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt<br>aA bB cC dD eE fF<br><br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;/^$/d&#x27;</span><br>aA bB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><span class="hljs-comment">#sed -n &#x27;5p&#x27;只输出第3行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  -n 3p<br>aA hH iI jJ kK lL<br><span class="hljs-comment">#sed -n &#x27;5,10p&#x27;输出第1到3行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  -n <span class="hljs-string">&#x27;1,3p&#x27;</span><br>aA bB cC dD eE fF<br><br>aA hH iI jJ kK lL<br><span class="hljs-comment"># sed &#x27;1i\This is a new line&#x27;在第1行前插入</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;1i\hello&#x27;</span><br>hello<br>aA bB cC dD eE fF<br><br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><span class="hljs-comment">#sed &#x27;1a\This is after line 3&#x27;在第1行后追加</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;1a\hello&#x27;</span><br>aA bB cC dD eE fF<br>hello<br><br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><span class="hljs-comment">#sed -e &#x27;1d&#x27; -e &#x27;s/foo/bar/g&#x27;删除第1行并替换所有 aA为 zZ</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  -e <span class="hljs-string">&#x27;1d&#x27;</span> -e  <span class="hljs-string">&#x27;s/aA/zZ/g&#x27;</span><br><br>zZ hH iI jJ kK lL<br>mM nN bB bbb<br><br></code></pre></td></tr></table></figure><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><p>awk是一种 用于文本处理的脚本语言，它接收每一行输入，并按规则匹配，最终打印</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;pattern &#123; action &#125;&#x27;</span>  filename <br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> filename | awk <span class="hljs-string">&#x27;pattern &#123;action&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>变量 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$0</span>当前行内容<br>$[num]第num列（字段）<br>NF当前行的字段数量<br>NR当前是第几行<br>FS输入字段分隔符（默认是空格）<br>OFS输出字段分隔符（默认也是空格）<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># awk 可以分为多段执行</span><br>awk <span class="hljs-string">&#x27;BEGIN &#123;&#125; &#123;&#125;  END &#123;&#125;&#x27;</span><br><span class="hljs-comment"># BEGIN 开始时执行一次的代码段， END 结束时执行一次的代码段</span><br><span class="hljs-comment"># 行信息放在外面，列信息在&#123;&#125;中操作</span><br><span class="hljs-comment"># &#x27;BEGIN&#x27;，&#x27;END&#x27; 只能进行 分隔符定义，变量赋值</span><br><span class="hljs-comment"># 在中间&#123;&#125; 外面可以设置 NR== 定义行号</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">打印第九列<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l | awk <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span><br>a<br>ate<br>b<br>c<br>d<br>e<br>f<br>g<br>h<br>hello.txt<br>i<br>j<br>k<br>l<br>m<br>n<br>打印第一行<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l | awk <span class="hljs-string">&#x27;NR==2&#123;print &#125;&#x27;</span><br>-rw-r--r-- 1 root root  0 Apr 10 13:58 a<br><br></code></pre></td></tr></table></figure><h1 id="混合查询"><a href="#混合查询" class="headerlink" title="混合查询"></a>混合查询</h1><p>查询一下redis的安装时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# ps -aux | grep -v <span class="hljs-string">&quot;grep&quot;</span> | grep redis | sed <span class="hljs-string">&#x27;s/redis/myredis/&#x27;</span> | grep -v <span class="hljs-string">&quot;sed&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span><br>Apr08<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell IV 网络相关命令</title>
    <link href="/2025/04/09/Shell-IV-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/09/Shell-IV-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-IV-网络相关命令"><a href="#Shell-IV-网络相关命令" class="headerlink" title="Shell-IV-网络相关命令"></a>Shell-IV-网络相关命令</h1><h1 id="什么是网络？"><a href="#什么是网络？" class="headerlink" title="什么是网络？"></a>什么是网络？</h1><p>是OSI的7层模型？ 还是TCP&#x2F;IP 协议簇？wifi&#x2F;移动通信的空口互联？ 又或者是内核进程的虚拟数据转发？</p><ul><li>网络的本质基于预定义的通信协议通过物理介质（或虚拟物理介质如虚拟端口，虚拟mac地址）在设备间进行数据传输的一种组织结构。<ul><li>网络是“有层次”的，无论是固网通信还是空口通信。数据包的传输都在进行一个“封装-解封装”的过程</li><li>网络是“动态”的，端到端的网络通信，需要网卡持续监听外部网络接收到的数据包，并通过中断触发内核来对数据包进行处理</li></ul></li></ul><p>具体的可以查看后续的网络协议解析</p><h1 id="IP-网卡查询"><a href="#IP-网卡查询" class="headerlink" title="IP&#x2F;网卡查询"></a>IP&#x2F;网卡查询</h1><h2 id="ifconfig-old"><a href="#ifconfig-old" class="headerlink" title="ifconfig (old)"></a>ifconfig (old)</h2><p>ifconfig 提供了简单的查询网卡以及ip信息的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500 <span class="hljs-comment">#网络帧大小，决定了转发的二层网络包的最大长度</span><br>        inet 172.16.243.147  netmask 255.255.240.0  broadcast 172.16.255.255 <br>        <span class="hljs-comment">#  ipv4 地址         掩码                   广播地址</span><br>        inet6 fe80::216:3eff:fe4e:4cd3  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        <span class="hljs-comment">#  ipv6 地址                    掩码</span><br>        ether 00:16:3e:4e:4c:d3  txqueuelen 1000  (Ethernet)<br>        <span class="hljs-comment">#  以太网mac地址                 最大传输队列长度</span><br>        RX packets 4986558  bytes 3656623569 (3.4 GiB)<br>        <span class="hljs-comment">#  接收到的数据统计</span><br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        <span class="hljs-comment">#  异常，丢包统计</span><br>        TX packets 3390873  bytes 827044117 (788.7 MiB)<br>        <span class="hljs-comment">#  发送的数据统计</span><br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><span class="hljs-comment">#  异常，丢包统计</span><br></code></pre></td></tr></table></figure><h2 id="ip-addr"><a href="#ip-addr" class="headerlink" title="ip addr"></a>ip addr</h2><p>新一代的ip 网络查询&#x2F;配置命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:16:3e:4e:4c:d3 brd ff:ff:ff:ff:ff:ff<br>    altname enp0s5<br>    altname ens5<br>    inet 172.16.243.147/20 brd 172.16.255.255 scope global dynamic noprefixroute eth0<br>       valid_lft 1891653623sec preferred_lft 1891653623sec<br>    inet6 fe80::216:3eff:fe4e:4cd3/64 scope <span class="hljs-built_in">link</span><br>       valid_lft forever preferred_lft forever<br>       <br>       <br>ip addr add 10.0.0.1/24 dev eth0          <span class="hljs-comment"># 添加 IP</span><br>ip addr del 10.0.0.1/24 dev eth0          <span class="hljs-comment"># 删除 IP</span><br>ip addr flush dev eth0                    <span class="hljs-comment"># 清空 IP</span><br>ip addr show                              <span class="hljs-comment"># 查看所有地址</span><br>ip addr show dev eth0                     <span class="hljs-comment"># 查看某网卡的地址信息         </span><br><br></code></pre></td></tr></table></figure><h2 id="ip-link"><a href="#ip-link" class="headerlink" title="ip link"></a>ip link</h2><p>查询 网络链路状态，虚拟网卡配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# ip <span class="hljs-built_in">link</span> show<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:16:3e:4e:4c:d3 brd ff:ff:ff:ff:ff:ff<br>    altname enp0s5<br>    altname ens5<br>   <br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c up                      <span class="hljs-comment"># 设置网络接口打开</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c down                    <span class="hljs-comment"># 设置网络接口关闭</span><br>ip <span class="hljs-built_in">link</span> add veth-c <span class="hljs-built_in">type</span> veth peer name veth-br  <span class="hljs-comment"># 设置虚拟网络（定义的一对peer veth网络）</span><br>ip <span class="hljs-built_in">link</span> del veth-c                         <span class="hljs-comment"># 删除网络</span><br></code></pre></td></tr></table></figure><h2 id="ip-netns"><a href="#ip-netns" class="headerlink" title="ip netns"></a>ip netns</h2><p>创建&#x2F;设置 linux 网络命名空间 </p><p>网络命名可以将其所在进程的网络与宿主机进行隔离</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip netns add net1                          <span class="hljs-comment"># 添加网络命名空间</span><br>ip netns <span class="hljs-built_in">exec</span> net1 ip addr                 <span class="hljs-comment"># 在宿主机向命名空间内执行命令</span><br></code></pre></td></tr></table></figure><h1 id="寻址-路由"><a href="#寻址-路由" class="headerlink" title="寻址&#x2F;路由"></a>寻址&#x2F;路由</h1><p>IP所处的网络层 主要负责接入网络的设备寻址和数据转发</p><h2 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h2><p>arp 协议是工作在数据链路层-网络层中间的 数据协议，其通过广播模式向广播域内所有设备请求其所需ip地址对应的mac地址，通常用于网络接入（查找网关），和冲突检测（是否有同ip设备上线同一局域网）。使用arp 命令可以查看本地的ip地址映射表项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# arp -a<br>? (10.88.0.11) at be:34:94:fb:34:f6 [ether] on cni-podman0<br>? (10.88.0.10) at &lt;incomplete&gt; on cni-podman0<br><br></code></pre></td></tr></table></figure><h2 id="ip-route"><a href="#ip-route" class="headerlink" title="ip route"></a>ip route</h2><p>提供了本地路由的查询功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# ip route<br>default via 172.16.255.253 dev eth0 proto dhcp src 172.16.243.147 metric 100<br><span class="hljs-comment"># 网段  网关                   网卡                源地址</span><br>10.88.0.0/16 dev cni-podman0 proto kernel scope <span class="hljs-built_in">link</span> src 10.88.0.1<br>172.16.240.0/20 dev eth0 proto kernel scope <span class="hljs-built_in">link</span> src 172.16.243.147 metric 100<br><br>ip route add 10.0.0.0/24 via 192.168.1.1 dev eth0  <span class="hljs-comment"># 添加路由</span><br>ip route del 10.0.0.0/24                           <span class="hljs-comment"># 删除路由</span><br><br></code></pre></td></tr></table></figure><h1 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h1><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -tuln        <span class="hljs-comment">#显示所有正在监听的 TCP/UDP 端口（数字显示）</span><br>netstat -tulnp      <span class="hljs-comment">#显示监听端口及对应进程 PID/名称</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# netstat -tulnp<br>Active Internet connections (only servers)<br>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name<br><span class="hljs-comment">#协议 接收队列 发送队列  地址                   传输的外部地址                    进程号/进程</span><br>tcp        0      0 0.0.0.0:6380            0.0.0.0:*               LISTEN      1018202/redis-serve<br>tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd<br><br>netstat -an          <span class="hljs-comment">#显示所有连接（包括监听 + 活跃连接）</span><br>Proto RefCnt Flags       Type       State         I-Node   Path<br><span class="hljs-comment">#协议 引用次数 状态      传输类型    状态          inode编号 路径</span><br>unix  2      [ ACC ]     STREAM     LISTENING     18400306 /run/systemd/private<br>unix  2      [ ]         DGRAM                    17763560 /run/user/0/systemd/notify<br><br>netstat -r          <span class="hljs-comment">#显示路由表（等同于 route -n）</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# netstat -r<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface<br><span class="hljs-comment">#目的网段       网关            掩码         TCP最大传输大小和窗口大小     接口</span><br>default         _gateway        0.0.0.0         UG        0 0          0 eth0<br>10.88.0.0       0.0.0.0         255.255.0.0     U         0 0          0 cni-podman0<br>172.16.240.0    0.0.0.0         255.255.240.0   U         0 0          0 eth0<br><br>netstat -i           <span class="hljs-comment">#显示所有网卡接口的统计数据（收发包、丢包等）</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# netstat -i<br>Kernel Interface table<br>Iface             MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg<br><span class="hljs-comment">#接口         最大传输 接收正常  异常   丢包   溢出    发送正常   异常  丢包   溢出</span><br>cni-podman0      1500    44683      0      0 0         53354      0      0      0 BMRU<br>eth0             1500  4990035      0      0 0       3393020      0      0      0 BMRU<br>lo              65536  1215234      0      0 0       1215234      0      0      0 LRU<br>vethfcdc13a0     1500    37461      0      0 0         45818      0      0      0 BMRU<br><br>netstat -s          <span class="hljs-comment">#显示协议数据统计（TCP/UDP/ICMP等）</span><br></code></pre></td></tr></table></figure><h2 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h2><p>socket 信息查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">ss -t        <span class="hljs-comment"># 查询tcp 信息</span><br>ss -u        <span class="hljs-comment"># 查询udp 信息</span><br>ss -tulnp    <span class="hljs-comment"># 查询tcp/udp 以及端口和进程信息</span><br>Netid     State      Recv-Q     Send-Q         Local Address:Port           Peer Address:Port     Process<br><span class="hljs-comment">#协议id    状态      接收统计    发送统计          本地ip地址:端口              对端ip地址:端口      进程信息                         </span><br>udp       UNCONN     0          0                    0.0.0.0:111                 0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">5</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">34</span>))<br>udp       UNCONN     0          0                  127.0.0.1:323                 0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;chronyd&quot;,pid=<span class="hljs-number">574</span>,fd=<span class="hljs-number">5</span>))<br>udp       UNCONN     0          0                       [::]:111                    [::]:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">7</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">36</span>))<br>udp       UNCONN     0          0                      [::1]:323                    [::]:*         <span class="hljs-built_in">users</span>:((&quot;chronyd&quot;,pid=<span class="hljs-number">574</span>,fd=<span class="hljs-number">6</span>))<br>tcp       LISTEN     0          511                  0.0.0.0:6380                0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;redis-server&quot;,pid=<span class="hljs-number">1018202</span>,fd=<span class="hljs-number">6</span>))<br>tcp       LISTEN     0          4096                 0.0.0.0:111                 0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">4</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">33</span>))<br>tcp       LISTEN     0          511                  0.0.0.0:80                  0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;nginx&quot;,pid=<span class="hljs-number">990145</span>,fd=<span class="hljs-number">6</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990144</span>,fd=<span class="hljs-number">6</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990143</span>,fd=<span class="hljs-number">6</span>))<br>tcp       LISTEN     0          128                  0.0.0.0:22                  0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;sshd&quot;,pid=<span class="hljs-number">1021</span>,fd=<span class="hljs-number">3</span>))<br>tcp       LISTEN     0          4096                    [::]:111                    [::]:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">6</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">35</span>))<br>tcp       LISTEN     0          511                     [::]:80                     [::]:*         <span class="hljs-built_in">users</span>:((&quot;nginx&quot;,pid=<span class="hljs-number">990145</span>,fd=<span class="hljs-number">7</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990144</span>,fd=<span class="hljs-number">7</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990143</span>,fd=<span class="hljs-number">7</span>))<br>tcp       LISTEN     0          128                     [::]:22                     [::]:*         <span class="hljs-built_in">users</span>:((&quot;sshd&quot;,pid=<span class="hljs-number">1021</span>,fd=<span class="hljs-number">4</span>))<br><br></code></pre></td></tr></table></figure><h1 id="连通性-请求查询"><a href="#连通性-请求查询" class="headerlink" title="连通性&#x2F;请求查询"></a>连通性&#x2F;请求查询</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>ping命令用来检查ip是否可以与对端正常通信，底层使用的是icmp协议。icmp协议中定义了一个字段（ttl  time to live 存活时间）。这里的time 是在网络中传输时，没经过一个网络设备则会-1。当为0时数据包被丢弃。linux中的ping持续执行，window 会请求4次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping 8.8.8.8<br>64 bytes from 8.8.8.8: icmp_seq=1 ttl=54 <span class="hljs-keyword">time</span>=30.4 ms<br>ping -c 5  8.8.8.8         <span class="hljs-comment">#  向8.8.8.8 ip 发起5次ping 请求</span><br>ping -I eth0 8.8.8.8       <span class="hljs-comment">#  指定网卡eth0 发起ping 请求</span><br></code></pre></td></tr></table></figure><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# nslookup baidu.com<br>Server:         100.100.2.136<br>Address:        100.100.2.136#53<br><br>Non-authoritative answer:<br>Name:   baidu.com<br>Address: 39.156.66.10<br>Name:   baidu.com<br>Address: 110.242.68.66<br><br></code></pre></td></tr></table></figure><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>通过命令行创建http请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl www.baidu.com<br><br>curl -d <span class="hljs-string">&quot;username=user&amp;password=pass&quot;</span> https://example.com/login<br><span class="hljs-comment"># 携带消息体发送post 请求</span><br>curl -X POST https://api.example.com/data \<br>     -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>     -d <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30&#125;&#x27;</span><br><span class="hljs-comment"># 传递json 数据</span><br>curl -o file.txt https://example.com/file.txt<br><span class="hljs-comment"># 下载文件到本地</span><br>curl --cookie <span class="hljs-string">&quot;session=abc123&quot;</span> https://example.com<br><span class="hljs-comment"># 定义cookie信息</span><br>curl -I https://example.com<br><span class="hljs-comment"># 获取响应头</span><br>curl -i https://example.com<br><span class="hljs-comment"># 获取响应</span><br>curl -L https://short.url/link<br><span class="hljs-comment"># 跟踪重定向</span><br>curl -F <span class="hljs-string">&quot;file=@localfile.txt&quot;</span> https://example.com/upload<br><span class="hljs-comment"># 上传文件</span><br><span class="hljs-comment"># 其他参数 :</span><br><span class="hljs-comment"># -v：详细模式（debug 信息）</span><br><span class="hljs-comment"># -s：静默模式（不输出进度条）</span><br><span class="hljs-comment"># -sS：静默但出错时显示错误信息（常用组合）</span><br><span class="hljs-comment"># -w &#x27;%&#123;http_code&#125;&#x27;：输出 HTTP 状态码</span><br><span class="hljs-comment"># -k：忽略 HTTPS 证书错误（测试用）</span><br></code></pre></td></tr></table></figure><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://example.com/file.zip<br><span class="hljs-comment"># 获取文件</span><br>wget -O newname.zip https://example.com/file.zip<br><span class="hljs-comment"># 保存文件</span><br>wget -c https://example.com/large.iso<br><span class="hljs-comment"># 断点续传</span><br>wget -r https://example.com/<br><span class="hljs-comment"># 递归下载</span><br>wget --mirror --convert-links --adjust-extension --page-requisites --no-parent https://example.com<br><span class="hljs-comment"># 下载到本地，离线浏览</span><br>wget --header=<span class="hljs-string">&quot;Authorization: Bearer TOKEN123&quot;</span> https://api.example.com/data.json<br>wget --user=admin --password=123 https://example.com/protected/file.zip<br><span class="hljs-comment"># 配置认证信息</span><br>wget -i urls.txt<br><br></code></pre></td></tr></table></figure><h2 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h2><p>简易tcp连接工具 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -l 1234         <span class="hljs-comment"># 创建TCP 服务器</span><br>nc localhost 1234  <span class="hljs-comment"># 连接</span><br>nc -l 1234 &gt; received.txt <span class="hljs-comment"># 开启窗口发送数据</span><br>nc [ip] 1234 &lt; file.txt   <span class="hljs-comment"># 向服务端端口发送的数据</span><br><br></code></pre></td></tr></table></figure><h2 id="iperf"><a href="#iperf" class="headerlink" title="iperf"></a>iperf</h2><p>流量性能测试工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">iperf -s                     <span class="hljs-comment">#开启服务端，默认监听5021端口</span><br>iperf -c  [ip]               <span class="hljs-comment">#向目的端口发送10s tcp流量</span><br>iperf -c server_ip -u -b 100M#向服务端发送100M的 udp流量<br><br>-r  <span class="hljs-comment">#双向测试</span><br>-P  <span class="hljs-comment">#多线程</span><br></code></pre></td></tr></table></figure><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><p>数据流量捕获工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i eth0    <span class="hljs-comment"># 捕获指定端口</span><br>tcpdump host [ip]  <span class="hljs-comment"># 获取目标ip的流量</span><br>tcpdump port       <span class="hljs-comment"># 监听指定端口 </span><br>tcpdump -i eth0 src 192.168.1.1 and dst port 80  <span class="hljs-comment">#接收源为192.168.1.1的 目的端口为80的包</span><br>tcpdump -w capture.pcap -i eth0  <span class="hljs-comment">#捕获包到文件</span><br>tcpdump -i eth0 udp port 53   <span class="hljs-comment">#捕获dns 流量包</span><br><br><span class="hljs-comment"># -i &lt;接口&gt;: 指定要监听的网络接口（如 eth0, wlan0）</span><br><span class="hljs-comment"># -c &lt;数量&gt;: 限制捕获的数据包数量</span><br><span class="hljs-comment"># -n: 不将地址解析为主机名（提高性能）</span><br><span class="hljs-comment"># -t: 不显示时间戳</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell III 内存/IO/文件系统相关命令</title>
    <link href="/2025/04/09/Shell-III-%E5%86%85%E5%AD%98-IO-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/09/Shell-III-%E5%86%85%E5%AD%98-IO-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="free-查看内存使用"><a href="#free-查看内存使用" class="headerlink" title="free 查看内存使用"></a>free 查看内存使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# free -h<br>              total        used        free      shared  buff/cache   available<br>Mem:          1.8Gi       499Mi       747Mi       2.0Mi       784Mi       1.3Gi<br>Swap:            0B          0B          0B<br><br></code></pre></td></tr></table></figure><h1 id="iostat-查看-CPU-和磁盘-I-O-性能"><a href="#iostat-查看-CPU-和磁盘-I-O-性能" class="headerlink" title="iostat 查看 CPU 和磁盘 I&#x2F;O 性能"></a>iostat 查看 CPU 和磁盘 I&#x2F;O 性能</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# iostat<br>Linux 5.10.134-18.al8.x86_64 (iZbp19tqlmjz1dmnm8w43uZ)  04/10/2025      _x86_64_        (2 CPU)<br><br>avg-cpu:  %user   %<span class="hljs-built_in">nice</span> %system %iowait  %steal   %idle<br>           0.87    0.00    0.49    0.01    0.00   98.62<br><br>Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>vda               0.82         6.03        12.57   10324570   21525204<br><br></code></pre></td></tr></table></figure><h1 id="lsblk-显示块设备信息"><a href="#lsblk-显示块设备信息" class="headerlink" title="lsblk 显示块设备信息"></a>lsblk 显示块设备信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# lsblk<br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>vda    253:0    0   40G  0 disk<br>├─vda1 253:1    0    2M  0 part<br>├─vda2 253:2    0  200M  0 part /boot/efi<br>└─vda3 253:3    0 39.8G  0 part /<br><br></code></pre></td></tr></table></figure><h1 id="df-查看设备与目录的挂载关系，使用情况"><a href="#df-查看设备与目录的挂载关系，使用情况" class="headerlink" title="df 查看设备与目录的挂载关系，使用情况"></a>df 查看设备与目录的挂载关系，使用情况</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# <span class="hljs-built_in">df</span> -h<br>Filesystem      Size  Used Avail Use% Mounted on<br>devtmpfs        916M     0  916M   0% /dev<br>tmpfs           936M   84K  936M   1% /dev/shm<br>tmpfs           936M  764K  935M   1% /run<br>tmpfs           936M     0  936M   0% /sys/fs/cgroup<br>/dev/vda3        40G   14G   25G  36% /<br>/dev/vda2       200M  5.8M  195M   3% /boot/efi<br>tmpfs           188M     0  188M   0% /run/user/0<br>shm              63M     0   63M   0% /var/lib/containers/storage/overlay-containers/1936bab81ca270b4558231e4a09ddb43a3274744bbfcf280791138efb612ffd0/userdata/shm<br>overlay          40G   14G   25G  36% /var/lib/containers/storage/overlay/0a4e05c5de62dfb74f643f918af2c216ef814b2a8ad5cd1b60ac96d4c514c654/merged<br><br></code></pre></td></tr></table></figure><h1 id="du-path-h-遍历文件目录，查看占用空间大小"><a href="#du-path-h-遍历文件目录，查看占用空间大小" class="headerlink" title="du [path] -h 遍历文件目录，查看占用空间大小"></a>du [path] -h 遍历文件目录，查看占用空间大小</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ codfish]# <span class="hljs-built_in">du</span> /home/codfish/hello/ -h<br>12K     /home/codfish/hello/<br><br></code></pre></td></tr></table></figure><h1 id="lsof-查看哪些进程在访问当前文件目录"><a href="#lsof-查看哪些进程在访问当前文件目录" class="headerlink" title="lsof 查看哪些进程在访问当前文件目录"></a>lsof 查看哪些进程在访问当前文件目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">COMMAND     PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME<br>bash    1022674 root  cwd    DIR  253,3     4096 1184776 .   <span class="hljs-comment"># shell 在当前目录执行</span><br>lsof    1022812 root  cwd    DIR  253,3     4096 1184776 .   <span class="hljs-comment"># shel执行lsof创建的进程在当前目录</span><br>lsof    1022813 root  cwd    DIR  253,3     4096 1184776 .   <span class="hljs-comment"># lsof 创建的子进程</span><br><br>COMMAND发起该文件访问的进程名（可执行文件名）<br>PID    进程 ID<br>TID    线程 ID（Thread ID）— 某些工具如 lsof -T 或 proc 工具可能列出具体线程<br>TASKCMD如果有线程，每个线程的名字（比如 Java 线程名、C++的 pthread 名称等）<br>USER  拥有该进程的用户<br>FD    文件描述符（File Descriptor），比如 cwd, mem, txt, 0u, 1w 等<br>TYPE  打开的文件类型，比如：REG（普通文件），DIR（目录），CHR（字符设备），FIFO（管道）等<br>DEVICE文件所在设备的主次设备号，格式通常为 major:minor（比如 8:1 代表 /dev/sda1）<br>SIZE/OFF文件的大小或文件偏移量<br>NODE  文件在设备上的 inode 编号<br>NAME  文件名（或资源名），即被访问的实际对象路径<br></code></pre></td></tr></table></figure><h1 id="mount-完成-块设备-文件系统-资源挂载"><a href="#mount-完成-块设备-文件系统-资源挂载" class="headerlink" title="mount 完成 块设备-文件系统-资源挂载"></a>mount 完成 块设备-文件系统-资源挂载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/sdb1  <span class="hljs-comment"># 定义块设备的文件系统</span><br>mount /dev/sdb1 /mnt/mydisk  <span class="hljs-comment"># 挂载文件系统到挂载点</span><br><br><span class="hljs-comment"># 或者直接 指定文件系统到挂载点</span><br>mount -t &lt;文件系统类型&gt; &lt;设备&gt; &lt;挂载点&gt;<br>mount -t proc proc /proc<br><span class="hljs-comment"># 挂载进程 这里的/proc</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell II 进程相关命令</title>
    <link href="/2025/04/09/%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/09/%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h1><blockquote><p>进程可以看作是操作系统对资源的基本调度单位，通过进程的调度机制，系统得以协调各项任务的执行。</p></blockquote><p>进程的调用流程 → 通过父进程创建子进程创建新的堆栈结构 → 子进程加载自身需要的资源到堆栈中 → 堆栈中执行命令 → 执行到main函数返回或者进程异常退出</p><h1 id="ps-查看进程指令"><a href="#ps-查看进程指令" class="headerlink" title="ps  查看进程指令"></a>ps  查看进程指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">参数列表<br>-e 或 -A  显示所有进程<br>-f        完整格式<br>-u        指定用户进程<br>-x        无终端进程<br>-o      自定义输出字段<br>-C        指定程序进程<br><br>ps -ef    全部进程<br>ps aux    全部进程 BSD风格<br>ps -u     指定用户进程<br><br>ps aux | awk <span class="hljs-string">&quot;NR&lt;=2&quot;</span><br>USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root           1  0.0  0.5  21500 11112 ?        Ss   Mar21   0:16 /usr/lib/systemd/systemd --system --deserialize 23<br><br>字段信息<br>USER :  用户名<br>PID :   进程号<br>%CPU :  CPU占用率<br>%MEM :  内存使用率<br>VSZ  :  虚拟内存大小<br>RSS  :  实际占用内存<br>TTY  :  无终端为 ？<br>START : 启动时间<br>TIME  : 占用CPU的时间<br>CMD  :  执行的命令<br>STAT :  进程状态<br><br>STAT状态含义<br>R正在运行<br>S休眠中（可中断）<br>D不可中断的休眠<br>T停止（如 Ctrl+Z）<br>Z僵尸进程<br>X死亡状态<br><br></code></pre></td></tr></table></figure><h1 id="top-动态打印所有进程的性能指标"><a href="#top-动态打印所有进程的性能指标" class="headerlink" title="top 动态打印所有进程的性能指标"></a>top 动态打印所有进程的性能指标</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">top - 22:12:10 up 19 days,  8:24,  1 user,  load average: 0.00, 0.00, 0.00<br><span class="hljs-comment"># 22:12:10 → 当前系统时间。</span><br><span class="hljs-comment"># up 19 days, 8:24 → 系统已经运行了 19 天 8 小时 24 分钟。</span><br><span class="hljs-comment"># 1 user → 当前登录系统的用户数。</span><br><span class="hljs-comment"># load average: 0.00, 0.00, 0.00 → 系统平均负载：</span><br><span class="hljs-comment"># 分别表示过去 1 分钟、5 分钟、15 分钟的平均负载（任务队列长度）。等待执行的任务个数</span><br> <br>Tasks: 111 total,   1 running, 110 sleeping,   0 stopped,   0 zombie<br><span class="hljs-comment"># 111 total → 当前系统总共的进程数。</span><br><span class="hljs-comment"># 1 running → 正在运行的进程（状态是 R）。</span><br><span class="hljs-comment"># 110 sleeping → 休眠状态的进程（大多数进程处于这个状态）。</span><br><span class="hljs-comment"># 0 stopped → 被终止或挂起（T）的进程数。</span><br><span class="hljs-comment"># 0 zombie → 僵尸进程数，应该为 0，非 0 可能代表父进程没处理子进程退出状态。</span><br>%Cpu(s):  0.3 us,  0.2 sy,  0.0 ni, 99.2 <span class="hljs-built_in">id</span>,  0.0 wa,  0.2 hi,  0.2 si,  0.0 st<br><span class="hljs-comment"># us用户态（user）进程占用 CPU 百分比（不包括 nice）</span><br><span class="hljs-comment"># sy内核态（system）进程占用 CPU 百分比</span><br><span class="hljs-comment"># ni用户进程 nice 优先级调整后占用的 CPU 百分比</span><br><span class="hljs-comment"># id空闲（idle）CPU 百分比（越高越空闲）</span><br><span class="hljs-comment"># wa等待 I/O 的时间占比（例如磁盘慢时）</span><br><span class="hljs-comment"># hi硬中断（hardware IRQ）占用</span><br><span class="hljs-comment"># si软中断（software IRQ）占用</span><br><span class="hljs-comment"># st被虚拟机偷走的 CPU（steal time）</span><br>MiB Mem :   1871.0 total,    761.0 free,    498.8 used,    770.9 buff/cache<br><span class="hljs-comment"># total总内存</span><br><span class="hljs-comment"># free未使用的内存</span><br><span class="hljs-comment"># used实际已用的内存（不包括 cache/buffer）</span><br><span class="hljs-comment"># buff/cache系统缓存和缓冲使用的内存（可回收）</span><br>MiB Swap:      0.0 total,      0.0 free,      0.0 used.   1372.2 avail Mem<br><span class="hljs-comment"># total交换分区总量（你这里没有启用 swap）</span><br><span class="hljs-comment"># free空闲的 swap 空间</span><br><span class="hljs-comment"># used已用 swap 空间</span><br><span class="hljs-comment"># avail Mem可用内存：包含 free + reclaimable cache，更真实地反映可用内存</span><br><br> PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND<br> 1239 root      20   0  222028  97448   7212 S   0.7   5.1 216:30.97 AliYunDunMonito<br><br></code></pre></td></tr></table></figure><h1 id="vmstat-查看系统内存，IO-CPU信息"><a href="#vmstat-查看系统内存，IO-CPU信息" class="headerlink" title="vmstat  查看系统内存，IO, CPU信息"></a>vmstat  查看系统内存，IO, CPU信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">vmstat<br>procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="hljs-keyword">in</span>   cs us sy <span class="hljs-built_in">id</span> wa st<br> 2  0      0 778652 103472 686320    0    0     3     6    7    8  1  0 99  0  0<br><br>procs 进程<br>r可运行进程数（run queue），表示 CPU 等待队列长度<br>b正在等待 I/O 的进程数量（blocked）<br><br>memory 内存<br>swpd使用的 swap 空间（单位 KB）<br>free空闲物理内存<br>buff用作 buffer 的内存（主要缓存块设备元数据）<br>cache用作 cache 的内存（主要缓存文件内容）<br><br>swap 交换<br>si从 swap 中读入的数据量（KB/s）<br>so写入 swap 的数据量（KB/s）<br><br>io 磁盘读写<br>bi从块设备读入数据的速率（block <span class="hljs-keyword">in</span>，KB/s）<br>bo写到块设备的数据速率（block out，KB/s）<br><br>system 系统级操作<br><span class="hljs-keyword">in</span>每秒中断次数（包括硬件中断 + 软件中断）<br>cs每秒上下文切换次数（context switch）<br><br>cpu  cpu时间百分比<br>us用户态 CPU 使用百分比<br>sy内核态 CPU 使用百分比<br><span class="hljs-built_in">id</span>空闲时间百分比<br>wa等待 I/O 百分比（高说明 I/O 慢）<br>st被虚拟机“偷走”的 CPU 时间（只在虚拟化环境中有用）<br></code></pre></td></tr></table></figure><h1 id="pidstat"><a href="#pidstat" class="headerlink" title="pidstat"></a>pidstat</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">pidstat -p 1239 1 1<br>查询 进程号1239的信息<br>Linux 5.10.134-18.al8.x86_64 (iZbp19tqlmjz1dmnm8w43uZ)  04/09/2025      _x86_64_        (2 CPU)<br><br>10:56:06 PM   UID       PID    %usr %system  %guest   %<span class="hljs-built_in">wait</span>    %CPU   CPU  Command<br>10:56:07 PM     0      1239    0.99    0.00    0.00    0.00    0.99     1  AliYunDunMonito<br><br>UID拥有该进程的用户 ID<br>PID进程 ID<br>%usr用户态 CPU 使用百分比<br>%system内核态 CPU 使用百分比<br>%CPU总 CPU 占用（usr + system）<br>CPU运行该进程的 CPU 核心编号<br>Command可执行文件名（进程名）<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell I 概念与基本命令</title>
    <link href="/2025/04/09/Shell-1/"/>
    <url>/2025/04/09/Shell-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h1 id="什么是Shell"><a href="#什么是Shell" class="headerlink" title="什么是Shell ?"></a>什么是Shell ?</h1><p>Shell 是一种应用于linux系统的命令行解释器工具的通称。（功能实现层面）</p><ul><li>用户向shell 发出命令时<ul><li>1 如果是内置命令，则直接在当前进程执行内置命令。（内置命令如cd,echo,可以使用type查询）</li><li>2如果是非内置命令，则fork() 一个子进程，在子进程中执行用户输入的命令。</li></ul></li></ul><p>Shell 是新用户接入服务器后启动的默认挂起程序。 （应用层面）</p><ul><li>应用执行完毕后，会关闭进程。为了使用户可以正常与服务器交互，<ul><li>需要一个进程在前台挂起，持续等待用户输入命令</li></ul></li></ul><p>Shell 是作用于用户和操作系统内核间的中间程序，为用户提供服务，执行操作系统功能。（系统架构层面）</p><ul><li>许多程序需要通过系统调用来实现其功能，而允许用户直接访问内核功能是不安全的。所以通过shell命令来进行系统调用完成系统。</li></ul><p><img src="https://i.111666.best/image/P9kPm8BDRhogLaekV6yAYq.png" alt="image"></p><h1 id="Shell-的执行格式"><a href="#Shell-的执行格式" class="headerlink" title="Shell 的执行格式"></a>Shell 的执行格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">    <span class="hljs-comment">#               command                                - parameter                 value </span><br><br><span class="hljs-comment">#系统提示符         shell命令或其他可执行程序               选项                        传入的参数</span><br></code></pre></td></tr></table></figure><p>独立的命令的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  当通过 yum , dnf (centos)或者 apt(ubuntu) 进行命令安装后</span><br><span class="hljs-comment">#  对应的命令会放置在/user/bin 文件目录下。 shell命令执行时会去该目录下寻找</span><br><span class="hljs-comment">#  如 [root@iZbp19tqlmjz1dmnm8w43uZ ~]# unzip</span><br><span class="hljs-comment">#  -bash: /usr/bin/unzip: No such file or directory</span><br><span class="hljs-comment">#  有些程序安装后 并不会直接安装到/user/bin 需要创建软链接 将程序映射到/user/bin 目录</span><br>   <span class="hljs-built_in">ln</span>             -s            /user/local/bin/xxx   /user/bin/xxx<br><span class="hljs-comment">#  创建链接      指定为软链接    安装目录               链接</span><br></code></pre></td></tr></table></figure><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="清空屏幕打印-clear"><a href="#清空屏幕打印-clear" class="headerlink" title="清空屏幕打印 - clear"></a>清空屏幕打印 - clear</h2><ul><li>只是将输入置于顶端</li></ul><h2 id="回显打印-echo"><a href="#回显打印-echo" class="headerlink" title="回显打印 - echo"></a>回显打印 - echo</h2><h2 id="查看当前工作目录-pwd"><a href="#查看当前工作目录-pwd" class="headerlink" title="查看当前工作目录 - pwd"></a>查看当前工作目录 - pwd</h2><h2 id="查看返回路径中的文件名-basename"><a href="#查看返回路径中的文件名-basename" class="headerlink" title="查看返回路径中的文件名 - basename"></a>查看返回路径中的文件名 - basename</h2><ul><li>basename [ path ] [ suffix ]</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# <span class="hljs-built_in">touch</span> hello.world<br>[root@iZbp19tqlmjz1dmnm8w43uZ ~]# <span class="hljs-built_in">basename</span> /root/hello.world .world<br>hello<br><br></code></pre></td></tr></table></figure><h2 id="查询目录下的内容-ls"><a href="#查询目录下的内容-ls" class="headerlink" title="查询目录下的内容 - ls"></a>查询目录下的内容 - ls</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-l <span class="hljs-comment">#以长格式显示文件信息（权限、所有者、组、大小、修改时间等）</span><br>-a <span class="hljs-comment">#显示所有文件，包括隐藏文件（以 . 开头的文件）</span><br>-h <span class="hljs-comment">#与 -l 一起使用，以人类可读的方式显示文件大小（KB、MB、GB）</span><br>-t <span class="hljs-comment">#按修改时间排序（最新的在前）</span><br>-r <span class="hljs-comment">#反向排序</span><br>-R <span class="hljs-comment">#递归地列出子目录中的文件</span><br></code></pre></td></tr></table></figure><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>linux中 文件的 读，写，执行权限 被设置为了3种 ： 所有者，所属用户组，其他用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 当使用ls -l 时,可以看到当前目录下的文件权限描述</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rw-r--r-- 1 root root 7 Mar 28 00:44 hello.txt<br><br><span class="hljs-comment"># &quot;-&quot; 表示是一个文件 其他类型如 d:目录，l:链接，b:块设备，c:字符设备文件</span><br><span class="hljs-comment"># rwx  分别代表r 可读 w 可写 x 可执行</span><br><span class="hljs-comment"># 所以上述 hello.txt 文件 代表 当前文件是一个普通文件，可以被用户所有者读写，所属用户组和其他用户可读</span><br><span class="hljs-comment"># 使用chmod 来修改用户权限 权限表示为比特置位。当授予所有权限时为 4+2+1 = 7</span><br><span class="hljs-comment"># 所以 授予所有者执行权限为:</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> +100 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxr--r-- 1 root root 7 Mar 28 00:44 hello.txt<br><span class="hljs-comment"># 授予其他用户读写权限为:</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> +006 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxr--rw- 1 root root 7 Mar 28 00:44 hello.txt<br><span class="hljs-comment"># 去除所属用户组读权限为:</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwx---rw- 1 root root 7 Mar 28 00:44 hello.txt<br><br></code></pre></td></tr></table></figure><h2 id="用户访问权限"><a href="#用户访问权限" class="headerlink" title="用户访问权限"></a>用户访问权限</h2><p>在文件的inode中存储了4字节的文件权限内容描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">        -             <br><span class="hljs-comment">#文件类型(1 字节 -,d,l,b,c)  #uid gid sticky(3位)  rwx rwx rwx  </span><br></code></pre></td></tr></table></figure><p>所以当我们想要访问文件时</p><ol><li>查看当前用户是否具有当前文件的读写执行权限，使用chmod 添加对应的权限（影响最小</li><li>使用chown ， chgrp 修改文件所有者 ，所属组 来获得权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwx---rw- 1 root root 7 Mar 28 00:44 hello.txt<br><span class="hljs-comment"># 当前文件 所有者具有读写执行权限，其他用户具有读写权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> -006 hello.txt<br><span class="hljs-comment"># 清除其他用户权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# su cod<br><span class="hljs-comment"># 切换到其他用户，用户无法执行读写</span><br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br><span class="hljs-built_in">cat</span>: hello.txt: Permission denied<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">echo</span> hello &gt;hello.txt<br>bash: hello.txt: Permission denied<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">exit</span><br><span class="hljs-built_in">exit</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chown</span> cod hello.txt<br><span class="hljs-comment"># 切换文件所有这为cod, cod用户得到了读写权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# su cod<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br>你好<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">echo</span> hello &gt; hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> +070 hello.txt<br><span class="hljs-comment"># 向文件添加所属组的访问权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxrwx--- 1 root root 6 Apr  9 17:45 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chgrp</span> cod hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chown</span> root hello.txt<br><span class="hljs-comment"># 修改所属组为cod,所有者为root,使用所属组访问</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxrwx--- 1 root cod 6 Apr  9 17:45 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# su cod<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br>hello<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">echo</span> 你好 &gt;hello.txt<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br>你好<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span>+7777 hello.txt<br><span class="hljs-comment"># 修改所有置位，可以看到所有者和所属组变为s</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwsrwsrwt 1 root cod 7 Apr  9 18:07 hello.txt<br><br></code></pre></td></tr></table></figure><h2 id="切换目录-cd"><a href="#切换目录-cd" class="headerlink" title="切换目录 - cd"></a>切换目录 - cd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ codfish]# <span class="hljs-built_in">cd</span> hello/<br><span class="hljs-comment"># 移动到hello目录</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cd</span> ..<br><span class="hljs-comment"># 返回上级目录</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ codfish]# <span class="hljs-built_in">cd</span> ~<br><span class="hljs-comment"># 返回home目录</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ ~]#<br><br></code></pre></td></tr></table></figure><h2 id="拷贝文件或目录-cp"><a href="#拷贝文件或目录-cp" class="headerlink" title="拷贝文件或目录 - cp"></a>拷贝文件或目录 - cp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">cp</span> hello hello2<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>hello  hello2<br><br></code></pre></td></tr></table></figure><h2 id="创建文件目录-mkdir"><a href="#创建文件目录-mkdir" class="headerlink" title="创建文件目录 - mkdir"></a>创建文件目录 - mkdir</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mkdir</span> hi<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mkdir</span> -p one/two<br><span class="hljs-comment"># 递归创建</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">cd</span> one/two/<br>[root@iZbp19tqlmjz1dmnm8w43uZ two]#<br><br></code></pre></td></tr></table></figure><h2 id="移动文件或目录-mv"><a href="#移动文件或目录-mv" class="headerlink" title="移动文件或目录  - mv"></a>移动文件或目录  - mv</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>hello2  hello<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mv</span> hello hi<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>hello2  hi<br><br></code></pre></td></tr></table></figure><h2 id="删除文件或目录-rm"><a href="#删除文件或目录-rm" class="headerlink" title="删除文件或目录 - rm"></a>删除文件或目录 - rm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">rm</span> hi<br><span class="hljs-built_in">rm</span>: remove regular empty file <span class="hljs-string">&#x27;hi&#x27;</span>? y<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mkdir</span> hi<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">rm</span> -r hi<br><span class="hljs-built_in">rm</span>: remove directory <span class="hljs-string">&#x27;hi&#x27;</span>? y<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">rm</span> -rf hi<br><span class="hljs-comment"># 递归删除目录及文件</span><br><br></code></pre></td></tr></table></figure><h2 id="创建空文件-touch"><a href="#创建空文件-touch" class="headerlink" title="创建空文件 - touch"></a>创建空文件 - touch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">touch</span> file<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>file<br></code></pre></td></tr></table></figure><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><p>cat  直接查看整个文件的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">cat</span> file<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td></tr></table></figure><p>more  交互式查看文件内容</p><p>less</p><p>head  从头部查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">head</span> -n 3 file<br>1<br>2<br>3<br><br></code></pre></td></tr></table></figure><p>tail 从尾部查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">tail</span> -n 3 file<br>8<br>9<br>10<br></code></pre></td></tr></table></figure><h2 id="查看文件-目录-实际信息-（inode-block-地址）-stat"><a href="#查看文件-目录-实际信息-（inode-block-地址）-stat" class="headerlink" title="查看文件&#x2F;目录 实际信息 （inode&#x2F;block 地址）- stat"></a>查看文件&#x2F;目录 实际信息 （inode&#x2F;block 地址）- stat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">stat</span> file<br>  File: file<br>  Size: 21              Blocks: 8          IO Block: 4096   regular file<br>Device: fd03h/64771d    Inode: 1224103     Links: 1<br>Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)<br>Access: 2025-04-09 21:05:51.065782226 +0800<br>Modify: 2025-04-09 21:05:49.079699125 +0800<br>Change: 2025-04-09 21:05:49.081699209 +0800<br> Birth: 2025-04-09 21:05:49.079699125 +0800<br><br></code></pre></td></tr></table></figure><h2 id="查看文件信息-file"><a href="#查看文件信息-file" class="headerlink" title="查看文件信息 - file"></a>查看文件信息 - file</h2><h2 id="压缩-解压缩-tar-czf-xzf"><a href="#压缩-解压缩-tar-czf-xzf" class="headerlink" title="压缩&#x2F;解压缩  - tar(czf&#x2F;xzf)"></a>压缩&#x2F;解压缩  - tar(czf&#x2F;xzf)</h2>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器网络</title>
    <link href="/2025/04/06/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/04/06/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="Veth"><a href="#Veth" class="headerlink" title="Veth"></a>Veth</h2><p>veth（Virtual Ethernet）是Linux中的一种虚拟网络设备，它工作在第二层（数据链路层），主要用于连接不同的网络命名空间（network namespaces）。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>veth设备总是成对出现，类似于一根网线的两端。当数据包从一端发出后，会立即从另一端收到。这种特性使它成为连接不同网络命名空间的理想工具。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ol><li><strong>成对创建</strong>：veth设备必须成对创建，一端发送的数据会从另一端接收。</li><li><strong>跨命名空间通信</strong>：veth对的两端可以位于不同的网络命名空间中，是Linux实现网络虚拟化的基础设施。</li><li><strong>无状态</strong>：veth设备本身不存储任何状态信息，仅作为数据的传输通道。</li><li><strong>支持标准网络操作</strong>：可以为veth设备配置IP地址、添加路由、设置防火墙规则等。</li></ol><h3 id="Veth工作模式"><a href="#Veth工作模式" class="headerlink" title="Veth工作模式"></a>Veth工作模式</h3><p><img src="https://i.111666.best/image/cd1vfax0o2HRKQWO1OAGwY.png" alt="image"></p><p>veth 的宿主端接口，在未接入 bridge 且配置 IP 时，可类比为 VLAN 子网的默认网关；</p><p>而当加入 bridge 时，它就退化成纯二层接入口，成为 bridge 内部以太帧转发的端口，不应再承担 IP 层通信角色。</p><h3 id="Veth设备端配置"><a href="#Veth设备端配置" class="headerlink" title="Veth设备端配置"></a>Veth设备端配置</h3><p>宿主机配置网络→创建容器→将网络加入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#宿主机 </span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> add veth-c <span class="hljs-built_in">type</span> veth peer name veth-br  <span class="hljs-comment"># 配置结伴网络</span><br><span class="hljs-built_in">sudo</span> ip addr add  192.168.100.100/24  dev  veth-br <span class="hljs-comment">#配置ip 信息</span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-br up<br><br><span class="hljs-comment">#创建容器后，在宿主机查询容器进程，添加网络到宿主机</span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c netns 968998<br><br><span class="hljs-comment">#容器</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c up<br>ip addr add 192.168.100.100/24 dev veth-c<br></code></pre></td></tr></table></figure><p>创建网络命名空间→创建veth网络→添加veth网络到网络命名空空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 宿主机添加网络命名空间 net1</span><br>ip netns add net1<br><span class="hljs-comment"># 添加veth 网络</span><br>ip <span class="hljs-built_in">link</span> add veth1 <span class="hljs-built_in">type</span> veth peer name veth1_p<br><span class="hljs-comment"># 绑定veth网络到网络命名空间 net1</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth1 netns net1<br>ip addr add 192.168.100.100/24 dev veth1_p<br><br><span class="hljs-comment">#通过命令执行</span><br>ip netns <span class="hljs-built_in">exec</span> net1 ip addr<br>ip netns <span class="hljs-built_in">exec</span> net1 ip addr add 192.168.100.102/24 dev veth1<br>ip netns <span class="hljs-built_in">exec</span> net1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth1 up<br></code></pre></td></tr></table></figure><p>网桥配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 宿主机 创建 namespace</span><br>ip netns add ns1<br>ip netns add ns2<br><br><span class="hljs-comment"># 创建 veth pair</span><br>ip <span class="hljs-built_in">link</span> add veth-a <span class="hljs-built_in">type</span> veth peer name veth-a-ns<br>ip <span class="hljs-built_in">link</span> add veth-b <span class="hljs-built_in">type</span> veth peer name veth-b-ns<br><br><span class="hljs-comment"># 放进 namespace</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a-ns netns ns1<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b-ns netns ns2<br><br><span class="hljs-comment"># 设置 IP</span><br>ip netns <span class="hljs-built_in">exec</span> ns1 ip addr add 192.168.100.10/24 dev veth-a-ns<br>ip netns <span class="hljs-built_in">exec</span> ns2 ip addr add 192.168.100.20/24 dev veth-b-ns<br><br><span class="hljs-comment"># 启动接口</span><br>ip netns <span class="hljs-built_in">exec</span> ns1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a-ns up<br>ip netns <span class="hljs-built_in">exec</span> ns2 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b-ns up<br>ip netns <span class="hljs-built_in">exec</span> ns1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> lo up<br>ip netns <span class="hljs-built_in">exec</span> ns2 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> lo up<br><br><span class="hljs-comment"># 宿主机接口 up</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a up<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b up<br><br><span class="hljs-comment"># 创建 bridge</span><br>ip <span class="hljs-built_in">link</span> add br0 <span class="hljs-built_in">type</span> bridge<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> br0 up<br>ip addr add 192.168.100.1/24 dev br0<br><br><span class="hljs-comment"># 加入 bridge</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a master br0<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b master br0<br><br>ip netns <span class="hljs-built_in">exec</span> ns1 ping -c 3 192.168.100.20<br>ip netns <span class="hljs-built_in">exec</span> ns1 ping -c 3 192.168.100.1<br><br></code></pre></td></tr></table></figure><h2 id="容器外部网络访问"><a href="#容器外部网络访问" class="headerlink" title="容器外部网络访问"></a>容器外部网络访问</h2><p>设置网络转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -A FORWARD -j ACCEPT<br>置位  /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p>Docker 通过向iptables写入规则 来控制 端口映射转发</p><h3 id="NAT（network-address-translation）"><a href="#NAT（network-address-translation）" class="headerlink" title="NAT（network address translation）"></a>NAT（network address translation）</h3><p>NAT (Network Address Translation) 是一种网络技术，它允许多台设备通过单个公共 IP 地址访问互联网。通过一张映射表完成内网和外网IP，端口间的转换</p><p>NAT 的主要功能和特点：</p><ol><li>地址转换：NAT 将内部网络中的私有 IP 地址转换为公共 IP 地址，使得内部网络的设备能够访问互联网</li><li>节约 IP 地址资源：由于 IPv4 地址资源有限，NAT 技术可以使多台设备共享一个公共 IP 地址，缓解了 IP 地址短缺问题</li><li>隐藏内部网络结构：NAT 可以隐藏内部网络的真实 IP 地址，提高网络安全性</li></ol><p>NAT 的主要类型：</p><ol><li>静态 NAT：一对一映射，每个私有 IP 地址对应一个固定的公共 IP 地址</li><li>动态 NAT：从公共 IP 地址池中动态分配地址</li><li>网络地址端口转换（NAPT&#x2F;PAT）：最常用的类型，多个私有 IP 地址共享一个公共 IP 地址，通过不同的端口号区分不同的连接</li></ol><h3 id="1-filter表"><a href="#1-filter表" class="headerlink" title="1.filter表"></a>1.filter表</h3><p>filter包含3个内置链用于过滤数据包，包含三个内置链：</p><ul><li>INPUT：处理发往本机的数据包</li><li>FORWARD：处理经过本机转发的数据包</li><li>OUTPUT：处理本机发出的数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 允许已建立的连接</span><br>iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<br><span class="hljs-comment"># 允许本地回环接口</span><br>iptables -A INPUT -i lo -j ACCEPT<br><span class="hljs-comment"># 允许 SSH 连接</span><br>iptables -A INPUT -p tcp --dport 22 -j ACCEPT<br><span class="hljs-comment"># 默认拒绝其他所有入站连接</span><br>iptables -P INPUT DROP<br><span class="hljs-comment"># 查询表结构</span><br>iptables -L -v<br><span class="hljs-comment"># 指定filter表查询</span><br>iptables -t filter -L -v<br></code></pre></td></tr></table></figure><h3 id="2-nat-表"><a href="#2-nat-表" class="headerlink" title="2. nat 表"></a>2. nat 表</h3><p>nat 表用于网络地址转换，包含三个内置链：</p><ul><li>PREROUTING：在路由决策前处理数据包</li><li>OUTPUT：处理本机产生的数据包</li><li>POSTROUTING：在路由决策后处理数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将内网主机的流量 NAT 到公网 IP</span><br>iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j MASQUERADE<br><span class="hljs-comment"># 端口转发</span><br>iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.100:8080<br><span class="hljs-comment"># 查询nat表</span><br>iptables -t nat -L -v<br></code></pre></td></tr></table></figure><h3 id="3-mangle-表"><a href="#3-mangle-表" class="headerlink" title="3. mangle 表"></a>3. mangle 表</h3><p>mangle 表用于特殊的数据包修改，包含五个内置链：</p><ul><li>PREROUTING：数据包进入系统时</li><li>INPUT：数据包被路由到本地时</li><li>FORWARD：转发数据包时</li><li>OUTPUT：本地生成的数据包时</li><li>POSTROUTING：数据包离开系统时</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改数据包的 TTL 值</span><br>iptables -t mangle -A POSTROUTING -o eth0 -j TTL --ttl-set 64<br><span class="hljs-comment"># 设置数据包的优先级</span><br>iptables -t mangle -A PREROUTING -p tcp --dport 22 -j TOS --set-tos 0x10<br><span class="hljs-comment"># 查询mangle表</span><br>iptables -t mangle -L -v<br></code></pre></td></tr></table></figure><h3 id="4-raw-表"><a href="#4-raw-表" class="headerlink" title="4. raw 表"></a>4. raw 表</h3><p>raw 表用于配置免于连接跟踪的例外，包含两个内置链：</p><ul><li>PREROUTING：处理刚到达的数据包</li><li>OUTPUT：处理本地生成的数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对 DNS 查询免除连接跟踪</span><br>iptables -t raw -A OUTPUT -p udp --dport 53 -j NOTRACK<br><span class="hljs-comment"># 对某些 IP 免除连接跟踪</span><br>iptables -t raw -A PREROUTING -s 192.168.1.100 -j NOTRACK<br><span class="hljs-comment"># 查询raw表</span><br>iptables -t raw -L -v<br></code></pre></td></tr></table></figure><h3 id="5-security-表"><a href="#5-security-表" class="headerlink" title="5. security 表"></a>5. security 表</h3><p>security 表用于强制访问控制网络规则（如 SELinux），包含三个内置链：</p><ul><li>INPUT：处理入站数据包</li><li>OUTPUT：处理出站数据包</li><li>FORWARD：处理转发数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置 SELinux 安全上下文标记</span><br>iptables -t security -A INPUT -p tcp --dport 80 -j SECMARK --selctx system_u:object_r:http_server_packet_t:s0<br><span class="hljs-comment"># 查询security表</span><br>iptables -t security -L -v<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>外部网络 - 宿主机 - 容器 ：</p><p>创建 veth网络，将veth网络两端绑定在宿主机和容器两端</p><p>配置网桥，将宿主机中的veth端加入到网桥中，veth自动退化为虚拟端口</p><p>宿主机使用iptables 配置 收发请求的网络数据流量 映射到容器网络。</p>]]></content>
    
    
    
    <tags>
      
      <tag>虚拟化技术</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>task-struct</title>
    <link href="/2025/04/01/task-struct/"/>
    <url>/2025/04/01/task-struct/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-内核中的-task-struct-结构详解"><a href="#Linux-内核中的-task-struct-结构详解" class="headerlink" title="Linux 内核中的 task_struct 结构详解"></a>Linux 内核中的 <code>task_struct</code> 结构详解</h1><p>task_struct 是 Linux 内核中用来表示 <strong>进程（或者线程）</strong> 的核心结构体，是操作系统调度、管理和追踪进程的基础。该结构体非常庞大，包含了大量字段，用于管理进程的各种状态。</p><hr><h2 id="🧠-task-struct-的主要组成结构（按功能分类）"><a href="#🧠-task-struct-的主要组成结构（按功能分类）" class="headerlink" title="🧠 task_struct 的主要组成结构（按功能分类）"></a>🧠 <code>task_struct</code> 的主要组成结构（按功能分类）</h2><h3 id="1-进程标识"><a href="#1-进程标识" class="headerlink" title="1. 进程标识"></a>1. 进程标识</h3><p>用于标识进程的唯一性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">pid_t</span> pid;                      <span class="hljs-comment">// 进程ID</span><br><span class="hljs-type">pid_t</span> tgid;                     <span class="hljs-comment">// 线程组ID（主线程的pid）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span> *<span class="hljs-title">thread_pid</span>;</span>        <span class="hljs-comment">// 线程ID（每个线程唯一）</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-进程状态与调度相关"><a href="#2-进程状态与调度相关" class="headerlink" title="2. 进程状态与调度相关"></a>2. 进程状态与调度相关</h3><p>包括进程状态、优先级、调度器策略等：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> state;           <span class="hljs-comment">// 当前进程状态（如 TASK_RUNNING 等）</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;            <span class="hljs-comment">// 标志位（PF_开头）</span><br><span class="hljs-type">int</span> prio;                      <span class="hljs-comment">// 动态优先级</span><br><span class="hljs-type">int</span> static_prio;               <span class="hljs-comment">// 静态优先级</span><br><span class="hljs-type">int</span> policy;                    <span class="hljs-comment">// 调度策略（如 SCHED_NORMAL）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sched_entity</span> <span class="hljs-title">se</span>;</span>        <span class="hljs-comment">// CFS调度实体</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-父子进程关系"><a href="#3-父子进程关系" class="headerlink" title="3. 父子进程关系"></a>3. 父子进程关系</h3><p>记录进程之间的层级关系：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">real_parent</span>;</span>   <span class="hljs-comment">// 创建它的进程</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">parent</span>;</span>        <span class="hljs-comment">// 当前父进程</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">children</span>;</span>         <span class="hljs-comment">// 子进程链表</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">sibling</span>;</span>          <span class="hljs-comment">// 兄弟进程链表</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-内存管理"><a href="#4-内存管理" class="headerlink" title="4. 内存管理"></a>4. 内存管理</h3><p>与地址空间和虚拟内存相关的信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span>;</span>             <span class="hljs-comment">// 进程的内存描述符（用户态）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">active_mm</span>;</span>      <span class="hljs-comment">// 当前活跃的 mm（内核线程也会设置）</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-文件系统与文件描述符表"><a href="#5-文件系统与文件描述符表" class="headerlink" title="5. 文件系统与文件描述符表"></a>5. 文件系统与文件描述符表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_struct</span> *<span class="hljs-title">fs</span>;</span>             <span class="hljs-comment">// 文件系统信息（当前目录等）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">files_struct</span> *<span class="hljs-title">files</span>;</span>       <span class="hljs-comment">// 打开的文件描述符表</span><br></code></pre></td></tr></table></figure><hr><h3 id="6-信号处理"><a href="#6-信号处理" class="headerlink" title="6. 信号处理"></a>6. 信号处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">signal_struct</span> *<span class="hljs-title">signal</span>;</span>     <span class="hljs-comment">// 所属线程组的信号处理结构</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sighand_struct</span> *<span class="hljs-title">sighand</span>;</span>   <span class="hljs-comment">// 信号处理函数</span><br><span class="hljs-type">sigset_t</span> blocked;                 <span class="hljs-comment">// 当前屏蔽的信号</span><br></code></pre></td></tr></table></figure><hr><h3 id="7-命名空间（Namespace）"><a href="#7-命名空间（Namespace）" class="headerlink" title="7. 命名空间（Namespace）"></a>7. 命名空间（Namespace）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> *<span class="hljs-title">nsproxy</span>;</span>          <span class="hljs-comment">// 各类命名空间的统一接口</span><br></code></pre></td></tr></table></figure><hr><h3 id="8-CPU-和上下文切换相关"><a href="#8-CPU-和上下文切换相关" class="headerlink" title="8. CPU 和上下文切换相关"></a>8. CPU 和上下文切换相关</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_struct</span> <span class="hljs-title">thread</span>;</span>      <span class="hljs-comment">// 存储CPU寄存器等上下文信息</span><br><span class="hljs-type">int</span> on_cpu;                       <span class="hljs-comment">// 是否在CPU上运行</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cpumask</span> *<span class="hljs-title">cpus_allowed</span>;</span>     <span class="hljs-comment">// 允许运行在哪些CPU上</span><br></code></pre></td></tr></table></figure><hr><h3 id="9-时间统计"><a href="#9-时间统计" class="headerlink" title="9. 时间统计"></a>9. 时间统计</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">u64 utime;                        <span class="hljs-comment">// 用户态运行时间</span><br>u64 stime;                        <span class="hljs-comment">// 内核态运行时间</span><br></code></pre></td></tr></table></figure><hr><h3 id="10-Cgroup-与资源限制"><a href="#10-Cgroup-与资源限制" class="headerlink" title="10. Cgroup 与资源限制"></a>10. Cgroup 与资源限制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">css_set</span> *<span class="hljs-title">cgroups</span>;</span>          <span class="hljs-comment">// 所属的 cgroup 集合</span><br></code></pre></td></tr></table></figure><hr><h3 id="11-调试与追踪"><a href="#11-调试与追踪" class="headerlink" title="11. 调试与追踪"></a>11. 调试与追踪</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ptrace;             <span class="hljs-comment">// 是否被 ptrace 追踪</span><br></code></pre></td></tr></table></figure><hr><h3 id="12-内核同步与锁"><a href="#12-内核同步与锁" class="headerlink" title="12. 内核同步与锁"></a>12. 内核同步与锁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">spinlock_t</span> alloc_lock;            <span class="hljs-comment">// 用于保护任务结构中的关键区域</span><br></code></pre></td></tr></table></figure><hr><h3 id="13-其他常用字段"><a href="#13-其他常用字段" class="headerlink" title="13. 其他常用字段"></a>13. 其他常用字段</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> comm[TASK_COMM_LEN];         <span class="hljs-comment">// 进程名（最多16字节）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">group_leader</span>;</span> <span class="hljs-comment">// 线程组的 leader</span><br><span class="hljs-type">int</span> exit_code;                    <span class="hljs-comment">// 退出代码</span><br></code></pre></td></tr></table></figure><hr><h2 id="🔧-小结图解（简略）"><a href="#🔧-小结图解（简略）" class="headerlink" title="🔧 小结图解（简略）"></a>🔧 小结图解（简略）</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pf">task_struct<br>├── 进程标识：pid, tgid<br>├── 状态与调度：<span class="hljs-keyword">state</span>, <span class="hljs-keyword">prio</span>, policy, se<br>├── 父子关系：<span class="hljs-keyword">parent</span>, children<br>├── 内存管理：mm, active_mm<br>├── 文件系统：files, fs<br>├── 信号处理：signal, sighand<br>├── 命名空间：nsproxy<br>├── CPU调度：thread, on_cpu<br>├── 时间统计：utime, stime<br>├── C<span class="hljs-keyword">group</span>：cgroups<br>├── 同步锁：alloc_lock<br>├── 调试追踪：ptrace<br>└── 通用信息：comm, exit_code<br></code></pre></td></tr></table></figure><hr><p>该结构体可能会在不同版本的内核中有所变动，但整体结构和这些功能模块是核心。</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器的实现原理</title>
    <link href="/2025/04/01/%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2025/04/01/%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="容器实现的原理"><a href="#容器实现的原理" class="headerlink" title="容器实现的原理"></a>容器实现的原理</h1><p>在Linux系统中，容器的实现本身就是一种资源隔离的方式。它通过控制进程的资源调度，访问权限来确定一项进程可以操作的资源范围，来达到隔离的目的</p><p>这其中主要使用到3个技术 ： namespace，unionfs 和cgroups</p><h1 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h1><p>namespace 是一种控制进程访问范围的结构体。在进程结构体（task_struct）中，通过nsproxy 结构 指向一个包含多种资源结构指针的结构体。</p><p>struct nsproxy :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> &#123;</span><br>    <span class="hljs-type">atomic_t</span> count;                  <span class="hljs-comment">// 引用计数</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uts_namespace</span> *<span class="hljs-title">uts_ns</span>;</span>   <span class="hljs-comment">// UTS 命名空间（主机名、域名）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipc_namespace</span> *<span class="hljs-title">ipc_ns</span>;</span>   <span class="hljs-comment">// IPC 命名空间（信号量、共享内存、消息队列）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mnt_namespace</span> *<span class="hljs-title">mnt_ns</span>;</span>   <span class="hljs-comment">// 挂载命名空间（文件系统挂载点）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid_namespace</span> *<span class="hljs-title">pid_ns_for_children</span>;</span> <span class="hljs-comment">// PID 命名空间（用于子进程）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> *<span class="hljs-title">net_ns</span>;</span>             <span class="hljs-comment">// 网络命名空间</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CGROUPS</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_namespace</span> *<span class="hljs-title">cgroup_ns</span>;</span> <span class="hljs-comment">// 控制组命名空间</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_TIME_NS</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time_namespace</span> *<span class="hljs-title">time_ns</span>;</span>     <span class="hljs-comment">// 时间命名空间</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="各个字段的含义："><a href="#各个字段的含义：" class="headerlink" title="各个字段的含义："></a>各个字段的含义：</h2><table><thead><tr><th>字段名</th><th>描述</th></tr></thead><tbody><tr><td><code>count</code></td><td>引用计数，避免结构体被过早释放</td></tr><tr><td><code>uts_ns</code></td><td>UTS 命名空间（<code>uname -n</code>、主机名等）</td></tr><tr><td><code>ipc_ns</code></td><td>IPC 命名空间（SysV IPC，如信号量、共享内存）</td></tr><tr><td><code>mnt_ns</code></td><td>挂载命名空间（隔离的挂载视图）</td></tr><tr><td><code>pid_ns_for_children</code></td><td>当前进程的子进程将进入的 PID 命名空间</td></tr><tr><td><code>net_ns</code></td><td>网络命名空间（如网络设备、IP 地址、路由等）</td></tr><tr><td><code>cgroup_ns</code></td><td>控制组命名空间（控制组的名字空间隔离）</td></tr><tr><td><code>time_ns</code></td><td>时间命名空间（每个容器&#x2F;命名空间自己的时间视图）</td></tr></tbody></table><p>当进程被创建时，未定义的命名空间 会默认使用父进程的结构体信息（可以通过clone()来指定子进程需要绑定的命名空间）。所以当新的子进程被创建时，默认直接可以访问父进程所能使用的资源。</p><h2 id="创建新的命名空间"><a href="#创建新的命名空间" class="headerlink" title="创建新的命名空间"></a>创建新的命名空间</h2><p>通过使用 unshare 命令来创建新的命名空间。操作系统会对每种资源进行相应的初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unshare --fork --pid --mount --uts --ipc --net --user --map-root-user /bin/bash<br></code></pre></td></tr></table></figure><p><code>unshare</code> 可以让你为进程单独创建以下命名空间：</p><table><thead><tr><th>命名空间</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>UTS</td><td><code>--uts</code></td><td>主机名&#x2F;域名隔离（可以改 hostname）</td></tr><tr><td>PID</td><td><code>--pid</code></td><td>进程号隔离（新的进程树，当前进程是 PID 1）</td></tr><tr><td>Mount</td><td><code>--mount</code></td><td>文件系统挂载点隔离</td></tr><tr><td>Net</td><td><code>--net</code></td><td>网络栈隔离（独立的网络接口）</td></tr><tr><td>IPC</td><td><code>--ipc</code></td><td>进程间通信隔离</td></tr><tr><td>User</td><td><code>--user</code></td><td>用户&#x2F;权限隔离（uid&#x2F;gid 映射）</td></tr><tr><td>Cgroup</td><td><code>--cgroup</code></td><td>控制组隔离</td></tr><tr><td>Time</td><td><code>--time</code></td><td>系统时间命名空间（较新内核）</td></tr></tbody></table><p> 使用 - -mount 会将当前进程的挂载系统视图加载到新的进程中去</p><p>使用  - -mount-proc 会创建一个独立的&#x2F;proc 文件系统</p><p>进入新的命名空间后，进行资源挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">unshare --mount --net --user --map-root-user bash<br><br>mount -t tmpfs tmpfs /mnt/tmp  <span class="hljs-comment">#文件系统挂载</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> lo up <span class="hljs-comment">#网络挂载</span><br>mount -t proc proc /proc <span class="hljs-comment">#虚拟文件系统挂载</span><br><span class="hljs-comment"># --user 要么用 --map-root-user，要么自己写 uid_map</span><br></code></pre></td></tr></table></figure><p>我们得到了一个自定义资源预设命名空间的进程</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="unshare-—uts-—pid-bin-bash-需要通过—fork创建新的命名空间"><a href="#unshare-—uts-—pid-bin-bash-需要通过—fork创建新的命名空间" class="headerlink" title="unshare  —uts —pid  &#x2F;bin&#x2F;bash 需要通过—fork创建新的命名空间"></a>unshare  —uts —pid  &#x2F;bin&#x2F;bash 需要通过—fork创建新的命名空间</h3><p>使用 <code>unshare --pid</code> 创建新的 PID 命名空间后，当前进程依然处于旧命名空间，它的 PID 无法更改。因此必须通过 <code>--fork</code> 创建一个新进程，它才能真正运行在新的 PID 命名空间中，并成为该命名空间内的 PID 1。</p><h3 id="如何进入一个命名空间"><a href="#如何进入一个命名空间" class="headerlink" title="如何进入一个命名空间"></a>如何进入一个命名空间</h3><p>Linux 把每个进程当前所在的命名空间暴露在了 <code>/proc/[pid]/ns/</code> 目录下，你可以通过访问它来“进入”命名空间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br><span class="hljs-built_in">sudo</span> nsenter --target &lt;PID&gt; --net --uts --pid --mount --ipc /bin/bash<br></code></pre></td></tr></table></figure><p>可以通过 <code>bind mount</code> 的方式把 namespace 文件挂到一个路径上，实现“命名空间持久化”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /var/run/my_ns<br><span class="hljs-built_in">touch</span> /var/run/my_ns/net<br>mount --<span class="hljs-built_in">bind</span> /proc/&lt;pid&gt;/ns/net /var/run/my_ns/net<br><br></code></pre></td></tr></table></figure><h3 id="进程在不同命名空间具有不同的PID信息"><a href="#进程在不同命名空间具有不同的PID信息" class="headerlink" title="进程在不同命名空间具有不同的PID信息"></a>进程在不同命名空间具有不同的PID信息</h3><p>关键结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span> &#123;</span><br><span class="hljs-type">atomic_t</span> count;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> level;  <span class="hljs-comment">// 命名空间层级（0 = root）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span> <span class="hljs-title">tasks</span>[<span class="hljs-title">PIDTYPE_MAX</span>];</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">upid</span> <span class="hljs-title">numbers</span>[1];</span> <span class="hljs-comment">// 实际的 PID 数组（多个命名空间的 PID）</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">upid</span> &#123;</span><br>    <span class="hljs-type">int</span> nr;                      <span class="hljs-comment">// 当前 namespace 下的 PID</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid_namespace</span> *<span class="hljs-title">ns</span>;</span>   <span class="hljs-comment">// 属于哪个 namespace</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>由此 我们可以看到 unshare 是一个对进程的资源权限进行创建绑定的过程</p><h1 id="overlayfs"><a href="#overlayfs" class="headerlink" title="overlayfs"></a>overlayfs</h1><p>在实现容器文件系统时，常使用的是 <code>overlayfs</code>（属于 unionfs 类型的聚合文件系统）。用来将容器所需要的文件资源“聚合”在同一个资源目录下。</p><p>通过mount 创建文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -t overlay overlay \<br>  -o lowerdir=/mnt/lower,upperdir=/mnt/upper,workdir=/mnt/work \<br>  /mnt/merged<br><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-t overlay</code></td><td>指定文件系统类型是 <code>overlay</code></td></tr><tr><td><code>overlay</code></td><td>设备名（这里可以随便写，比如也可以写成 <code>none</code>）</td></tr><tr><td><code>-o lowerdir=...</code></td><td>指定只读的底层目录（可多个）</td></tr><tr><td><code>upperdir=...</code></td><td>指定可写的上层目录</td></tr><tr><td><code>workdir=...</code></td><td>overlayfs 需要的工作目录（中间缓存用）</td></tr><tr><td>最后的 <code>rootfs_chat/merged</code></td><td>是挂载点，即最终组合出来的目录视图</td></tr></tbody></table><p>挂载创建好后，因为该挂载存在于父进程之中，所以使用—mount创建后，新的子进程可以访问到该挂载路径</p><p>但是此时的根路径依然继承自父进程，所以需要将新进程的根进程修改为“&#x2F;”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chroot</span> rootfs_chat/merged/ <br></code></pre></td></tr></table></figure><p><code>chroot</code> 本身并不安全，不能完全隔离文件系统，需要结合 mount namespace 才能保证隔离性。否则进程可以 escape chroot。</p><h2 id="QA-1"><a href="#QA-1" class="headerlink" title="QA"></a>QA</h2><p>chroot 通过修改进程结构体中的“root” 变量，来帮助进程识别对应的根目录的</p><p>{</p><p>struct fs_struct {<br>struct path root;     &#x2F;&#x2F; 当前的根目录（对应 <code>/</code>）<br>struct path pwd;      &#x2F;&#x2F; 当前工作目录（对应 <code>.</code>）<br>};</p><h1 id="cgroups"><a href="#cgroups" class="headerlink" title="cgroups"></a>cgroups</h1><p>cgroup 是一个内核中的“资源控制树结构”，进程“加入”到这个树结构的某个节点下，进而接受控制器的约束。</p><p>结构体定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kernfs_node</span> *<span class="hljs-title">kn</span>;</span>         <span class="hljs-comment">// 在 cgroupfs 中对应的目录节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_subsys_state</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">subsys</span>[<span class="hljs-title">CGROUP_SUBSYS_COUNT</span>];</span> <span class="hljs-comment">// 控制器状态</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_parent</span> *<span class="hljs-title">parent</span>;</span>   <span class="hljs-comment">// 父 cgroup</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>控制器结构 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_subsys_state</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup</span> *<span class="hljs-title">cgroup</span>;</span>       <span class="hljs-comment">// 属于哪个 cgroup 节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_subsys</span> *<span class="hljs-title">ss</span>;</span>    <span class="hljs-comment">// 属于哪个控制器（memory, cpu等）</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>进程结构体中对cgroup的引用 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> &#123;</span><br>    ...<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">css_set</span> *<span class="hljs-title">cgroups</span>;</span>    <span class="hljs-comment">// 进程所属的 cgroup 集合（css_set）</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="cgroups限制写入"><a href="#cgroups限制写入" class="headerlink" title="cgroups限制写入"></a>cgroups限制写入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /sys/fs/cgroup/mygroup<br><span class="hljs-built_in">echo</span> 1234 &gt; /sys/fs/cgroup/mygroup/cgroup.procs  <span class="hljs-comment">#将某个进程加入资源组</span><br><span class="hljs-built_in">echo</span> 50M &gt; /sys/fs/cgroup/mygroup/memory.max  <span class="hljs-comment">#在对应的虚拟文件中设置限制值的大小</span><br><br></code></pre></td></tr></table></figure><h2 id="限制方式"><a href="#限制方式" class="headerlink" title="限制方式"></a>限制方式</h2><h3 id="1-内存限制（memory-controller）"><a href="#1-内存限制（memory-controller）" class="headerlink" title="1. 内存限制（memory controller）"></a>1. <strong>内存限制（memory controller）</strong></h3><h3 id="控制文件（cgroups-v2）："><a href="#控制文件（cgroups-v2）：" class="headerlink" title="控制文件（cgroups v2）："></a>控制文件（cgroups v2）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">memory.max        <span class="hljs-comment"># 最大内存</span><br>memory.current    <span class="hljs-comment"># 当前内存使用量</span><br>memory.swap.max   <span class="hljs-comment"># 最大 swap 使用</span><br><br></code></pre></td></tr></table></figure><h3 id="限制机制："><a href="#限制机制：" class="headerlink" title="限制机制："></a>限制机制：</h3><ul><li>每次进程分配内存（<code>malloc</code> &#x2F; <code>brk</code> &#x2F; <code>mmap</code>），内核会通过 cgroup 追踪它的页数</li><li>内核维护一个“<strong>内存账户</strong>”，记录每个 cgroup 当前使用了多少内存</li><li>当使用超过 <code>memory.max</code>：<ul><li>如果是软限制（memory.high）：内核优先回收缓存页</li><li>如果是硬限制（memory.max）：内核会拒绝分配，或者直接 OOM 杀死进程</li></ul></li></ul><hr><h3 id="2-CPU-限制（cpu-controller）"><a href="#2-CPU-限制（cpu-controller）" class="headerlink" title="2. CPU 限制（cpu controller）"></a>2. <strong>CPU 限制（cpu controller）</strong></h3><h3 id="控制文件："><a href="#控制文件：" class="headerlink" title="控制文件："></a>控制文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">cpu.max           <span class="hljs-comment"># 格式为 &quot;quota period&quot;，如 &quot;50000 100000&quot; 表示 50%</span><br>cpu.weight        <span class="hljs-comment"># 比例调度（类似 nice 值）</span><br><br></code></pre></td></tr></table></figure><h3 id="限制机制：-1"><a href="#限制机制：-1" class="headerlink" title="限制机制："></a>限制机制：</h3><ul><li>Linux 用 <strong>CFS（完全公平调度器）</strong> 管理 CPU 时间</li><li>cgroups 中每个组都维护一个“虚拟时间”和“实际用量”</li><li>当某个 cgroup 超过分配的 quota，<strong>调度器会“跳过”它的进程，让出 CPU</strong></li><li>实现类似“限速”：比如每 100ms 最多用 50ms，就等于 50% CPU</li></ul><hr><h3 id="3-IO-限制（io-controller）"><a href="#3-IO-限制（io-controller）" class="headerlink" title="3. IO 限制（io controller）"></a>3. <strong>IO 限制（io controller）</strong></h3><h3 id="控制文件：-1"><a href="#控制文件：-1" class="headerlink" title="控制文件："></a>控制文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">o.max            <span class="hljs-comment"># 限制读写速率</span><br>io.weight         <span class="hljs-comment"># 相对优先级</span><br><br></code></pre></td></tr></table></figure><h3 id="限制机制：-2"><a href="#限制机制：-2" class="headerlink" title="限制机制："></a>限制机制：</h3><ul><li>当进程访问磁盘（读&#x2F;写）时，内核通过 block 层检查它所在的 cgroup</li><li>如果当前组已达到速率上限，则排队</li><li>用的是<strong>节流算法（token bucket + deadline）</strong>，按比例分发 IO 机会</li></ul><hr><h3 id="4-进程数限制（pids-controller）"><a href="#4-进程数限制（pids-controller）" class="headerlink" title="4. 进程数限制（pids controller）"></a>4. <strong>进程数限制（pids controller）</strong></h3><h3 id="控制文件：-2"><a href="#控制文件：-2" class="headerlink" title="控制文件："></a>控制文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pids.max         <span class="hljs-comment"># 最大可创建进程数</span><br>pids.current     <span class="hljs-comment"># 当前已创建的进程数</span><br><br></code></pre></td></tr></table></figure><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">进程调用系统资源（如内存分配、CPU执行、磁盘读写）  <br>      ↓  <br>内核触发资源控制器的钩子函数（如 memory, cpu, io, pids）  <br>      ↓  <br>内核查找该进程所属的 cgroup 节点  <br>      ↓  <br>读取当前使用统计（如 memory.current、cpu.stat）  <br>      ↓  <br>与配置的限制（如 memory.max、cpu.max）做比较  <br>      ↓  <br>根据控制器的逻辑执行：<br>    ├── ✅ 允许（资源未超限）<br>    ├── 🚫 拒绝（如 fork 被拒绝）<br>    ├── 🧹 触发回收（如内存回收缓存页）<br>    └── 💣 杀死进程（如 OOM killer）<br><br></code></pre></td></tr></table></figure><h3 id="不同资源的控制方式示意："><a href="#不同资源的控制方式示意：" class="headerlink" title="不同资源的控制方式示意："></a>不同资源的控制方式示意：</h3><table><thead><tr><th>资源类型</th><th>钩子点（内核行为）</th><th>控制行为</th></tr></thead><tbody><tr><td>Memory</td><td>分配页（<code>alloc_pages</code>）</td><td>拒绝分配 &#x2F; 回收 &#x2F; OOM</td></tr><tr><td>CPU</td><td>调度器（<code>schedule</code>）</td><td>跳过调度 &#x2F; 限速</td></tr><tr><td>IO</td><td><code>submit_bio()</code> &#x2F; IO调度</td><td>节流 &#x2F; 排队</td></tr><tr><td>PIDs</td><td>创建进程（<code>fork()</code>）</td><td>直接失败</td></tr><tr><td>NetCls</td><td>发包、Qos 分类</td><td>加标签限流</td></tr><tr><td>Devices</td><td>打开文件（<code>open()</code>）</td><td>拒绝访问设备</td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>容器的创建过程</p><ol><li>创建聚合文件系统，将容器所需要的文件统一到一个文件路径下</li><li>创建命名空间，初始化命名空间中的资源路径</li><li>将父进程中创建的文件系统挂载到子进程中，将子进程根目录指向挂载目录</li><li>查询进程的PID号，创建cgroup文件，添加对该进程的资源限制。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>虚拟化技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dify的Chatflow实现</title>
    <link href="/2025/03/28/Dify%E7%9A%84Chatflow%E5%AE%9E%E7%8E%B0/"/>
    <url>/2025/03/28/Dify%E7%9A%84Chatflow%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>在上一次的基础上进行一些功能实现。</p><p>通过向大模型描述请求来完成一些服务器端的功能</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>流程 Dify Chatflow 任务流 → 自定义插件构建客户端请求 → 服务器端监听请求，解析请求并处理 →插件接收请求响应，传递结果给LLM 进行优化展示。</p><h2 id="创建任务流"><a href="#创建任务流" class="headerlink" title="创建任务流"></a>创建任务流</h2><p>创建空白应用→Chatflow</p><p>ChatFlow是由多个组件构成的工作流程</p><p><img src="https://i.111666.best/image/4MRRqKxQVG504FjR2SaGTk.png" alt="image"></p><p>在这个工作流程中，每次的对话会被作为输入参数传入到工作流中进行处理</p><p>当前实现的功能 ： </p><ol><li>查询服务器允许执行的命令行工具</li><li>由大模型分析用户指令，从提供的命令列表中组织命令流程下发到服务器端执行</li></ol><p>这里的编排</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">开始-问题分类器-情况1(向服务器端请求查询功能)-交由插件向服务器端发送查询请求-处理响应-回复<br>              -情况2(分析用户需求生成对应指令)-由插件构建请求向服务器请求执行-处理响应-回复<br></code></pre></td></tr></table></figure><h2 id="自定义插件向服务端发送请求"><a href="#自定义插件向服务端发送请求" class="headerlink" title="自定义插件向服务端发送请求"></a>自定义插件向服务端发送请求</h2><p>由 上一节中的设计流程来看我们至少需要构建两个请求 ：</p><p>1 . Get 请求  向服务端请求应用程序列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Desktop_get</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>FetchKey = <span class="hljs-string">&quot;/key&quot;</span><br>Command = <span class="hljs-string">&quot;/command&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        ip = tool_parameters.get(<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        port = tool_parameters.get(<span class="hljs-string">&quot;port&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        key = <span class="hljs-variable language_">self</span>.fetch_key(ip,port)<br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;Command&#125;</span>&quot;</span><br>        headers=&#123;<span class="hljs-string">&quot;X-Api-Key&quot;</span>:key&#125;<br>        res = requests.get(url=url,headers=headers,timeout=<span class="hljs-number">30</span>).json()<br>        <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">self</span>.create_text_message(<span class="hljs-built_in">str</span>(res[<span class="hljs-string">&quot;commands&quot;</span>])<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_key</span>(<span class="hljs-params">self,ip,port</span>) : <br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;FetchKey&#125;</span>&quot;</span><br><br>        js = requests.get(url=url,timeout=<span class="hljs-number">30</span>).json()<br>        <span class="hljs-keyword">return</span> js[<span class="hljs-string">&quot;key&quot;</span>]<br></code></pre></td></tr></table></figure><ol start="2"><li>Post 请求 向服务端发送命令执行列表，由服务端进行命令执行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>EXEC=<span class="hljs-string">&quot;/execute&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHelperTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        content = tool_parameters.get(<span class="hljs-string">&quot;text&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        ip = tool_parameters.get(<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        port = tool_parameters.get(<span class="hljs-string">&quot;port&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;EXEC&#125;</span>&quot;</span><br>        <span class="hljs-built_in">print</span>(url)<br>        key = tool_parameters.get(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        headers=&#123;<span class="hljs-string">&quot;X-Api-Key&quot;</span>:key,<span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/json&quot;</span>&#125;<br>        <span class="hljs-built_in">print</span>(headers)<br>        res = requests.post(url=url,json=json.loads(content),headers=headers,timeout=<span class="hljs-number">30</span>).text<br>        <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">self</span>.create_text_message(res)<br><br></code></pre></td></tr></table></figure><h2 id="构建服务器端接口"><a href="#构建服务器端接口" class="headerlink" title="构建服务器端接口"></a>构建服务器端接口</h2><p>使用flask 构建一个接收以上请求的服务程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify, request<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> pexpect<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">require_key</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorated_function</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(request.headers)<br>        key = request.headers.get(<span class="hljs-string">&#x27;X-API-KEY&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(keys)<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> keys:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;Invalid API key&#x27;</span>&#125;), <span class="hljs-number">401</span><br>        <span class="hljs-keyword">return</span> f(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> decorated_function<br><br><span class="hljs-comment"># 密钥创建路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/key&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_key</span>():<br>    key = <span class="hljs-built_in">str</span>(uuid.uuid4())<br>    keys[key] = <span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(keys)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: key&#125;)<br><br><span class="hljs-comment"># 获取所有功能路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/command&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-meta">@require_key</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_functions</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 获取PATH环境变量中的所有可执行文件</span><br>        result = subprocess.run([<span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-string">&#x27;/server/bin&#x27;</span>], capture_output=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>)<br>        commands = result.stdout.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;commands&#x27;</span>: commands&#125;)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-built_in">str</span>(e)&#125;)<br><span class="hljs-comment"># 执行命令路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/execute&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-meta">@require_key</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    执行传入的命令并返回结果</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    data = request.json<br>    <span class="hljs-built_in">print</span>(data)<br>    commands = data.get(<span class="hljs-string">&#x27;commands&#x27;</span>)<br>    result = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> commands:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;No command provided&#x27;</span>&#125;)<br>    <br>    <span class="hljs-keyword">try</span>:<br>        shell = pexpect.spawn(<span class="hljs-string">&#x27;/bin/bash&#x27;</span>)<br>        <span class="hljs-keyword">for</span> command <span class="hljs-keyword">in</span> commands:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(command, <span class="hljs-built_in">dict</span>):<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Invalid command format&#x27;</span>&#125;)<br>            command_line = []<br>            command_line.append(command[<span class="hljs-string">&quot;command&quot;</span>])<br>            command_line.extend(command[<span class="hljs-string">&quot;args&quot;</span>])<br>            cmd = <span class="hljs-string">&quot; &quot;</span>.join(command_line)<br>            marker = <span class="hljs-string">f&quot;CMD_END_<span class="hljs-subst">&#123;<span class="hljs-built_in">hash</span>(cmd)&#125;</span>&quot;</span><br>            shell.sendline(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;cmd&#125;</span>; echo &#x27;<span class="hljs-subst">&#123;marker&#125;</span>&#x27;&quot;</span>)<br>            shell.expect(marker)<br>            <span class="hljs-comment"># 获取输出</span><br>            output = shell.before.decode().strip()<br>            <span class="hljs-built_in">print</span>(output)<br>            result.append( &#123;<br>                <span class="hljs-string">&#x27;command&#x27;</span>: cmd,<br>                <span class="hljs-string">&#x27;status&#x27;</span>:<span class="hljs-string">&#x27;success&#x27;</span>,<br>                <span class="hljs-string">&#x27;stdout&#x27;</span>: output,<br>            &#125;)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-built_in">str</span>(e)&#125;)<br>    shell.close()<br>    <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>: result&#125;)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>Get 请求返回的消息体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;hexo&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;ls&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;lscpu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;zip&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Post请求接收的消息体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ls&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;/home/codfish&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>启动本地插件调试和服务端</p><h2 id="执行工作流"><a href="#执行工作流" class="headerlink" title="执行工作流"></a>执行工作流</h2><p>向机器人请求查看服务端提供的应用列表 ： </p><p><img src="https://i.111666.best/image/lgRg7jkIDaRm4Fs8moXWkk.png" alt="image"></p><p>向机器人请求查询某个目录下的文件信息：</p><p><img src="https://i.111666.best/image/PI0vurDrzyzDKmIyPWrGCh.jpg" alt="image"></p><p>请求安装python 库：</p><p><img src="https://i.111666.best/image/fY63mSee5VABzV7CFrSHuu.png" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完成了基本功能的实现</p><p>在某些情况下提示词还是会出现异常，需要进一步优化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2+Dify 配置大模型桌面端资源访问(简单应用)</title>
    <link href="/2025/03/25/WSL2-Dify-%E9%85%8D%E7%BD%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE-%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
    <url>/2025/03/25/WSL2-Dify-%E9%85%8D%E7%BD%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE-%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>最近使用WSL2 做了dify的本地化部署。试着使用工作流的方式实现一个工作流来通过和大模型对话完成对本地资源的访问。</p><h1 id="预配置"><a href="#预配置" class="headerlink" title="预配置"></a>预配置</h1><h2 id="WSL2的本地部署"><a href="#WSL2的本地部署" class="headerlink" title="WSL2的本地部署"></a>WSL2的本地部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --list  <span class="hljs-comment"># 查询支持的wsl子系统发行版本</span><br>wsl --install <span class="hljs-comment"># 安装默认的wsl子系统</span><br></code></pre></td></tr></table></figure><p>部署完成后，配置安装apt源 ，Docker源（镜像有问题可以查询之前的文章），Git配置，以及 一些基本的命令行工具</p><h2 id="Dify-本地部署"><a href="#Dify-本地部署" class="headerlink" title="Dify 本地部署"></a>Dify 本地部署</h2><p>Github 上 <a href="https://github.com/langgenius/dify">https://github.com/langgenius/dify</a> 有部署教程，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> dify<br><span class="hljs-built_in">cd</span> docker<br><span class="hljs-built_in">cp</span> .env.example .<span class="hljs-built_in">env</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><p>安装完毕后 访问本地的<a href="http://localhost/install">http://localhost/install</a>  进行管理员配置</p><p>至此我们获得了一个部署在本地windows子系统上的dify环境</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p><img src="https://i.111666.best/image/YNLclFRYQ3PLOr79iU1PyH.png" alt="image"></p><p>目标是通过和大模型对话，识别其中的关键词来完成和自定义插件中的功能的映射关系。向本地的HTTP服务器发送对应请求。完成功能的执行</p><p>一些未来可行的扩展项</p><ol><li>更好的服务通信方式。wsl2 子系统可以直接对挂载到该系统的windows系统上的文件进行操作。所以存在更快捷方法调用本地资源。但是这可能需要dify提供更丰富的调用方式或者在docker层面上进行一些功能定制，当前只是一个可行性尝试。所以使用了 http的调用-响应模式</li><li>注册， 提供一个通用的PC平台应用发现服务。而不是通过将所有的可执行程序注册为Dify的自定义插件功能。这样更加灵活</li><li>本地的部署+自然语言的请求+插件自定义功能的解耦 目前来看相对还是比较安全。如果需要实现远程的请求调用可能需要更加安全的信息传输方式</li><li>在本地添加应用程序和文件资源的调用记录。</li></ol><h1 id="Dify的自定义插件"><a href="#Dify的自定义插件" class="headerlink" title="Dify的自定义插件"></a>Dify的自定义插件</h1><h2 id="脚手架工具初始化"><a href="#脚手架工具初始化" class="headerlink" title="脚手架工具初始化"></a>脚手架工具初始化</h2><p>官方文档</p><p><a href="https://docs.dify.ai/zh-hans/plugins/quick-start/develop-plugins/initialize-development-tools">https://docs.dify.ai/zh-hans/plugins/quick-start/develop-plugins/initialize-development-tools</a></p><p>下载 Dify的插件脚手架工具 <a href="https://github.com/langgenius/dify-plugin-daemon/tags">https://github.com/langgenius/dify-plugin-daemon/tags</a></p><p>以tools 类型为例  初始化 插件项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dify-plugin-windows-amd64 plugin init <br></code></pre></td></tr></table></figure><p><img src="https://i.111666.best/image/36KrL8MFwMSB0kHm0M7VGs.png" alt="image"><br>name 创建 插件名</p><p>author 插件作者</p><p>description 插件功能描述</p><p>语言 : python</p><p>工具 : tools  (自定义tools 类型插件</p><p><img src="https://i.111666.best/image/htD6C2oNrddvAuEyXVdmep.png" alt="image"></p><p>一些权限的设置</p><p>最终我们得到的是一个这样的工程</p><p>以下是一些比较重要的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">- _assets  <span class="hljs-comment"># 存放一些引用资源</span><br>- provider <span class="hljs-comment"># </span><br>  - someplugin.py <span class="hljs-comment"># 进行一些异常处理</span><br>- someplugin.yaml <span class="hljs-comment"># 插件功能/资源描述 </span><br>- tools    <span class="hljs-comment"># 具体的tools功能实现</span><br>- somefunction.py <span class="hljs-comment"># 具体的功能实现</span><br>- somefunction.yaml <span class="hljs-comment"># 功能/资源描述</span><br>- main.py <span class="hljs-comment"># 函数入口</span><br>- manifest.yaml <span class="hljs-comment">#  插件描述</span><br> <br></code></pre></td></tr></table></figure><h2 id="插件功能定义"><a href="#插件功能定义" class="headerlink" title="插件功能定义"></a>插件功能定义</h2><p>插件通过调用的是_invoke方法来执行对应的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Generator<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">from</span> dify_plugin <span class="hljs-keyword">import</span> Tool<br><span class="hljs-keyword">from</span> dify_plugin.entities.tool <span class="hljs-keyword">import</span> ToolInvokeMessage<br><br>BASE_URL =<span class="hljs-string">&quot;&lt;http://localhost:8080&gt;&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        method = tool_parameters.get(<span class="hljs-string">&quot;method&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        result = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> method == <span class="hljs-string">&quot;desktop_get&quot;</span> :<br>            result = requests.get(BASE_URL).text<br>        <span class="hljs-keyword">yield</span>  <span class="hljs-variable language_">self</span>.create_text_message(<span class="hljs-string">f&#x27;调用了<span class="hljs-subst">&#123;method&#125;</span>,返回<span class="hljs-subst">&#123;result&#125;</span>&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>这里给出了一个简单的http请求调用，使用request模拟http get 请求。并返回接收到的消息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">identity:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">desktop_get</span>      <span class="hljs-comment"># 方法名</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">codfish</span><br>  <span class="hljs-attr">label:</span><br>    <span class="hljs-attr">en_US:</span> <span class="hljs-string">destop_get</span><br>    <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">destop_get</span><br>    <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">destop_get</span><br><span class="hljs-attr">description:</span><br>  <span class="hljs-attr">human:</span><br>    <span class="hljs-attr">en_US:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>  <span class="hljs-attr">llm:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br><span class="hljs-attr">parameters:</span>       <span class="hljs-comment">#自定义参数</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">url</span>     <span class="hljs-comment">#参数名</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span>  <span class="hljs-comment">#参数类型</span><br>    <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">label:</span><br>      <span class="hljs-attr">en_US:</span> <span class="hljs-string">Query</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">查询语句</span><br>      <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">Query</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">human_description:</span><br>      <span class="hljs-attr">en_US:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>      <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>      <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">llm_description:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">form:</span> <span class="hljs-string">llm</span><br><span class="hljs-attr">extra:</span><br>  <span class="hljs-attr">python:</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">tools/desktop_get.py</span>  <span class="hljs-comment">#对应的python实现文件</span><br><br></code></pre></td></tr></table></figure><p>每个tools 插件允许添加多个方法，每个方法需要定义自己的模块文件(.py)和资源描述文件（.yaml）</p><p>其结构为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">tools\\</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction1.py</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction1.yaml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction2.py</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction2.yaml</span><br>  <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><h2 id="插件调试"><a href="#插件调试" class="headerlink" title="插件调试"></a>插件调试</h2><p>通过修改工作目录中的.env.example 为.env</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">INSTALL_METHOD=remote</span><br><span class="hljs-string">REMOTE_INSTALL_HOST=debug.dify.ai</span><br><span class="hljs-string">REMOTE_INSTALL_PORT=5003</span><br><span class="hljs-string">REMOTE_INSTALL_KEY=some_install_key</span><br></code></pre></td></tr></table></figure><p>将dify插件页的调试信息填充到.env中，本地执行main方法，插件会被加载到dify的插件列表中</p><p><img src="https://i.111666.best/image/TmrbwxdMkhWRuygRCXbdGp.png" alt="image"></p><h2 id="创建CHAT任务流"><a href="#创建CHAT任务流" class="headerlink" title="创建CHAT任务流"></a>创建CHAT任务流</h2><p><img src="https://i.111666.best/image/2IgA1P69jBp6amaeczz6ZT.png" alt="image"></p><p>创建大模型组件，并填入模型，国内推荐使用硅基流动。</p><p>在大模型组件中填入模型，填入系统提示词，核心目的是预期输出合理且可控，不要有多余的输出，测试的系统提示词如下(并不能很好的获取到目标方法名，需要后期再调试)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## 角色</span><br><span class="hljs-string">你是一位专业的桌面助理</span><br><span class="hljs-comment">## 任务</span><br><span class="hljs-string">当用户发送查询桌面的请求时，你可以根据对话信息检查是否返回一个调用方法</span><br><span class="hljs-comment">## 当前支持的方法表</span><br><span class="hljs-string">发起桌面请求</span> <span class="hljs-string">=</span> <span class="hljs-string">destop_get</span><br><span class="hljs-comment">## 注意</span><br><span class="hljs-string">不需要</span> <span class="hljs-string">直接回答用户请求，只需要返回一个具体的执行方法</span><br></code></pre></td></tr></table></figure><p>在后续添加自定义组件作为节点， 接收大模型的返回作为输入的参数，进行后续执行</p><p><img src="https://i.111666.best/image/TUxQf8y6eXGsVkuHSLivNL.png" alt="image"></p><p>一个基础的工作链条  启动大模型→发起请求→ 根据请求给出需要执行的方法→传递给插件执行方法→返回执行结果</p><p>大模型正确识别方法名，插件解析方法，执行对应方法。向本地启动的服务器发送请求。得到响应返回结果到对话框</p><p><img src="https://i.111666.best/image/hdRpQxHTCHkU6fLsuc3BTm.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker容器镜像源</title>
    <link href="/2025/03/21/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <url>/2025/03/21/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-容器镜像拉取的问题"><a href="#Docker-容器镜像拉取的问题" class="headerlink" title="Docker 容器镜像拉取的问题"></a>Docker 容器镜像拉取的问题</h2><p>使用docker pull 或者 docker compose up -d 拉取镜像时，经常会遇到以下问题。</p><p>Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/">https://registry-1.docker.io/v2/</a>“: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p><p>原因是镜像源失效或者速率不够导致超时</p><p>绝大部分的文章都不用看，因为失效很快</p><p>可以在Github上关注这个项目随时更新源</p><p><a href="https://github.com/dongyubin/DockerHub">https://github.com/dongyubin/DockerHub</a></p><p>然后修改本地daemon.json 配置</p><p>cat &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>   <span class="hljs-string">&quot;https://docker.mybacc.com&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-string">&quot;https://docker.1ms.run&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-string">&quot;https://dytt.online&quot;</span><br> <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>重启daemon和docker 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl restart docker <br></code></pre></td></tr></table></figure><h2 id="顺便记录下Podman的源配置"><a href="#顺便记录下Podman的源配置" class="headerlink" title="顺便记录下Podman的源配置"></a>顺便记录下Podman的源配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ containers]# <span class="hljs-built_in">cat</span> /etc/containers/registries.conf | grep -v <span class="hljs-string">&quot;#&quot;</span><br><br>unqualified-search-registries = [<span class="hljs-string">&quot;registry.access.redhat.com&quot;</span>, <span class="hljs-string">&quot;registry.redhat.io&quot;</span>, <span class="hljs-string">&quot;docker.io&quot;</span>]<br><br><br><br>[[registry]]<br>prefix = <span class="hljs-string">&quot;docker.io&quot;</span><br>location = <span class="hljs-string">&quot;docker.1ms.run&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br>[[registry.mirror]]<br>location = <span class="hljs-string">&quot;docker.mybacc.com&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br>[[registry.mirror]]<br>location = <span class="hljs-string">&quot;docker.1ms.run&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br>[[registry.mirror]]<br>location = <span class="hljs-string">&quot;dytt.online&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br><br><br>short-name-mode = <span class="hljs-string">&quot;permissive&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于HEXO的博客搭建</title>
    <link href="/2025/03/21/%E5%9F%BA%E4%BA%8EHEXO%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/03/21/%E5%9F%BA%E4%BA%8EHEXO%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="基于HEXO-FLUID-样式的博客搭建"><a href="#基于HEXO-FLUID-样式的博客搭建" class="headerlink" title="基于HEXO+FLUID 样式的博客搭建"></a>基于HEXO+FLUID 样式的博客搭建</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>7.3版本的Hexo 要求node.js 的版本在18.0以上，centos7 所能拉取到的node.js 版本在11.0 。考虑到需要处理依赖所以直接换成了alibaba cloud 系统</p></li><li><p>安装 npm和hexo-cli 命令行工具</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install npm<br>npm install hexo-cli -g<br></code></pre></td></tr></table></figure></li><li><p>Github 集成</p><p> 因为后续需要设置到github page ，所以先配置git和密钥</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>ssh-keygen  <span class="hljs-comment"># 使用ssh-keygen 创建密钥</span><br><span class="hljs-built_in">cat</span> /root/.ssh/id_rsa.pub  <span class="hljs-comment"># 从目录文件夹查询公钥， </span><br><span class="hljs-comment"># 配置到github  -&gt; settings -&gt; SSH and GPG keys -&gt; New SSH key</span><br><br>dnf install git   <span class="hljs-comment"># 安装git</span><br><br>git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;邮箱&quot;</span><br>    <br>ssh -T git@github.com  <span class="hljs-comment"># 测试到github的连接</span><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="HEXO-框架安装"><a href="#HEXO-框架安装" class="headerlink" title="HEXO 框架安装"></a>HEXO 框架安装</h2><p>初始化hexo ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myhexo/  <span class="hljs-comment">#  初始化文件夹</span><br><span class="hljs-built_in">cd</span> myhexo  <span class="hljs-comment"># 移动到博客目录</span><br>npm install hexo-deployer-git --save  <span class="hljs-comment"># 安装并存储hexo项目</span><br></code></pre></td></tr></table></figure><p>修改部署方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>         <span class="hljs-comment"># 类型是 git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span>    <br>  <span class="hljs-comment">#在github上创建username.github.io的仓库,确认仓库名是否一致！ </span><br>  <span class="hljs-comment">#这里可以使用ssh的方式，也可以使用https的方式，但是ssh更稳定</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span> <span class="hljs-comment"># 设置分支为master</span><br><br></code></pre></td></tr></table></figure><p>修改后 使用 hexo deploy 进行安装，安装过程中会提示输入用户名和密码‘</p><p>用户名就是登录账户的名称</p><p>密码需要通过 settings → Developer Settings → Personal access tokens → Generate new token 创建token  作为密码 </p><p>等待几分钟可以通过访问 <a href="https://username.github.io/">https://username.github.io</a> 查看是否创建成功</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>hexo 支持多种样式风格的插件</p><p>以安装fluid为例 ， 安装插件 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">--save</span> <span class="hljs-string">hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>这时可以将 下载对应主题文件 放到theme 文件夹，在_config.yml配置theme 为fluid</p><p>或者直接在根目录创建 _config.fluid.yml  来进行配置。 _config.fluid.yml 的配置优先级高于 _config.yml  。 一些基本配置 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#标签页主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#语言</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#时区</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#主题</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about  <span class="hljs-comment"># 关于页需要自行创建</span><br></code></pre></td></tr></table></figure><p>扩展配置可以参考 ： <a href="https://fluid-dev.github.io/hexo-fluid-docs/">https://fluid-dev.github.io/hexo-fluid-docs/</a></p><p>在调试时 可以通过</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">g</span> <span class="hljs-string">--debug</span> <span class="hljs-string">来查看具体的配置信息</span>  <span class="hljs-string">如归档标签页的配置信息</span><br><br>  <span class="hljs-attr">&quot;archive&quot;:</span> &#123;<br>    <span class="hljs-attr">&quot;banner_img&quot;:</span> <span class="hljs-string">&quot;/img/default.png&quot;</span>,   <span class="hljs-comment"># 指定背景图片</span><br>    <span class="hljs-attr">&quot;banner_img_height&quot;:</span> <span class="hljs-number">60</span>,  <span class="hljs-comment"># 图片占全屏的比例</span><br>    <span class="hljs-attr">&quot;banner_mask_alpha&quot;:</span> <span class="hljs-number">0.3</span>   <span class="hljs-comment"># 不透明度</span><br>  &#125;<span class="hljs-string">,</span><br><br></code></pre></td></tr></table></figure><p>每次修改后需要使用hexo clean 再进行 生成和部署。</p><p>然后就可以开始 创建文章了,创建后会提示你md文件的地址，就可以进行编辑了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>相关内容 ： <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
