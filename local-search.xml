<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言执行过程与内存模型</title>
    <link href="/2025/04/11/C%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/04/11/C%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h1><h3 id="预处理→编译→汇编→链接→装载→执行"><a href="#预处理→编译→汇编→链接→装载→执行" class="headerlink" title="预处理→编译→汇编→链接→装载→执行"></a>预处理→编译→汇编→链接→装载→执行</h3><h3 id="预处理-处理以-开头的预处理指令，例如-include、-define、-ifdef-等。"><a href="#预处理-处理以-开头的预处理指令，例如-include、-define、-ifdef-等。" class="headerlink" title="预处理 : 处理以 # 开头的预处理指令，例如 #include、#define、#ifdef 等。"></a>预处理 : 处理以 <code>#</code> 开头的预处理指令，例如 <code>#include</code>、<code>#define</code>、<code>#ifdef</code> 等。</h3><ul><li>宏展开</li><li>文件包含展开</li><li>条件编译判断</li></ul><h3 id="编译-将预处理后的-C-代码转换成汇编代码。"><a href="#编译-将预处理后的-C-代码转换成汇编代码。" class="headerlink" title="编译 : 将预处理后的 C 代码转换成汇编代码。"></a>编译 : 将预处理后的 C 代码转换成汇编代码。</h3><ul><li>语法分析（解析语法结构）</li><li>语义分析（变量类型检查）</li></ul><h3 id="汇编-将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。"><a href="#汇编-将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。" class="headerlink" title="汇编 : 将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。"></a>汇编 : 将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。</h3><h3 id="链接-将一个或多个-o-文件与所需的库文件（比如标准库-libc）合并，解决函数调用、变量引用等符号地址。"><a href="#链接-将一个或多个-o-文件与所需的库文件（比如标准库-libc）合并，解决函数调用、变量引用等符号地址。" class="headerlink" title="链接 : 将一个或多个 .o 文件与所需的库文件（比如标准库 libc）合并，解决函数调用、变量引用等符号地址。"></a>链接 : 将一个或多个 <code>.o</code> 文件与所需的库文件（比如标准库 <code>libc</code>）合并，解决函数调用、变量引用等符号地址。</h3><h3 id="装载-将链接生成的可执行文件加载到内存中，准备好运行环境。"><a href="#装载-将链接生成的可执行文件加载到内存中，准备好运行环境。" class="headerlink" title="装载 : 将链接生成的可执行文件加载到内存中，准备好运行环境。"></a>装载 : 将链接生成的可执行文件加载到内存中，准备好运行环境。</h3><h3 id="执行-程序入口通常是-start-函数，由链接器提供，之后会调用-main-。"><a href="#执行-程序入口通常是-start-函数，由链接器提供，之后会调用-main-。" class="headerlink" title="执行 : 程序入口通常是 _start 函数，由链接器提供，之后会调用 main()。"></a>执行 : <strong>程序入口通常是 <code>_start</code> 函数</strong>，由链接器提供，之后会调用 <code>main()</code>。</h3><ul><li>用户编写的程序从 <code>main()</code> 开始运行。</li><li>程序执行时：<ul><li>初始化全局变量</li><li>执行 <code>main()</code> 函数</li><li>程序返回时调用 <code>exit()</code></li></ul></li></ul><h1 id="加载后的C语言内存结构"><a href="#加载后的C语言内存结构" class="headerlink" title="加载后的C语言内存结构"></a>加载后的C语言内存结构</h1><p>C语言通过链接和装载 将数据分布到一些固定的位置</p><p>.text 代码段 用于放置只读的字节码指令 .rodata 段也会放置在附近</p><p>.data 数据段 用于存放已经初始化全局变量和静态变量</p><p>.bss 段            用于存放未初始化和初始化为0的全局变量和静态变量。</p><p>堆区               用于存放程序执行后动态分配的内存</p><p><img src="https://i.111666.best/image/QRNWyUFQUutntsad2LJIex.png" alt="image"></p><h1 id="变量，指针与类型"><a href="#变量，指针与类型" class="headerlink" title="变量，指针与类型"></a>变量，指针与类型</h1><p>在 C 语言中，变量的声明意味着：编译器会在内存中为这个变量分配一块空间，并为它分配一个可供程序访问的“名称”或“标签”。这个标签（变量名）本质上是对该内存地址的一种<strong>静态引用方式</strong>。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> c = <span class="hljs-number">0</span> ; <br><span class="hljs-comment">// 为变量 c 分配了一个 int 类型（通常是 4 字节）的空间，并初始化为 0</span><br> <br><span class="hljs-type">char</span> a[] = &#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><span class="hljs-comment">// 分配了一个大小为 sizeof(a) 的字符数组，内存上是一块连续空间，存储了具体的字符数据</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">person</span>&#123;</span><br><span class="hljs-type">int</span> age ;<br><span class="hljs-comment">//char name[10]; 无法赋值</span><br><span class="hljs-type">char</span>* name ;<br>&#125; person;<br><span class="hljs-comment">// 为结构体变量 h 分配了一块空间，包含了 int（age）和指针（name）两个成员</span><br>person h;<br>h.name = <span class="hljs-string">&quot;codfish&quot;</span>;<br><span class="hljs-comment">//  找到结构体中的char指针类型结构name, 将该指针指向“codfish” 的地址</span><br>h.age = <span class="hljs-number">12</span>;<br><span class="hljs-comment">//  找到结构体中的intl类型age, 向其所在的内存地址写入“12”</span><br></code></pre></td></tr></table></figure><p>变量名可以看作是对该内存空间的一个<strong>静态引用标签</strong>，通过它我们可以对这块内存进行读写。</p><p>在这个视角下，“<strong>地址</strong>”本身也可以看作是一种值，而<strong>指针类型</strong>就是<strong>专门用于存储地址值的类型</strong>。指针变量的值是一个地址，通过这个地址可以间接访问另一个变量或内存区域。因此，指针本质上是一种<strong>间接寻址的变量类型</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">3</span> ;   <span class="hljs-comment">// 开辟了一块内存空间，存储的值为3</span><br><span class="hljs-type">int</span> * p = &amp;a ;  <span class="hljs-comment">// 开辟了一块内存空间, 存储的值为a的存储地址</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*p);  <span class="hljs-comment">//  打印 p 指向地址中存储的值，即 a</span><br></code></pre></td></tr></table></figure><p>在 C 语言中，<strong>左值（lvalue）</strong>代表的是一个可寻址、可写入的内存位置，是程序运行中频繁操作的对象。而<strong>右值（rvalue）</strong>通常是一个临时值，不具备可寻址性，用完即弃。</p><p>例如：</p><ul><li>变量 <code>a</code> 是左值，你可以取地址 <code>&amp;a</code>，也可以对它赋值。</li><li>表达式 <code>a + 1</code> 是右值，它是一个计算结果，不能取地址。</li><li>字符串 <code>&quot;codfish&quot;</code> 是一个右值常量，其内容在编译期就固定，通常被保存在 <strong>只读数据段（.rodata）</strong> 中。</li></ul><p>因此：</p><blockquote><p>左值是程序运行时可操作的内存实体，而右值更多地体现为临时性和只读性。其中某些右值（如字符串字面量、常量表达式）确实会保存在 .rodata 段中，但大多数右值只是临时计算结果，可能存在于寄存器中，或者根本不会在物理内存中长期保留。</p></blockquote><p>最后回到上文，在结构体中如果定义的char name[10]；则无法使用字符串直接完成初始化。因为这时 结构体中定义的是一个 10个字节长度 char 数组，而接收的右值是一个字符指针。两边的类型并不能匹配，所以无法完成赋值，只能对该数组中的每一位分别进行赋值。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">human.name[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;C&#x27;</span>;<br>human.name[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;o&#x27;</span>;<br>human.name[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;d&#x27;</span>;<br>human.name[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;f&#x27;</span>;<br>human.name[<span class="hljs-number">4</span>] = <span class="hljs-string">&#x27;i&#x27;</span>;<br>human.name[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;s&#x27;</span>;<br>human.name[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>human.name[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <br><span class="hljs-comment">// 输出</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ myc]# ./test<br>hello ,<span class="hljs-number">12</span> years old<span class="hljs-string">&#x27;s  Codfish</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bash 快捷指令清单</title>
    <link href="/2025/04/10/Bash-%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <url>/2025/04/10/Bash-%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h1 id="光标移动类"><a href="#光标移动类" class="headerlink" title="光标移动类"></a>光标移动类</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + A</code></td><td>移动光标到行首</td></tr><tr><td><code>Ctrl + E</code></td><td>移动光标到行尾</td></tr><tr><td><code>Alt + B</code></td><td>向左移动一个单词</td></tr><tr><td><code>Alt + F</code></td><td>向右移动一个单词</td></tr><tr><td><code>Ctrl + B</code></td><td>向左移动一个字符</td></tr><tr><td><code>Ctrl + F</code></td><td>向右移动一个字符</td></tr><tr><td><code>Ctrl + XX</code></td><td>在行首与当前位置之间跳转</td></tr></tbody></table><h1 id="编辑命令类"><a href="#编辑命令类" class="headerlink" title="编辑命令类"></a>编辑命令类</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + U</code></td><td>删除从光标到行首的内容</td></tr><tr><td><code>Ctrl + K</code></td><td>删除从光标到行尾的内容</td></tr><tr><td><code>Ctrl + W</code></td><td>删除光标前一个“词”</td></tr><tr><td><code>Alt + D</code></td><td>删除光标后的一个“词”</td></tr><tr><td><code>Ctrl + D</code></td><td>删除光标所在字符（或退出 shell）</td></tr><tr><td><code>Ctrl + H</code></td><td>删除光标前一个字符（退格）</td></tr><tr><td><code>Ctrl + T</code></td><td>交换光标前的两个字符</td></tr><tr><td><code>Alt + T</code></td><td>交换光标前后两个词</td></tr></tbody></table><h1 id="剪切与粘贴"><a href="#剪切与粘贴" class="headerlink" title="剪切与粘贴"></a>剪切与粘贴</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + U/K/W</code></td><td>剪切内容，会保存在剪贴板中</td></tr><tr><td><code>Ctrl + Y</code></td><td>粘贴（插入）刚才剪切的内容</td></tr><tr><td><code>Alt + Y</code></td><td>粘贴历史中更早的剪切内容（循环）</td></tr></tbody></table><h1 id="历史命令操作"><a href="#历史命令操作" class="headerlink" title="历史命令操作"></a>历史命令操作</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + R</code></td><td>反向搜索历史命令</td></tr><tr><td><code>Ctrl + S</code></td><td>正向搜索历史命令（可能需配置）</td></tr><tr><td><code>Ctrl + P</code></td><td>上一条历史命令（等同 ↑）</td></tr><tr><td><code>Ctrl + N</code></td><td>下一条历史命令（等同 ↓）</td></tr><tr><td><code>Alt + .</code></td><td>插入上一条命令的最后一个参数</td></tr></tbody></table><h1 id="命令行组合操作"><a href="#命令行组合操作" class="headerlink" title="命令行组合操作"></a>命令行组合操作</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + O</code></td><td>执行当前命令并加载下一条历史命令</td></tr><tr><td><code>Ctrl + L</code></td><td>清屏（等同 <code>clear</code> 命令）</td></tr><tr><td><code>Ctrl + G</code></td><td>退出当前操作（如搜索、粘贴等）</td></tr></tbody></table><h1 id="补全与自动化"><a href="#补全与自动化" class="headerlink" title="补全与自动化"></a>补全与自动化</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>补全命令、文件或路径</td></tr><tr><td><code>Alt + ?</code></td><td>显示所有可能的补全项</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C 编程</title>
    <link href="/2025/04/10/C-%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/04/10/C-%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java 编程</title>
    <link href="/2025/04/10/Java-%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/04/10/Java-%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 编程</title>
    <link href="/2025/04/10/Python-%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/04/10/Python-%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>挖坑</title>
    <link href="/2025/04/10/%E6%8C%96%E5%9D%91/"/>
    <url>/2025/04/10/%E6%8C%96%E5%9D%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>TCP/IP 数据结构 操作系统 测试技术 HTTP 技术书籍 经济学 文学 哲学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 部署与查询命令</title>
    <link href="/2025/04/10/Redis-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/10/Redis-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis的安装部署"><a href="#Redis的安装部署" class="headerlink" title="Redis的安装部署"></a>Redis的安装部署</h1><p>使用系统的包管理器来安装redis ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install redis <br></code></pre></td></tr></table></figure><p>或者直接通过容器拉取redis容器 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br>docker run -d   --name my-redis   -p 6379:6379   redis:latest<br></code></pre></td></tr></table></figure><h1 id="Redis-文件配置"><a href="#Redis-文件配置" class="headerlink" title="Redis 文件配置"></a>Redis 文件配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# whereis redis<br>redis: /usr/lib64/redis /etc/redis.conf<br><br><span class="hljs-comment"># 重要配置</span><br><span class="hljs-built_in">bind</span> 127.0.0.1 ::1 <br><span class="hljs-comment"># 配置环回口监听， 如果需要从外部访问要改为 bind 0.0.0.0</span><br>port 6379  <br><span class="hljs-comment"># 传输端口，默认6379</span><br>daemonize no  <br><span class="hljs-comment"># 是否作为后台进程执行，默认是no 即前台运行</span><br>requirepass yourpassword<br><span class="hljs-comment"># 配置数据库密码</span><br><span class="hljs-comment"># 启动redis 服务器</span><br>redis-server  path/your_redis.conf<br><span class="hljs-comment"># 需要使用自定义的配置文件启动，自定义配置才会生效</span><br></code></pre></td></tr></table></figure><h1 id="配置Redis作为服务在服务器上启动"><a href="#配置Redis作为服务在服务器上启动" class="headerlink" title="配置Redis作为服务在服务器上启动"></a>配置Redis作为服务在服务器上启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置.services文件</span><br>[Unit]<br>Description=Redis In-Memory Data Store<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/usr/bin/redis-server /etc/my_redis/redis.conf <span class="hljs-comment"># 定义启动项</span><br>ExecStop=/usr/bin/redis-cli -a yourpassword shutdown <span class="hljs-comment"># 定义结束过程</span><br>Restart=always<br>User=redis<br>Group=redis<br><br><span class="hljs-comment"># Optional: Make sure redis has permission to write to the PID/log/data files</span><br>RuntimeDirectory=redis<br>RuntimeDirectoryMode=0755<br><br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-comment">#需要注意配置为linux服务时，要将daemonize设置为no</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-comment">#重新加载守护进程配置</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> redis<br><span class="hljs-comment">#配置redis开机启动</span><br><span class="hljs-built_in">sudo</span> systemctl start redis<br><span class="hljs-comment">#启动redis</span><br>redis-cli -p your_port -a your_password <br><span class="hljs-comment">#进入redis</span><br></code></pre></td></tr></table></figure><h1 id="Redis支持的数据结构与常用查询"><a href="#Redis支持的数据结构与常用查询" class="headerlink" title="Redis支持的数据结构与常用查询"></a>Redis支持的数据结构与常用查询</h1><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><p>KEYS 查看符合模板的所有key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 匹配符含义</span><br><span class="hljs-comment"># *匹配任意个字符</span><br>127.0.0.1:6380&gt; keys *<br> 1) <span class="hljs-string">&quot;people&quot;</span><br> 2) <span class="hljs-string">&quot;b&quot;</span><br> 3) <span class="hljs-string">&quot;25&quot;</span><br> 4) <span class="hljs-string">&quot;user&quot;</span><br><span class="hljs-comment"># ?匹配任意单个字符</span><br>127.0.0.1:6380&gt; keys ?<br>1) <span class="hljs-string">&quot;b&quot;</span><br><span class="hljs-comment"># [abc]匹配 a 或 b 或 c</span><br>127.0.0.1:6380&gt; keys [eb]<br>1) <span class="hljs-string">&quot;b&quot;</span><br>2) <span class="hljs-string">&quot;e&quot;</span><br></code></pre></td></tr></table></figure><p>DEL 删除一个指定的key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; del e<br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>EXISTS 判断key是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; exists b<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; exists e<br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><p>EXPIRE 给一个key设置有效期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">EXPIRE  item  scends<br>TTL <span class="hljs-comment"># 查询剩余有效期</span><br>127.0.0.1:6380&gt; <span class="hljs-built_in">set</span> a 5<br>OK<br>127.0.0.1:6380&gt; expire a 10<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) 8<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) -2<br>127.0.0.1:6380&gt; get a<br>(nil)<br></code></pre></td></tr></table></figure><h2 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h2><p>String</p><ul><li>string</li><li>int</li><li>float</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>set&#x2F;get 设置&#x2F;获取 k-v 键值对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> key value<br><span class="hljs-comment"># 设置 k-v 键值对</span><br>get key <br>- value<br><span class="hljs-comment"># 获取对应key的值</span><br></code></pre></td></tr></table></figure><p>mset&#x2F;mget 同时设置&#x2F;获取多组键值对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; mset z 15 y 12 x 18<br>OK<br>127.0.0.1:6380&gt; mget z y x<br>1) <span class="hljs-string">&quot;15&quot;</span><br>2) <span class="hljs-string">&quot;12&quot;</span><br>3) <span class="hljs-string">&quot;18&quot;</span><br><br></code></pre></td></tr></table></figure><p>incr 指定对应键的值自增</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; incr z<br>(<span class="hljs-built_in">integer</span>) 16<br></code></pre></td></tr></table></figure><p>incrby 自增自定义步长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; incrby z 8<br>(<span class="hljs-built_in">integer</span>) 24<br></code></pre></td></tr></table></figure><p>incrbyfloat 增加浮点数数值步长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; incrbyfloat z 0.5<br><span class="hljs-string">&quot;24.5&quot;</span><br></code></pre></td></tr></table></figure><p>setnx  设置值，如果该key已经存在数值，则不会修改原值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; setnx z 12<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6380&gt; get z<br><span class="hljs-string">&quot;24.5&quot;</span><br></code></pre></td></tr></table></figure><p>setex 设置k-v 并设置超时时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; setex z 10 18<br>OK<br>127.0.0.1:6380&gt; ttl z<br>(<span class="hljs-built_in">integer</span>) 8<br>127.0.0.1:6380&gt; ttl z<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; ttl z<br>(<span class="hljs-built_in">integer</span>) -2<br>127.0.0.1:6380&gt; get z<br>(nil)<br></code></pre></td></tr></table></figure><h2 id="Hash-哈希表（散列表）"><a href="#Hash-哈希表（散列表）" class="headerlink" title="Hash 哈希表（散列表）"></a>Hash 哈希表（散列表）</h2><p>hset&#x2F;hget  向哈希表中设置&#x2F;读取k-v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hset m name luccy<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; hget m name<br><span class="hljs-string">&quot;luccy&quot;</span><br></code></pre></td></tr></table></figure><p>hmset&#x2F;hmget 向哈希表中一次性设置多对k-v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hmset o age 12 name joi<br>OK<br>127.0.0.1:6380&gt; hmget o age name<br>1) <span class="hljs-string">&quot;12&quot;</span><br>2) <span class="hljs-string">&quot;joi&quot;</span><br></code></pre></td></tr></table></figure><p>hgetall 获取hask中的所有键值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hgetall o<br>1) <span class="hljs-string">&quot;age&quot;</span><br>2) <span class="hljs-string">&quot;12&quot;</span><br>3) <span class="hljs-string">&quot;name&quot;</span><br>4) <span class="hljs-string">&quot;joi&quot;</span><br></code></pre></td></tr></table></figure><p>hkeys&#x2F;hvals获取所有键&#x2F;值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hkeys o<br>1) <span class="hljs-string">&quot;age&quot;</span><br>2) <span class="hljs-string">&quot;name&quot;</span><br>127.0.0.1:6380&gt; hvals o<br>1) <span class="hljs-string">&quot;12&quot;</span><br>2) <span class="hljs-string">&quot;joi&quot;</span><br></code></pre></td></tr></table></figure><p>HINCRBY 向hash中的某个键指定步长自增</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hincrby o age 3<br>(<span class="hljs-built_in">integer</span>) 15<br></code></pre></td></tr></table></figure><p>HSETNX 向hash中的某个键设置值，如果已经存在值，则保留原值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hsetnx o age 18<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6380&gt; hget o age<br><span class="hljs-string">&quot;15&quot;</span><br></code></pre></td></tr></table></figure><h2 id="List-列表（实现为一个双向链表）"><a href="#List-列表（实现为一个双向链表）" class="headerlink" title="List 列表（实现为一个双向链表）"></a>List 列表（实现为一个双向链表）</h2><p>LPUSH&#x2F;LPOP 从左侧插入&#x2F;弹出值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; lpush q 28 29 30<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6380&gt; lpop q 1<br>1) <span class="hljs-string">&quot;30&quot;</span><br><span class="hljs-comment"># 插入多个值时，是依次从左侧插入值，所以30处于链表头部</span><br></code></pre></td></tr></table></figure><p>RPUSH&#x2F;RPOP 从右侧插入&#x2F;弹出值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; rpush q 18 19 20<br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6380&gt; rpop q 1<br>1) <span class="hljs-string">&quot;20&quot;</span><br><span class="hljs-comment"># 右侧插入多个值时，每个新插入的值插入在尾部，所以20处于尾部</span><br></code></pre></td></tr></table></figure><p>LRANGE key start end 查询给出范围内的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; lrange q 0 4<br>1) <span class="hljs-string">&quot;29&quot;</span><br>2) <span class="hljs-string">&quot;28&quot;</span><br>3) <span class="hljs-string">&quot;18&quot;</span><br>4) <span class="hljs-string">&quot;19&quot;</span><br></code></pre></td></tr></table></figure><p>BLPOP  设置阻塞时间的右侧弹出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; blpop q 5<br>(nil)<br>(5.07s)<br><span class="hljs-comment"># 注意这里弹出超过list长度的值会弹出最右侧的值</span><br></code></pre></td></tr></table></figure><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h2><p>SADD 向set中添加元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sadd p 1 2 3 4 5<br>(<span class="hljs-built_in">integer</span>) 5<br></code></pre></td></tr></table></figure><p>SREM  移除set中的元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; srem p 1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; sinter p<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br></code></pre></td></tr></table></figure><p>SCARD  返回set中元素的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; scard p<br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><p>SISMEMBER key member 判断是否存在于set中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sismember p 5<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; sismember p 6<br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><p>SMEMBERS 获取所有成员</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; smembers p<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br></code></pre></td></tr></table></figure><p>SINTER key1 key2  求key1 与key2的交集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; smembers p<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br>127.0.0.1:6380&gt; sadd j 2 5 8 9 12<br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6380&gt; sinter p j<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;5&quot;</span><br></code></pre></td></tr></table></figure><p>SDIFF    差集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sdiff p j<br>1) <span class="hljs-string">&quot;3&quot;</span><br>2) <span class="hljs-string">&quot;4&quot;</span><br>127.0.0.1:6380&gt; sdiff j p<br>1) <span class="hljs-string">&quot;8&quot;</span><br>2) <span class="hljs-string">&quot;9&quot;</span><br>3) <span class="hljs-string">&quot;12&quot;</span><br><span class="hljs-comment"># 左并联</span><br></code></pre></td></tr></table></figure><p>SUNION 求key1 key2 的并集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sunion p j<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br>5) <span class="hljs-string">&quot;8&quot;</span><br>6) <span class="hljs-string">&quot;9&quot;</span><br>7) <span class="hljs-string">&quot;12&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Sortedset-有序集合"><a href="#Sortedset-有序集合" class="headerlink" title="Sortedset 有序集合"></a>Sortedset 有序集合</h2><p>ZADD  key score member 设置权重并添加成员</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zadd r 24 48<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; zadd r 17 56 19 62 4 77<br></code></pre></td></tr></table></figure><p>ZREM key member</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrem r 48<br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>ZSCORE key member  获取成员权重</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zscore r 77<br><span class="hljs-string">&quot;4&quot;</span><br></code></pre></td></tr></table></figure><p>ZRANK key member 获取成员序号 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrank r 62<br>(<span class="hljs-built_in">integer</span>) 3<br></code></pre></td></tr></table></figure><p>ZCARD key 获取元素个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zcard r<br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><p>ZCOUNT key min max 根据权重获取数据的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zcard r<br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><p>ZINCRBY  根据成员，向其权重自增 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zincrby r 2 62<br><span class="hljs-string">&quot;21&quot;</span><br></code></pre></td></tr></table></figure><p>ZRANGE  根据排序筛选范围内的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrange r 2 90<br>1) <span class="hljs-string">&quot;36&quot;</span><br>2) <span class="hljs-string">&quot;56&quot;</span><br>3) <span class="hljs-string">&quot;62&quot;</span><br><br></code></pre></td></tr></table></figure><p>ZRANGEBYSCORE根据权重筛选范围内的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrangebyscore r 2 90<br>1) <span class="hljs-string">&quot;52&quot;</span><br>2) <span class="hljs-string">&quot;77&quot;</span><br>3) <span class="hljs-string">&quot;36&quot;</span><br>4) <span class="hljs-string">&quot;56&quot;</span><br>5) <span class="hljs-string">&quot;62&quot;</span><br></code></pre></td></tr></table></figure><p>ZDIFF 取多个有序集合的差集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zdiff 2 s r<br>1) <span class="hljs-string">&quot;82&quot;</span><br>2) <span class="hljs-string">&quot;63&quot;</span><br>3) <span class="hljs-string">&quot;48&quot;</span><br></code></pre></td></tr></table></figure><p>ZINTER 取多个有序集合的交集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zinter 3 s r t<br>1) <span class="hljs-string">&quot;56&quot;</span><br></code></pre></td></tr></table></figure><p>ZUNION 取多个有序集合的并集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zunion 3 s r t<br>1) <span class="hljs-string">&quot;52&quot;</span><br>2) <span class="hljs-string">&quot;76&quot;</span><br>3) <span class="hljs-string">&quot;77&quot;</span><br>4) <span class="hljs-string">&quot;36&quot;</span><br>5) <span class="hljs-string">&quot;82&quot;</span><br>6) <span class="hljs-string">&quot;62&quot;</span><br>7) <span class="hljs-string">&quot;63&quot;</span><br>8) <span class="hljs-string">&quot;48&quot;</span><br>9) <span class="hljs-string">&quot;56&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell VIII 观测</title>
    <link href="/2025/04/09/Shell-VIII-%E8%A7%82%E6%B5%8B/"/>
    <url>/2025/04/09/Shell-VIII-%E8%A7%82%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<p>留坑 perf和ebpf</p>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell VII VIM</title>
    <link href="/2025/04/09/Shell-VII-VIM/"/>
    <url>/2025/04/09/Shell-VII-VIM/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-VII-VIM-md"><a href="#Shell-VII-VIM-md" class="headerlink" title="Shell-VII-VIM.md"></a>Shell-VII-VIM.md</h1><h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><p><strong>Vim</strong> 是一个高度可定制的 <strong>文本编辑器</strong></p><h1 id="启动与退出"><a href="#启动与退出" class="headerlink" title="启动与退出"></a>启动与退出</h1><h2 id="VIM支持三种模式-："><a href="#VIM支持三种模式-：" class="headerlink" title="VIM支持三种模式 ："></a>VIM支持三种模式 ：</h2><ul><li>**普通模式 (Normal)**：默认模式，用于浏览和操作文本。</li><li>**插入模式 (Insert)**：输入文本，按 <code>i</code> 进入。</li><li>**命令模式 (Command-line)**：输入冒号 <code>:</code> 命令。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>vim filename        <span class="hljs-comment"># 打开文件</span><br>vim +n filename     <span class="hljs-comment"># 打开文件并跳转到第n行</span><br><br><span class="hljs-comment"># 退出:</span><br><span class="hljs-comment">#- `:q`：退出</span><br><span class="hljs-comment">#- `:q!`：强制退出不保存</span><br><span class="hljs-comment">#- `:w`：保存</span><br><span class="hljs-comment">#- `:wq` 或 `ZZ`：保存并退出</span><br><span class="hljs-comment">#- `:x`：与 `:wq` 相同</span><br><span class="hljs-comment">#- `:e!`：放弃修改并重新加载</span><br></code></pre></td></tr></table></figure><h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><h3 id="1-基本移动"><a href="#1-基本移动" class="headerlink" title="1. 基本移动"></a>1. 基本移动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">`h`：左，`l`：右，`j`：下，`k`：上<br>`0`：行首，`^`：首个非空字符，`$`：行尾<br>`w`：下一个词，`b`：前一个词，`e`：词尾<br></code></pre></td></tr></table></figure><h3 id="2-高速移动"><a href="#2-高速移动" class="headerlink" title="2. 高速移动"></a>2. 高速移动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">`gg`：跳转到文件开头<br>`G`：跳转到文件末尾<br>`nG`：跳到第 n 行<br>`H`/`M`/`L`：屏幕顶部/中部/底部<br>`Ctrl-d`/`Ctrl-u`：向下/向上滚动半页<br>`%`：匹配括号跳转<br></code></pre></td></tr></table></figure><h1 id="插入与删除"><a href="#插入与删除" class="headerlink" title="插入与删除"></a>插入与删除</h1><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">`i`：当前字符前<br>`I`：行首<br>`a`：当前字符后<br>`A`：行尾<br>`o`：当前行下方新开一行<br>`O`：当前行上方新开一行<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">`x`：删除当前字符<br>`<span class="hljs-built_in">dd</span>`：删除当前行<br>`dw`：删除一个词<br>`d$`：删除至行尾<br>`d0`：删除至行首<br></code></pre></td></tr></table></figure><h1 id="复制、粘贴、撤销"><a href="#复制、粘贴、撤销" class="headerlink" title="复制、粘贴、撤销"></a>复制、粘贴、撤销</h1><h3 id="复制（Yank）"><a href="#复制（Yank）" class="headerlink" title="复制（Yank）"></a>复制（Yank）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">`yy`：复制当前行<br>`yw`：复制一个词<br>`y$`：复制至行尾<br>`v`：进入可视模式，选择后 `y`<br></code></pre></td></tr></table></figure><h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">`p` ：粘贴<br></code></pre></td></tr></table></figure><h3 id="撤销与重做"><a href="#撤销与重做" class="headerlink" title="撤销与重做"></a>撤销与重做</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">`u`：撤销<br>`Ctrl-r`：重做<br></code></pre></td></tr></table></figure><h1 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h1><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">`/pattern`：向下查找<br>`?pattern`：向上查找<br>`n`/`N`：下一个/上一个匹配<br></code></pre></td></tr></table></figure><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">vim<br>复制编辑<br><span class="hljs-symbol">:%s/old/new/g</span>        <span class="hljs-comment"># 替换整篇文件中所有匹配</span><br><span class="hljs-symbol">:</span><span class="hljs-number">1</span>,<span class="hljs-number">10</span>s/old/new/g     <span class="hljs-comment"># 替换第1至10行</span><br><span class="hljs-symbol">:%s/old/new/gc</span>       <span class="hljs-comment"># 替换前确认</span><br><br></code></pre></td></tr></table></figure><h1 id="窗口与标签页"><a href="#窗口与标签页" class="headerlink" title="窗口与标签页"></a>窗口与标签页</h1><h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">`:<span class="hljs-built_in">split</span>` 或 `:sp`：水平分屏<br>`:vsplit` 或 `:vsp`：垂直分屏<br>`Ctrl-w w`：在窗口间切换<br>`Ctrl-w h/j/k/l`：方向切换<br>`Ctrl-w q`：关闭当前窗口<br></code></pre></td></tr></table></figure><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">`:tabnew filename`：新建标签页<br>`:tabn` / `:tabp`：下一个/上一个标签页<br>`gt` / `gT`：标签页切换<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell VI Shell编程</title>
    <link href="/2025/04/09/Shell-VI-Shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/04/09/Shell-VI-Shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-VI-Shell编程-md"><a href="#Shell-VI-Shell编程-md" class="headerlink" title="Shell-VI-Shell编程.md"></a>Shell-VI-Shell编程.md</h1><h1 id="什么是Shell编程？"><a href="#什么是Shell编程？" class="headerlink" title="什么是Shell编程？"></a>什么是Shell编程？</h1><p>Shell 编程是一种基于 Shell 解释器语法规则，结合环境变量和命令行参数，通过组织和控制系统命令以实现自动化任务与进程管理的脚本语言。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>父进程的变量在子进程中不可见，需要使用export声明需要的变量或者使用 . <a href="http://child.sh/">child.sh</a> 执行</p><p>shell中声明变量赋值变量名必须严格紧贴赋值符合“&#x3D;”</p><h2 id="基础变量"><a href="#基础变量" class="headerlink" title="基础变量"></a>基础变量</h2><p>Shell(bash)本身提供了一些基础变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$?                      <span class="hljs-comment">#储存了上一次的执行结果，用于对步骤执行结果的判断</span><br><span class="hljs-variable">$1</span>-<span class="hljs-variable">$9</span>                   <span class="hljs-comment">#储存了传入的位置参数</span><br><span class="hljs-variable">$#</span>                      <span class="hljs-comment">#传递的参数个数</span><br><span class="hljs-variable">$@</span>                      <span class="hljs-comment">#传递的所有参数</span><br>$*                      <span class="hljs-comment">#传递的所有参数 ，作为一个整体</span><br>$$                      <span class="hljs-comment">#进程的pid</span><br>$!                      <span class="hljs-comment">#上一个后台命令的pid</span><br><span class="hljs-variable">$_</span>                      <span class="hljs-comment">#上一个命令的最后一个参数</span><br><span class="hljs-variable">$IFS</span>                  <span class="hljs-comment">#输入字段分隔符（默认是空格、Tab、换行）</span><br><span class="hljs-variable">$RANDOM</span>                <span class="hljs-comment">#生成一个0~32767 的随机数</span><br><span class="hljs-variable">$LINENO</span>                 <span class="hljs-comment">#当前脚本中的行号</span><br><span class="hljs-variable">$UID</span> / <span class="hljs-variable">$EUID</span>          <span class="hljs-comment">#当前用户的 UID（真实/有效）</span><br><span class="hljs-variable">$PWD</span>                  <span class="hljs-comment">#当前目录</span><br><span class="hljs-variable">$HOME</span>                  <span class="hljs-comment">#当前用户的主目录</span><br><span class="hljs-variable">$PATH</span>                  <span class="hljs-comment">#系统查找命令的路径列表</span><br><span class="hljs-variable">$SHELL</span>                <span class="hljs-comment">#当前默认的 shell 路径</span><br></code></pre></td></tr></table></figure><p>通过使用上述的变量，编写第一个shell脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;Give me a name: &quot;</span> name<br><span class="hljs-built_in">echo</span> hello <span class="hljs-variable">$name</span><br><span class="hljs-built_in">echo</span> your home path is <span class="hljs-variable">$HOME</span><br><span class="hljs-built_in">echo</span> current <span class="hljs-built_in">dir</span> is <span class="hljs-variable">$PWD</span><br><br>Give me a name: Codfish<br>hello Codfish<br>your home path is /root<br>current <span class="hljs-built_in">dir</span> is /home/codfish/my_bash<br></code></pre></td></tr></table></figure><h2 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=<span class="hljs-string">&quot;Alice&quot;</span>              <span class="hljs-comment"># 普通变量（默认是字符串）</span><br><span class="hljs-built_in">declare</span> -i age=18         <span class="hljs-comment"># 整数变量</span><br><span class="hljs-built_in">readonly</span> pi=3.14          <span class="hljs-comment"># 只读变量</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/new    <span class="hljs-comment"># 环境变量</span><br>arr=(apple banana cherry) <span class="hljs-comment"># 数组变量</span><br><span class="hljs-built_in">declare</span> -A user           <span class="hljs-comment"># 关联数组（Bash 4+）</span><br>user[<span class="hljs-built_in">id</span>]=001<br></code></pre></td></tr></table></figure><h1 id="引用和执行"><a href="#引用和执行" class="headerlink" title="引用和执行"></a>引用和执行</h1><h2 id="’’，”“，以及"><a href="#’’，”“，以及" class="headerlink" title="&#96;&#96; ,’’，”“，以及$(())"></a>&#96;&#96; ,’’，”“，以及$(())</h2><p>以上都可以作为字符串向shell脚本中的变量赋值。</p><p>反引号 <code>  </code>   ： 获取命令执行后的结果作为变量的值(过时)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hi=<span class="hljs-string">&quot;hello&quot;</span><br>hi1=`<span class="hljs-built_in">echo</span> hello`<br><br>result : hello<br></code></pre></td></tr></table></figure><p>单引号‘’ ： 输出字符串，完全不解析 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>hi2=<span class="hljs-string">&#x27;echo $hi&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi2</span><br><br>result : <span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi1</span><br></code></pre></td></tr></table></figure><p>双引号‘’ ： 输出含变量空格信息 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hi3=<span class="hljs-string">&quot;echo <span class="hljs-variable">$hi</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi3</span><br><br>result : <span class="hljs-built_in">echo</span> hello<br></code></pre></td></tr></table></figure><p>$()’ ： 获取命令执行后的结果作为变量的值,支持嵌套</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hi4=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi4</span><br><br>result : hello<br></code></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>算术运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">+   <span class="hljs-comment">#加法</span><br>-   <span class="hljs-comment">#减法</span><br>*    <span class="hljs-comment">#乘法</span><br>/    <span class="hljs-comment">#除法（整数除法）</span><br>%   <span class="hljs-comment">#取余</span><br>++ <span class="hljs-comment">#自增（前/后都支持）</span><br>-- <span class="hljs-comment">#自减</span><br>** <span class="hljs-comment">#幂运算（Bash 4.0+ 支持）</span><br></code></pre></td></tr></table></figure><p>整数比较运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-eq <span class="hljs-comment">#等于</span><br>-ne <span class="hljs-comment">#不等于</span><br>-gt  <span class="hljs-comment">#大于</span><br>-lt <span class="hljs-comment">#小于</span><br>-ge <span class="hljs-comment">#大于等于</span><br>-le <span class="hljs-comment">#小于等于</span><br></code></pre></td></tr></table></figure><p>字符比较运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">= 或 == <span class="hljs-comment">#字符串相等</span><br>!=     <span class="hljs-comment">#字符串不等</span><br>&lt;       <span class="hljs-comment">#字典序小于（仅 [[ ]]）</span><br>&gt;       <span class="hljs-comment">#字典序大于（仅 [[ ]]）</span><br>-z     <span class="hljs-comment">#字符串为空</span><br>-n     <span class="hljs-comment">#字符串非空</span><br></code></pre></td></tr></table></figure><p>逻辑运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">用于 []<br>-a    <span class="hljs-comment">#AND（与）</span><br>-o    <span class="hljs-comment">#OR（或）</span><br>用于 [[]] 或(())<br>&amp;&amp;    <span class="hljs-comment">#与</span><br>`<br>!      <span class="hljs-comment">#非（取反）</span><br></code></pre></td></tr></table></figure><p>文件测试运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">-e            <span class="hljs-comment">#文件存在</span><br>-f            <span class="hljs-comment">#是普通文件</span><br>-d            <span class="hljs-comment">#是目录</span><br>-L            <span class="hljs-comment">#是符号链接</span><br>-r            <span class="hljs-comment">#有读权限</span><br>-w            <span class="hljs-comment">#有写权限</span><br>-x            <span class="hljs-comment">#有执行权限</span><br>-s            <span class="hljs-comment">#文件非空</span><br>file1 -nt file2<span class="hljs-comment">#file1 比 file2 新</span><br>file1 -ot file2<span class="hljs-comment">#file1 比 file2 旧</span><br></code></pre></td></tr></table></figure><p>位运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&amp;             <span class="hljs-comment">#按位与</span><br>^             <span class="hljs-comment">#按位异或</span><br>~             <span class="hljs-comment">#按位取反</span><br>&lt;&lt;           <span class="hljs-comment">#左移</span><br>&gt;&gt;           <span class="hljs-comment">#右移</span><br></code></pre></td></tr></table></figure><p>赋值运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">=             <span class="hljs-comment">#赋值</span><br>+=           <span class="hljs-comment">#加后赋值</span><br>-=           <span class="hljs-comment">#减后赋值</span><br>*=           <span class="hljs-comment">#乘后赋值</span><br>/=           <span class="hljs-comment">#除后赋值</span><br>%=           <span class="hljs-comment">#取余后赋值</span><br>&lt;&lt;=           <span class="hljs-comment">#左移后赋值</span><br>&gt;&gt;=           <span class="hljs-comment">#右移后赋值</span><br>&amp;=           <span class="hljs-comment">#位与赋值</span><br>^=           <span class="hljs-comment">#位异或赋值</span><br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>整数判断&#x2F;运算</strong></th><th><code>(( ))</code></th></tr></thead><tbody><tr><td><strong>字符串判断</strong></td><td><code>[[ ]]</code> （或 <code>[ ]</code>）</td></tr><tr><td><strong>文件测试</strong></td><td><code>[ ]</code></td></tr><tr><td><strong>组合条件（逻辑与或）</strong></td><td><code>[[ ]]</code></td></tr></tbody></table><h1 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h1><h2 id="tips-1"><a href="#tips-1" class="headerlink" title="tips"></a>tips</h2><p>变量不能紧贴判断符号[ ]</p><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ condition1 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-comment"># condition1为真执行</span><br><span class="hljs-keyword">elif</span> [condition2]; <span class="hljs-keyword">then</span><br><span class="hljs-comment"># condition2为真执行</span><br><span class="hljs-keyword">else</span><br><span class="hljs-comment"># 条件均不满足时执行</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> $变量 <span class="hljs-keyword">in</span><br>    模式1)<br>        命令1<br>        ;;<br>    模式2)<br>        命令2<br>        ;;<br>    *)<br>        默认命令<br>        ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> val1 val2 val3; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 循环体</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> ((i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)); <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> [ 条件 ]; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 循环体</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="until语句"><a href="#until语句" class="headerlink" title="until语句"></a>until语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">until</span> [ 条件 ]; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 循环体</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="break-中断并跳出当前循环"><a href="#break-中断并跳出当前循环" class="headerlink" title="break 中断并跳出当前循环"></a>break 中断并跳出当前循环</h3><h3 id="continue-跳过本次循环执行下一次循环"><a href="#continue-跳过本次循环执行下一次循环" class="headerlink" title="continue 跳过本次循环执行下一次循环"></a>continue 跳过本次循环执行下一次循环</h3><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> myfunc &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello from myfunc&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">myfunc</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello from myfunc&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数传入"><a href="#参数传入" class="headerlink" title="参数传入"></a>参数传入</h3><blockquote><p>Shell 函数不需要事先声明类型，调用时直接以空格分隔传递参数，函数内部用 $1、$2 等方式访问。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">greet</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$1</span>!&quot;</span><br>&#125;<br><br>greet <span class="hljs-string">&quot;Alice&quot;</span>  <span class="hljs-comment"># 输出：Hello, Alice!</span><br><br></code></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p><code>return</code> 用于返回状态码（0~255），而 <code>echo</code> 用于将值输出给命令替换（<code>$(...)</code>）来接收。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">check_even</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ $(( <span class="hljs-variable">$1</span> % <span class="hljs-number">2</span> )) -eq 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">return</span> 0<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">return</span> 1<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>check_even 4<br><span class="hljs-built_in">echo</span> $?<br><span class="hljs-comment"># 或者 接收echo的输出</span><br><span class="hljs-function"><span class="hljs-title">check_even2</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ $(( <span class="hljs-variable">$1</span> % <span class="hljs-number">2</span> )) -eq 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;even&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;odd&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>res=$(check_even2 5)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$res</span><br><br></code></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 允许定义局部变量</span><br><span class="hljs-function"><span class="hljs-title">myfunc</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> var=<span class="hljs-string">&quot;secret&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Inside: <span class="hljs-variable">$var</span>&quot;</span><br>&#125;<br>myfunc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Outside: <span class="hljs-variable">$var</span>&quot;</span>   <span class="hljs-comment"># var 不存在</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell V grep sed awk</title>
    <link href="/2025/04/09/Shell-V-grep-sed-awk/"/>
    <url>/2025/04/09/Shell-V-grep-sed-awk/</url>
    
    <content type="html"><![CDATA[<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>Shell中 提供了“|” 的管道实现，来帮助用户更快捷的处理过程流</p><p>当运行 a | b | c 后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Parent Process<br>├── fork() --&gt; Child 1 runs `a`<br>│    stdout --&gt; pipe1[1]<br>├── fork() --&gt; Child 2 runs `b`<br>│    stdin &lt;-- pipe1[0], stdout --&gt; pipe2[1]<br>├── fork() --&gt; Child 3 runs `c`<br>     stdin &lt;-- pipe2[0]<br></code></pre></td></tr></table></figure><p>当a命令在向b进行输出后，b就已经开始执行了。</p><p>通过管道的连接，可以让我们更加灵活的获取目标值</p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>grep 支持全局的文本查询和检索</p><p>grep 支持定义搜索内容 + 文件进行筛选</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;partten&quot;</span>  file<br></code></pre></td></tr></table></figure><p>也可以通过其他命令得到stdout 使用管道进行检索</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> file | grep <span class="hljs-string">&quot;partten&quot;</span><br></code></pre></td></tr></table></figure><p>常用的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -i  忽略查询的大小写</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -i a<br>aAbBcCdDeEfF<br><span class="hljs-comment"># -o  只返回匹配规则的值</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -o a<br>a<br><span class="hljs-comment"># -v  反向筛选</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -v a<br>gG hH iI jJ kK lL<br>mM nN<br><span class="hljs-comment"># 基本正则匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -G [A-Z]<br>aA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br><span class="hljs-comment"># 扩展正则匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -E [a-zA-Z]&#123;2&#125;<br>aA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br><br></code></pre></td></tr></table></figure><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><p>sed 是一个文本替换工具</p><p>sed也可以设置规则 替换文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ hello]# sed <span class="hljs-string">&quot;s/a/A/&quot;</span> hello.txt<br>AA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br></code></pre></td></tr></table></figure><p>也可以接收stdout，修改流中的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;s/a/A/&#x27;</span><br>AA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br></code></pre></td></tr></table></figure><p>注意直接使用 sed 进行替换并不会修改原文本内容，需要修改文本内容需要加”-i”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;[num]s/old/new/[g]&#x27;</span>  进行全局/某一行替换 <br><span class="hljs-string">&#x27;[num]d&#x27;</span>              不显示/删除某一行<br><span class="hljs-string">&#x27;[num][i|a]\[text]&#x27;</span>   在某行前/后 追加文本<br><span class="hljs-string">&#x27;-n  &quot;[num],[num]p&quot;&#x27;</span>  打印行区间文本<br><span class="hljs-string">&#x27;-e&#x27;</span>                  多个执行文本规则      <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#sed &#x27;s/old/new/&#x27;只替换每行第一个匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;s/a/A/&#x27;</span><br>AA bB cC dD eE fF<br>AA hH iI jJ kK lL<br>mM nN<br><span class="hljs-comment"># sed &#x27;s/old/new/g&#x27;替换每行所有匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;s/b/B/g&#x27;</span><br>aA BB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN BB BBB<br><span class="hljs-comment"># sed &#x27;2s/old/new/&#x27;只替换第3行的匹配项</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;3s/b/B/g&#x27;</span><br>aA bB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN BB BBB<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;3s/b/B/&#x27;</span><br>aA bB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN BB bbb<br><span class="hljs-comment"># sed &#x27;2d&#x27;删除第2行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;2d&#x27;</span><br>aA bB cC dD eE fF<br>mM nN bB bbb<br><span class="hljs-comment"># sed &#x27;/^$/d&#x27;删除所有空行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt<br>aA bB cC dD eE fF<br><br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;/^$/d&#x27;</span><br>aA bB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><span class="hljs-comment">#sed -n &#x27;5p&#x27;只输出第3行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  -n 3p<br>aA hH iI jJ kK lL<br><span class="hljs-comment">#sed -n &#x27;5,10p&#x27;输出第1到3行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  -n <span class="hljs-string">&#x27;1,3p&#x27;</span><br>aA bB cC dD eE fF<br><br>aA hH iI jJ kK lL<br><span class="hljs-comment"># sed &#x27;1i\This is a new line&#x27;在第1行前插入</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;1i\hello&#x27;</span><br>hello<br>aA bB cC dD eE fF<br><br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><span class="hljs-comment">#sed &#x27;1a\This is after line 3&#x27;在第1行后追加</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;1a\hello&#x27;</span><br>aA bB cC dD eE fF<br>hello<br><br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><span class="hljs-comment">#sed -e &#x27;1d&#x27; -e &#x27;s/foo/bar/g&#x27;删除第1行并替换所有 aA为 zZ</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  -e <span class="hljs-string">&#x27;1d&#x27;</span> -e  <span class="hljs-string">&#x27;s/aA/zZ/g&#x27;</span><br><br>zZ hH iI jJ kK lL<br>mM nN bB bbb<br><br></code></pre></td></tr></table></figure><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><p>awk是一种 用于文本处理的脚本语言，它接收每一行输入，并按规则匹配，最终打印</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;pattern &#123; action &#125;&#x27;</span>  filename <br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> filename | awk <span class="hljs-string">&#x27;pattern &#123;action&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>变量 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$0</span>当前行内容<br>$[num]第num列（字段）<br>NF当前行的字段数量<br>NR当前是第几行<br>FS输入字段分隔符（默认是空格）<br>OFS输出字段分隔符（默认也是空格）<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># awk 可以分为多段执行</span><br>awk <span class="hljs-string">&#x27;BEGIN &#123;&#125; &#123;&#125;  END &#123;&#125;&#x27;</span><br><span class="hljs-comment"># BEGIN 开始时执行一次的代码段， END 结束时执行一次的代码段</span><br><span class="hljs-comment"># 行信息放在外面，列信息在&#123;&#125;中操作</span><br><span class="hljs-comment"># &#x27;BEGIN&#x27;，&#x27;END&#x27; 只能进行 分隔符定义，变量赋值</span><br><span class="hljs-comment"># 在中间&#123;&#125; 外面可以设置 NR== 定义行号</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">打印第九列<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l | awk <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span><br>a<br>ate<br>b<br>c<br>d<br>e<br>f<br>g<br>h<br>hello.txt<br>i<br>j<br>k<br>l<br>m<br>n<br>打印第一行<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l | awk <span class="hljs-string">&#x27;NR==2&#123;print &#125;&#x27;</span><br>-rw-r--r-- 1 root root  0 Apr 10 13:58 a<br><br></code></pre></td></tr></table></figure><h1 id="混合查询"><a href="#混合查询" class="headerlink" title="混合查询"></a>混合查询</h1><p>查询一下redis的安装时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# ps -aux | grep -v <span class="hljs-string">&quot;grep&quot;</span> | grep redis | sed <span class="hljs-string">&#x27;s/redis/myredis/&#x27;</span> | grep -v <span class="hljs-string">&quot;sed&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span><br>Apr08<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell IV 网络相关命令</title>
    <link href="/2025/04/09/Shell-IV-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/09/Shell-IV-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-IV-网络相关命令"><a href="#Shell-IV-网络相关命令" class="headerlink" title="Shell-IV-网络相关命令"></a>Shell-IV-网络相关命令</h1><h1 id="什么是网络？"><a href="#什么是网络？" class="headerlink" title="什么是网络？"></a>什么是网络？</h1><p>是OSI的7层模型？ 还是TCP&#x2F;IP 协议簇？wifi&#x2F;移动通信的空口互联？ 又或者是内核进程的虚拟数据转发？</p><ul><li>网络的本质基于预定义的通信协议通过物理介质（或虚拟物理介质如虚拟端口，虚拟mac地址）在设备间进行数据传输的一种组织结构。<ul><li>网络是“有层次”的，无论是固网通信还是空口通信。数据包的传输都在进行一个“封装-解封装”的过程</li><li>网络是“动态”的，端到端的网络通信，需要网卡持续监听外部网络接收到的数据包，并通过中断触发内核来对数据包进行处理</li></ul></li></ul><p>具体的可以查看后续的网络协议解析</p><h1 id="IP-网卡查询"><a href="#IP-网卡查询" class="headerlink" title="IP&#x2F;网卡查询"></a>IP&#x2F;网卡查询</h1><h2 id="ifconfig-old"><a href="#ifconfig-old" class="headerlink" title="ifconfig (old)"></a>ifconfig (old)</h2><p>ifconfig 提供了简单的查询网卡以及ip信息的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500 <span class="hljs-comment">#网络帧大小，决定了转发的二层网络包的最大长度</span><br>        inet 172.16.243.147  netmask 255.255.240.0  broadcast 172.16.255.255 <br>        <span class="hljs-comment">#  ipv4 地址         掩码                   广播地址</span><br>        inet6 fe80::216:3eff:fe4e:4cd3  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        <span class="hljs-comment">#  ipv6 地址                    掩码</span><br>        ether 00:16:3e:4e:4c:d3  txqueuelen 1000  (Ethernet)<br>        <span class="hljs-comment">#  以太网mac地址                 最大传输队列长度</span><br>        RX packets 4986558  bytes 3656623569 (3.4 GiB)<br>        <span class="hljs-comment">#  接收到的数据统计</span><br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        <span class="hljs-comment">#  异常，丢包统计</span><br>        TX packets 3390873  bytes 827044117 (788.7 MiB)<br>        <span class="hljs-comment">#  发送的数据统计</span><br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><span class="hljs-comment">#  异常，丢包统计</span><br></code></pre></td></tr></table></figure><h2 id="ip-addr"><a href="#ip-addr" class="headerlink" title="ip addr"></a>ip addr</h2><p>新一代的ip 网络查询&#x2F;配置命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:16:3e:4e:4c:d3 brd ff:ff:ff:ff:ff:ff<br>    altname enp0s5<br>    altname ens5<br>    inet 172.16.243.147/20 brd 172.16.255.255 scope global dynamic noprefixroute eth0<br>       valid_lft 1891653623sec preferred_lft 1891653623sec<br>    inet6 fe80::216:3eff:fe4e:4cd3/64 scope <span class="hljs-built_in">link</span><br>       valid_lft forever preferred_lft forever<br>       <br>       <br>ip addr add 10.0.0.1/24 dev eth0          <span class="hljs-comment"># 添加 IP</span><br>ip addr del 10.0.0.1/24 dev eth0          <span class="hljs-comment"># 删除 IP</span><br>ip addr flush dev eth0                    <span class="hljs-comment"># 清空 IP</span><br>ip addr show                              <span class="hljs-comment"># 查看所有地址</span><br>ip addr show dev eth0                     <span class="hljs-comment"># 查看某网卡的地址信息         </span><br><br></code></pre></td></tr></table></figure><h2 id="ip-link"><a href="#ip-link" class="headerlink" title="ip link"></a>ip link</h2><p>查询 网络链路状态，虚拟网卡配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# ip <span class="hljs-built_in">link</span> show<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:16:3e:4e:4c:d3 brd ff:ff:ff:ff:ff:ff<br>    altname enp0s5<br>    altname ens5<br>   <br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c up                      <span class="hljs-comment"># 设置网络接口打开</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c down                    <span class="hljs-comment"># 设置网络接口关闭</span><br>ip <span class="hljs-built_in">link</span> add veth-c <span class="hljs-built_in">type</span> veth peer name veth-br  <span class="hljs-comment"># 设置虚拟网络（定义的一对peer veth网络）</span><br>ip <span class="hljs-built_in">link</span> del veth-c                         <span class="hljs-comment"># 删除网络</span><br></code></pre></td></tr></table></figure><h2 id="ip-netns"><a href="#ip-netns" class="headerlink" title="ip netns"></a>ip netns</h2><p>创建&#x2F;设置 linux 网络命名空间 </p><p>网络命名可以将其所在进程的网络与宿主机进行隔离</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip netns add net1                          <span class="hljs-comment"># 添加网络命名空间</span><br>ip netns <span class="hljs-built_in">exec</span> net1 ip addr                 <span class="hljs-comment"># 在宿主机向命名空间内执行命令</span><br></code></pre></td></tr></table></figure><h1 id="寻址-路由"><a href="#寻址-路由" class="headerlink" title="寻址&#x2F;路由"></a>寻址&#x2F;路由</h1><p>IP所处的网络层 主要负责接入网络的设备寻址和数据转发</p><h2 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h2><p>arp 协议是工作在数据链路层-网络层中间的 数据协议，其通过广播模式向广播域内所有设备请求其所需ip地址对应的mac地址，通常用于网络接入（查找网关），和冲突检测（是否有同ip设备上线同一局域网）。使用arp 命令可以查看本地的ip地址映射表项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# arp -a<br>? (10.88.0.11) at be:34:94:fb:34:f6 [ether] on cni-podman0<br>? (10.88.0.10) at &lt;incomplete&gt; on cni-podman0<br><br></code></pre></td></tr></table></figure><h2 id="ip-route"><a href="#ip-route" class="headerlink" title="ip route"></a>ip route</h2><p>提供了本地路由的查询功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# ip route<br>default via 172.16.255.253 dev eth0 proto dhcp src 172.16.243.147 metric 100<br><span class="hljs-comment"># 网段  网关                   网卡                源地址</span><br>10.88.0.0/16 dev cni-podman0 proto kernel scope <span class="hljs-built_in">link</span> src 10.88.0.1<br>172.16.240.0/20 dev eth0 proto kernel scope <span class="hljs-built_in">link</span> src 172.16.243.147 metric 100<br><br>ip route add 10.0.0.0/24 via 192.168.1.1 dev eth0  <span class="hljs-comment"># 添加路由</span><br>ip route del 10.0.0.0/24                           <span class="hljs-comment"># 删除路由</span><br><br></code></pre></td></tr></table></figure><h1 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h1><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -tuln        <span class="hljs-comment">#显示所有正在监听的 TCP/UDP 端口（数字显示）</span><br>netstat -tulnp      <span class="hljs-comment">#显示监听端口及对应进程 PID/名称</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# netstat -tulnp<br>Active Internet connections (only servers)<br>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name<br><span class="hljs-comment">#协议 接收队列 发送队列  地址                   传输的外部地址                    进程号/进程</span><br>tcp        0      0 0.0.0.0:6380            0.0.0.0:*               LISTEN      1018202/redis-serve<br>tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd<br><br>netstat -an          <span class="hljs-comment">#显示所有连接（包括监听 + 活跃连接）</span><br>Proto RefCnt Flags       Type       State         I-Node   Path<br><span class="hljs-comment">#协议 引用次数 状态      传输类型    状态          inode编号 路径</span><br>unix  2      [ ACC ]     STREAM     LISTENING     18400306 /run/systemd/private<br>unix  2      [ ]         DGRAM                    17763560 /run/user/0/systemd/notify<br><br>netstat -r          <span class="hljs-comment">#显示路由表（等同于 route -n）</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# netstat -r<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface<br><span class="hljs-comment">#目的网段       网关            掩码         TCP最大传输大小和窗口大小     接口</span><br>default         _gateway        0.0.0.0         UG        0 0          0 eth0<br>10.88.0.0       0.0.0.0         255.255.0.0     U         0 0          0 cni-podman0<br>172.16.240.0    0.0.0.0         255.255.240.0   U         0 0          0 eth0<br><br>netstat -i           <span class="hljs-comment">#显示所有网卡接口的统计数据（收发包、丢包等）</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# netstat -i<br>Kernel Interface table<br>Iface             MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg<br><span class="hljs-comment">#接口         最大传输 接收正常  异常   丢包   溢出    发送正常   异常  丢包   溢出</span><br>cni-podman0      1500    44683      0      0 0         53354      0      0      0 BMRU<br>eth0             1500  4990035      0      0 0       3393020      0      0      0 BMRU<br>lo              65536  1215234      0      0 0       1215234      0      0      0 LRU<br>vethfcdc13a0     1500    37461      0      0 0         45818      0      0      0 BMRU<br><br>netstat -s          <span class="hljs-comment">#显示协议数据统计（TCP/UDP/ICMP等）</span><br></code></pre></td></tr></table></figure><h2 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h2><p>socket 信息查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">ss -t        <span class="hljs-comment"># 查询tcp 信息</span><br>ss -u        <span class="hljs-comment"># 查询udp 信息</span><br>ss -tulnp    <span class="hljs-comment"># 查询tcp/udp 以及端口和进程信息</span><br>Netid     State      Recv-Q     Send-Q         Local Address:Port           Peer Address:Port     Process<br><span class="hljs-comment">#协议id    状态      接收统计    发送统计          本地ip地址:端口              对端ip地址:端口      进程信息                         </span><br>udp       UNCONN     0          0                    0.0.0.0:111                 0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">5</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">34</span>))<br>udp       UNCONN     0          0                  127.0.0.1:323                 0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;chronyd&quot;,pid=<span class="hljs-number">574</span>,fd=<span class="hljs-number">5</span>))<br>udp       UNCONN     0          0                       [::]:111                    [::]:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">7</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">36</span>))<br>udp       UNCONN     0          0                      [::1]:323                    [::]:*         <span class="hljs-built_in">users</span>:((&quot;chronyd&quot;,pid=<span class="hljs-number">574</span>,fd=<span class="hljs-number">6</span>))<br>tcp       LISTEN     0          511                  0.0.0.0:6380                0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;redis-server&quot;,pid=<span class="hljs-number">1018202</span>,fd=<span class="hljs-number">6</span>))<br>tcp       LISTEN     0          4096                 0.0.0.0:111                 0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">4</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">33</span>))<br>tcp       LISTEN     0          511                  0.0.0.0:80                  0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;nginx&quot;,pid=<span class="hljs-number">990145</span>,fd=<span class="hljs-number">6</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990144</span>,fd=<span class="hljs-number">6</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990143</span>,fd=<span class="hljs-number">6</span>))<br>tcp       LISTEN     0          128                  0.0.0.0:22                  0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;sshd&quot;,pid=<span class="hljs-number">1021</span>,fd=<span class="hljs-number">3</span>))<br>tcp       LISTEN     0          4096                    [::]:111                    [::]:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">6</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">35</span>))<br>tcp       LISTEN     0          511                     [::]:80                     [::]:*         <span class="hljs-built_in">users</span>:((&quot;nginx&quot;,pid=<span class="hljs-number">990145</span>,fd=<span class="hljs-number">7</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990144</span>,fd=<span class="hljs-number">7</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990143</span>,fd=<span class="hljs-number">7</span>))<br>tcp       LISTEN     0          128                     [::]:22                     [::]:*         <span class="hljs-built_in">users</span>:((&quot;sshd&quot;,pid=<span class="hljs-number">1021</span>,fd=<span class="hljs-number">4</span>))<br><br></code></pre></td></tr></table></figure><h1 id="连通性-请求查询"><a href="#连通性-请求查询" class="headerlink" title="连通性&#x2F;请求查询"></a>连通性&#x2F;请求查询</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>ping命令用来检查ip是否可以与对端正常通信，底层使用的是icmp协议。icmp协议中定义了一个字段（ttl  time to live 存活时间）。这里的time 是在网络中传输时，没经过一个网络设备则会-1。当为0时数据包被丢弃。linux中的ping持续执行，window 会请求4次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping 8.8.8.8<br>64 bytes from 8.8.8.8: icmp_seq=1 ttl=54 <span class="hljs-keyword">time</span>=30.4 ms<br>ping -c 5  8.8.8.8         <span class="hljs-comment">#  向8.8.8.8 ip 发起5次ping 请求</span><br>ping -I eth0 8.8.8.8       <span class="hljs-comment">#  指定网卡eth0 发起ping 请求</span><br></code></pre></td></tr></table></figure><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# nslookup baidu.com<br>Server:         100.100.2.136<br>Address:        100.100.2.136#53<br><br>Non-authoritative answer:<br>Name:   baidu.com<br>Address: 39.156.66.10<br>Name:   baidu.com<br>Address: 110.242.68.66<br><br></code></pre></td></tr></table></figure><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>通过命令行创建http请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl www.baidu.com<br><br>curl -d <span class="hljs-string">&quot;username=user&amp;password=pass&quot;</span> https://example.com/login<br><span class="hljs-comment"># 携带消息体发送post 请求</span><br>curl -X POST https://api.example.com/data \<br>     -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>     -d <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30&#125;&#x27;</span><br><span class="hljs-comment"># 传递json 数据</span><br>curl -o file.txt https://example.com/file.txt<br><span class="hljs-comment"># 下载文件到本地</span><br>curl --cookie <span class="hljs-string">&quot;session=abc123&quot;</span> https://example.com<br><span class="hljs-comment"># 定义cookie信息</span><br>curl -I https://example.com<br><span class="hljs-comment"># 获取响应头</span><br>curl -i https://example.com<br><span class="hljs-comment"># 获取响应</span><br>curl -L https://short.url/link<br><span class="hljs-comment"># 跟踪重定向</span><br>curl -F <span class="hljs-string">&quot;file=@localfile.txt&quot;</span> https://example.com/upload<br><span class="hljs-comment"># 上传文件</span><br><span class="hljs-comment"># 其他参数 :</span><br><span class="hljs-comment"># -v：详细模式（debug 信息）</span><br><span class="hljs-comment"># -s：静默模式（不输出进度条）</span><br><span class="hljs-comment"># -sS：静默但出错时显示错误信息（常用组合）</span><br><span class="hljs-comment"># -w &#x27;%&#123;http_code&#125;&#x27;：输出 HTTP 状态码</span><br><span class="hljs-comment"># -k：忽略 HTTPS 证书错误（测试用）</span><br></code></pre></td></tr></table></figure><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://example.com/file.zip<br><span class="hljs-comment"># 获取文件</span><br>wget -O newname.zip https://example.com/file.zip<br><span class="hljs-comment"># 保存文件</span><br>wget -c https://example.com/large.iso<br><span class="hljs-comment"># 断点续传</span><br>wget -r https://example.com/<br><span class="hljs-comment"># 递归下载</span><br>wget --mirror --convert-links --adjust-extension --page-requisites --no-parent https://example.com<br><span class="hljs-comment"># 下载到本地，离线浏览</span><br>wget --header=<span class="hljs-string">&quot;Authorization: Bearer TOKEN123&quot;</span> https://api.example.com/data.json<br>wget --user=admin --password=123 https://example.com/protected/file.zip<br><span class="hljs-comment"># 配置认证信息</span><br>wget -i urls.txt<br><br></code></pre></td></tr></table></figure><h2 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h2><p>简易tcp连接工具 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -l 1234         <span class="hljs-comment"># 创建TCP 服务器</span><br>nc localhost 1234  <span class="hljs-comment"># 连接</span><br>nc -l 1234 &gt; received.txt <span class="hljs-comment"># 开启窗口发送数据</span><br>nc [ip] 1234 &lt; file.txt   <span class="hljs-comment"># 向服务端端口发送的数据</span><br><br></code></pre></td></tr></table></figure><h2 id="iperf"><a href="#iperf" class="headerlink" title="iperf"></a>iperf</h2><p>流量性能测试工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">iperf -s                     <span class="hljs-comment">#开启服务端，默认监听5021端口</span><br>iperf -c  [ip]               <span class="hljs-comment">#向目的端口发送10s tcp流量</span><br>iperf -c server_ip -u -b 100M#向服务端发送100M的 udp流量<br><br>-r  <span class="hljs-comment">#双向测试</span><br>-P  <span class="hljs-comment">#多线程</span><br></code></pre></td></tr></table></figure><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><p>数据流量捕获工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i eth0    <span class="hljs-comment"># 捕获指定端口</span><br>tcpdump host [ip]  <span class="hljs-comment"># 获取目标ip的流量</span><br>tcpdump port       <span class="hljs-comment"># 监听指定端口 </span><br>tcpdump -i eth0 src 192.168.1.1 and dst port 80  <span class="hljs-comment">#接收源为192.168.1.1的 目的端口为80的包</span><br>tcpdump -w capture.pcap -i eth0  <span class="hljs-comment">#捕获包到文件</span><br>tcpdump -i eth0 udp port 53   <span class="hljs-comment">#捕获dns 流量包</span><br><br><span class="hljs-comment"># -i &lt;接口&gt;: 指定要监听的网络接口（如 eth0, wlan0）</span><br><span class="hljs-comment"># -c &lt;数量&gt;: 限制捕获的数据包数量</span><br><span class="hljs-comment"># -n: 不将地址解析为主机名（提高性能）</span><br><span class="hljs-comment"># -t: 不显示时间戳</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell III 内存/IO/文件系统相关命令</title>
    <link href="/2025/04/09/Shell-III-%E5%86%85%E5%AD%98-IO-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/09/Shell-III-%E5%86%85%E5%AD%98-IO-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="free-查看内存使用"><a href="#free-查看内存使用" class="headerlink" title="free 查看内存使用"></a>free 查看内存使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# free -h<br>              total        used        free      shared  buff/cache   available<br>Mem:          1.8Gi       499Mi       747Mi       2.0Mi       784Mi       1.3Gi<br>Swap:            0B          0B          0B<br><br></code></pre></td></tr></table></figure><h1 id="iostat-查看-CPU-和磁盘-I-O-性能"><a href="#iostat-查看-CPU-和磁盘-I-O-性能" class="headerlink" title="iostat 查看 CPU 和磁盘 I&#x2F;O 性能"></a>iostat 查看 CPU 和磁盘 I&#x2F;O 性能</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# iostat<br>Linux 5.10.134-18.al8.x86_64 (iZbp19tqlmjz1dmnm8w43uZ)  04/10/2025      _x86_64_        (2 CPU)<br><br>avg-cpu:  %user   %<span class="hljs-built_in">nice</span> %system %iowait  %steal   %idle<br>           0.87    0.00    0.49    0.01    0.00   98.62<br><br>Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>vda               0.82         6.03        12.57   10324570   21525204<br><br></code></pre></td></tr></table></figure><h1 id="lsblk-显示块设备信息"><a href="#lsblk-显示块设备信息" class="headerlink" title="lsblk 显示块设备信息"></a>lsblk 显示块设备信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# lsblk<br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>vda    253:0    0   40G  0 disk<br>├─vda1 253:1    0    2M  0 part<br>├─vda2 253:2    0  200M  0 part /boot/efi<br>└─vda3 253:3    0 39.8G  0 part /<br><br></code></pre></td></tr></table></figure><h1 id="df-查看设备与目录的挂载关系，使用情况"><a href="#df-查看设备与目录的挂载关系，使用情况" class="headerlink" title="df 查看设备与目录的挂载关系，使用情况"></a>df 查看设备与目录的挂载关系，使用情况</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# <span class="hljs-built_in">df</span> -h<br>Filesystem      Size  Used Avail Use% Mounted on<br>devtmpfs        916M     0  916M   0% /dev<br>tmpfs           936M   84K  936M   1% /dev/shm<br>tmpfs           936M  764K  935M   1% /run<br>tmpfs           936M     0  936M   0% /sys/fs/cgroup<br>/dev/vda3        40G   14G   25G  36% /<br>/dev/vda2       200M  5.8M  195M   3% /boot/efi<br>tmpfs           188M     0  188M   0% /run/user/0<br>shm              63M     0   63M   0% /var/lib/containers/storage/overlay-containers/1936bab81ca270b4558231e4a09ddb43a3274744bbfcf280791138efb612ffd0/userdata/shm<br>overlay          40G   14G   25G  36% /var/lib/containers/storage/overlay/0a4e05c5de62dfb74f643f918af2c216ef814b2a8ad5cd1b60ac96d4c514c654/merged<br><br></code></pre></td></tr></table></figure><h1 id="du-path-h-遍历文件目录，查看占用空间大小"><a href="#du-path-h-遍历文件目录，查看占用空间大小" class="headerlink" title="du [path] -h 遍历文件目录，查看占用空间大小"></a>du [path] -h 遍历文件目录，查看占用空间大小</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ codfish]# <span class="hljs-built_in">du</span> /home/codfish/hello/ -h<br>12K     /home/codfish/hello/<br><br></code></pre></td></tr></table></figure><h1 id="lsof-查看哪些进程在访问当前文件目录"><a href="#lsof-查看哪些进程在访问当前文件目录" class="headerlink" title="lsof 查看哪些进程在访问当前文件目录"></a>lsof 查看哪些进程在访问当前文件目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">COMMAND     PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME<br>bash    1022674 root  cwd    DIR  253,3     4096 1184776 .   <span class="hljs-comment"># shell 在当前目录执行</span><br>lsof    1022812 root  cwd    DIR  253,3     4096 1184776 .   <span class="hljs-comment"># shel执行lsof创建的进程在当前目录</span><br>lsof    1022813 root  cwd    DIR  253,3     4096 1184776 .   <span class="hljs-comment"># lsof 创建的子进程</span><br><br>COMMAND发起该文件访问的进程名（可执行文件名）<br>PID    进程 ID<br>TID    线程 ID（Thread ID）— 某些工具如 lsof -T 或 proc 工具可能列出具体线程<br>TASKCMD如果有线程，每个线程的名字（比如 Java 线程名、C++的 pthread 名称等）<br>USER  拥有该进程的用户<br>FD    文件描述符（File Descriptor），比如 cwd, mem, txt, 0u, 1w 等<br>TYPE  打开的文件类型，比如：REG（普通文件），DIR（目录），CHR（字符设备），FIFO（管道）等<br>DEVICE文件所在设备的主次设备号，格式通常为 major:minor（比如 8:1 代表 /dev/sda1）<br>SIZE/OFF文件的大小或文件偏移量<br>NODE  文件在设备上的 inode 编号<br>NAME  文件名（或资源名），即被访问的实际对象路径<br></code></pre></td></tr></table></figure><h1 id="mount-完成-块设备-文件系统-资源挂载"><a href="#mount-完成-块设备-文件系统-资源挂载" class="headerlink" title="mount 完成 块设备-文件系统-资源挂载"></a>mount 完成 块设备-文件系统-资源挂载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/sdb1  <span class="hljs-comment"># 定义块设备的文件系统</span><br>mount /dev/sdb1 /mnt/mydisk  <span class="hljs-comment"># 挂载文件系统到挂载点</span><br><br><span class="hljs-comment"># 或者直接 指定文件系统到挂载点</span><br>mount -t &lt;文件系统类型&gt; &lt;设备&gt; &lt;挂载点&gt;<br>mount -t proc proc /proc<br><span class="hljs-comment"># 挂载进程 这里的/proc</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell II 进程相关命令</title>
    <link href="/2025/04/09/%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/09/%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h1><blockquote><p>进程可以看作是操作系统对资源的基本调度单位，通过进程的调度机制，系统得以协调各项任务的执行。</p></blockquote><p>进程的调用流程 → 通过父进程创建子进程创建新的堆栈结构 → 子进程加载自身需要的资源到堆栈中 → 堆栈中执行命令 → 执行到main函数返回或者进程异常退出</p><h1 id="ps-查看进程指令"><a href="#ps-查看进程指令" class="headerlink" title="ps  查看进程指令"></a>ps  查看进程指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">参数列表<br>-e 或 -A  显示所有进程<br>-f        完整格式<br>-u        指定用户进程<br>-x        无终端进程<br>-o      自定义输出字段<br>-C        指定程序进程<br><br>ps -ef    全部进程<br>ps aux    全部进程 BSD风格<br>ps -u     指定用户进程<br><br>ps aux | awk <span class="hljs-string">&quot;NR&lt;=2&quot;</span><br>USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root           1  0.0  0.5  21500 11112 ?        Ss   Mar21   0:16 /usr/lib/systemd/systemd --system --deserialize 23<br><br>字段信息<br>USER :  用户名<br>PID :   进程号<br>%CPU :  CPU占用率<br>%MEM :  内存使用率<br>VSZ  :  虚拟内存大小<br>RSS  :  实际占用内存<br>TTY  :  无终端为 ？<br>START : 启动时间<br>TIME  : 占用CPU的时间<br>CMD  :  执行的命令<br>STAT :  进程状态<br><br>STAT状态含义<br>R正在运行<br>S休眠中（可中断）<br>D不可中断的休眠<br>T停止（如 Ctrl+Z）<br>Z僵尸进程<br>X死亡状态<br><br></code></pre></td></tr></table></figure><h1 id="top-动态打印所有进程的性能指标"><a href="#top-动态打印所有进程的性能指标" class="headerlink" title="top 动态打印所有进程的性能指标"></a>top 动态打印所有进程的性能指标</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">top - 22:12:10 up 19 days,  8:24,  1 user,  load average: 0.00, 0.00, 0.00<br><span class="hljs-comment"># 22:12:10 → 当前系统时间。</span><br><span class="hljs-comment"># up 19 days, 8:24 → 系统已经运行了 19 天 8 小时 24 分钟。</span><br><span class="hljs-comment"># 1 user → 当前登录系统的用户数。</span><br><span class="hljs-comment"># load average: 0.00, 0.00, 0.00 → 系统平均负载：</span><br><span class="hljs-comment"># 分别表示过去 1 分钟、5 分钟、15 分钟的平均负载（任务队列长度）。等待执行的任务个数</span><br> <br>Tasks: 111 total,   1 running, 110 sleeping,   0 stopped,   0 zombie<br><span class="hljs-comment"># 111 total → 当前系统总共的进程数。</span><br><span class="hljs-comment"># 1 running → 正在运行的进程（状态是 R）。</span><br><span class="hljs-comment"># 110 sleeping → 休眠状态的进程（大多数进程处于这个状态）。</span><br><span class="hljs-comment"># 0 stopped → 被终止或挂起（T）的进程数。</span><br><span class="hljs-comment"># 0 zombie → 僵尸进程数，应该为 0，非 0 可能代表父进程没处理子进程退出状态。</span><br>%Cpu(s):  0.3 us,  0.2 sy,  0.0 ni, 99.2 <span class="hljs-built_in">id</span>,  0.0 wa,  0.2 hi,  0.2 si,  0.0 st<br><span class="hljs-comment"># us用户态（user）进程占用 CPU 百分比（不包括 nice）</span><br><span class="hljs-comment"># sy内核态（system）进程占用 CPU 百分比</span><br><span class="hljs-comment"># ni用户进程 nice 优先级调整后占用的 CPU 百分比</span><br><span class="hljs-comment"># id空闲（idle）CPU 百分比（越高越空闲）</span><br><span class="hljs-comment"># wa等待 I/O 的时间占比（例如磁盘慢时）</span><br><span class="hljs-comment"># hi硬中断（hardware IRQ）占用</span><br><span class="hljs-comment"># si软中断（software IRQ）占用</span><br><span class="hljs-comment"># st被虚拟机偷走的 CPU（steal time）</span><br>MiB Mem :   1871.0 total,    761.0 free,    498.8 used,    770.9 buff/cache<br><span class="hljs-comment"># total总内存</span><br><span class="hljs-comment"># free未使用的内存</span><br><span class="hljs-comment"># used实际已用的内存（不包括 cache/buffer）</span><br><span class="hljs-comment"># buff/cache系统缓存和缓冲使用的内存（可回收）</span><br>MiB Swap:      0.0 total,      0.0 free,      0.0 used.   1372.2 avail Mem<br><span class="hljs-comment"># total交换分区总量（你这里没有启用 swap）</span><br><span class="hljs-comment"># free空闲的 swap 空间</span><br><span class="hljs-comment"># used已用 swap 空间</span><br><span class="hljs-comment"># avail Mem可用内存：包含 free + reclaimable cache，更真实地反映可用内存</span><br><br> PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND<br> 1239 root      20   0  222028  97448   7212 S   0.7   5.1 216:30.97 AliYunDunMonito<br><br></code></pre></td></tr></table></figure><h1 id="vmstat-查看系统内存，IO-CPU信息"><a href="#vmstat-查看系统内存，IO-CPU信息" class="headerlink" title="vmstat  查看系统内存，IO, CPU信息"></a>vmstat  查看系统内存，IO, CPU信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">vmstat<br>procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="hljs-keyword">in</span>   cs us sy <span class="hljs-built_in">id</span> wa st<br> 2  0      0 778652 103472 686320    0    0     3     6    7    8  1  0 99  0  0<br><br>procs 进程<br>r可运行进程数（run queue），表示 CPU 等待队列长度<br>b正在等待 I/O 的进程数量（blocked）<br><br>memory 内存<br>swpd使用的 swap 空间（单位 KB）<br>free空闲物理内存<br>buff用作 buffer 的内存（主要缓存块设备元数据）<br>cache用作 cache 的内存（主要缓存文件内容）<br><br>swap 交换<br>si从 swap 中读入的数据量（KB/s）<br>so写入 swap 的数据量（KB/s）<br><br>io 磁盘读写<br>bi从块设备读入数据的速率（block <span class="hljs-keyword">in</span>，KB/s）<br>bo写到块设备的数据速率（block out，KB/s）<br><br>system 系统级操作<br><span class="hljs-keyword">in</span>每秒中断次数（包括硬件中断 + 软件中断）<br>cs每秒上下文切换次数（context switch）<br><br>cpu  cpu时间百分比<br>us用户态 CPU 使用百分比<br>sy内核态 CPU 使用百分比<br><span class="hljs-built_in">id</span>空闲时间百分比<br>wa等待 I/O 百分比（高说明 I/O 慢）<br>st被虚拟机“偷走”的 CPU 时间（只在虚拟化环境中有用）<br></code></pre></td></tr></table></figure><h1 id="pidstat"><a href="#pidstat" class="headerlink" title="pidstat"></a>pidstat</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">pidstat -p 1239 1 1<br>查询 进程号1239的信息<br>Linux 5.10.134-18.al8.x86_64 (iZbp19tqlmjz1dmnm8w43uZ)  04/09/2025      _x86_64_        (2 CPU)<br><br>10:56:06 PM   UID       PID    %usr %system  %guest   %<span class="hljs-built_in">wait</span>    %CPU   CPU  Command<br>10:56:07 PM     0      1239    0.99    0.00    0.00    0.00    0.99     1  AliYunDunMonito<br><br>UID拥有该进程的用户 ID<br>PID进程 ID<br>%usr用户态 CPU 使用百分比<br>%system内核态 CPU 使用百分比<br>%CPU总 CPU 占用（usr + system）<br>CPU运行该进程的 CPU 核心编号<br>Command可执行文件名（进程名）<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell I 概念与基本命令</title>
    <link href="/2025/04/09/Shell-1/"/>
    <url>/2025/04/09/Shell-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h1 id="什么是Shell"><a href="#什么是Shell" class="headerlink" title="什么是Shell ?"></a>什么是Shell ?</h1><p>Shell 是一种应用于linux系统的命令行解释器工具的通称。（功能实现层面）</p><ul><li>用户向shell 发出命令时<ul><li>1 如果是内置命令，则直接在当前进程执行内置命令。（内置命令如cd,echo,可以使用type查询）</li><li>2如果是非内置命令，则fork() 一个子进程，在子进程中执行用户输入的命令。</li></ul></li></ul><p>Shell 是新用户接入服务器后启动的默认挂起程序。 （应用层面）</p><ul><li>应用执行完毕后，会关闭进程。为了使用户可以正常与服务器交互，<ul><li>需要一个进程在前台挂起，持续等待用户输入命令</li></ul></li></ul><p>Shell 是作用于用户和操作系统内核间的中间程序，为用户提供服务，执行操作系统功能。（系统架构层面）</p><ul><li>许多程序需要通过系统调用来实现其功能，而允许用户直接访问内核功能是不安全的。所以通过shell命令来进行系统调用完成系统。</li></ul><p><img src="https://i.111666.best/image/P9kPm8BDRhogLaekV6yAYq.png" alt="image"></p><h1 id="Shell-的执行格式"><a href="#Shell-的执行格式" class="headerlink" title="Shell 的执行格式"></a>Shell 的执行格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">    <span class="hljs-comment">#               command                                - parameter                 value </span><br><br><span class="hljs-comment">#系统提示符         shell命令或其他可执行程序               选项                        传入的参数</span><br></code></pre></td></tr></table></figure><p>独立的命令的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  当通过 yum , dnf (centos)或者 apt(ubuntu) 进行命令安装后</span><br><span class="hljs-comment">#  对应的命令会放置在/user/bin 文件目录下。 shell命令执行时会去该目录下寻找</span><br><span class="hljs-comment">#  如 [root@iZbp19tqlmjz1dmnm8w43uZ ~]# unzip</span><br><span class="hljs-comment">#  -bash: /usr/bin/unzip: No such file or directory</span><br><span class="hljs-comment">#  有些程序安装后 并不会直接安装到/user/bin 需要创建软链接 将程序映射到/user/bin 目录</span><br>   <span class="hljs-built_in">ln</span>             -s            /user/local/bin/xxx   /user/bin/xxx<br><span class="hljs-comment">#  创建链接      指定为软链接    安装目录               链接</span><br></code></pre></td></tr></table></figure><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="清空屏幕打印-clear"><a href="#清空屏幕打印-clear" class="headerlink" title="清空屏幕打印 - clear"></a>清空屏幕打印 - clear</h2><ul><li>只是将输入置于顶端</li></ul><h2 id="回显打印-echo"><a href="#回显打印-echo" class="headerlink" title="回显打印 - echo"></a>回显打印 - echo</h2><h2 id="查看当前工作目录-pwd"><a href="#查看当前工作目录-pwd" class="headerlink" title="查看当前工作目录 - pwd"></a>查看当前工作目录 - pwd</h2><h2 id="查看返回路径中的文件名-basename"><a href="#查看返回路径中的文件名-basename" class="headerlink" title="查看返回路径中的文件名 - basename"></a>查看返回路径中的文件名 - basename</h2><ul><li>basename [ path ] [ suffix ]</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# <span class="hljs-built_in">touch</span> hello.world<br>[root@iZbp19tqlmjz1dmnm8w43uZ ~]# <span class="hljs-built_in">basename</span> /root/hello.world .world<br>hello<br><br></code></pre></td></tr></table></figure><h2 id="查询目录下的内容-ls"><a href="#查询目录下的内容-ls" class="headerlink" title="查询目录下的内容 - ls"></a>查询目录下的内容 - ls</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-l <span class="hljs-comment">#以长格式显示文件信息（权限、所有者、组、大小、修改时间等）</span><br>-a <span class="hljs-comment">#显示所有文件，包括隐藏文件（以 . 开头的文件）</span><br>-h <span class="hljs-comment">#与 -l 一起使用，以人类可读的方式显示文件大小（KB、MB、GB）</span><br>-t <span class="hljs-comment">#按修改时间排序（最新的在前）</span><br>-r <span class="hljs-comment">#反向排序</span><br>-R <span class="hljs-comment">#递归地列出子目录中的文件</span><br></code></pre></td></tr></table></figure><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>linux中 文件的 读，写，执行权限 被设置为了3种 ： 所有者，所属用户组，其他用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 当使用ls -l 时,可以看到当前目录下的文件权限描述</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rw-r--r-- 1 root root 7 Mar 28 00:44 hello.txt<br><br><span class="hljs-comment"># &quot;-&quot; 表示是一个文件 其他类型如 d:目录，l:链接，b:块设备，c:字符设备文件</span><br><span class="hljs-comment"># rwx  分别代表r 可读 w 可写 x 可执行</span><br><span class="hljs-comment"># 所以上述 hello.txt 文件 代表 当前文件是一个普通文件，可以被用户所有者读写，所属用户组和其他用户可读</span><br><span class="hljs-comment"># 使用chmod 来修改用户权限 权限表示为比特置位。当授予所有权限时为 4+2+1 = 7</span><br><span class="hljs-comment"># 所以 授予所有者执行权限为:</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> +100 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxr--r-- 1 root root 7 Mar 28 00:44 hello.txt<br><span class="hljs-comment"># 授予其他用户读写权限为:</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> +006 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxr--rw- 1 root root 7 Mar 28 00:44 hello.txt<br><span class="hljs-comment"># 去除所属用户组读权限为:</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwx---rw- 1 root root 7 Mar 28 00:44 hello.txt<br><br></code></pre></td></tr></table></figure><h2 id="用户访问权限"><a href="#用户访问权限" class="headerlink" title="用户访问权限"></a>用户访问权限</h2><p>在文件的inode中存储了4字节的文件权限内容描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">        -             <br><span class="hljs-comment">#文件类型(1 字节 -,d,l,b,c)  #uid gid sticky(3位)  rwx rwx rwx  </span><br></code></pre></td></tr></table></figure><p>所以当我们想要访问文件时</p><ol><li>查看当前用户是否具有当前文件的读写执行权限，使用chmod 添加对应的权限（影响最小</li><li>使用chown ， chgrp 修改文件所有者 ，所属组 来获得权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwx---rw- 1 root root 7 Mar 28 00:44 hello.txt<br><span class="hljs-comment"># 当前文件 所有者具有读写执行权限，其他用户具有读写权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> -006 hello.txt<br><span class="hljs-comment"># 清除其他用户权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# su cod<br><span class="hljs-comment"># 切换到其他用户，用户无法执行读写</span><br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br><span class="hljs-built_in">cat</span>: hello.txt: Permission denied<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">echo</span> hello &gt;hello.txt<br>bash: hello.txt: Permission denied<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">exit</span><br><span class="hljs-built_in">exit</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chown</span> cod hello.txt<br><span class="hljs-comment"># 切换文件所有这为cod, cod用户得到了读写权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# su cod<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br>你好<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">echo</span> hello &gt; hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> +070 hello.txt<br><span class="hljs-comment"># 向文件添加所属组的访问权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxrwx--- 1 root root 6 Apr  9 17:45 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chgrp</span> cod hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chown</span> root hello.txt<br><span class="hljs-comment"># 修改所属组为cod,所有者为root,使用所属组访问</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxrwx--- 1 root cod 6 Apr  9 17:45 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# su cod<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br>hello<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">echo</span> 你好 &gt;hello.txt<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br>你好<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span>+7777 hello.txt<br><span class="hljs-comment"># 修改所有置位，可以看到所有者和所属组变为s</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwsrwsrwt 1 root cod 7 Apr  9 18:07 hello.txt<br><br></code></pre></td></tr></table></figure><h2 id="切换目录-cd"><a href="#切换目录-cd" class="headerlink" title="切换目录 - cd"></a>切换目录 - cd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ codfish]# <span class="hljs-built_in">cd</span> hello/<br><span class="hljs-comment"># 移动到hello目录</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cd</span> ..<br><span class="hljs-comment"># 返回上级目录</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ codfish]# <span class="hljs-built_in">cd</span> ~<br><span class="hljs-comment"># 返回home目录</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ ~]#<br><br></code></pre></td></tr></table></figure><h2 id="拷贝文件或目录-cp"><a href="#拷贝文件或目录-cp" class="headerlink" title="拷贝文件或目录 - cp"></a>拷贝文件或目录 - cp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">cp</span> hello hello2<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>hello  hello2<br><br></code></pre></td></tr></table></figure><h2 id="创建文件目录-mkdir"><a href="#创建文件目录-mkdir" class="headerlink" title="创建文件目录 - mkdir"></a>创建文件目录 - mkdir</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mkdir</span> hi<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mkdir</span> -p one/two<br><span class="hljs-comment"># 递归创建</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">cd</span> one/two/<br>[root@iZbp19tqlmjz1dmnm8w43uZ two]#<br><br></code></pre></td></tr></table></figure><h2 id="移动文件或目录-mv"><a href="#移动文件或目录-mv" class="headerlink" title="移动文件或目录  - mv"></a>移动文件或目录  - mv</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>hello2  hello<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mv</span> hello hi<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>hello2  hi<br><br></code></pre></td></tr></table></figure><h2 id="删除文件或目录-rm"><a href="#删除文件或目录-rm" class="headerlink" title="删除文件或目录 - rm"></a>删除文件或目录 - rm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">rm</span> hi<br><span class="hljs-built_in">rm</span>: remove regular empty file <span class="hljs-string">&#x27;hi&#x27;</span>? y<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mkdir</span> hi<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">rm</span> -r hi<br><span class="hljs-built_in">rm</span>: remove directory <span class="hljs-string">&#x27;hi&#x27;</span>? y<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">rm</span> -rf hi<br><span class="hljs-comment"># 递归删除目录及文件</span><br><br></code></pre></td></tr></table></figure><h2 id="创建空文件-touch"><a href="#创建空文件-touch" class="headerlink" title="创建空文件 - touch"></a>创建空文件 - touch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">touch</span> file<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>file<br></code></pre></td></tr></table></figure><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><p>cat  直接查看整个文件的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">cat</span> file<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td></tr></table></figure><p>more  交互式查看文件内容</p><p>less</p><p>head  从头部查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">head</span> -n 3 file<br>1<br>2<br>3<br><br></code></pre></td></tr></table></figure><p>tail 从尾部查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">tail</span> -n 3 file<br>8<br>9<br>10<br></code></pre></td></tr></table></figure><h2 id="查看文件-目录-实际信息-（inode-block-地址）-stat"><a href="#查看文件-目录-实际信息-（inode-block-地址）-stat" class="headerlink" title="查看文件&#x2F;目录 实际信息 （inode&#x2F;block 地址）- stat"></a>查看文件&#x2F;目录 实际信息 （inode&#x2F;block 地址）- stat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">stat</span> file<br>  File: file<br>  Size: 21              Blocks: 8          IO Block: 4096   regular file<br>Device: fd03h/64771d    Inode: 1224103     Links: 1<br>Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)<br>Access: 2025-04-09 21:05:51.065782226 +0800<br>Modify: 2025-04-09 21:05:49.079699125 +0800<br>Change: 2025-04-09 21:05:49.081699209 +0800<br> Birth: 2025-04-09 21:05:49.079699125 +0800<br><br></code></pre></td></tr></table></figure><h2 id="查看文件信息-file"><a href="#查看文件信息-file" class="headerlink" title="查看文件信息 - file"></a>查看文件信息 - file</h2><h2 id="压缩-解压缩-tar-czf-xzf"><a href="#压缩-解压缩-tar-czf-xzf" class="headerlink" title="压缩&#x2F;解压缩  - tar(czf&#x2F;xzf)"></a>压缩&#x2F;解压缩  - tar(czf&#x2F;xzf)</h2>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器网络</title>
    <link href="/2025/04/06/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/04/06/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="Veth"><a href="#Veth" class="headerlink" title="Veth"></a>Veth</h2><p>veth（Virtual Ethernet）是Linux中的一种虚拟网络设备，它工作在第二层（数据链路层），主要用于连接不同的网络命名空间（network namespaces）。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>veth设备总是成对出现，类似于一根网线的两端。当数据包从一端发出后，会立即从另一端收到。这种特性使它成为连接不同网络命名空间的理想工具。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ol><li><strong>成对创建</strong>：veth设备必须成对创建，一端发送的数据会从另一端接收。</li><li><strong>跨命名空间通信</strong>：veth对的两端可以位于不同的网络命名空间中，是Linux实现网络虚拟化的基础设施。</li><li><strong>无状态</strong>：veth设备本身不存储任何状态信息，仅作为数据的传输通道。</li><li><strong>支持标准网络操作</strong>：可以为veth设备配置IP地址、添加路由、设置防火墙规则等。</li></ol><h3 id="Veth工作模式"><a href="#Veth工作模式" class="headerlink" title="Veth工作模式"></a>Veth工作模式</h3><p><img src="https://i.111666.best/image/cd1vfax0o2HRKQWO1OAGwY.png" alt="image"></p><p>veth 的宿主端接口，在未接入 bridge 且配置 IP 时，可类比为 VLAN 子网的默认网关；</p><p>而当加入 bridge 时，它就退化成纯二层接入口，成为 bridge 内部以太帧转发的端口，不应再承担 IP 层通信角色。</p><h3 id="Veth设备端配置"><a href="#Veth设备端配置" class="headerlink" title="Veth设备端配置"></a>Veth设备端配置</h3><p>宿主机配置网络→创建容器→将网络加入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#宿主机 </span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> add veth-c <span class="hljs-built_in">type</span> veth peer name veth-br  <span class="hljs-comment"># 配置结伴网络</span><br><span class="hljs-built_in">sudo</span> ip addr add  192.168.100.100/24  dev  veth-br <span class="hljs-comment">#配置ip 信息</span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-br up<br><br><span class="hljs-comment">#创建容器后，在宿主机查询容器进程，添加网络到宿主机</span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c netns 968998<br><br><span class="hljs-comment">#容器</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c up<br>ip addr add 192.168.100.100/24 dev veth-c<br></code></pre></td></tr></table></figure><p>创建网络命名空间→创建veth网络→添加veth网络到网络命名空空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 宿主机添加网络命名空间 net1</span><br>ip netns add net1<br><span class="hljs-comment"># 添加veth 网络</span><br>ip <span class="hljs-built_in">link</span> add veth1 <span class="hljs-built_in">type</span> veth peer name veth1_p<br><span class="hljs-comment"># 绑定veth网络到网络命名空间 net1</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth1 netns net1<br>ip addr add 192.168.100.100/24 dev veth1_p<br><br><span class="hljs-comment">#通过命令执行</span><br>ip netns <span class="hljs-built_in">exec</span> net1 ip addr<br>ip netns <span class="hljs-built_in">exec</span> net1 ip addr add 192.168.100.102/24 dev veth1<br>ip netns <span class="hljs-built_in">exec</span> net1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth1 up<br></code></pre></td></tr></table></figure><p>网桥配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 宿主机 创建 namespace</span><br>ip netns add ns1<br>ip netns add ns2<br><br><span class="hljs-comment"># 创建 veth pair</span><br>ip <span class="hljs-built_in">link</span> add veth-a <span class="hljs-built_in">type</span> veth peer name veth-a-ns<br>ip <span class="hljs-built_in">link</span> add veth-b <span class="hljs-built_in">type</span> veth peer name veth-b-ns<br><br><span class="hljs-comment"># 放进 namespace</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a-ns netns ns1<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b-ns netns ns2<br><br><span class="hljs-comment"># 设置 IP</span><br>ip netns <span class="hljs-built_in">exec</span> ns1 ip addr add 192.168.100.10/24 dev veth-a-ns<br>ip netns <span class="hljs-built_in">exec</span> ns2 ip addr add 192.168.100.20/24 dev veth-b-ns<br><br><span class="hljs-comment"># 启动接口</span><br>ip netns <span class="hljs-built_in">exec</span> ns1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a-ns up<br>ip netns <span class="hljs-built_in">exec</span> ns2 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b-ns up<br>ip netns <span class="hljs-built_in">exec</span> ns1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> lo up<br>ip netns <span class="hljs-built_in">exec</span> ns2 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> lo up<br><br><span class="hljs-comment"># 宿主机接口 up</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a up<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b up<br><br><span class="hljs-comment"># 创建 bridge</span><br>ip <span class="hljs-built_in">link</span> add br0 <span class="hljs-built_in">type</span> bridge<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> br0 up<br>ip addr add 192.168.100.1/24 dev br0<br><br><span class="hljs-comment"># 加入 bridge</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a master br0<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b master br0<br><br>ip netns <span class="hljs-built_in">exec</span> ns1 ping -c 3 192.168.100.20<br>ip netns <span class="hljs-built_in">exec</span> ns1 ping -c 3 192.168.100.1<br><br></code></pre></td></tr></table></figure><h2 id="容器外部网络访问"><a href="#容器外部网络访问" class="headerlink" title="容器外部网络访问"></a>容器外部网络访问</h2><p>设置网络转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -A FORWARD -j ACCEPT<br>置位  /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p>Docker 通过向iptables写入规则 来控制 端口映射转发</p><h3 id="NAT（network-address-translation）"><a href="#NAT（network-address-translation）" class="headerlink" title="NAT（network address translation）"></a>NAT（network address translation）</h3><p>NAT (Network Address Translation) 是一种网络技术，它允许多台设备通过单个公共 IP 地址访问互联网。通过一张映射表完成内网和外网IP，端口间的转换</p><p>NAT 的主要功能和特点：</p><ol><li>地址转换：NAT 将内部网络中的私有 IP 地址转换为公共 IP 地址，使得内部网络的设备能够访问互联网</li><li>节约 IP 地址资源：由于 IPv4 地址资源有限，NAT 技术可以使多台设备共享一个公共 IP 地址，缓解了 IP 地址短缺问题</li><li>隐藏内部网络结构：NAT 可以隐藏内部网络的真实 IP 地址，提高网络安全性</li></ol><p>NAT 的主要类型：</p><ol><li>静态 NAT：一对一映射，每个私有 IP 地址对应一个固定的公共 IP 地址</li><li>动态 NAT：从公共 IP 地址池中动态分配地址</li><li>网络地址端口转换（NAPT&#x2F;PAT）：最常用的类型，多个私有 IP 地址共享一个公共 IP 地址，通过不同的端口号区分不同的连接</li></ol><h3 id="1-filter表"><a href="#1-filter表" class="headerlink" title="1.filter表"></a>1.filter表</h3><p>filter包含3个内置链用于过滤数据包，包含三个内置链：</p><ul><li>INPUT：处理发往本机的数据包</li><li>FORWARD：处理经过本机转发的数据包</li><li>OUTPUT：处理本机发出的数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 允许已建立的连接</span><br>iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<br><span class="hljs-comment"># 允许本地回环接口</span><br>iptables -A INPUT -i lo -j ACCEPT<br><span class="hljs-comment"># 允许 SSH 连接</span><br>iptables -A INPUT -p tcp --dport 22 -j ACCEPT<br><span class="hljs-comment"># 默认拒绝其他所有入站连接</span><br>iptables -P INPUT DROP<br><span class="hljs-comment"># 查询表结构</span><br>iptables -L -v<br><span class="hljs-comment"># 指定filter表查询</span><br>iptables -t filter -L -v<br></code></pre></td></tr></table></figure><h3 id="2-nat-表"><a href="#2-nat-表" class="headerlink" title="2. nat 表"></a>2. nat 表</h3><p>nat 表用于网络地址转换，包含三个内置链：</p><ul><li>PREROUTING：在路由决策前处理数据包</li><li>OUTPUT：处理本机产生的数据包</li><li>POSTROUTING：在路由决策后处理数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将内网主机的流量 NAT 到公网 IP</span><br>iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j MASQUERADE<br><span class="hljs-comment"># 端口转发</span><br>iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.100:8080<br><span class="hljs-comment"># 查询nat表</span><br>iptables -t nat -L -v<br></code></pre></td></tr></table></figure><h3 id="3-mangle-表"><a href="#3-mangle-表" class="headerlink" title="3. mangle 表"></a>3. mangle 表</h3><p>mangle 表用于特殊的数据包修改，包含五个内置链：</p><ul><li>PREROUTING：数据包进入系统时</li><li>INPUT：数据包被路由到本地时</li><li>FORWARD：转发数据包时</li><li>OUTPUT：本地生成的数据包时</li><li>POSTROUTING：数据包离开系统时</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改数据包的 TTL 值</span><br>iptables -t mangle -A POSTROUTING -o eth0 -j TTL --ttl-set 64<br><span class="hljs-comment"># 设置数据包的优先级</span><br>iptables -t mangle -A PREROUTING -p tcp --dport 22 -j TOS --set-tos 0x10<br><span class="hljs-comment"># 查询mangle表</span><br>iptables -t mangle -L -v<br></code></pre></td></tr></table></figure><h3 id="4-raw-表"><a href="#4-raw-表" class="headerlink" title="4. raw 表"></a>4. raw 表</h3><p>raw 表用于配置免于连接跟踪的例外，包含两个内置链：</p><ul><li>PREROUTING：处理刚到达的数据包</li><li>OUTPUT：处理本地生成的数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对 DNS 查询免除连接跟踪</span><br>iptables -t raw -A OUTPUT -p udp --dport 53 -j NOTRACK<br><span class="hljs-comment"># 对某些 IP 免除连接跟踪</span><br>iptables -t raw -A PREROUTING -s 192.168.1.100 -j NOTRACK<br><span class="hljs-comment"># 查询raw表</span><br>iptables -t raw -L -v<br></code></pre></td></tr></table></figure><h3 id="5-security-表"><a href="#5-security-表" class="headerlink" title="5. security 表"></a>5. security 表</h3><p>security 表用于强制访问控制网络规则（如 SELinux），包含三个内置链：</p><ul><li>INPUT：处理入站数据包</li><li>OUTPUT：处理出站数据包</li><li>FORWARD：处理转发数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置 SELinux 安全上下文标记</span><br>iptables -t security -A INPUT -p tcp --dport 80 -j SECMARK --selctx system_u:object_r:http_server_packet_t:s0<br><span class="hljs-comment"># 查询security表</span><br>iptables -t security -L -v<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>外部网络 - 宿主机 - 容器 ：</p><p>创建 veth网络，将veth网络两端绑定在宿主机和容器两端</p><p>配置网桥，将宿主机中的veth端加入到网桥中，veth自动退化为虚拟端口</p><p>宿主机使用iptables 配置 收发请求的网络数据流量 映射到容器网络。</p>]]></content>
    
    
    
    <tags>
      
      <tag>虚拟化技术</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>task-struct</title>
    <link href="/2025/04/01/task-struct/"/>
    <url>/2025/04/01/task-struct/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-内核中的-task-struct-结构详解"><a href="#Linux-内核中的-task-struct-结构详解" class="headerlink" title="Linux 内核中的 task_struct 结构详解"></a>Linux 内核中的 <code>task_struct</code> 结构详解</h1><p>task_struct 是 Linux 内核中用来表示 <strong>进程（或者线程）</strong> 的核心结构体，是操作系统调度、管理和追踪进程的基础。该结构体非常庞大，包含了大量字段，用于管理进程的各种状态。</p><hr><h2 id="🧠-task-struct-的主要组成结构（按功能分类）"><a href="#🧠-task-struct-的主要组成结构（按功能分类）" class="headerlink" title="🧠 task_struct 的主要组成结构（按功能分类）"></a>🧠 <code>task_struct</code> 的主要组成结构（按功能分类）</h2><h3 id="1-进程标识"><a href="#1-进程标识" class="headerlink" title="1. 进程标识"></a>1. 进程标识</h3><p>用于标识进程的唯一性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">pid_t</span> pid;                      <span class="hljs-comment">// 进程ID</span><br><span class="hljs-type">pid_t</span> tgid;                     <span class="hljs-comment">// 线程组ID（主线程的pid）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span> *<span class="hljs-title">thread_pid</span>;</span>        <span class="hljs-comment">// 线程ID（每个线程唯一）</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-进程状态与调度相关"><a href="#2-进程状态与调度相关" class="headerlink" title="2. 进程状态与调度相关"></a>2. 进程状态与调度相关</h3><p>包括进程状态、优先级、调度器策略等：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> state;           <span class="hljs-comment">// 当前进程状态（如 TASK_RUNNING 等）</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;            <span class="hljs-comment">// 标志位（PF_开头）</span><br><span class="hljs-type">int</span> prio;                      <span class="hljs-comment">// 动态优先级</span><br><span class="hljs-type">int</span> static_prio;               <span class="hljs-comment">// 静态优先级</span><br><span class="hljs-type">int</span> policy;                    <span class="hljs-comment">// 调度策略（如 SCHED_NORMAL）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sched_entity</span> <span class="hljs-title">se</span>;</span>        <span class="hljs-comment">// CFS调度实体</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-父子进程关系"><a href="#3-父子进程关系" class="headerlink" title="3. 父子进程关系"></a>3. 父子进程关系</h3><p>记录进程之间的层级关系：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">real_parent</span>;</span>   <span class="hljs-comment">// 创建它的进程</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">parent</span>;</span>        <span class="hljs-comment">// 当前父进程</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">children</span>;</span>         <span class="hljs-comment">// 子进程链表</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">sibling</span>;</span>          <span class="hljs-comment">// 兄弟进程链表</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-内存管理"><a href="#4-内存管理" class="headerlink" title="4. 内存管理"></a>4. 内存管理</h3><p>与地址空间和虚拟内存相关的信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span>;</span>             <span class="hljs-comment">// 进程的内存描述符（用户态）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">active_mm</span>;</span>      <span class="hljs-comment">// 当前活跃的 mm（内核线程也会设置）</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-文件系统与文件描述符表"><a href="#5-文件系统与文件描述符表" class="headerlink" title="5. 文件系统与文件描述符表"></a>5. 文件系统与文件描述符表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_struct</span> *<span class="hljs-title">fs</span>;</span>             <span class="hljs-comment">// 文件系统信息（当前目录等）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">files_struct</span> *<span class="hljs-title">files</span>;</span>       <span class="hljs-comment">// 打开的文件描述符表</span><br></code></pre></td></tr></table></figure><hr><h3 id="6-信号处理"><a href="#6-信号处理" class="headerlink" title="6. 信号处理"></a>6. 信号处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">signal_struct</span> *<span class="hljs-title">signal</span>;</span>     <span class="hljs-comment">// 所属线程组的信号处理结构</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sighand_struct</span> *<span class="hljs-title">sighand</span>;</span>   <span class="hljs-comment">// 信号处理函数</span><br><span class="hljs-type">sigset_t</span> blocked;                 <span class="hljs-comment">// 当前屏蔽的信号</span><br></code></pre></td></tr></table></figure><hr><h3 id="7-命名空间（Namespace）"><a href="#7-命名空间（Namespace）" class="headerlink" title="7. 命名空间（Namespace）"></a>7. 命名空间（Namespace）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> *<span class="hljs-title">nsproxy</span>;</span>          <span class="hljs-comment">// 各类命名空间的统一接口</span><br></code></pre></td></tr></table></figure><hr><h3 id="8-CPU-和上下文切换相关"><a href="#8-CPU-和上下文切换相关" class="headerlink" title="8. CPU 和上下文切换相关"></a>8. CPU 和上下文切换相关</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_struct</span> <span class="hljs-title">thread</span>;</span>      <span class="hljs-comment">// 存储CPU寄存器等上下文信息</span><br><span class="hljs-type">int</span> on_cpu;                       <span class="hljs-comment">// 是否在CPU上运行</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cpumask</span> *<span class="hljs-title">cpus_allowed</span>;</span>     <span class="hljs-comment">// 允许运行在哪些CPU上</span><br></code></pre></td></tr></table></figure><hr><h3 id="9-时间统计"><a href="#9-时间统计" class="headerlink" title="9. 时间统计"></a>9. 时间统计</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">u64 utime;                        <span class="hljs-comment">// 用户态运行时间</span><br>u64 stime;                        <span class="hljs-comment">// 内核态运行时间</span><br></code></pre></td></tr></table></figure><hr><h3 id="10-Cgroup-与资源限制"><a href="#10-Cgroup-与资源限制" class="headerlink" title="10. Cgroup 与资源限制"></a>10. Cgroup 与资源限制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">css_set</span> *<span class="hljs-title">cgroups</span>;</span>          <span class="hljs-comment">// 所属的 cgroup 集合</span><br></code></pre></td></tr></table></figure><hr><h3 id="11-调试与追踪"><a href="#11-调试与追踪" class="headerlink" title="11. 调试与追踪"></a>11. 调试与追踪</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ptrace;             <span class="hljs-comment">// 是否被 ptrace 追踪</span><br></code></pre></td></tr></table></figure><hr><h3 id="12-内核同步与锁"><a href="#12-内核同步与锁" class="headerlink" title="12. 内核同步与锁"></a>12. 内核同步与锁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">spinlock_t</span> alloc_lock;            <span class="hljs-comment">// 用于保护任务结构中的关键区域</span><br></code></pre></td></tr></table></figure><hr><h3 id="13-其他常用字段"><a href="#13-其他常用字段" class="headerlink" title="13. 其他常用字段"></a>13. 其他常用字段</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> comm[TASK_COMM_LEN];         <span class="hljs-comment">// 进程名（最多16字节）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">group_leader</span>;</span> <span class="hljs-comment">// 线程组的 leader</span><br><span class="hljs-type">int</span> exit_code;                    <span class="hljs-comment">// 退出代码</span><br></code></pre></td></tr></table></figure><hr><h2 id="🔧-小结图解（简略）"><a href="#🔧-小结图解（简略）" class="headerlink" title="🔧 小结图解（简略）"></a>🔧 小结图解（简略）</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pf">task_struct<br>├── 进程标识：pid, tgid<br>├── 状态与调度：<span class="hljs-keyword">state</span>, <span class="hljs-keyword">prio</span>, policy, se<br>├── 父子关系：<span class="hljs-keyword">parent</span>, children<br>├── 内存管理：mm, active_mm<br>├── 文件系统：files, fs<br>├── 信号处理：signal, sighand<br>├── 命名空间：nsproxy<br>├── CPU调度：thread, on_cpu<br>├── 时间统计：utime, stime<br>├── C<span class="hljs-keyword">group</span>：cgroups<br>├── 同步锁：alloc_lock<br>├── 调试追踪：ptrace<br>└── 通用信息：comm, exit_code<br></code></pre></td></tr></table></figure><hr><p>该结构体可能会在不同版本的内核中有所变动，但整体结构和这些功能模块是核心。</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器的实现原理</title>
    <link href="/2025/04/01/%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2025/04/01/%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="容器实现的原理"><a href="#容器实现的原理" class="headerlink" title="容器实现的原理"></a>容器实现的原理</h1><p>在Linux系统中，容器的实现本身就是一种资源隔离的方式。它通过控制进程的资源调度，访问权限来确定一项进程可以操作的资源范围，来达到隔离的目的</p><p>这其中主要使用到3个技术 ： namespace，unionfs 和cgroups</p><h1 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h1><p>namespace 是一种控制进程访问范围的结构体。在进程结构体（task_struct）中，通过nsproxy 结构 指向一个包含多种资源结构指针的结构体。</p><p>struct nsproxy :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> &#123;</span><br>    <span class="hljs-type">atomic_t</span> count;                  <span class="hljs-comment">// 引用计数</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uts_namespace</span> *<span class="hljs-title">uts_ns</span>;</span>   <span class="hljs-comment">// UTS 命名空间（主机名、域名）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipc_namespace</span> *<span class="hljs-title">ipc_ns</span>;</span>   <span class="hljs-comment">// IPC 命名空间（信号量、共享内存、消息队列）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mnt_namespace</span> *<span class="hljs-title">mnt_ns</span>;</span>   <span class="hljs-comment">// 挂载命名空间（文件系统挂载点）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid_namespace</span> *<span class="hljs-title">pid_ns_for_children</span>;</span> <span class="hljs-comment">// PID 命名空间（用于子进程）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> *<span class="hljs-title">net_ns</span>;</span>             <span class="hljs-comment">// 网络命名空间</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CGROUPS</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_namespace</span> *<span class="hljs-title">cgroup_ns</span>;</span> <span class="hljs-comment">// 控制组命名空间</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_TIME_NS</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time_namespace</span> *<span class="hljs-title">time_ns</span>;</span>     <span class="hljs-comment">// 时间命名空间</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="各个字段的含义："><a href="#各个字段的含义：" class="headerlink" title="各个字段的含义："></a>各个字段的含义：</h2><table><thead><tr><th>字段名</th><th>描述</th></tr></thead><tbody><tr><td><code>count</code></td><td>引用计数，避免结构体被过早释放</td></tr><tr><td><code>uts_ns</code></td><td>UTS 命名空间（<code>uname -n</code>、主机名等）</td></tr><tr><td><code>ipc_ns</code></td><td>IPC 命名空间（SysV IPC，如信号量、共享内存）</td></tr><tr><td><code>mnt_ns</code></td><td>挂载命名空间（隔离的挂载视图）</td></tr><tr><td><code>pid_ns_for_children</code></td><td>当前进程的子进程将进入的 PID 命名空间</td></tr><tr><td><code>net_ns</code></td><td>网络命名空间（如网络设备、IP 地址、路由等）</td></tr><tr><td><code>cgroup_ns</code></td><td>控制组命名空间（控制组的名字空间隔离）</td></tr><tr><td><code>time_ns</code></td><td>时间命名空间（每个容器&#x2F;命名空间自己的时间视图）</td></tr></tbody></table><p>当进程被创建时，未定义的命名空间 会默认使用父进程的结构体信息（可以通过clone()来指定子进程需要绑定的命名空间）。所以当新的子进程被创建时，默认直接可以访问父进程所能使用的资源。</p><h2 id="创建新的命名空间"><a href="#创建新的命名空间" class="headerlink" title="创建新的命名空间"></a>创建新的命名空间</h2><p>通过使用 unshare 命令来创建新的命名空间。操作系统会对每种资源进行相应的初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unshare --fork --pid --mount --uts --ipc --net --user --map-root-user /bin/bash<br></code></pre></td></tr></table></figure><p><code>unshare</code> 可以让你为进程单独创建以下命名空间：</p><table><thead><tr><th>命名空间</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>UTS</td><td><code>--uts</code></td><td>主机名&#x2F;域名隔离（可以改 hostname）</td></tr><tr><td>PID</td><td><code>--pid</code></td><td>进程号隔离（新的进程树，当前进程是 PID 1）</td></tr><tr><td>Mount</td><td><code>--mount</code></td><td>文件系统挂载点隔离</td></tr><tr><td>Net</td><td><code>--net</code></td><td>网络栈隔离（独立的网络接口）</td></tr><tr><td>IPC</td><td><code>--ipc</code></td><td>进程间通信隔离</td></tr><tr><td>User</td><td><code>--user</code></td><td>用户&#x2F;权限隔离（uid&#x2F;gid 映射）</td></tr><tr><td>Cgroup</td><td><code>--cgroup</code></td><td>控制组隔离</td></tr><tr><td>Time</td><td><code>--time</code></td><td>系统时间命名空间（较新内核）</td></tr></tbody></table><p> 使用 - -mount 会将当前进程的挂载系统视图加载到新的进程中去</p><p>使用  - -mount-proc 会创建一个独立的&#x2F;proc 文件系统</p><p>进入新的命名空间后，进行资源挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">unshare --mount --net --user --map-root-user bash<br><br>mount -t tmpfs tmpfs /mnt/tmp  <span class="hljs-comment">#文件系统挂载</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> lo up <span class="hljs-comment">#网络挂载</span><br>mount -t proc proc /proc <span class="hljs-comment">#虚拟文件系统挂载</span><br><span class="hljs-comment"># --user 要么用 --map-root-user，要么自己写 uid_map</span><br></code></pre></td></tr></table></figure><p>我们得到了一个自定义资源预设命名空间的进程</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="unshare-—uts-—pid-bin-bash-需要通过—fork创建新的命名空间"><a href="#unshare-—uts-—pid-bin-bash-需要通过—fork创建新的命名空间" class="headerlink" title="unshare  —uts —pid  &#x2F;bin&#x2F;bash 需要通过—fork创建新的命名空间"></a>unshare  —uts —pid  &#x2F;bin&#x2F;bash 需要通过—fork创建新的命名空间</h3><p>使用 <code>unshare --pid</code> 创建新的 PID 命名空间后，当前进程依然处于旧命名空间，它的 PID 无法更改。因此必须通过 <code>--fork</code> 创建一个新进程，它才能真正运行在新的 PID 命名空间中，并成为该命名空间内的 PID 1。</p><h3 id="如何进入一个命名空间"><a href="#如何进入一个命名空间" class="headerlink" title="如何进入一个命名空间"></a>如何进入一个命名空间</h3><p>Linux 把每个进程当前所在的命名空间暴露在了 <code>/proc/[pid]/ns/</code> 目录下，你可以通过访问它来“进入”命名空间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br><span class="hljs-built_in">sudo</span> nsenter --target &lt;PID&gt; --net --uts --pid --mount --ipc /bin/bash<br></code></pre></td></tr></table></figure><p>可以通过 <code>bind mount</code> 的方式把 namespace 文件挂到一个路径上，实现“命名空间持久化”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /var/run/my_ns<br><span class="hljs-built_in">touch</span> /var/run/my_ns/net<br>mount --<span class="hljs-built_in">bind</span> /proc/&lt;pid&gt;/ns/net /var/run/my_ns/net<br><br></code></pre></td></tr></table></figure><h3 id="进程在不同命名空间具有不同的PID信息"><a href="#进程在不同命名空间具有不同的PID信息" class="headerlink" title="进程在不同命名空间具有不同的PID信息"></a>进程在不同命名空间具有不同的PID信息</h3><p>关键结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span> &#123;</span><br><span class="hljs-type">atomic_t</span> count;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> level;  <span class="hljs-comment">// 命名空间层级（0 = root）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span> <span class="hljs-title">tasks</span>[<span class="hljs-title">PIDTYPE_MAX</span>];</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">upid</span> <span class="hljs-title">numbers</span>[1];</span> <span class="hljs-comment">// 实际的 PID 数组（多个命名空间的 PID）</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">upid</span> &#123;</span><br>    <span class="hljs-type">int</span> nr;                      <span class="hljs-comment">// 当前 namespace 下的 PID</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid_namespace</span> *<span class="hljs-title">ns</span>;</span>   <span class="hljs-comment">// 属于哪个 namespace</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>由此 我们可以看到 unshare 是一个对进程的资源权限进行创建绑定的过程</p><h1 id="overlayfs"><a href="#overlayfs" class="headerlink" title="overlayfs"></a>overlayfs</h1><p>在实现容器文件系统时，常使用的是 <code>overlayfs</code>（属于 unionfs 类型的聚合文件系统）。用来将容器所需要的文件资源“聚合”在同一个资源目录下。</p><p>通过mount 创建文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -t overlay overlay \<br>  -o lowerdir=/mnt/lower,upperdir=/mnt/upper,workdir=/mnt/work \<br>  /mnt/merged<br><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-t overlay</code></td><td>指定文件系统类型是 <code>overlay</code></td></tr><tr><td><code>overlay</code></td><td>设备名（这里可以随便写，比如也可以写成 <code>none</code>）</td></tr><tr><td><code>-o lowerdir=...</code></td><td>指定只读的底层目录（可多个）</td></tr><tr><td><code>upperdir=...</code></td><td>指定可写的上层目录</td></tr><tr><td><code>workdir=...</code></td><td>overlayfs 需要的工作目录（中间缓存用）</td></tr><tr><td>最后的 <code>rootfs_chat/merged</code></td><td>是挂载点，即最终组合出来的目录视图</td></tr></tbody></table><p>挂载创建好后，因为该挂载存在于父进程之中，所以使用—mount创建后，新的子进程可以访问到该挂载路径</p><p>但是此时的根路径依然继承自父进程，所以需要将新进程的根进程修改为“&#x2F;”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chroot</span> rootfs_chat/merged/ <br></code></pre></td></tr></table></figure><p><code>chroot</code> 本身并不安全，不能完全隔离文件系统，需要结合 mount namespace 才能保证隔离性。否则进程可以 escape chroot。</p><h2 id="QA-1"><a href="#QA-1" class="headerlink" title="QA"></a>QA</h2><p>chroot 通过修改进程结构体中的“root” 变量，来帮助进程识别对应的根目录的</p><p>{</p><p>struct fs_struct {<br>struct path root;     &#x2F;&#x2F; 当前的根目录（对应 <code>/</code>）<br>struct path pwd;      &#x2F;&#x2F; 当前工作目录（对应 <code>.</code>）<br>};</p><h1 id="cgroups"><a href="#cgroups" class="headerlink" title="cgroups"></a>cgroups</h1><p>cgroup 是一个内核中的“资源控制树结构”，进程“加入”到这个树结构的某个节点下，进而接受控制器的约束。</p><p>结构体定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kernfs_node</span> *<span class="hljs-title">kn</span>;</span>         <span class="hljs-comment">// 在 cgroupfs 中对应的目录节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_subsys_state</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">subsys</span>[<span class="hljs-title">CGROUP_SUBSYS_COUNT</span>];</span> <span class="hljs-comment">// 控制器状态</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_parent</span> *<span class="hljs-title">parent</span>;</span>   <span class="hljs-comment">// 父 cgroup</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>控制器结构 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_subsys_state</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup</span> *<span class="hljs-title">cgroup</span>;</span>       <span class="hljs-comment">// 属于哪个 cgroup 节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_subsys</span> *<span class="hljs-title">ss</span>;</span>    <span class="hljs-comment">// 属于哪个控制器（memory, cpu等）</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>进程结构体中对cgroup的引用 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> &#123;</span><br>    ...<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">css_set</span> *<span class="hljs-title">cgroups</span>;</span>    <span class="hljs-comment">// 进程所属的 cgroup 集合（css_set）</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="cgroups限制写入"><a href="#cgroups限制写入" class="headerlink" title="cgroups限制写入"></a>cgroups限制写入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /sys/fs/cgroup/mygroup<br><span class="hljs-built_in">echo</span> 1234 &gt; /sys/fs/cgroup/mygroup/cgroup.procs  <span class="hljs-comment">#将某个进程加入资源组</span><br><span class="hljs-built_in">echo</span> 50M &gt; /sys/fs/cgroup/mygroup/memory.max  <span class="hljs-comment">#在对应的虚拟文件中设置限制值的大小</span><br><br></code></pre></td></tr></table></figure><h2 id="限制方式"><a href="#限制方式" class="headerlink" title="限制方式"></a>限制方式</h2><h3 id="1-内存限制（memory-controller）"><a href="#1-内存限制（memory-controller）" class="headerlink" title="1. 内存限制（memory controller）"></a>1. <strong>内存限制（memory controller）</strong></h3><h3 id="控制文件（cgroups-v2）："><a href="#控制文件（cgroups-v2）：" class="headerlink" title="控制文件（cgroups v2）："></a>控制文件（cgroups v2）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">memory.max        <span class="hljs-comment"># 最大内存</span><br>memory.current    <span class="hljs-comment"># 当前内存使用量</span><br>memory.swap.max   <span class="hljs-comment"># 最大 swap 使用</span><br><br></code></pre></td></tr></table></figure><h3 id="限制机制："><a href="#限制机制：" class="headerlink" title="限制机制："></a>限制机制：</h3><ul><li>每次进程分配内存（<code>malloc</code> &#x2F; <code>brk</code> &#x2F; <code>mmap</code>），内核会通过 cgroup 追踪它的页数</li><li>内核维护一个“<strong>内存账户</strong>”，记录每个 cgroup 当前使用了多少内存</li><li>当使用超过 <code>memory.max</code>：<ul><li>如果是软限制（memory.high）：内核优先回收缓存页</li><li>如果是硬限制（memory.max）：内核会拒绝分配，或者直接 OOM 杀死进程</li></ul></li></ul><hr><h3 id="2-CPU-限制（cpu-controller）"><a href="#2-CPU-限制（cpu-controller）" class="headerlink" title="2. CPU 限制（cpu controller）"></a>2. <strong>CPU 限制（cpu controller）</strong></h3><h3 id="控制文件："><a href="#控制文件：" class="headerlink" title="控制文件："></a>控制文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">cpu.max           <span class="hljs-comment"># 格式为 &quot;quota period&quot;，如 &quot;50000 100000&quot; 表示 50%</span><br>cpu.weight        <span class="hljs-comment"># 比例调度（类似 nice 值）</span><br><br></code></pre></td></tr></table></figure><h3 id="限制机制：-1"><a href="#限制机制：-1" class="headerlink" title="限制机制："></a>限制机制：</h3><ul><li>Linux 用 <strong>CFS（完全公平调度器）</strong> 管理 CPU 时间</li><li>cgroups 中每个组都维护一个“虚拟时间”和“实际用量”</li><li>当某个 cgroup 超过分配的 quota，<strong>调度器会“跳过”它的进程，让出 CPU</strong></li><li>实现类似“限速”：比如每 100ms 最多用 50ms，就等于 50% CPU</li></ul><hr><h3 id="3-IO-限制（io-controller）"><a href="#3-IO-限制（io-controller）" class="headerlink" title="3. IO 限制（io controller）"></a>3. <strong>IO 限制（io controller）</strong></h3><h3 id="控制文件：-1"><a href="#控制文件：-1" class="headerlink" title="控制文件："></a>控制文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">o.max            <span class="hljs-comment"># 限制读写速率</span><br>io.weight         <span class="hljs-comment"># 相对优先级</span><br><br></code></pre></td></tr></table></figure><h3 id="限制机制：-2"><a href="#限制机制：-2" class="headerlink" title="限制机制："></a>限制机制：</h3><ul><li>当进程访问磁盘（读&#x2F;写）时，内核通过 block 层检查它所在的 cgroup</li><li>如果当前组已达到速率上限，则排队</li><li>用的是<strong>节流算法（token bucket + deadline）</strong>，按比例分发 IO 机会</li></ul><hr><h3 id="4-进程数限制（pids-controller）"><a href="#4-进程数限制（pids-controller）" class="headerlink" title="4. 进程数限制（pids controller）"></a>4. <strong>进程数限制（pids controller）</strong></h3><h3 id="控制文件：-2"><a href="#控制文件：-2" class="headerlink" title="控制文件："></a>控制文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pids.max         <span class="hljs-comment"># 最大可创建进程数</span><br>pids.current     <span class="hljs-comment"># 当前已创建的进程数</span><br><br></code></pre></td></tr></table></figure><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">进程调用系统资源（如内存分配、CPU执行、磁盘读写）  <br>      ↓  <br>内核触发资源控制器的钩子函数（如 memory, cpu, io, pids）  <br>      ↓  <br>内核查找该进程所属的 cgroup 节点  <br>      ↓  <br>读取当前使用统计（如 memory.current、cpu.stat）  <br>      ↓  <br>与配置的限制（如 memory.max、cpu.max）做比较  <br>      ↓  <br>根据控制器的逻辑执行：<br>    ├── ✅ 允许（资源未超限）<br>    ├── 🚫 拒绝（如 fork 被拒绝）<br>    ├── 🧹 触发回收（如内存回收缓存页）<br>    └── 💣 杀死进程（如 OOM killer）<br><br></code></pre></td></tr></table></figure><h3 id="不同资源的控制方式示意："><a href="#不同资源的控制方式示意：" class="headerlink" title="不同资源的控制方式示意："></a>不同资源的控制方式示意：</h3><table><thead><tr><th>资源类型</th><th>钩子点（内核行为）</th><th>控制行为</th></tr></thead><tbody><tr><td>Memory</td><td>分配页（<code>alloc_pages</code>）</td><td>拒绝分配 &#x2F; 回收 &#x2F; OOM</td></tr><tr><td>CPU</td><td>调度器（<code>schedule</code>）</td><td>跳过调度 &#x2F; 限速</td></tr><tr><td>IO</td><td><code>submit_bio()</code> &#x2F; IO调度</td><td>节流 &#x2F; 排队</td></tr><tr><td>PIDs</td><td>创建进程（<code>fork()</code>）</td><td>直接失败</td></tr><tr><td>NetCls</td><td>发包、Qos 分类</td><td>加标签限流</td></tr><tr><td>Devices</td><td>打开文件（<code>open()</code>）</td><td>拒绝访问设备</td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>容器的创建过程</p><ol><li>创建聚合文件系统，将容器所需要的文件统一到一个文件路径下</li><li>创建命名空间，初始化命名空间中的资源路径</li><li>将父进程中创建的文件系统挂载到子进程中，将子进程根目录指向挂载目录</li><li>查询进程的PID号，创建cgroup文件，添加对该进程的资源限制。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>虚拟化技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dify的Chatflow实现</title>
    <link href="/2025/03/28/Dify%E7%9A%84Chatflow%E5%AE%9E%E7%8E%B0/"/>
    <url>/2025/03/28/Dify%E7%9A%84Chatflow%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>在上一次的基础上进行一些功能实现。</p><p>通过向大模型描述请求来完成一些服务器端的功能</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>流程 Dify Chatflow 任务流 → 自定义插件构建客户端请求 → 服务器端监听请求，解析请求并处理 →插件接收请求响应，传递结果给LLM 进行优化展示。</p><h2 id="创建任务流"><a href="#创建任务流" class="headerlink" title="创建任务流"></a>创建任务流</h2><p>创建空白应用→Chatflow</p><p>ChatFlow是由多个组件构成的工作流程</p><p><img src="https://i.111666.best/image/4MRRqKxQVG504FjR2SaGTk.png" alt="image"></p><p>在这个工作流程中，每次的对话会被作为输入参数传入到工作流中进行处理</p><p>当前实现的功能 ： </p><ol><li>查询服务器允许执行的命令行工具</li><li>由大模型分析用户指令，从提供的命令列表中组织命令流程下发到服务器端执行</li></ol><p>这里的编排</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">开始-问题分类器-情况1(向服务器端请求查询功能)-交由插件向服务器端发送查询请求-处理响应-回复<br>              -情况2(分析用户需求生成对应指令)-由插件构建请求向服务器请求执行-处理响应-回复<br></code></pre></td></tr></table></figure><h2 id="自定义插件向服务端发送请求"><a href="#自定义插件向服务端发送请求" class="headerlink" title="自定义插件向服务端发送请求"></a>自定义插件向服务端发送请求</h2><p>由 上一节中的设计流程来看我们至少需要构建两个请求 ：</p><p>1 . Get 请求  向服务端请求应用程序列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Desktop_get</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>FetchKey = <span class="hljs-string">&quot;/key&quot;</span><br>Command = <span class="hljs-string">&quot;/command&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        ip = tool_parameters.get(<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        port = tool_parameters.get(<span class="hljs-string">&quot;port&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        key = <span class="hljs-variable language_">self</span>.fetch_key(ip,port)<br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;Command&#125;</span>&quot;</span><br>        headers=&#123;<span class="hljs-string">&quot;X-Api-Key&quot;</span>:key&#125;<br>        res = requests.get(url=url,headers=headers,timeout=<span class="hljs-number">30</span>).json()<br>        <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">self</span>.create_text_message(<span class="hljs-built_in">str</span>(res[<span class="hljs-string">&quot;commands&quot;</span>])<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_key</span>(<span class="hljs-params">self,ip,port</span>) : <br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;FetchKey&#125;</span>&quot;</span><br><br>        js = requests.get(url=url,timeout=<span class="hljs-number">30</span>).json()<br>        <span class="hljs-keyword">return</span> js[<span class="hljs-string">&quot;key&quot;</span>]<br></code></pre></td></tr></table></figure><ol start="2"><li>Post 请求 向服务端发送命令执行列表，由服务端进行命令执行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>EXEC=<span class="hljs-string">&quot;/execute&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHelperTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        content = tool_parameters.get(<span class="hljs-string">&quot;text&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        ip = tool_parameters.get(<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        port = tool_parameters.get(<span class="hljs-string">&quot;port&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;EXEC&#125;</span>&quot;</span><br>        <span class="hljs-built_in">print</span>(url)<br>        key = tool_parameters.get(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        headers=&#123;<span class="hljs-string">&quot;X-Api-Key&quot;</span>:key,<span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/json&quot;</span>&#125;<br>        <span class="hljs-built_in">print</span>(headers)<br>        res = requests.post(url=url,json=json.loads(content),headers=headers,timeout=<span class="hljs-number">30</span>).text<br>        <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">self</span>.create_text_message(res)<br><br></code></pre></td></tr></table></figure><h2 id="构建服务器端接口"><a href="#构建服务器端接口" class="headerlink" title="构建服务器端接口"></a>构建服务器端接口</h2><p>使用flask 构建一个接收以上请求的服务程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify, request<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> pexpect<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">require_key</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorated_function</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(request.headers)<br>        key = request.headers.get(<span class="hljs-string">&#x27;X-API-KEY&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(keys)<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> keys:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;Invalid API key&#x27;</span>&#125;), <span class="hljs-number">401</span><br>        <span class="hljs-keyword">return</span> f(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> decorated_function<br><br><span class="hljs-comment"># 密钥创建路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/key&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_key</span>():<br>    key = <span class="hljs-built_in">str</span>(uuid.uuid4())<br>    keys[key] = <span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(keys)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: key&#125;)<br><br><span class="hljs-comment"># 获取所有功能路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/command&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-meta">@require_key</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_functions</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 获取PATH环境变量中的所有可执行文件</span><br>        result = subprocess.run([<span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-string">&#x27;/server/bin&#x27;</span>], capture_output=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>)<br>        commands = result.stdout.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;commands&#x27;</span>: commands&#125;)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-built_in">str</span>(e)&#125;)<br><span class="hljs-comment"># 执行命令路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/execute&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-meta">@require_key</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    执行传入的命令并返回结果</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    data = request.json<br>    <span class="hljs-built_in">print</span>(data)<br>    commands = data.get(<span class="hljs-string">&#x27;commands&#x27;</span>)<br>    result = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> commands:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;No command provided&#x27;</span>&#125;)<br>    <br>    <span class="hljs-keyword">try</span>:<br>        shell = pexpect.spawn(<span class="hljs-string">&#x27;/bin/bash&#x27;</span>)<br>        <span class="hljs-keyword">for</span> command <span class="hljs-keyword">in</span> commands:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(command, <span class="hljs-built_in">dict</span>):<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Invalid command format&#x27;</span>&#125;)<br>            command_line = []<br>            command_line.append(command[<span class="hljs-string">&quot;command&quot;</span>])<br>            command_line.extend(command[<span class="hljs-string">&quot;args&quot;</span>])<br>            cmd = <span class="hljs-string">&quot; &quot;</span>.join(command_line)<br>            marker = <span class="hljs-string">f&quot;CMD_END_<span class="hljs-subst">&#123;<span class="hljs-built_in">hash</span>(cmd)&#125;</span>&quot;</span><br>            shell.sendline(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;cmd&#125;</span>; echo &#x27;<span class="hljs-subst">&#123;marker&#125;</span>&#x27;&quot;</span>)<br>            shell.expect(marker)<br>            <span class="hljs-comment"># 获取输出</span><br>            output = shell.before.decode().strip()<br>            <span class="hljs-built_in">print</span>(output)<br>            result.append( &#123;<br>                <span class="hljs-string">&#x27;command&#x27;</span>: cmd,<br>                <span class="hljs-string">&#x27;status&#x27;</span>:<span class="hljs-string">&#x27;success&#x27;</span>,<br>                <span class="hljs-string">&#x27;stdout&#x27;</span>: output,<br>            &#125;)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-built_in">str</span>(e)&#125;)<br>    shell.close()<br>    <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>: result&#125;)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>Get 请求返回的消息体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;hexo&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;ls&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;lscpu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;zip&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Post请求接收的消息体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ls&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;/home/codfish&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>启动本地插件调试和服务端</p><h2 id="执行工作流"><a href="#执行工作流" class="headerlink" title="执行工作流"></a>执行工作流</h2><p>向机器人请求查看服务端提供的应用列表 ： </p><p><img src="https://i.111666.best/image/lgRg7jkIDaRm4Fs8moXWkk.png" alt="image"></p><p>向机器人请求查询某个目录下的文件信息：</p><p><img src="https://i.111666.best/image/PI0vurDrzyzDKmIyPWrGCh.jpg" alt="image"></p><p>请求安装python 库：</p><p><img src="https://i.111666.best/image/fY63mSee5VABzV7CFrSHuu.png" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完成了基本功能的实现</p><p>在某些情况下提示词还是会出现异常，需要进一步优化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2+Dify 配置大模型桌面端资源访问(简单应用)</title>
    <link href="/2025/03/25/WSL2-Dify-%E9%85%8D%E7%BD%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE-%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
    <url>/2025/03/25/WSL2-Dify-%E9%85%8D%E7%BD%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE-%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>最近使用WSL2 做了dify的本地化部署。试着使用工作流的方式实现一个工作流来通过和大模型对话完成对本地资源的访问。</p><h1 id="预配置"><a href="#预配置" class="headerlink" title="预配置"></a>预配置</h1><h2 id="WSL2的本地部署"><a href="#WSL2的本地部署" class="headerlink" title="WSL2的本地部署"></a>WSL2的本地部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --list  <span class="hljs-comment"># 查询支持的wsl子系统发行版本</span><br>wsl --install <span class="hljs-comment"># 安装默认的wsl子系统</span><br></code></pre></td></tr></table></figure><p>部署完成后，配置安装apt源 ，Docker源（镜像有问题可以查询之前的文章），Git配置，以及 一些基本的命令行工具</p><h2 id="Dify-本地部署"><a href="#Dify-本地部署" class="headerlink" title="Dify 本地部署"></a>Dify 本地部署</h2><p>Github 上 <a href="https://github.com/langgenius/dify">https://github.com/langgenius/dify</a> 有部署教程，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> dify<br><span class="hljs-built_in">cd</span> docker<br><span class="hljs-built_in">cp</span> .env.example .<span class="hljs-built_in">env</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><p>安装完毕后 访问本地的<a href="http://localhost/install">http://localhost/install</a>  进行管理员配置</p><p>至此我们获得了一个部署在本地windows子系统上的dify环境</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p><img src="https://i.111666.best/image/YNLclFRYQ3PLOr79iU1PyH.png" alt="image"></p><p>目标是通过和大模型对话，识别其中的关键词来完成和自定义插件中的功能的映射关系。向本地的HTTP服务器发送对应请求。完成功能的执行</p><p>一些未来可行的扩展项</p><ol><li>更好的服务通信方式。wsl2 子系统可以直接对挂载到该系统的windows系统上的文件进行操作。所以存在更快捷方法调用本地资源。但是这可能需要dify提供更丰富的调用方式或者在docker层面上进行一些功能定制，当前只是一个可行性尝试。所以使用了 http的调用-响应模式</li><li>注册， 提供一个通用的PC平台应用发现服务。而不是通过将所有的可执行程序注册为Dify的自定义插件功能。这样更加灵活</li><li>本地的部署+自然语言的请求+插件自定义功能的解耦 目前来看相对还是比较安全。如果需要实现远程的请求调用可能需要更加安全的信息传输方式</li><li>在本地添加应用程序和文件资源的调用记录。</li></ol><h1 id="Dify的自定义插件"><a href="#Dify的自定义插件" class="headerlink" title="Dify的自定义插件"></a>Dify的自定义插件</h1><h2 id="脚手架工具初始化"><a href="#脚手架工具初始化" class="headerlink" title="脚手架工具初始化"></a>脚手架工具初始化</h2><p>官方文档</p><p><a href="https://docs.dify.ai/zh-hans/plugins/quick-start/develop-plugins/initialize-development-tools">https://docs.dify.ai/zh-hans/plugins/quick-start/develop-plugins/initialize-development-tools</a></p><p>下载 Dify的插件脚手架工具 <a href="https://github.com/langgenius/dify-plugin-daemon/tags">https://github.com/langgenius/dify-plugin-daemon/tags</a></p><p>以tools 类型为例  初始化 插件项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dify-plugin-windows-amd64 plugin init <br></code></pre></td></tr></table></figure><p><img src="https://i.111666.best/image/36KrL8MFwMSB0kHm0M7VGs.png" alt="image"><br>name 创建 插件名</p><p>author 插件作者</p><p>description 插件功能描述</p><p>语言 : python</p><p>工具 : tools  (自定义tools 类型插件</p><p><img src="https://i.111666.best/image/htD6C2oNrddvAuEyXVdmep.png" alt="image"></p><p>一些权限的设置</p><p>最终我们得到的是一个这样的工程</p><p>以下是一些比较重要的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">- _assets  <span class="hljs-comment"># 存放一些引用资源</span><br>- provider <span class="hljs-comment"># </span><br>  - someplugin.py <span class="hljs-comment"># 进行一些异常处理</span><br>- someplugin.yaml <span class="hljs-comment"># 插件功能/资源描述 </span><br>- tools    <span class="hljs-comment"># 具体的tools功能实现</span><br>- somefunction.py <span class="hljs-comment"># 具体的功能实现</span><br>- somefunction.yaml <span class="hljs-comment"># 功能/资源描述</span><br>- main.py <span class="hljs-comment"># 函数入口</span><br>- manifest.yaml <span class="hljs-comment">#  插件描述</span><br> <br></code></pre></td></tr></table></figure><h2 id="插件功能定义"><a href="#插件功能定义" class="headerlink" title="插件功能定义"></a>插件功能定义</h2><p>插件通过调用的是_invoke方法来执行对应的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Generator<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">from</span> dify_plugin <span class="hljs-keyword">import</span> Tool<br><span class="hljs-keyword">from</span> dify_plugin.entities.tool <span class="hljs-keyword">import</span> ToolInvokeMessage<br><br>BASE_URL =<span class="hljs-string">&quot;&lt;http://localhost:8080&gt;&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        method = tool_parameters.get(<span class="hljs-string">&quot;method&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        result = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> method == <span class="hljs-string">&quot;desktop_get&quot;</span> :<br>            result = requests.get(BASE_URL).text<br>        <span class="hljs-keyword">yield</span>  <span class="hljs-variable language_">self</span>.create_text_message(<span class="hljs-string">f&#x27;调用了<span class="hljs-subst">&#123;method&#125;</span>,返回<span class="hljs-subst">&#123;result&#125;</span>&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>这里给出了一个简单的http请求调用，使用request模拟http get 请求。并返回接收到的消息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">identity:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">desktop_get</span>      <span class="hljs-comment"># 方法名</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">codfish</span><br>  <span class="hljs-attr">label:</span><br>    <span class="hljs-attr">en_US:</span> <span class="hljs-string">destop_get</span><br>    <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">destop_get</span><br>    <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">destop_get</span><br><span class="hljs-attr">description:</span><br>  <span class="hljs-attr">human:</span><br>    <span class="hljs-attr">en_US:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>  <span class="hljs-attr">llm:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br><span class="hljs-attr">parameters:</span>       <span class="hljs-comment">#自定义参数</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">url</span>     <span class="hljs-comment">#参数名</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span>  <span class="hljs-comment">#参数类型</span><br>    <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">label:</span><br>      <span class="hljs-attr">en_US:</span> <span class="hljs-string">Query</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">查询语句</span><br>      <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">Query</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">human_description:</span><br>      <span class="hljs-attr">en_US:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>      <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>      <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">llm_description:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">form:</span> <span class="hljs-string">llm</span><br><span class="hljs-attr">extra:</span><br>  <span class="hljs-attr">python:</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">tools/desktop_get.py</span>  <span class="hljs-comment">#对应的python实现文件</span><br><br></code></pre></td></tr></table></figure><p>每个tools 插件允许添加多个方法，每个方法需要定义自己的模块文件(.py)和资源描述文件（.yaml）</p><p>其结构为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">tools\\</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction1.py</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction1.yaml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction2.py</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction2.yaml</span><br>  <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><h2 id="插件调试"><a href="#插件调试" class="headerlink" title="插件调试"></a>插件调试</h2><p>通过修改工作目录中的.env.example 为.env</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">INSTALL_METHOD=remote</span><br><span class="hljs-string">REMOTE_INSTALL_HOST=debug.dify.ai</span><br><span class="hljs-string">REMOTE_INSTALL_PORT=5003</span><br><span class="hljs-string">REMOTE_INSTALL_KEY=some_install_key</span><br></code></pre></td></tr></table></figure><p>将dify插件页的调试信息填充到.env中，本地执行main方法，插件会被加载到dify的插件列表中</p><p><img src="https://i.111666.best/image/TmrbwxdMkhWRuygRCXbdGp.png" alt="image"></p><h2 id="创建CHAT任务流"><a href="#创建CHAT任务流" class="headerlink" title="创建CHAT任务流"></a>创建CHAT任务流</h2><p><img src="https://i.111666.best/image/2IgA1P69jBp6amaeczz6ZT.png" alt="image"></p><p>创建大模型组件，并填入模型，国内推荐使用硅基流动。</p><p>在大模型组件中填入模型，填入系统提示词，核心目的是预期输出合理且可控，不要有多余的输出，测试的系统提示词如下(并不能很好的获取到目标方法名，需要后期再调试)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## 角色</span><br><span class="hljs-string">你是一位专业的桌面助理</span><br><span class="hljs-comment">## 任务</span><br><span class="hljs-string">当用户发送查询桌面的请求时，你可以根据对话信息检查是否返回一个调用方法</span><br><span class="hljs-comment">## 当前支持的方法表</span><br><span class="hljs-string">发起桌面请求</span> <span class="hljs-string">=</span> <span class="hljs-string">destop_get</span><br><span class="hljs-comment">## 注意</span><br><span class="hljs-string">不需要</span> <span class="hljs-string">直接回答用户请求，只需要返回一个具体的执行方法</span><br></code></pre></td></tr></table></figure><p>在后续添加自定义组件作为节点， 接收大模型的返回作为输入的参数，进行后续执行</p><p><img src="https://i.111666.best/image/TUxQf8y6eXGsVkuHSLivNL.png" alt="image"></p><p>一个基础的工作链条  启动大模型→发起请求→ 根据请求给出需要执行的方法→传递给插件执行方法→返回执行结果</p><p>大模型正确识别方法名，插件解析方法，执行对应方法。向本地启动的服务器发送请求。得到响应返回结果到对话框</p><p><img src="https://i.111666.best/image/hdRpQxHTCHkU6fLsuc3BTm.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker容器镜像源</title>
    <link href="/2025/03/21/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <url>/2025/03/21/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-容器镜像拉取的问题"><a href="#Docker-容器镜像拉取的问题" class="headerlink" title="Docker 容器镜像拉取的问题"></a>Docker 容器镜像拉取的问题</h2><p>使用docker pull 或者 docker compose up -d 拉取镜像时，经常会遇到以下问题。</p><p>Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/">https://registry-1.docker.io/v2/</a>“: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p><p>原因是镜像源失效或者速率不够导致超时</p><p>绝大部分的文章都不用看，因为失效很快</p><p>可以在Github上关注这个项目随时更新源</p><p><a href="https://github.com/dongyubin/DockerHub">https://github.com/dongyubin/DockerHub</a></p><p>然后修改本地daemon.json 配置</p><p>cat &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>   <span class="hljs-string">&quot;https://docker.mybacc.com&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-string">&quot;https://docker.1ms.run&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-string">&quot;https://dytt.online&quot;</span><br> <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>重启daemon和docker 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl restart docker <br></code></pre></td></tr></table></figure><h2 id="顺便记录下Podman的源配置"><a href="#顺便记录下Podman的源配置" class="headerlink" title="顺便记录下Podman的源配置"></a>顺便记录下Podman的源配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ containers]# <span class="hljs-built_in">cat</span> /etc/containers/registries.conf | grep -v <span class="hljs-string">&quot;#&quot;</span><br><br>unqualified-search-registries = [<span class="hljs-string">&quot;registry.access.redhat.com&quot;</span>, <span class="hljs-string">&quot;registry.redhat.io&quot;</span>, <span class="hljs-string">&quot;docker.io&quot;</span>]<br><br><br><br>[[registry]]<br>prefix = <span class="hljs-string">&quot;docker.io&quot;</span><br>location = <span class="hljs-string">&quot;docker.1ms.run&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br>[[registry.mirror]]<br>location = <span class="hljs-string">&quot;docker.mybacc.com&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br>[[registry.mirror]]<br>location = <span class="hljs-string">&quot;docker.1ms.run&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br>[[registry.mirror]]<br>location = <span class="hljs-string">&quot;dytt.online&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br><br><br>short-name-mode = <span class="hljs-string">&quot;permissive&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于HEXO的博客搭建</title>
    <link href="/2025/03/21/%E5%9F%BA%E4%BA%8EHEXO%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/03/21/%E5%9F%BA%E4%BA%8EHEXO%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="基于HEXO-FLUID-样式的博客搭建"><a href="#基于HEXO-FLUID-样式的博客搭建" class="headerlink" title="基于HEXO+FLUID 样式的博客搭建"></a>基于HEXO+FLUID 样式的博客搭建</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>7.3版本的Hexo 要求node.js 的版本在18.0以上，centos7 所能拉取到的node.js 版本在11.0 。考虑到需要处理依赖所以直接换成了alibaba cloud 系统</p></li><li><p>安装 npm和hexo-cli 命令行工具</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install npm<br>npm install hexo-cli -g<br></code></pre></td></tr></table></figure></li><li><p>Github 集成</p><p> 因为后续需要设置到github page ，所以先配置git和密钥</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>ssh-keygen  <span class="hljs-comment"># 使用ssh-keygen 创建密钥</span><br><span class="hljs-built_in">cat</span> /root/.ssh/id_rsa.pub  <span class="hljs-comment"># 从目录文件夹查询公钥， </span><br><span class="hljs-comment"># 配置到github  -&gt; settings -&gt; SSH and GPG keys -&gt; New SSH key</span><br><br>dnf install git   <span class="hljs-comment"># 安装git</span><br><br>git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;邮箱&quot;</span><br>    <br>ssh -T git@github.com  <span class="hljs-comment"># 测试到github的连接</span><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="HEXO-框架安装"><a href="#HEXO-框架安装" class="headerlink" title="HEXO 框架安装"></a>HEXO 框架安装</h2><p>初始化hexo ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myhexo/  <span class="hljs-comment">#  初始化文件夹</span><br><span class="hljs-built_in">cd</span> myhexo  <span class="hljs-comment"># 移动到博客目录</span><br>npm install hexo-deployer-git --save  <span class="hljs-comment"># 安装并存储hexo项目</span><br></code></pre></td></tr></table></figure><p>修改部署方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>         <span class="hljs-comment"># 类型是 git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span>    <br>  <span class="hljs-comment">#在github上创建username.github.io的仓库,确认仓库名是否一致！ </span><br>  <span class="hljs-comment">#这里可以使用ssh的方式，也可以使用https的方式，但是ssh更稳定</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span> <span class="hljs-comment"># 设置分支为master</span><br><br></code></pre></td></tr></table></figure><p>修改后 使用 hexo deploy 进行安装，安装过程中会提示输入用户名和密码‘</p><p>用户名就是登录账户的名称</p><p>密码需要通过 settings → Developer Settings → Personal access tokens → Generate new token 创建token  作为密码 </p><p>等待几分钟可以通过访问 <a href="https://username.github.io/">https://username.github.io</a> 查看是否创建成功</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>hexo 支持多种样式风格的插件</p><p>以安装fluid为例 ， 安装插件 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">--save</span> <span class="hljs-string">hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>这时可以将 下载对应主题文件 放到theme 文件夹，在_config.yml配置theme 为fluid</p><p>或者直接在根目录创建 _config.fluid.yml  来进行配置。 _config.fluid.yml 的配置优先级高于 _config.yml  。 一些基本配置 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#标签页主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#语言</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#时区</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#主题</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about  <span class="hljs-comment"># 关于页需要自行创建</span><br></code></pre></td></tr></table></figure><p>扩展配置可以参考 ： <a href="https://fluid-dev.github.io/hexo-fluid-docs/">https://fluid-dev.github.io/hexo-fluid-docs/</a></p><p>在调试时 可以通过</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">g</span> <span class="hljs-string">--debug</span> <span class="hljs-string">来查看具体的配置信息</span>  <span class="hljs-string">如归档标签页的配置信息</span><br><br>  <span class="hljs-attr">&quot;archive&quot;:</span> &#123;<br>    <span class="hljs-attr">&quot;banner_img&quot;:</span> <span class="hljs-string">&quot;/img/default.png&quot;</span>,   <span class="hljs-comment"># 指定背景图片</span><br>    <span class="hljs-attr">&quot;banner_img_height&quot;:</span> <span class="hljs-number">60</span>,  <span class="hljs-comment"># 图片占全屏的比例</span><br>    <span class="hljs-attr">&quot;banner_mask_alpha&quot;:</span> <span class="hljs-number">0.3</span>   <span class="hljs-comment"># 不透明度</span><br>  &#125;<span class="hljs-string">,</span><br><br></code></pre></td></tr></table></figure><p>每次修改后需要使用hexo clean 再进行 生成和部署。</p><p>然后就可以开始 创建文章了,创建后会提示你md文件的地址，就可以进行编辑了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>相关内容 ： <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
