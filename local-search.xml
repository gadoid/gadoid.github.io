<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络通信基础</title>
    <link href="/2025/08/11/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/08/11/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="从MAC说起"><a href="#从MAC说起" class="headerlink" title="从MAC说起"></a>从MAC说起</h1><p><strong>MAC地址</strong>的全名是<strong>Media Access Control ，</strong>即媒体接入控制，它通常被我们理解为一个网络设备的网络身份标识，用来标识该设备在网络中的唯一身份。它由一个48位（6字节）的二进制标识符构成，通常以十六进制格式表示，用冒号或连字符分隔：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-number">00</span><span class="hljs-string">:1B:44:11:3A:B7</span> <span class="hljs-string">或</span> <span class="hljs-number">00</span><span class="hljs-string">-1B-44-11-3A-B7</span><br><br></code></pre></td></tr></table></figure><p>一些特殊的MAC地址提到不同的转发识别功能 ：</p><h3 id="广播地址"><a href="#广播地址" class="headerlink" title="广播地址"></a>广播地址</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">FF:FF:FF:FF:FF:FF</span><br><br></code></pre></td></tr></table></figure><p>用于向全端口发送数据</p><h3 id="组播地址"><a href="#组播地址" class="headerlink" title="组播地址"></a>组播地址</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">组播地址范围</span><br><br><span class="hljs-number">01</span><span class="hljs-string">:00:5E:xx:xx:xx</span>  <span class="hljs-string">←</span> <span class="hljs-string">IPv4组播</span><br><br><span class="hljs-number">33</span><span class="hljs-string">:33:xx:xx:xx:xx</span>  <span class="hljs-string">←</span> <span class="hljs-string">IPv6组播</span><br><br></code></pre></td></tr></table></figure><p>通过特殊的地址位标记，之后由组播协议进行识别</p><h3 id="单播地址"><a href="#单播地址" class="headerlink" title="单播地址"></a>单播地址</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-number">00</span><span class="hljs-string">:1B:44:11:3A:B7</span><br><br></code></pre></td></tr></table></figure><p>发送给特定设备的网络数据帧</p><p>通过以上几种MAC地址的分类和构成，我们可以总结出MAC地址的实际作用</p><ol><li>通过特殊字段设置提供特定的控制信息</li><li>通过字段的匹配度来完成控制策略</li></ol><p>对于设备来说就是</p><ol><li>路由交换设备可以根据数据帧的MAC头来判断其描述的协议信息&#x2F;或者完成端口的转发</li><li>主机设备根据MAC头来判断是否是转发给它的数据帧，如果是则交给内核层的网络协议栈处理</li></ol><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><p>一个简单的二层数据传输过程</p><p><img src="https://i.111666.best/image/5edHqxBPzIU2GwOF7MCZP5.png" alt="链路层通信"></p><p>在这个过程中，我们需要理解的重点是数据帧是否会被处理是由接收端进行控制的。发送端的任务只是将源主机构造的数据包封装链路层数据头，并转换为电信号沿物理介质发送。这意味着，MAC地址是否与目的地址一致，只是一个目的报文会被处理的充分条件，而不是必要条件。</p><h1 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h1><h2 id="冲突域"><a href="#冲突域" class="headerlink" title="冲突域"></a>冲突域</h2><p><img src="https://i.111666.best/image/JONt5KR2BCcachctrwOBvo.png" alt="冲突域"></p><p>当更多的设备需要接入网络，设备间想要相互通信，就不能只靠网线直连进行数据传递。这时出现了网桥设备。网桥设备提供了多个端口，所有接入到网桥中设备都会监听到其他设备发送到网桥中的电信号信息，之后识别目的Mac来判断自己是否是目标主机。</p><p>但此时如果多个设备同时需要向外发出信息时，就会有设备因为网络一直繁忙导致消息阻塞，这样的组网方式被称为所有的设备都处于同一个”冲突域“。</p><h2 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a>广播域</h2><p><img src="https://i.111666.best/image/M6BxDqo1fdfmGr1kqCpZ9k.png" alt="交换"></p><p>为了解决设备间数据收发的冲突问题，出现了交换机设备。当交换设备接收到来自某一端口的数据帧信息，会创建一个端口-MAC地址映射条目，放入MAC地址表中，当其他设备请求某一个目的MAC时。交换设备通过查询地址与端口的映射，将数据帧转发到目的端口。最终发送到目标主机。通过映射-转发的模式将一个多主机的冲突域拆分为多个交换机与设备之间的单一冲突域，解决了多设备间通信的冲突问题。</p><p>同时我们需要注意到，这里恰好证明了数据帧的处理是由接收端控制的。交换设备接受所有设备的MAC信息，并完成了转发处理。并不需要考虑是否与自己的端口MAC一致。</p><p>在解决了冲突域问题后，为了进一步提高传输速率。就需要过滤不需要的帧信息。我们知道目的MAC标记为广播地址的数据帧会向所有端口进行转发，但是在我们对不同设备的通信对象存在划分的情况下，就可以将广播域进行分割，使得广播信息可以得到更高效的传输。</p><h2 id="VLAN与转发策略"><a href="#VLAN与转发策略" class="headerlink" title="VLAN与转发策略"></a>VLAN与转发策略</h2><p><img src="https://i.111666.best/image/n2UrNSABanmKbgoM5FtGvm.png" alt="vlan"></p><p>vlan 是一种分割广播域的重要手段。它的原理是创建一个虚拟的局域网络，将需要被组合到一起的设备所连接的端口，加入到同一个虚拟网络中。这样当某个网络中的设备发起请求时，会匹配在对应vlan的mac地址表中查询&#x2F;转发，这样就完成了分割不同广播域的效果。</p><p>转发策略 当设备间通信需要进行跨多个交换设备的二层转发时，可以使用端口策略模配置来控制数据的转发行为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-attr">access :</span>  <br><br><span class="hljs-string">入方向:</span><br><br><span class="hljs-string">收到无tag帧</span> <span class="hljs-string">→</span> <span class="hljs-string">打上PVID标签</span> <span class="hljs-string">→</span> <span class="hljs-string">内部转发</span> <span class="hljs-string">✓</span><br><br><span class="hljs-string">收到VLAN</span> <span class="hljs-number">10</span> <span class="hljs-string">tag帧</span> <span class="hljs-string">→</span> <span class="hljs-string">剥离tag</span> <span class="hljs-string">→</span> <span class="hljs-string">打上PVID标签</span> <span class="hljs-string">→</span> <span class="hljs-string">内部转发</span> <span class="hljs-string">✓</span><br><br><span class="hljs-string">收到其他VLAN</span> <span class="hljs-string">tag帧</span> <span class="hljs-string">→</span> <span class="hljs-string">丢弃</span> <span class="hljs-string">✗</span><br><br><span class="hljs-string">出方向:</span><br><br><span class="hljs-string">剥离tag,发送无tag帧</span><br><br><span class="hljs-attr">hybird :</span><br><br><span class="hljs-string">入方向:</span><br><br><span class="hljs-string">收到无tag帧</span> <span class="hljs-string">→</span> <span class="hljs-string">打上PVID标签</span> <span class="hljs-string">→</span> <span class="hljs-string">内部转发</span><br><br><span class="hljs-string">收到有tag帧</span> <span class="hljs-string">→</span> <span class="hljs-string">保持原tag</span> <span class="hljs-string">→</span> <span class="hljs-string">内部转发（如果在允许列表中）</span><br><br><span class="hljs-string">出方向:</span><br><br><span class="hljs-string">内部帧</span> <span class="hljs-string">→</span> <span class="hljs-string">检查VLAN配置</span><br><br><span class="hljs-string">├──</span> <span class="hljs-string">Untagged</span> <span class="hljs-string">VLAN列表中</span> <span class="hljs-string">→</span> <span class="hljs-string">剥离tag</span> <span class="hljs-string">→</span> <span class="hljs-string">发送无tag帧</span>  <br><br><span class="hljs-string">└──</span> <span class="hljs-string">Tagged</span> <span class="hljs-string">VLAN列表中</span> <span class="hljs-string">→</span> <span class="hljs-string">保持tag</span> <span class="hljs-string">→</span> <span class="hljs-string">发送有tag帧</span><br><br><span class="hljs-attr">trunk:</span><br><br><span class="hljs-string">入方向:</span><br><br><span class="hljs-string">收到无tag帧</span> <span class="hljs-string">→</span> <span class="hljs-string">打上PVID标签</span> <span class="hljs-string">→</span> <span class="hljs-string">内部转发</span><br><br><span class="hljs-string">收到有tag帧</span> <span class="hljs-string">→</span> <span class="hljs-string">保持原tag</span> <span class="hljs-string">→</span> <span class="hljs-string">内部转发（如果VLAN在允许列表中）</span><br><br><span class="hljs-string">出方向:</span><br><br><span class="hljs-string">内部帧</span> <span class="hljs-string">→</span> <span class="hljs-string">检查VLAN</span> <span class="hljs-string">ID</span><br><br><span class="hljs-string">├──</span> <span class="hljs-string">等于PVID</span> <span class="hljs-string">→</span> <span class="hljs-string">剥离tag</span> <span class="hljs-string">→</span> <span class="hljs-string">发送无tag帧</span><br><br><span class="hljs-string">└──</span> <span class="hljs-string">不等于PVID</span> <span class="hljs-string">→</span> <span class="hljs-string">保持tag</span> <span class="hljs-string">→</span> <span class="hljs-string">发送有tag帧</span><br><br></code></pre></td></tr></table></figure><p><img src="https://i.111666.best/image/I5S67ZooOBz7YOmn3hHhKz.png" alt="控制策略"></p><p>以图示为例 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">host1-&gt;host5:</span><br><br><span class="hljs-string">switch1</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">switch2  switch1 outgress: access switch2 ingress:</span> <span class="hljs-string">access</span><br><br><span class="hljs-string">switch2</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">switch3  switch2 outgress: access switch3 ingress:</span> <span class="hljs-string">access</span><br><br><span class="hljs-string">switch3</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">host5    switch3 outgress:</span> <span class="hljs-string">access</span><br><br><span class="hljs-string">host2-&gt;host6:</span><br><br><span class="hljs-string">switch1</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">switch2  switch1 outgress: hybird Untagged switch2 ingress:</span> <span class="hljs-string">hybird</span><br><br><span class="hljs-string">switch2</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">switch3  switch2 outgress: hybird Tagged switch3 ingress:</span> <span class="hljs-string">hybird</span><br><br><span class="hljs-string">switch3</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">host6    switch3 outgress:</span> <span class="hljs-string">hybird</span> <span class="hljs-string">Untagged</span><br><br><span class="hljs-string">host3-&gt;host7:</span><br><br><span class="hljs-string">switch1</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">switch2  switch1 outgress: hybird Tagged switch2 ingress:</span> <span class="hljs-string">hybird</span><br><br><span class="hljs-string">switch2</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">switch3  switch2 outgress: hybird Untagged switch3 ingress:</span> <span class="hljs-string">access</span><br><br><span class="hljs-string">switch3</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">host7    switch3 outgress:</span> <span class="hljs-string">access</span><br><br><span class="hljs-string">host4-&gt;host8:</span><br><br><span class="hljs-string">switch1</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">switch2  switch1 outgress: hybird Tageed switch2 ingress:</span> <span class="hljs-string">trunk</span><br><br><span class="hljs-string">switch2</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">switch3  switch2 outgress: trunk switch3 ingress:</span> <span class="hljs-string">hybird</span><br><br><span class="hljs-string">switch3</span> <span class="hljs-string">-&gt;</span> <span class="hljs-attr">host8    switch3 outgress:</span> <span class="hljs-string">hybird</span> <span class="hljs-string">Untagged</span><br><br></code></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>虽然我们现在可以通过vlan这种帧扩展形式完成数据帧的跨设备转发过程。但是我们依然只能按照预先设置好的转发路径与目标主机通信。因为对于MAC地址通信来说，只能依赖于目的地址来完成转发过程。</p><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>这时我们就需要使用IP层的路由查询。IP层是承载于数据链路层之上的一种控制结构。在二层转发中，目的MAC是目标主机唯一的识别标识，只有确认了MAC地址，才能使目的主机接收处理该数据帧。这就导致这个通信过程中该目的MAC地址需要被正确保留。也就只能通过转发途径完成数据的传输。而通过使用IP 我们就可以在源&#x2F;目两端更加灵活的处理通信过程。</p><h2 id="路由-1"><a href="#路由-1" class="headerlink" title="路由"></a>路由</h2><p><img src="https://i.111666.best/image/irUPaacqoTdTKOw61AtANB.png" alt="路由"></p><p>因为IP层是承载于链路层之上的，所以每一个网关实体都必然是具备MAC地址的。因为它需要先做“目的MAC“是否是”自身MAC” 的判断，才能进行进一步的解析。以静态路由为例。一般的数据通信架构由多个交换机最终连接到路由器的端口上，这个端口被称为网关。所有受它管理的主机都要通过它完成数据的转发。</p><p>当 一个主机发起请求时，由协议栈组装具有目的IP源IP的数据包。之后</p><ol><li>查询本地路由，向最合适的路由网关转发（没有合适的就发往默认网关）。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br>[<span class="hljs-string">网关MAC</span>][<span class="hljs-string">主机MAC</span>][<span class="hljs-number">0x0800</span>][<span class="hljs-string">IP:目的IP/源IP</span>][<span class="hljs-string">数据</span>][<span class="hljs-string">CRC</span>]<br><br></code></pre></td></tr></table></figure><ol><li>网关收到数据包后检查MAC地址，与自身MAC地址一致，则检查目的IP信息，与本地的路由表进行匹配，选择最合适的路由表项进行路由</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br>[<span class="hljs-string">下一跳路由器MAC</span>][<span class="hljs-string">网关MAC</span>][<span class="hljs-number">0x0800</span>][<span class="hljs-string">IP:目的IP/源IP</span>][<span class="hljs-string">数据</span>][<span class="hljs-string">CRC</span>]<br><br></code></pre></td></tr></table></figure><ol><li>最终数据包被路由到目标网段的网关，目标网段网关查询ARP表项，获取目的IP与目的主机的MAC映射，构造数据帧发送给目的主机</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br>[<span class="hljs-string">目标主机MAC</span>][<span class="hljs-string">目标网关MAC</span>][<span class="hljs-number">0x0800</span>][<span class="hljs-string">IP:目的IP/源IP</span>][<span class="hljs-string">数据</span>][<span class="hljs-string">CRC</span>]<br><br></code></pre></td></tr></table></figure><p>从这里我们可以看出来当数据包离开自身网段时，数据帧中就不再持有源主机的MAC地址。而是通过匹配网关持有的路由表信息，来完成路由过程，因为路由过程是一个拆&#x2F;封装数据包的过程，所以不能直接通过硬件转发，而是需要使用软件解析目的MAC，并替换源&#x2F;目MAC 来完成的二层网络传输，以达到持有“目标网段”的下一跳设备上。最终完成的数据传输过程</p><h1 id="NAT（网络地址转换）技术介绍"><a href="#NAT（网络地址转换）技术介绍" class="headerlink" title="NAT（网络地址转换）技术介绍"></a>NAT（网络地址转换）技术介绍</h1><h2 id="NAT的作用与价值"><a href="#NAT的作用与价值" class="headerlink" title="NAT的作用与价值"></a>NAT的作用与价值</h2><p>IPv4地址资源有限（32位地址空间约43亿个地址），无法满足全球设备联网需求。NAT技术通过地址复用和转换，有效缓解了IP地址短缺问题，同时为内网用户提供了安全隐私保护。</p><p><strong>主要优势</strong>：</p><p>-<strong>地址复用</strong>：多个内网设备共享少量公网IP地址</p><p>-<strong>安全隐私</strong>：隐藏内网拓扑结构和真实IP地址</p><p>-<strong>成本节约</strong>：减少公网IP地址的购买和维护成本</p><h2 id="NAT工作原理"><a href="#NAT工作原理" class="headerlink" title="NAT工作原理"></a>NAT工作原理</h2><p>NAT本质上是一个<strong>地址和端口的映射转换过程</strong>：</p><h3 id="出站流量处理"><a href="#出站流量处理" class="headerlink" title="出站流量处理"></a>出站流量处理</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">内网发起请求时：</span><br><br>[<span class="hljs-string">内网IP:端口</span>] <span class="hljs-string">→</span> <span class="hljs-string">NAT设备</span> <span class="hljs-string">→</span> [<span class="hljs-string">公网IP:端口</span>] <span class="hljs-string">→</span> <span class="hljs-string">外网服务器</span><br><br></code></pre></td></tr></table></figure><h3 id="入站流量处理"><a href="#入站流量处理" class="headerlink" title="入站流量处理"></a>入站流量处理</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">外网响应返回时：</span><br><br><span class="hljs-string">外网服务器</span> <span class="hljs-string">→</span> [<span class="hljs-string">公网IP:端口</span>] <span class="hljs-string">→</span> <span class="hljs-string">NAT设备</span> <span class="hljs-string">→</span> [<span class="hljs-string">内网IP:端口</span>]<br><br></code></pre></td></tr></table></figure><h3 id="NAT转换表示例"><a href="#NAT转换表示例" class="headerlink" title="NAT转换表示例"></a>NAT转换表示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">转换前（内网）</span>          <span class="hljs-string">转换后（公网）</span><br><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.100</span><span class="hljs-string">:3000</span>  <span class="hljs-string">↔</span>  <span class="hljs-number">203.0</span><span class="hljs-number">.113</span><span class="hljs-number">.1</span><span class="hljs-string">:50000</span><br><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.101</span><span class="hljs-string">:8080</span>  <span class="hljs-string">↔</span>  <span class="hljs-number">203.0</span><span class="hljs-number">.113</span><span class="hljs-number">.1</span><span class="hljs-string">:50001</span>  <br><br><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.102</span><span class="hljs-string">:443</span>   <span class="hljs-string">↔</span>  <span class="hljs-number">203.0</span><span class="hljs-number">.113</span><span class="hljs-number">.1</span><span class="hljs-string">:50002</span><br><br></code></pre></td></tr></table></figure><h2 id="NAT的三种主要实现方式"><a href="#NAT的三种主要实现方式" class="headerlink" title="NAT的三种主要实现方式"></a>NAT的三种主要实现方式</h2><h3 id="1-静态NAT（Static-NAT）"><a href="#1-静态NAT（Static-NAT）" class="headerlink" title="1. 静态NAT（Static NAT）"></a>1. 静态NAT（Static NAT）</h3><p><strong>特点</strong>：一对一固定映射关系</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">配置示例：</span><br><br><span class="hljs-string">内网192.168.1.10</span> <span class="hljs-string">←</span> <span class="hljs-string">固定映射</span> <span class="hljs-string">→</span> <span class="hljs-string">公网203.0.113.10</span><br><br><span class="hljs-string">内网192.168.1.11</span> <span class="hljs-string">←</span> <span class="hljs-string">固定映射</span> <span class="hljs-string">→</span> <span class="hljs-string">公网203.0.113.11</span><br><br></code></pre></td></tr></table></figure><h3 id="2-动态NAT（Dynamic-NAT）"><a href="#2-动态NAT（Dynamic-NAT）" class="headerlink" title="2. 动态NAT（Dynamic NAT）"></a>2. 动态NAT（Dynamic NAT）</h3><p><strong>特点</strong>：从公网IP地址池中动态分配</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">工作流程：</span><br><br><span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-string">内网主机发起连接请求</span><br><br><span class="hljs-number">2</span><span class="hljs-string">.</span> <span class="hljs-string">NAT从地址池中选择可用公网IP</span><br><br><span class="hljs-number">3</span><span class="hljs-string">.</span> <span class="hljs-string">建立临时映射关系</span><br><br><span class="hljs-number">4</span><span class="hljs-string">.</span> <span class="hljs-string">连接结束后释放公网IP回地址池</span><br><br></code></pre></td></tr></table></figure><p><strong>适用场景</strong>：拥有多个公网IP，需要为内网提供临时外网访问</p><h3 id="3-PAT（端口地址转换）-NAPT"><a href="#3-PAT（端口地址转换）-NAPT" class="headerlink" title="3. PAT（端口地址转换）&#x2F;NAPT"></a>3. PAT（端口地址转换）&#x2F;NAPT</h3><p><strong>特点</strong>：单个公网IP + 不同端口号实现多用户共享</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">典型家庭/企业场景：</span><br><br><span class="hljs-string">内网192.168.1.100:3000</span> <span class="hljs-string">→</span> <span class="hljs-string">公网IP:50000</span><br><br><span class="hljs-string">内网192.168.1.101:8080</span> <span class="hljs-string">→</span> <span class="hljs-string">公网IP:50001</span><br><br><span class="hljs-string">内网192.168.1.102:443</span>  <span class="hljs-string">→</span> <span class="hljs-string">公网IP:50002</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernete 控制器与工作负载策略</title>
    <link href="/2025/08/08/Kubernete-%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%8E%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E7%AD%96%E7%95%A5/"/>
    <url>/2025/08/08/Kubernete-%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%8E%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="工作负载概述"><a href="#工作负载概述" class="headerlink" title="工作负载概述"></a>工作负载概述</h1><p>Pod对象不具备自动故障恢复能力，而且对需要水平扩容的多副本管理也非常复杂。kubernetes通过定义管理Pod的工作负载资源来完成对于Pod的创建，调度，水平扩&#x2F;缩容，故障恢复等生命周期管理的工作</p><h1 id="RC控制器"><a href="#RC控制器" class="headerlink" title="RC控制器"></a>RC控制器</h1><p>RC独立于所控制的Pod并通过标签的松耦合关系控制目标Pod实例的创建和销毁。</p><h1 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h1><p>ReplicaSet在RC的基础上，提供了更灵活的标签选择模式。RS可以一次性选择多个标签，并且选择多个不同的版本进行部署，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchLabels:</span><br><span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">matchExpression:</span><br><span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">tier</span> , <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span> , <span class="hljs-attr">values:</span> [<span class="hljs-string">frontend</span>]&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchLabels:</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br><span class="hljs-attr">matchExpression:</span><br><span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">version</span> , <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span> , <span class="hljs-attr">values:</span> [<span class="hljs-string">v1</span>,<span class="hljs-string">v2</span>]&#125;<br></code></pre></td></tr></table></figure><h2 id="特殊需求"><a href="#特殊需求" class="headerlink" title="特殊需求"></a>特殊需求</h2><ol><li>不同Pod之间的亲和性， 比如MySQL数据库与Redis中间件不能被调度到同一个目标Node上，或者两个需要紧密连接的微服务Pod必须调度到同一个Node上，以实现本地文件共享或本地网络通信等需求。</li><li>有状态集群的调度。对于ZooKeeper，Elasticsearch，MongoDB，Kafka等有状态集群，虽然集群中的每个Node看起来都是相同的，但每个Node都必须有明确的不变的唯一身份标识</li><li>在每个Node上调度并且仅仅创建一个Pod副本，这种调度通常用于系统监控相关的Pod</li><li>批处理作业，需要创建多个Pod副本来协同工作，当这些Pod副本都完成自己的任务时，整个批处理作业就结束了。</li><li>控制器与Pod间是松绑定关系，如果控制Pod与控制器间的控制逻辑</li></ol><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><blockquote><p>面向无状态应用的Pod副本集管理</p></blockquote><p>Deployment是一种面向无状态应用的多个Pod副本进行自动化管理的工作负载控制器。无状态应用通常要求每个Pod副本的工作机制相同，提供的服务也相同。Deployment在部署Pod之后会持续监控副本的运行状况和数量，始终保证用户指定的副本数量的Pod正常运行。</p><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># nginx-deployment.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">nginx-deployment</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchLabels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">template:</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><br></code></pre></td></tr></table></figure><p>创建deployment</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl create -f nginx-deployment.yaml</span><br><span class="hljs-string">deployment.apps/nginx-deployment</span> <span class="hljs-string">created</span><br></code></pre></td></tr></table></figure><p>查看deployment状态</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get deployments</span><br><span class="hljs-string">NAME</span>                      <span class="hljs-string">READY</span>        <span class="hljs-string">UP-TO-DATE</span>      <span class="hljs-string">AVAILABLE</span>       <span class="hljs-string">AGE</span><br><span class="hljs-string">nginx-deployment</span>          <span class="hljs-number">3</span><span class="hljs-string">/3</span>          <span class="hljs-number">3</span>               <span class="hljs-number">3</span>               <span class="hljs-string">16s</span>  <br></code></pre></td></tr></table></figure><p>NAME: Deployment的名称</p><p>READY: 处于Ready状态的Pod副本数量，“&#x2F;” 右侧为期望的Pod副本数量，即spec.replicas字段的设置值</p><p>UP-TO-DATE: 更新到最新Pod模板的Pod副本数量</p><p>AVAILABLE: 可供用户使用的Pod副本数量</p><p>AGE: Deployment的运行时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get replicasets</span><br><span class="hljs-string">NAME</span>                         <span class="hljs-string">DESIRED</span>       <span class="hljs-string">CURRENT</span>        <span class="hljs-string">READY</span>       <span class="hljs-string">AGE</span><br><span class="hljs-string">nginx-deployment-4087004483</span>  <span class="hljs-number">3</span>             <span class="hljs-number">3</span>              <span class="hljs-number">3</span>           <span class="hljs-string">53s</span><br></code></pre></td></tr></table></figure><p>NAME : ReplicaSet的名称</p><p>DESIRED: 期望的副本数量</p><p>CURRENT: 当前处于运行状态的Pod副本数量</p><p>READY: 处于Ready状态的Pod副本数量</p><p>AGE: Deployment的运行时间</p><p>查看pod运行状态</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get pods</span><br><span class="hljs-string">NAME</span>                                   <span class="hljs-string">READY</span>        <span class="hljs-string">STATUS</span>           <span class="hljs-string">RESTARTS</span>     <span class="hljs-string">AGE</span><br><span class="hljs-string">nginx-deployment-4087004473-9jqqs</span>      <span class="hljs-number">1</span><span class="hljs-string">/1</span>          <span class="hljs-string">Running</span>          <span class="hljs-number">0</span>            <span class="hljs-string">1m</span><br><span class="hljs-string">nginx-deployment-4087004473-cq0cf</span>      <span class="hljs-number">1</span><span class="hljs-string">/1</span>          <span class="hljs-string">Running</span>          <span class="hljs-number">0</span>            <span class="hljs-string">1m</span><br><span class="hljs-string">nginx-deployment-4087004473-vxn56</span>      <span class="hljs-number">1</span><span class="hljs-string">/1</span>          <span class="hljs-string">Running</span>          <span class="hljs-number">0</span>            <span class="hljs-string">1m</span>     <br></code></pre></td></tr></table></figure><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><ul><li>selector : 标签选择器，用于关联具有指定标签的Pod列表</li><li>template : Pod模板，其中的配置项就是Pod的定义，作为Deployment资源的一部分存在，无须在设置apiVersion 和 kind这两个元素</li><li>replicas : 期望的Pod副本数量，默认值为1。通过kubectl scale命令调整后的副本数量将会覆盖初始设置的值。如果使用自动扩缩容来自动调整Pod副本数量，则不需要设置这个值</li><li>strategy : 更新策略，可选项包括Recreate和RollingUpdate</li><li>minReadySeconds : Pod最短就绪时间，达到这个时间，系统才会设置Pod为Ready状态</li><li>progressDeadlineSeconds : 设置未能处于部署完成状态的超时时间，默认值为600s。达到这个时间之后，系统将设置Progressing的状态为False,并将Reason设置为ProgressDeadlineExceeded</li><li>revisionHistoryLimit: 修订历史最大数量，每个修订版本都有一个对应的ReplicaSet资源，保存地过多将消耗更多资源</li><li>paused : 设置为true来表示部署过程处于暂停状态，设置为false表示处于正常部署过程。</li><li>matchLabels: 设置一个或多个标签的值，以key:value 格式表示，如果设置了多个标签，需要满足全部条件才能与Pod关联成功</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchLabels:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br></code></pre></td></tr></table></figure><ul><li>matchExpressions: 设置一个或多个标签取值表达式，以（key,operation,values）三元组格式进行设置，其中values 可以设置多个值。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchExpressions:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">role</span><br><span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br><span class="hljs-attr">values:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">manager</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">env</span><br><span class="hljs-attr">operator:</span> <span class="hljs-string">NotIn</span><br><span class="hljs-attr">values:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">prod</span><br></code></pre></td></tr></table></figure><h2 id="Deployment的更新"><a href="#Deployment的更新" class="headerlink" title="Deployment的更新"></a>Deployment的更新</h2><p>配置更新过程</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># nginx-deployment.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">app/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">nginx-deployment</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchLabels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">template:</span> <br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>查询已运行的Pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get pods</span><br><span class="hljs-string">NAME</span>                                   <span class="hljs-string">READY</span>        <span class="hljs-string">STATUS</span>           <span class="hljs-string">RESTARTS</span>     <span class="hljs-string">AGE</span><br><span class="hljs-string">nginx-deployment-4087004473-9jqqs</span>      <span class="hljs-number">1</span><span class="hljs-string">/1</span>          <span class="hljs-string">Running</span>          <span class="hljs-number">0</span>            <span class="hljs-string">1m</span><br><span class="hljs-string">nginx-deployment-4087004473-cq0cf</span>      <span class="hljs-number">1</span><span class="hljs-string">/1</span>          <span class="hljs-string">Running</span>          <span class="hljs-number">0</span>            <span class="hljs-string">1m</span><br><span class="hljs-string">nginx-deployment-4087004473-vxn56</span>      <span class="hljs-number">1</span><span class="hljs-string">/1</span>          <span class="hljs-string">Running</span>          <span class="hljs-number">0</span>            <span class="hljs-string">1m</span>     <br></code></pre></td></tr></table></figure><p>更新nginx的镜像版本</p><ol><li>通过命令好修改</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">set</span> <span class="hljs-string">image</span> <span class="hljs-string">deployment/nginx-deployment</span> <span class="hljs-string">nginx=nginx:1.9.1</span><br><span class="hljs-string">deployment.apps/nginx-deployment</span> <span class="hljs-string">image</span> <span class="hljs-string">updated</span><br></code></pre></td></tr></table></figure><ol><li>使用kubectl edit 编辑deployment配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">edit</span> <span class="hljs-string">deployment/nginx-deployment</span><br><span class="hljs-string">deployment.apps/nginx-deployment</span> <span class="hljs-string">edited</span><br></code></pre></td></tr></table></figure><p>Deployment 通过创建一个新的ReplicaSet ，先扩展创建新版本的Pod ，如何将旧版本的Pod进行对应缩减，同时维持替换过程中，至少有期望副本数量-1的Pod 是可用的。</p><h3 id="更新策略"><a href="#更新策略" class="headerlink" title="更新策略"></a>更新策略</h3><ol><li>Recreate: 设置spec.strategy.type&#x3D;Recreate表示 在更新时需要先杀死所有旧Pod在创建更新</li><li>RollingUpdate: 设置spec.strategy.type&#x3D;RollingUpdate表示 以滚动更新的方式逐个更新Pod</li></ol><h2 id="Deployment的回滚"><a href="#Deployment的回滚" class="headerlink" title="Deployment的回滚"></a>Deployment的回滚</h2><p>回滚过程</p><p>查询回滚历史</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">rollout</span> <span class="hljs-string">history</span> <span class="hljs-string">deployment/nginx-deployment</span><br><span class="hljs-string">deployments</span> <span class="hljs-string">&quot;nginx-deployment&quot;</span><br><span class="hljs-string">REVISION</span>        <span class="hljs-string">CHANGE-CAUSE</span><br><span class="hljs-number">1</span>               <span class="hljs-string">...</span><br><span class="hljs-number">2</span>               <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>查询之前的版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">rollout</span> <span class="hljs-string">history</span> <span class="hljs-string">deployment/nginx-deployment</span> <span class="hljs-string">--revision=3</span><br></code></pre></td></tr></table></figure><p>回滚</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">rollout</span> <span class="hljs-string">undo</span> <span class="hljs-string">deployment/nginx-deployment</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">roolout</span> <span class="hljs-string">undo</span> <span class="hljs-string">deployment/nginx-deployment</span> <span class="hljs-string">--to-revision=2</span><br></code></pre></td></tr></table></figure><h2 id="Deployment的暂停与恢复"><a href="#Deployment的暂停与恢复" class="headerlink" title="Deployment的暂停与恢复"></a>Deployment的暂停与恢复</h2><p>通过kubectl rollout pause 暂停Deployment的更新操作</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">rollout</span> <span class="hljs-string">pause</span> <span class="hljs-string">deployment/nginx-deployment</span><br><span class="hljs-string">deployment.apps/nginx-deployment</span> <span class="hljs-string">paused</span><br></code></pre></td></tr></table></figure><p>使用kubectl rollout resume deploy nginx-deployment恢复更新</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">rollout</span> <span class="hljs-string">resume</span> <span class="hljs-string">deploy</span> <span class="hljs-string">nginx-deployment</span><br><span class="hljs-string">deployment.apps/nginx-deloyment</span> <span class="hljs-string">resume</span><br></code></pre></td></tr></table></figure><p>期间可以对deployment进行修改而不会触发deployment的更新</p><h2 id="Deployment的生命周期"><a href="#Deployment的生命周期" class="headerlink" title="Deployment的生命周期"></a>Deployment的生命周期</h2><h3 id="Progressing"><a href="#Progressing" class="headerlink" title="Progressing"></a>Progressing</h3><ul><li>正在创建新的ReplicaSet</li><li>正在创建最新的ReplicaSet</li><li>正在为旧的RelicaSet进行水平缩容</li><li>新的Pod处于Ready或者Available状态</li></ul><h3 id="Complete"><a href="#Complete" class="headerlink" title="Complete"></a>Complete</h3><ul><li>最新版本的ReplicaSet已部署完成</li><li>Pod副本数量达到期望副本数量，并且都处于可用状态</li><li>没有旧的Pod副本还在运行</li></ul><h3 id="Failed"><a href="#Failed" class="headerlink" title="Failed"></a>Failed</h3><ul><li>容器镜像下载失败</li><li>Pod所需的资源配额一直不足</li><li>启动Pod所需的权限不足</li><li>资源限制范围LimitRange配置不正确</li><li>Pod的服务就绪探针一直失败</li><li>容器应用启动一直失败</li></ul><h1 id="DeamonSet"><a href="#DeamonSet" class="headerlink" title="DeamonSet"></a>DeamonSet</h1><p>DeamonSet用于管理集群中的每个Node上仅运行一个Pod副本，当新增Node或删除Node时 会自动增删Node上的副本</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>在每个Node上都运行一个共享存储驱动的守护进程</li><li>在每个Node上都运行一个日志采集程序，采集Node上全部容器的日志</li><li>在每个Node上都运行一个性能监控程序，采集Node上容器和操作系统的运行性能数据</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DeamonSet</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">fluentd</span><br><span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">k8s-app:</span> <span class="hljs-string">fluentd</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchLabels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">fluentd</span><br><span class="hljs-attr">template:</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">fluentd</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">fluentd</span><br><span class="hljs-attr">resources:</span><br><span class="hljs-attr">limits:</span> <br><span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br><span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br><span class="hljs-attr">requests:</span><br><span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br><span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br><span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/log</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br><span class="hljs-attr">hostPath:</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">/var/log</span><br></code></pre></td></tr></table></figure><p>创建DeamonSet</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl create -f fluentd.yaml</span><br><span class="hljs-string">daemonset.apps/fluentd</span> <span class="hljs-string">created</span><br></code></pre></td></tr></table></figure><h2 id="配置信息-1"><a href="#配置信息-1" class="headerlink" title="配置信息"></a>配置信息</h2><ul><li>selector: 标签选择器，用于关联具有指定标签的Pod列表</li><li>template: Pod模板，配置项就是Pod的定义</li><li>updateStratgy: 更新策略，可选项包括OnDelete和RollingUpdate</li><li>minReadySecond: Pod最短就绪时间</li><li>revisionHistoryLimit: 修订历史最大数量</li></ul><h2 id="更新策略-1"><a href="#更新策略-1" class="headerlink" title="更新策略"></a>更新策略</h2><ul><li>OnDelete : 旧版本需要用户手动删除才能触发新的创建</li><li>RollingUpdate : 旧版本自动被杀掉，然后创建新版本的Pod</li></ul><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><p>与Deploy类似</p><h1 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h1><blockquote><p>面向有状态应用的Pod副本管理</p></blockquote><p>由StatefulSet管理的Pod 意味着每个Pod副本都应该具有唯一不变的身份标识，例如ID或者服务名称；多个Pod副本不是对等无差别的，而是相互之间可能需要通信来实现某种功能。以及需要独立的持久化存储，以及多个Pod可能需要按固定的顺序逐个启动扽业务需求</p><p>StatefulSet 提供了以下功能</p><ul><li>每个Pod 都具有唯一且不变的身份标识，包括ID和网络访问地址</li><li>为每个Pod都配置稳定的持久化存储</li><li>对多个Pod提供有序的，优雅的部署和扩缩容等管理功能</li><li>对多个Pod提供有序的，优雅的滚动更新等管理功能</li></ul><p>限制：</p><ul><li>为每个Pod配置的持久化存储必须是PVC类型的共享存储</li><li>删除Pod时不会删除关联的后端存储，主要考虑的是容器应用的数据通常都具有业务价值</li><li>必须创建一个Headless Service，用于创建每个Pod的网络访问地址</li><li>删除StatefulSet资源时，系统不保证Pod终止</li><li>使用OrderedReady 策略滚动更新时，如果某个Pod一直无法Ready可能需要人工干预</li></ul><h2 id="配置信息-2"><a href="#配置信息-2" class="headerlink" title="配置信息"></a>配置信息</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># nginx-statefulset.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchLabels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">servicename:</span> <span class="hljs-string">&quot;nginx&quot;</span><br><span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">minReadySeconds:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">template:</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">porsts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">www</span><br><span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html</span><br><span class="hljs-attr">volumeClaimTemplates:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">www</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">storageClassName:</span> <span class="hljs-string">&quot;nginx-storage-class&quot;</span><br><span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br><span class="hljs-attr">resources:</span><br><span class="hljs-attr">requests:</span><br><span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span><br><span class="hljs-string">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span> <br><span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br><span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br></code></pre></td></tr></table></figure><ul><li>selector: 标签选择器，用于关联具有指定标签的Pod列表</li><li>template: Pod模板，配置项就是Pod的定义</li><li>updateStratgy: 更新策略，可选项包括OnDelete和RollingUpdate</li><li>minReadySeconds: Pod最短就绪时间</li><li>podManagementPolicy: Pod管理策略<ul><li>OrderedReady  按顺序创建</li><li>Parallel  并行创建</li></ul></li><li>volumeClaimTemplates: 后端存储的PVC模板</li><li>serviceName : 关联的无头服务名称</li><li>replicas : Pod副本数量</li><li>persistentVolumeClaimRetentionPolicy: PVC存储的保留策略</li><li>ordinals.start: Pod名称的起始序号</li></ul><h3 id="创建Pod唯一稳定的网络访问地址"><a href="#创建Pod唯一稳定的网络访问地址" class="headerlink" title="创建Pod唯一稳定的网络访问地址"></a>创建Pod唯一稳定的网络访问地址</h3><p>查看Headless Service信息，可以看到服务后端Endpoints列表中包含了每个Pod的IP地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get service nginx</span><br><span class="hljs-string">NAME</span>      <span class="hljs-string">TYPE</span>              <span class="hljs-string">CLUSTER-IP</span>         <span class="hljs-string">EXTERNAL-IP</span>      <span class="hljs-string">PORT(S)</span>     <span class="hljs-string">AGE</span><br><span class="hljs-string">nginx</span>     <span class="hljs-string">ClusterIP</span>         <span class="hljs-string">None</span>               <span class="hljs-string">&lt;none&gt;</span>           <span class="hljs-number">80</span><span class="hljs-string">/TCP</span>      <span class="hljs-string">20m</span><br><br><span class="hljs-comment"># kubectl describe service nginx</span><br><span class="hljs-attr">Name:</span>                   <span class="hljs-string">nginx</span><br><span class="hljs-attr">Namespace:</span>              <span class="hljs-string">default</span><br><span class="hljs-attr">Labels:</span>                 <span class="hljs-string">app=nginx</span><br><span class="hljs-attr">Annotations:</span>            <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Selector:</span>               <span class="hljs-string">app=nginx</span><br><span class="hljs-attr">Type:</span>                   <span class="hljs-string">ClusterIP</span><br><span class="hljs-attr">IP Family Policy:</span>       <span class="hljs-string">SingleStack</span><br><span class="hljs-attr">IP Families:</span>            <span class="hljs-string">IPv4</span><br><span class="hljs-attr">IP:</span>                     <span class="hljs-string">None</span><br><span class="hljs-attr">IPs:</span>                    <span class="hljs-string">None</span><br><span class="hljs-attr">Port:</span>                   <span class="hljs-string">web</span>  <span class="hljs-number">80</span><span class="hljs-string">/TCP</span><br><span class="hljs-attr">TargetPort:</span>             <span class="hljs-number">80</span><span class="hljs-string">/TCP</span><br><span class="hljs-attr">Endpoints:</span>              <span class="hljs-number">10.1</span><span class="hljs-number">.95</span><span class="hljs-number">.26</span><span class="hljs-string">:80,10.1.95.28:80,10.1.95.39:80</span><br><span class="hljs-attr">Session Affinity:</span>       <span class="hljs-string">None</span><br><span class="hljs-attr">Events:</span>                 <span class="hljs-string">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><p>StatefulSet会将 无头服务名与Pod名组合成服务访问地址，以DNS域名的格式进行表示</p><p>结构类似为<code>&lt;pod-name&gt;</code>.<code>&lt;service-name&gt;</code>.<code>&lt;namespace&gt;</code>.svc.<code>&lt;clusterDomain&gt;</code></p><p>后端存储</p><p>StatefulSet会为每个Pod 创建一个PVC，当发生故障时，之重新创建Pod，再将之前的PVC挂载给新的Pod</p><p>删除机制</p><p>默认情况下 StatefulSet控制器管理的Pod 会全部删除，而使用非级联模式，可以不影响Pod的情况下进行删除 kubectl delete statefulset web —cascade&#x3D;orphan&#x3D;true</p><h2 id="水平-扩容-缩容"><a href="#水平-扩容-缩容" class="headerlink" title="水平 扩容&#x2F;缩容"></a>水平 扩容&#x2F;缩容</h2><ol><li>扩容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl scale statefulset web --replicas=5<br></code></pre></td></tr></table></figure><ol><li>缩容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl scale statefulset web --replicas=3<br></code></pre></td></tr></table></figure><h2 id="更新策略-2"><a href="#更新策略-2" class="headerlink" title="更新策略"></a>更新策略</h2><ul><li>策略为OnDelete时， 需要用户手动触发删除后，自动触发创建</li><li>策略为RollingUpdate时，删除所有创建的Pod对象，再依次创建新的对象</li><li>通过设置spec.update.Strategy.rollingUpdate.partition ，可以进行分区更新，只对大于partition的Pods进行更新</li></ul><h2 id="Pod管理策略"><a href="#Pod管理策略" class="headerlink" title="Pod管理策略"></a>Pod管理策略</h2><ul><li>OrderedReady: 扩容时按照顺序管理Pod的创建和扩&#x2F;缩容操作</li><li>Parallel: 表示可以并行创建或删除所有Pod</li></ul><h2 id="PVC保存策略"><a href="#PVC保存策略" class="headerlink" title="PVC保存策略"></a>PVC保存策略</h2><ul><li>whenDeleted: 设置删除Statefulset时的存储保留策略</li><li>whenScaled: 设置缩容时的保留策略</li></ul><p>子策略</p><ul><li>Retain: 保留数据，不执行自动删除操作</li><li>Delete: 自动删除Pod关联的PVC</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: apps/v1<br>kind: StatefulSet<br>...<br>spec:<br>presistentVolumeClaimRetentionPolicy:<br>whenDeleted: Retain<br>whenScaled: Delete<br>...<br></code></pre></td></tr></table></figure><h1 id="Job批处理任务"><a href="#Job批处理任务" class="headerlink" title="Job批处理任务"></a>Job批处理任务</h1><h2 id="配置信息-3"><a href="#配置信息-3" class="headerlink" title="配置信息"></a>配置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># job.yaml</span><br>apiVersion: v1<br>kind: Job<br>metadata:<br>name: hello<br>spec:<br>template:<br>spec:<br>containers:<br>- name: hello<br>image: busybox<br><span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;echo&quot;</span>,<span class="hljs-string">&quot;Hello World!&quot;</span>]<br>restartPolicy: Never<br>backoffLimit: 4<br></code></pre></td></tr></table></figure><ul><li>template: Pod模板，其中的配置项是Pod的定义</li><li>selector: 默认情况下，不需要特别设置标签选择器</li><li>restartPolicy: Pod重启策略，可选项保活Never和OnFailure，不能被设置为Always</li><li>parallelism: 可以并行运行的任务数量</li><li>completions和completionMode: 用于设置成功完成的Pod数量，默认为1</li><li>backoffLimit: 设置失败任务的重试上限</li><li>podFailurePolicy:  失效特性</li><li>podReplacementPolicy: 替换策略</li></ul><h2 id="Job处理机制"><a href="#Job处理机制" class="headerlink" title="Job处理机制"></a>Job处理机制</h2><h3 id="单个一次性任务"><a href="#单个一次性任务" class="headerlink" title="单个一次性任务"></a>单个一次性任务</h3><p>通常一个Job只启动一个Pod，除非Pod异常，才会重启该Pod</p><h3 id="有指定数量的并行任务"><a href="#有指定数量的并行任务" class="headerlink" title="有指定数量的并行任务"></a>有指定数量的并行任务</h3><p>同时控制多个Job来执行任务</p><h3 id="带工作队列的并行任务"><a href="#带工作队列的并行任务" class="headerlink" title="带工作队列的并行任务"></a>带工作队列的并行任务</h3><p><strong>一个Pod处理一个工作队列</strong></p><p>这种情况，需要Job从外部拉取任务队列中的工作项，将每个工作项打包定义为Worker Pod，Worker Pod的逻辑是从队列中拉去一个工作项并处理，完成后结束</p><p><strong>Pod数量可变的队列</strong></p><p>这种情况，Job不确定队列中工作项的具体数目，由多个Pod对任务项进行处理，当所有工作项处理完成后，Job结束</p><p><strong>静态任务分派且带索引的Job</strong></p><p><strong>Pod之间需要通信的Job</strong></p><p><strong>Job模板扩展</strong></p><h1 id="CronJob-定时任务"><a href="#CronJob-定时任务" class="headerlink" title="CronJob 定时任务"></a>CronJob 定时任务</h1><h2 id="配置信息-4"><a href="#配置信息-4" class="headerlink" title="配置信息"></a>配置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cronjob.yaml</span><br>apiVersion: batch/v1<br>kind: CronJob<br>metadata:<br>name: hello<br>spec:<br>schedule: <span class="hljs-string">&quot;*/1 * * * *&quot;</span><br>jobTemplate:<br>spec:<br>template:<br>spec:<br>containers:<br>- name: hello<br>image: busybox<br>args:<br>- /bin/sh<br>- -c<br>- <span class="hljs-built_in">date</span>; <span class="hljs-built_in">echo</span> Hello from the Kubernetes Cluster<br>restartPolicy: OnFailure<br></code></pre></td></tr></table></figure><ul><li><a href="http://metadata.name/">metadata.name</a>：CronJob 名称，必须在命名空间内唯一。</li><li>schedule：Cron 表达式，定义任务运行的时间，这里是 “*&#x2F;1 * * * *” 表示每分钟执行一次。</li><li>jobTemplate：任务模板，定义每次调度时要运行的 Job 规范。</li><li>startingDeadlineSeconds：可选，单位秒。表示如果某次任务错过了调度时间（例如因集群不可用），在调度时间之后的这段时间内仍然允许启动任务。超过这个时间则放弃本次任务。</li><li>concurrencyPolicy：可选，定义同一 CronJob 多个任务实例的并发策略。可选值有：<ul><li>Allow（默认）：允许并发运行多个任务实例。</li><li>Forbid：禁止并发运行，如果上一个任务还在运行，则跳过新任务。</li><li>Replace：如果上一个任务还在运行，则先终止它，再启动新的任务。</li></ul></li><li>suspend：可选，布尔值。设置为 true 时暂停 CronJob 的调度，不会创建新的 Job；已有的 Job 不受影响。</li><li>successfulJobsHistoryLimit：可选，整数。保留的已成功完成的 Job 数量，超过这个数量的旧 Job 会被自动清理。</li><li>failedJobsHistoryLimit：可选，整数。保留的已失败的 Job 数量，超过这个数量的旧 Job 会被自动清理。</li><li>timeZone：可选，指定 Cron 表达式解析使用的时区。例如 “Asia&#x2F;Shanghai”。如果不指定，默认使用 kube-controller-manager 的时区（通常是 UTC）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>虚拟化</tag>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes Pod</title>
    <link href="/2025/08/08/Kubernetes-Pod/"/>
    <url>/2025/08/08/Kubernetes-Pod/</url>
    
    <content type="html"><![CDATA[<p>pod 是Kubernetes集群中的最小管理单元，其中包含一个或多个应用容器，可被看作面向应用的“逻辑主机”，是Kubernetes中核心的资源对象</p><h1 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式"></a>标准格式</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">namespace:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">annotations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">imagePullpolicy:</span> [<span class="hljs-string">Always|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">IfNotPresent</span>]<br><span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]<br><span class="hljs-attr">args:</span> [<span class="hljs-string">string</span>]<br><span class="hljs-attr">workingDir:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">mountPath:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">readOnly:</span> <span class="hljs-string">boolean</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">containerPort:</span> <span class="hljs-string">int</span><br><span class="hljs-attr">hostPort:</span> <span class="hljs-string">int</span><br><span class="hljs-attr">protocol:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">env:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">resources:</span><br> <span class="hljs-attr">limits:</span><br> <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">requests:</span><br> <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">livenessProbe:</span><br><span class="hljs-attr">exec:</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]<br><span class="hljs-attr">httpGet:</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br><span class="hljs-attr">host:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">scheme:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">httpHeaders:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">tcpSocket:</span><br><span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br><span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">successThreshold:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">securityContext:</span><br><span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">restartPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">OnFailure</span>]<br><span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">object</span><br><span class="hljs-attr">imagePullSecrets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">emptyDir:</span> &#123;&#125;<br><span class="hljs-attr">hostPath:</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">secret:</span><br><span class="hljs-attr">secretName:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">items:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">configMap:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">items:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>字段路径</th><th>类型</th><th>说明</th><th>示例 &#x2F; 可选值</th></tr></thead><tbody><tr><td><code>apiVersion</code></td><td>string</td><td>API版本</td><td><code>v1</code></td></tr><tr><td><code>kind</code></td><td>string</td><td>Kubernetes 资源类型</td><td><code>Pod</code></td></tr><tr><td><code>metadata.name</code></td><td>string</td><td>Pod 名称</td><td><code>my-pod</code></td></tr><tr><td><code>metadata.namespace</code></td><td>string</td><td>所属命名空间</td><td><code>default</code></td></tr><tr><td><code>metadata.labels</code></td><td>map&lt;string,string&gt;</td><td>标签键值对，用于选择器等</td><td><code>app: nginx</code></td></tr><tr><td><code>metadata.annotations</code></td><td>map&lt;string,string&gt;</td><td>注解信息，不参与选择器</td><td><code>prometheus.io/scrape: &quot;true&quot;</code></td></tr><tr><td><code>spec.containers</code></td><td>array</td><td>容器数组，定义一个或多个容器</td><td>-</td></tr><tr><td><code>spec.containers[].name</code></td><td>string</td><td>容器名称</td><td><code>web</code></td></tr><tr><td><code>spec.containers[].image</code></td><td>string</td><td>容器镜像</td><td><code>nginx:1.25</code></td></tr><tr><td><code>spec.containers[].imagePullPolicy</code></td><td>string</td><td>镜像拉取策略</td><td><code>Always</code>,<code>IfNotPresent</code>,<code>Never</code></td></tr><tr><td><code>spec.containers[].command</code></td><td>array[string]</td><td>容器启动命令（替代 ENTRYPOINT）</td><td><code>[&quot;/bin/sh&quot;]</code></td></tr><tr><td><code>spec.containers[].args</code></td><td>array[string]</td><td>容器启动参数（替代 CMD）</td><td><code>[&quot;-c&quot;, &quot;echo Hello&quot;]</code></td></tr><tr><td><code>spec.containers[].workingDir</code></td><td>string</td><td>工作目录</td><td><code>/app</code></td></tr><tr><td><code>spec.containers[].volumeMounts</code></td><td>array</td><td>挂载卷信息</td><td>-</td></tr><tr><td><code>spec.containers[].volumeMounts[].name</code></td><td>string</td><td>要挂载的卷名称</td><td><code>data-volume</code></td></tr><tr><td><code>spec.containers[].volumeMounts[].mountPath</code></td><td>string</td><td>容器内挂载路径</td><td><code>/data</code></td></tr><tr><td><code>spec.containers[].volumeMounts[].readOnly</code></td><td>boolean</td><td>是否只读挂载</td><td><code>true/false</code></td></tr><tr><td><code>spec.containers[].ports</code></td><td>array</td><td>容器端口暴露</td><td>-</td></tr><tr><td><code>spec.containers[].ports[].name</code></td><td>string</td><td>端口名称（可选）</td><td><code>http</code></td></tr><tr><td><code>spec.containers[].ports[].containerPort</code></td><td>int</td><td>容器内部监听端口</td><td><code>80</code></td></tr><tr><td><code>spec.containers[].ports[].hostPort</code></td><td>int</td><td>宿主机端口映射</td><td><code>8080</code></td></tr><tr><td><code>spec.containers[].ports[].protocol</code></td><td>string</td><td>协议类型</td><td><code>TCP</code>、<code>UDP</code></td></tr><tr><td><code>spec.containers[].env</code></td><td>array</td><td>环境变量列表</td><td>-</td></tr><tr><td><code>spec.containers[].env[].name</code></td><td>string</td><td>变量名</td><td><code>ENV_MODE</code></td></tr><tr><td><code>spec.containers[].env[].value</code></td><td>string</td><td>变量值</td><td><code>production</code></td></tr><tr><td><code>spec.containers[].resources</code></td><td>object</td><td>资源限制与请求</td><td>-</td></tr><tr><td><code>spec.containers[].resources.limits.cpu</code></td><td>string</td><td>最大 CPU 限制</td><td><code>500m</code></td></tr><tr><td><code>spec.containers[].resources.limits.memory</code></td><td>string</td><td>最大内存限制</td><td><code>512Mi</code></td></tr><tr><td><code>spec.containers[].resources.requests.cpu</code></td><td>string</td><td>预留 CPU 请求</td><td><code>250m</code></td></tr><tr><td><code>spec.containers[].resources.requests.memory</code></td><td>string</td><td>预留内存请求</td><td><code>256Mi</code></td></tr><tr><td><code>spec.containers[].livenessProbe</code></td><td>object</td><td>存活探针</td><td>-</td></tr><tr><td><code>spec.containers[].livenessProbe.exec.command</code></td><td>array</td><td>执行命令探针</td><td><code>[&quot;cat&quot;, &quot;/tmp/healthy&quot;]</code></td></tr><tr><td><code>spec.containers[].livenessProbe.httpGet</code></td><td>object</td><td>HTTP 探针</td><td>-</td></tr><tr><td><code>spec.containers[].livenessProbe.httpGet.path</code></td><td>string</td><td>探测路径</td><td><code>/healthz</code></td></tr><tr><td><code>spec.containers[].livenessProbe.httpGet.port</code></td><td>int&#x2F;string</td><td>端口号或端口名</td><td><code>8080</code></td></tr><tr><td><code>spec.containers[].livenessProbe.httpGet.host</code></td><td>string</td><td>请求主机</td><td><code>localhost</code></td></tr><tr><td><code>spec.containers[].livenessProbe.httpGet.scheme</code></td><td>string</td><td>请求协议</td><td><code>HTTP</code>or <code>HTTPS</code></td></tr><tr><td><code>spec.containers[].livenessProbe.httpGet.httpHeaders</code></td><td>array</td><td>头部设置</td><td><code>[&#123; name: &quot;X-Custom&quot;, value: &quot;123&quot; &#125;]</code></td></tr><tr><td><code>spec.containers[].livenessProbe.tcpSocket.port</code></td><td>int</td><td>TCP 端口探测</td><td><code>3306</code></td></tr><tr><td><code>spec.containers[].livenessProbe.initialDelaySeconds</code></td><td>int</td><td>初始延迟秒数</td><td><code>10</code></td></tr><tr><td><code>spec.containers[].livenessProbe.timeoutSeconds</code></td><td>int</td><td>超时时间</td><td><code>2</code></td></tr><tr><td><code>spec.containers[].livenessProbe.periodSeconds</code></td><td>int</td><td>探测周期</td><td><code>5</code></td></tr><tr><td><code>spec.containers[].livenessProbe.successThreshold</code></td><td>int</td><td>成功次数阈值</td><td><code>1</code></td></tr><tr><td><code>spec.containers[].livenessProbe.failureThreshold</code></td><td>int</td><td>失败次数阈值</td><td><code>3</code></td></tr><tr><td><code>spec.containers[].securityContext.privileged</code></td><td>bool</td><td>是否启用特权模式</td><td><code>true/false</code></td></tr><tr><td><code>spec.restartPolicy</code></td><td>string</td><td>Pod 重启策略</td><td><code>Always</code>,<code>OnFailure</code>,<code>Never</code></td></tr><tr><td><code>spec.nodeSelector</code></td><td>map&lt;string,string&gt;</td><td>节点选择器</td><td><code>&#123; &quot;disktype&quot;: &quot;ssd&quot; &#125;</code></td></tr><tr><td><code>spec.imagePullSecrets</code></td><td>array</td><td>镜像拉取凭证</td><td><code>[&#123; name: &quot;my-registry-key&quot; &#125;]</code></td></tr><tr><td><code>spec.hostNetwork</code></td><td>bool</td><td>是否使用主机网络</td><td><code>true/false</code></td></tr><tr><td><code>spec.volumes</code></td><td>array</td><td>卷定义</td><td>-</td></tr><tr><td><code>spec.volumes[].name</code></td><td>string</td><td>卷名称</td><td><code>data-volume</code></td></tr><tr><td><code>spec.volumes[].emptyDir</code></td><td>object</td><td>空目录卷（临时数据）</td><td><code>&#123;&#125;</code></td></tr><tr><td><code>spec.volumes[].hostPath.path</code></td><td>string</td><td>主机路径挂载</td><td><code>/data/host</code></td></tr><tr><td><code>spec.volumes[].secret.secretName</code></td><td>string</td><td>绑定的 secret 名称</td><td><code>my-secret</code></td></tr><tr><td><code>spec.volumes[].secret.items[]</code></td><td>object</td><td>指定映射的 key&#x2F;path</td><td><code>&#123; key: &quot;token&quot;, path: &quot;token.txt&quot; &#125;</code></td></tr><tr><td><code>spec.volumes[].configMap.name</code></td><td>string</td><td>引用的 ConfigMap 名称</td><td><code>app-config</code></td></tr><tr><td><code>spec.volumes[].configMap.items[]</code></td><td>object</td><td>指定映射的 key&#x2F;path</td><td><code>&#123; key: &quot;app.properties&quot;, path: &quot;conf/app.properties&quot; &#125;</code></td></tr></tbody></table><p>当存在两个应用紧密耦合，并组合为一个整体进行对外服务时，应将这两个容器应用封装为一个Pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">redis-php</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">redis-php</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">kubeguide/guestbook-php-frontend:localredis</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">kubeguide/redis-master</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p>应用通过localhost:6379 对redis进行访问</p><h1 id="静态Pod"><a href="#静态Pod" class="headerlink" title="静态Pod"></a>静态Pod</h1><p>静态Pod是由kubelet管理的仅存在于kubelete所在Node上的Pod，不需要通过Kubernetes的Master管理。kubelet负责监控由它创建的静态Pod，并在失效时重建pod。静态Pod无法被Master管理，以及无法使用普通Pod可以使用的其他资源</p><p>1.基于本地配置文件</p><p>在kubelet的主配置文件中设置 staticPodPath。kubelet会定期扫描该目录</p><p>配置目录为 &#x2F;etc&#x2F;kubernetes&#x2F;manifests 配置参数为staticPodPath:&#x2F;etc&#x2F;kubernetes&#x2F;manifests</p><p>在&#x2F;etc&#x2F;kubelet.d 目录下设置配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置信息</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">static-web</span><br><span class="hljs-attr">labels:</span> <br><span class="hljs-attr">name:</span> <span class="hljs-string">static-web</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">static-web</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><ol><li>网络配置</li></ol><p>通过 —manifest-url 获取yaml 文件作为配置信息</p><h1 id="Pod容器共享Volume"><a href="#Pod容器共享Volume" class="headerlink" title="Pod容器共享Volume"></a>Pod容器共享Volume</h1><p>在tomcal容器中设置将命名为app-logs的volume 挂在到&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;logs中</p><p>设置volumes ，而在busybox 将该目录挂在为&#x2F;logs 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">volume-pod</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">tomcat</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app-logs</span><br><span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/tomcat/logs</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span> , <span class="hljs-string">&quot;tail -f /logs/catalina*.log&quot;</span>]<br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app-logs</span><br><span class="hljs-attr">mountPath:</span> <span class="hljs-string">/logs</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app-logs</span><br><span class="hljs-attr">emptyDir:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h1 id="Pod的配置管理"><a href="#Pod的配置管理" class="headerlink" title="Pod的配置管理"></a>Pod的配置管理</h1><p>ConfigMap用于保存应用程序运行时需要的配置数据，通过明文及K:V存储</p><p>ConfigMap 一般用于</p><p>1.生成容器内的环境变量</p><p>2.设置容器启动命令的命令参数</p><p>3.以Volume的形式挂在为容器内的文件或目录</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># cm-appvars.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">cm-appvars</span><br><span class="hljs-attr">data:</span><br><span class="hljs-attr">apploglevel:</span> <span class="hljs-string">info</span><br><span class="hljs-attr">appdatadir:</span> <span class="hljs-string">/var/data</span><br></code></pre></td></tr></table></figure><p>在env 下使用configmap ， configmap会以文件进行挂载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>  <span class="hljs-attr">configMap:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">my-config</span><br><span class="hljs-comment"># 定义存储卷</span><br>  <br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>  <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span><br><span class="hljs-comment"># 使用config-volume,并挂载到/etc/config路径</span><br><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>  <span class="hljs-attr">configMap:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">my-config</span><br>    <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">app.properties</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">my-app.conf</span><br><span class="hljs-comment"># 在卷中指定configmap中的某个key将对应文件挂载</span><br></code></pre></td></tr></table></figure><p>使用envfrom 配置为环境变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">alpine</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;env; sleep 3600&quot;</span>]<br>    <span class="hljs-attr">envFrom:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">configMapRef:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">my-config</span><br><span class="hljs-comment"># 将my-config 整个加载为环境变量</span><br><br><span class="hljs-attr">env:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ENV_MODE</span><br>  <span class="hljs-attr">valueFrom:</span><br>    <span class="hljs-attr">configMapKeyRef:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">my-config</span><br>      <span class="hljs-attr">key:</span> <span class="hljs-string">ENV_MODE</span><br>   <br><span class="hljs-comment"># 将my-config 中对应的ENV_MODE 中的values设置为环境变量</span><br></code></pre></td></tr></table></figure><h1 id="容器内获取Pod信息"><a href="#容器内获取Pod信息" class="headerlink" title="容器内获取Pod信息"></a>容器内获取Pod信息</h1><h2 id="Downward-API"><a href="#Downward-API" class="headerlink" title="Downward API"></a>Downward API</h2><p>通过Downward API 将Pod的信息注入到容器的环境变量中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># dapi-envars-pod.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">dapi-envars-fieldref</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tst-container</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>]<br><span class="hljs-attr">args:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">while</span> <span class="hljs-literal">true</span> <span class="hljs-string">;</span> <span class="hljs-string">do</span><br><span class="hljs-string">echo</span> <span class="hljs-string">-en</span> <span class="hljs-string">&#x27;\\n&#x27;</span><span class="hljs-string">;</span><br><span class="hljs-string">printenv</span> <span class="hljs-string">MY_NODE_NAME</span> <span class="hljs-string">MY_POD_NAME</span> <span class="hljs-string">MY_POD_NAMESPACE;</span><br><span class="hljs-string">sleep</span> <span class="hljs-number">10</span> <span class="hljs-string">;</span><br><span class="hljs-string">done;</span><br><span class="hljs-attr">env:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_NODE_NAME</span><br><span class="hljs-attr">valueFrom:</span> <br><span class="hljs-attr">fieldRef:</span><br><span class="hljs-attr">fieldPath:</span> <span class="hljs-string">spec.nodeName</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_POD_NAME</span><br><span class="hljs-attr">valueFrom:</span><br><span class="hljs-attr">fieldRef:</span><br><span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_POD_NAMESPCAE</span><br><span class="hljs-attr">valueFrom:</span><br><span class="hljs-attr">fieldRef:</span><br><span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br><span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><p>在文件中不是直接写入而是通过valueFrom指定对应的数据字段获取值</p><p>将Container配置信息设置为容器内的环境变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># dapi-envars-container.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">dapi-envars-resourcefieldref</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Never</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>]<br><span class="hljs-attr">args:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">while</span> <span class="hljs-literal">true</span> <span class="hljs-string">;</span> <span class="hljs-string">do</span><br><span class="hljs-string">echo</span> <span class="hljs-string">-en</span> <span class="hljs-string">&#x27;\\n&#x27;</span><span class="hljs-string">;</span><br><span class="hljs-string">printenv</span> <span class="hljs-string">MY_CPU_REQUEST</span> <span class="hljs-string">MY_CPU_LIMIT;</span><br><span class="hljs-string">sleep</span> <span class="hljs-number">10</span><span class="hljs-string">;</span><br><span class="hljs-string">done;</span><br><span class="hljs-attr">resources:</span><br><span class="hljs-attr">requests:</span><br><span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;32Mi&quot;</span><br><span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;125m&quot;</span><br><span class="hljs-attr">limits:</span><br><span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;64Mi&quot;</span><br><span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;250m&quot;</span><br><span class="hljs-attr">env:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_CPU_REQUEST</span><br><span class="hljs-attr">valueFrom:</span> <br><span class="hljs-attr">resourceFieldRef:</span><br><span class="hljs-attr">containerName:</span> <span class="hljs-string">test-container</span><br><span class="hljs-attr">resource:</span> <span class="hljs-string">requests.cpu</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MY_CPU_LIMIT</span><br><span class="hljs-attr">valueFrom:</span><br><span class="hljs-attr">resourceFieldRef:</span><br><span class="hljs-attr">containerName:</span> <span class="hljs-string">test-container</span><br><span class="hljs-attr">resource:</span> <span class="hljs-string">limits.cpu</span><br><span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><h2 id="Volume挂载"><a href="#Volume挂载" class="headerlink" title="Volume挂载"></a>Volume挂载</h2><p>将Pod信息挂载为容器内的文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># dapi-volume.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-downwardapi-volume-example</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">zone:</span> <span class="hljs-string">us-est-coast</span><br><span class="hljs-attr">cluster:</span> <span class="hljs-string">test-cluster1</span><br><span class="hljs-attr">rack:</span> <span class="hljs-string">rack-22</span><br><span class="hljs-attr">annotations:</span><br><span class="hljs-attr">build:</span> <span class="hljs-string">two</span><br><span class="hljs-attr">builder:</span> <span class="hljs-string">john-doe</span><br><span class="hljs-attr">spec:</span> <br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">client-container</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>]<br><span class="hljs-attr">args:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">while</span> <span class="hljs-literal">true</span> <span class="hljs-string">;</span> <span class="hljs-string">do</span><br><span class="hljs-string">if</span> [[ <span class="hljs-string">-e</span> <span class="hljs-string">/etc/podinfo/labels</span>]]<span class="hljs-string">;</span> <span class="hljs-string">then</span><br><span class="hljs-string">echo</span> <span class="hljs-string">-en</span> <span class="hljs-string">&#x27;\\n\\n&#x27;</span><span class="hljs-string">;</span> <span class="hljs-string">cat</span> <span class="hljs-string">/etc/podinfo/labels</span> <span class="hljs-string">;</span> <span class="hljs-string">fi</span> <span class="hljs-string">;</span><br><span class="hljs-string">sleep</span> <span class="hljs-number">5</span><span class="hljs-string">;</span><br><span class="hljs-string">done;</span><br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-string">-name:</span> <span class="hljs-string">podinfo</span><br><span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/podinfo</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">podinfo</span><br><span class="hljs-attr">downwardAPI:</span><br><span class="hljs-attr">items:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;labels&quot;</span><br><span class="hljs-attr">fieldRef:</span><br><span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.labels</span><br><br></code></pre></td></tr></table></figure><p>将容器的配置信息挂载为容器内的文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># dapi-volume-resources.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-downwardapi-volume-example-2</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">client-container</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>]<br><span class="hljs-attr">args:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">while</span> <span class="hljs-literal">true</span><span class="hljs-string">;</span> <span class="hljs-string">do</span><br><span class="hljs-string">echo</span> <span class="hljs-string">-en</span> <span class="hljs-string">&#x27;n&#x27;</span><span class="hljs-string">;</span><br><span class="hljs-string">if</span> [[ <span class="hljs-string">-e</span> <span class="hljs-string">/etc/podinfo/cpu_limit</span> ]] <span class="hljs-string">;</span> <span class="hljs-string">then</span><br><span class="hljs-string">echo</span> <span class="hljs-string">-en</span> <span class="hljs-string">&#x27;\\n&#x27;</span><span class="hljs-string">;</span> <span class="hljs-string">cat</span> <span class="hljs-string">/etc/podinfo/cpu_limit;</span> <span class="hljs-string">fi;</span><br><span class="hljs-string">sleep</span> <span class="hljs-string">5s;</span><br><span class="hljs-string">done;</span><br><span class="hljs-attr">resources:</span><br><span class="hljs-attr">requests:</span><br><span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;32Mi&quot;</span><br><span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;125m&quot;</span><br><span class="hljs-attr">limits:</span><br><span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;64Mi&quot;</span><br><span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;250m&quot;</span><br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">podinfo</span><br><span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/podinfo</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">podinfo</span><br><span class="hljs-attr">downwardAPI:</span><br><span class="hljs-attr">items:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;cpu_limit&quot;</span><br><span class="hljs-attr">resource:</span> <span class="hljs-string">limits.cpu</span><br><span class="hljs-attr">divisor:</span> <span class="hljs-string">1m</span><br><br></code></pre></td></tr></table></figure><h2 id="支持设置的信息"><a href="#支持设置的信息" class="headerlink" title="支持设置的信息"></a>支持设置的信息</h2><ol><li>由fieldRef设置的字段<br><a href="http://metadata.name/">metadata.name</a>: Pod名称<br>metadata.namespace: Pod所在的命名空间名称<br>metadata.uid: Pod的UID<br>metadata.labels[’<code>&lt;KEY&gt;</code>’]: Pod某个Label的值，通过<code>&lt;KEY&gt;</code>引用<br>metadata.annotations[‘<code>&lt;KEY&gt;</code>’]: Pod某个Annotations的值，通过<code>&lt;KEY&gt;</code>引用</li><li>Pod的以下元数据信息可以被设置为容器内的环境变量，<br>spec.serviceAccountName: Pod使用的ServiceAccount名称<br>spec.nodeName: Pod所在Node的名称<br>status.hostIP: Pod所在Node的IP地址<br>status.hostIPs: Pod所在Node的双栈IP地址<br>status.IP: Pod的IP地址<br>status.IPs: Pod的双栈IP地址</li><li>设置downwardAPI为存储卷类型时，可以在器fieldRef字段设置以下信息<br>metadata.labels : Pod的label列表<br>metadata.annotations : Pod的annotation列表</li><li>通过resourceFieldRef 设置的字段<br>limits.cpu                  # 容器可使用的最大 CPU 数量（上限），单位为核心（如 1、500m 等），超出会被限制<br>requests.cpu                # 容器调度时请求的最小 CPU 数量，调度器据此分配节点资源，单位同上<br>limits.memory               # 容器可使用的最大内存（上限），单位如 Mi、Gi，超出将触发 OOMKilled<br>requests.memory             # 容器调度时请求的最小内存，调度器据此分配节点资源<br>limits.hugepages-*          # 容器可使用的最大 HugePages 限额，例如 limits.hugepages-2Mi<br>requests.hugepages-*        # 容器调度时请求的 HugePages 数量，例如 requests.hugepages-1Gi<br>limits.ephemeral-storage    # 容器使用的最大临时存储空间（如 emptyDir、写入容器层），超出会被限制<br>requests.ephemeral-storage  # 容器调度时请求的最小临时存储空间，用于调度决策。</li></ol><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>Pod的生命周期</p><p><strong>Pending</strong>  创建Pod的请求已被Master接受，但有一个或多个容器没有创建也没有运行</p><p><strong>Running</strong> Pod已完成调度到特定Node,其包含的所有容器均已创建，并且至少由一个容器处于正在运行状态</p><p><strong>Succeeded</strong> Pod内的所有容器君子成功执行后终止，不会重启</p><p><strong>Failed</strong>       Pod内的所有容器均已终止，但至少有一个容器未退出失败状态，即退出码不是0</p><p><strong>Unknown</strong> 由于某种原因无法获得Pod的状态</p><p>Pod的状况</p><p><strong>PodScheduled</strong> 已将Pod调度到某个Node</p><p><strong>PodReadyToStartContainers</strong> Pod已创建，并完成网络配置，可以启动容器。</p><p><strong>ContainersReady</strong> Pod中的全部容器都达到Ready状态</p><p><strong>Initialized</strong> Pod中的全部初始化容器都成功运行</p><p><strong>Ready</strong> Pod达到Ready状态，可以被加入相应Service的负载均衡后端列表中</p><h2 id="容器状态"><a href="#容器状态" class="headerlink" title="容器状态"></a>容器状态</h2><p>Waiting ：Kubernetes在能够运行该容器之前通常需要执行某些操作，例如下载容器镜像，为容器设置存储卷，等待依赖资源达到就绪状态，因此系统设置容器的状态为等待运行</p><p>Running ：表示容器处于正常的运行过程中，并没有发生错误</p><p>Terminated ： 运行结束，可能是正常运行结束，也可能是因为失败结束</p><h2 id="Pod的重启策略"><a href="#Pod的重启策略" class="headerlink" title="Pod的重启策略"></a>Pod的重启策略</h2><ul><li>Always ： 当容器启动失败后总是由kubelet尝试自动重启容器</li><li>OnFailure ： 当容器终止运行且退出码不为0时，由kubelet自动重启容器</li><li>Never： 不论容器处于哪种运行状态，kubelet不会重启该容器</li></ul><h2 id="控制权与重启策略"><a href="#控制权与重启策略" class="headerlink" title="控制权与重启策略"></a>控制权与重启策略</h2><p>Deployoment&#x2F;StatuefulSet&#x2F;DaemonSet&#x2F;RC   :  必须设置为Always</p><p>Job :  OnFailure或Never</p><p>kubelet : 在静态Pod失效时自动重启它</p><h2 id="Pod的终止过程"><a href="#Pod的终止过程" class="headerlink" title="Pod的终止过程"></a>Pod的终止过程</h2><ol><li>通过kubectl delete pod <pod_name>命令手动删除一个Pod，优雅终止的宽限期默认为30s</li><li>控制平面会更新Pod的状态，通过kubectl get 或describe命令可以看到Pod状态为”Terminating”。在Pod运行的Node上，kubelet一旦探测到Pod状态为”Terminating”就开始对Pod进行以下终止操作<br>如果容器配置了preStop回调钩子，并且配置了非0的终止宽限期，kubelet就调用preStop回调钩子。如果preStop回调钩子在终止宽限期之后还未完成，会向宽限期增加时间（默认2s）<br>如果容器没配置preStop，或者终止宽限期已过，kubelet就调用容器运行时给容器的主进程发送TERM信息，也可能发送容器镜像中STOPSIGNAL变量配置的信号</li><li>在kubelet启动Pod的优雅终止过程的同时，控制平面会评估是否将正在终止的Pod从对应服务的后端列表中移除。</li><li>超过优雅终止宽限期之后，kubelet首先会启动强制终止容器进程的操作，通过容器运行时向剩余的进程发送KILL信号，kubelet也会删除Pod的基础Pause容器。然后kubelet将Pod的阶段设置为Succeeded或Failed。并设置宽限期为0，表示立刻删除。最后控制平面从etcd中彻底删除该Pod资源对象</li></ol><h3 id="Pod的垃圾清理机制"><a href="#Pod的垃圾清理机制" class="headerlink" title="Pod的垃圾清理机制"></a>Pod的垃圾清理机制</h3><p>Kubernetes的控制平面提供了一个Pod垃圾清理器PodGC(Garbage Collector)，在监控到Pod数量超过阈值时，会进行删除已终止Pod的操作。GC会清理以下条件的Pod</p><ul><li>孤儿Pod : 已完成调度，但Node 不再存在</li><li>在计划外终止的Pod</li><li>终止过程中的Pod</li></ul><h1 id="探针和健康检查机制"><a href="#探针和健康检查机制" class="headerlink" title="探针和健康检查机制"></a>探针和健康检查机制</h1><ol><li>LivenessProbe 探针</li></ol><p>用于判断容器是否存活，如果LivenesProbe探针探测到容器不健康，则杀掉该容器，并根据容器的重启策略做相应的处理，如果容器未设置LivenessProbe探针，那么kubelet认为该容器的LivenessProbe探针返回的值永远是Success</p><ol><li>ReadinessProbe探针</li></ol><p>用于判断容器服务是否处于Ready状态，处于Ready状态的Pod才可以接收请求。ReadinessProbe定期触发，存在于Pod的整个生命周期内</p><ol><li>StartupProbe探针</li></ol><p>某些应用会遇到一些情况，例如应用程序在启动时需要与远程服务器建立网络连接，或者网络访问较慢等，导致容器启动缓慢，可以由StartupProbe持续检查Pods状态，在此期间LivenessProbe探针和ReadinessProbe探针均被禁用，直到StartupProbe 返回成功</p><h3 id="探测策略"><a href="#探测策略" class="headerlink" title="探测策略"></a>探测策略</h3><ul><li>exec : 在容器内运行指定的命令，如果该命令运行的返回码未0，则说明探测成功</li><li>tcpSocket ： 通过容器的IP地址和端口号执行TCP检查，如果能够建立TCP连接，则说明探测成功</li><li>httpGet：通过容器的IP地址，端口号及路径调用HTTP Get方法，如果响应的状态码大于等于200且小于400 说明探测成功。</li><li>grpc：通过gRPC执行一个Health Check的远程调用，要求应用程序实现gRPC健康检查协议，如果响应的status为SERVING</li></ul><h3 id="字段配置"><a href="#字段配置" class="headerlink" title="字段配置"></a>字段配置</h3><ul><li>initalDelaySecondes: 启动容器后进行首次探测的等待时间，单位为s,默认值为0，最小值为0.</li><li>periodSecondes: 周期性执行探测的时间间隔，单位为s，默认为10，最小值为1</li><li>timeoutSeconds: 发出探测请求后等待结果的超时时间，单位为s。当超时发生时，kubelet认为探测失败</li><li>successThreshold: 探测失败后，判定为探测成功的最小连续探测成功的次数，默认值为1</li><li>failureThreshold: 判定为探测失败的连续探测失败的次数，达到整个数量后，kubelet会认为容器不健康或者服务未就绪，并将基于重启策略对容器进行重启操作</li><li>terminationGracePeriodSecondes: 探测失败后，kubelet触发终止容器命令之后等待容器自行结束的宽限期，单位为s，默认值为30，最小值为1</li></ul><p>HTTP类型探针的配置</p><ul><li>host: 主机名，默认为Pod的IP地址</li><li>scheme: 连接协议</li><li>path: 访问路径，默认为“&#x2F;”</li><li>httpHeaders: 自定义HTTP头，允许重复</li><li>port: 容器的端口号或端口名称</li></ul><h3 id="探测结果"><a href="#探测结果" class="headerlink" title="探测结果"></a>探测结果</h3><ul><li>Success 探测成功</li><li>Failure 探测失败</li><li>Unknown 探测失败</li></ul><h2 id="exec机制配置LivenessProbe"><a href="#exec机制配置LivenessProbe" class="headerlink" title="exec机制配置LivenessProbe"></a>exec机制配置LivenessProbe</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">test:</span> <span class="hljs-string">liveness</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">liveness-exec</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">liveness</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">args:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">ok</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/tmp/health;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">10</span> <span class="hljs-string">;</span> <span class="hljs-string">rm</span> <span class="hljs-string">-rf</span> <span class="hljs-string">/tmp/health;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">600</span><br><span class="hljs-attr">livenessProbe:</span><br><span class="hljs-attr">exec:</span><br><span class="hljs-attr">command:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">/tmp/health</span><br><span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">15</span><br><span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="tcpSocket机制配置LivenessProbe"><a href="#tcpSocket机制配置LivenessProbe" class="headerlink" title="tcpSocket机制配置LivenessProbe"></a>tcpSocket机制配置LivenessProbe</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">pod-with-healthcheck</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">livenessProbe:</span><br><span class="hljs-attr">tcpSocket:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">initialDelaySecondes:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="httpGet机制配置LivenessProbe"><a href="#httpGet机制配置LivenessProbe" class="headerlink" title="httpGet机制配置LivenessProbe"></a>httpGet机制配置LivenessProbe</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">pod-with-healthcheck</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">livenessProbe:</span><br><span class="hljs-attr">httpGet:</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">/_status/healthz</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">initialDelaySecondes:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">timeoutSecondes:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="gRPC机制配置LivenessProbe"><a href="#gRPC机制配置LivenessProbe" class="headerlink" title="gRPC机制配置LivenessProbe"></a>gRPC机制配置LivenessProbe</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">etcd-with-grpc</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">etcd</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">etcd:3.5.1</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/usr/local/bin/etcd&quot;</span>,<span class="hljs-string">&quot;--data-dir&quot;</span>,<span class="hljs-string">&quot;/var/lib/etcd&quot;</span>,<br><span class="hljs-string">&quot;--listen-client-urls&quot;</span>,<span class="hljs-string">&quot;&lt;http://0.0.0.0:2379&gt;&quot;</span>,<span class="hljs-string">&quot;--advertise-client-urls&quot;</span>,<br><span class="hljs-string">&quot;&lt;http://127.0.0.1:2379&gt;&quot;</span>]<br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">2379</span><br><span class="hljs-attr">livenessProbe:</span><br><span class="hljs-attr">grpc:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">2379</span><br><span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="设置startupProbe保护探针保护需要启动很长时间的容器"><a href="#设置startupProbe保护探针保护需要启动很长时间的容器" class="headerlink" title="设置startupProbe保护探针保护需要启动很长时间的容器"></a>设置startupProbe保护探针保护需要启动很长时间的容器</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">startupProbe:</span><br><span class="hljs-attr">httpGet:</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br><span class="hljs-attr">port:</span> <span class="hljs-string">liveness-port</span><br><span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>如果300s后仍未成功启动，kubelet会尝试重启策略</p><h2 id="设置ReadinessProbe探针保护暂时无法提供服务的容器"><a href="#设置ReadinessProbe探针保护暂时无法提供服务的容器" class="headerlink" title="设置ReadinessProbe探针保护暂时无法提供服务的容器"></a>设置ReadinessProbe探针保护暂时无法提供服务的容器</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">readinessProbe</span><br><span class="hljs-attr">httpGet:</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">initialDelaySecondes:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>kubelet 在探测到容器服务不在就绪时，会通知控制平面，以调整对应的Service，将不健康的后端Pod暂时隔离，不再将请求转发到这个Pod，从而避免出现大量的失败状况</p><h1 id="初始化容器"><a href="#初始化容器" class="headerlink" title="初始化容器"></a>初始化容器</h1><p>初始化容器是一种特殊的容器</p><p>初始化容器的运作方式与应用容器不同：初始化容器必须先于应用容器运行成功，在设置了多个初始化容器时，将按顺序逐个运行初始化容器，并且只有前一个初始化容器运行成功，才能运行其之后的一个初始化容器。在所有初始化容器运行成功后，才会初始化Pod的各种信息，并开始创建和运用容器</p><p>初始化容器的定义中可以设置资源限制，Volume的使用和安全策略，等待。</p><ul><li>如果多个初始化容器定义了资源请求或者资源限制，则取最大的值为所有初始化容器的资源请求值或资源限制值</li><li>Pod的有效资源请求值或资源限制取值以下二者的较大值<ul><li>所有应用容器的资源请求值或资源限制值之和</li><li>初始化容器的有效资源请求或资源限制值</li></ul></li><li>调度算法将基于Pod的有效资源请求致或资源限制值进行计算，也就是说，初始化容器可以为初始化操作预留系统资源，即使后续的应用容器 无须使用这些资源</li><li>Pod的有效QoS等级适用于初始化容器和应用容器</li><li>资源配额和限制将根据Pod的有效资源请求值或者资源限制值计算且生效</li><li>Pod级别的Cgroup将基于Pod的有效资源请求或限制，与调度机制一致</li></ul><p>初始化容器不支持对生命周期和健康检查机制进行配置</p><h2 id="可能重启的场景"><a href="#可能重启的场景" class="headerlink" title="可能重启的场景"></a>可能重启的场景</h2><ul><li>Pod的infrastructure容器更新，此时Pod会重启</li><li>Pod中的所有应用容器都终止，此时Pod会重启</li></ul><h2 id="初始化容器的实现原理"><a href="#初始化容器的实现原理" class="headerlink" title="初始化容器的实现原理"></a>初始化容器的实现原理</h2><p>通过initContainers字段配置初始化容器，以实现在启动应用容器之前运行初始化容器，并且允许配置一个或多个初始化容器，已完成应用容器所需的预置条件。系统会在Pod的状态信息的initContainerStatuses字段中显示初始化容器的运行信息</p><h3 id="通过初始化容器为应用容器准备数据"><a href="#通过初始化容器为应用容器准备数据" class="headerlink" title="通过初始化容器为应用容器准备数据"></a>通过初始化容器为应用容器准备数据</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># pod-with-init.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">pod-with-init</span><br><span class="hljs-attr">labels:</span> <br><span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">space:</span> <br><span class="hljs-attr">initContainers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;echo Hello World! &gt; /web-root/index.html&quot;</span> ]<br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">webroot</span><br><span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/web-root&quot;</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">ports:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">webroot</span><br><span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">webroot</span><br>  <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="通过初始化容器等待应用容器依赖的一个服务处于Ready状态"><a href="#通过初始化容器等待应用容器依赖的一个服务处于Ready状态" class="headerlink" title="通过初始化容器等待应用容器依赖的一个服务处于Ready状态"></a>通过初始化容器等待应用容器依赖的一个服务处于Ready状态</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># pod-with-init-2.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">pod-with-init-2</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">initContainers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wait-for-service-a</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">command:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">sh</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">until</span> <span class="hljs-string">wget</span> <span class="hljs-string">-q</span> <span class="hljs-string">service-a:8080;</span> <span class="hljs-string">do</span> <span class="hljs-string">echo</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;waiting for service-a&quot;</span><span class="hljs-string">;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">5</span><span class="hljs-string">;</span><br><span class="hljs-string">done;</span> <span class="hljs-string">echo</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;service-a ready , starting service-b now&quot;</span><span class="hljs-string">;</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">service-b</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span>  <br></code></pre></td></tr></table></figure><h3 id="通过初始化容器将Pod作为一个服务实例注册到外部的某个服务中心"><a href="#通过初始化容器将Pod作为一个服务实例注册到外部的某个服务中心" class="headerlink" title="通过初始化容器将Pod作为一个服务实例注册到外部的某个服务中心"></a>通过初始化容器将Pod作为一个服务实例注册到外部的某个服务中心</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># pod-with-init-3.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">pod-with-init-3</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">initContainers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">register-to-svc-center</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">command:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">sh</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">-c</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">until</span> <span class="hljs-string">curl</span> <span class="hljs-string">-X</span> <span class="hljs-string">POST</span> <span class="hljs-string">-d</span> <span class="hljs-string">&#x27;svc_name=$POD_NAME&amp;svc_ip=$POD_IP&#x27;</span><br><span class="hljs-string">http://$SERVICE_REGISTRY_HOST:$SERVICE_REGISTRY_PORT/register;do</span> <span class="hljs-string">echo</span> <span class="hljs-string">-e</span> <br><span class="hljs-string">&quot;register to service center&quot;</span><span class="hljs-string">;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">5</span><span class="hljs-string">;</span> <span class="hljs-string">done</span> <span class="hljs-string">;</span> <span class="hljs-string">echo</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;register successfully, starting</span><br><span class="hljs-string">service now&quot;</span><span class="hljs-string">;</span><br><span class="hljs-attr">env:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SERVICE_REGISTRY_HOST</span><br><span class="hljs-attr">value:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SERVICE_REGISTRY_PORT</span><br><span class="hljs-attr">value:</span> <span class="hljs-number">8080</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAME</span><br><span class="hljs-attr">valueFrom:</span><br><span class="hljs-attr">fieldRef:</span><br><span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_IP</span><br><span class="hljs-attr">valueFrom:</span><br><span class="hljs-attr">fieldRef:</span><br><span class="hljs-attr">fieldPath:</span> <span class="hljs-string">status.podIP</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">service</span><br></code></pre></td></tr></table></figure><h3 id="设置两个初始化容器"><a href="#设置两个初始化容器" class="headerlink" title="设置两个初始化容器"></a>设置两个初始化容器</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># pod-with-2-init.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">pod-with-2-init</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span> <br><span class="hljs-attr">initContainers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">init-myservice</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&quot;until nslookup myservice.$(cat /var/run/sercets/kubernetes.io</span><br><span class="hljs-string">/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting </span><br><span class="hljs-string">for myservice; sleep 2; done&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">init-mydb</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&quot;until nslookup mydb.$(cat /var/run/sercets/kubernetes.io</span><br><span class="hljs-string">/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting </span><br><span class="hljs-string">for mydb; sleep 2; done&quot;</span>]<br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-container</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>,<span class="hljs-string">&#x27;echo The app is running! &amp;&amp; sleep 3600&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>如果初始化容器运行失败，系统会根据Pod的重启策略进行重启。</li><li>在所有初始化容器都进入运行完毕之前，Pod不会进入Ready状态</li><li>在重启Pod时会重启所有初始化容器</li><li>在创建之后，如果需要修改初始化容器的定义，则只允许修改image字段</li><li>Kubernetes在创建Pod时，会强制检查在初始化容器的定义中是否存在ReadinessProbe，如果存在，则将拒绝创建</li><li>如果Pod设置了activeDeadlineSeconds ， 则可以避免初始化容器持续运行失败并且无限重启</li><li>在Pod中，每个容器的名称都必须唯一</li></ul><p>pod 是Kubernetes集群中的最小管理单元，其中包含一个或多个应用容器，可被看作面向应用的“逻辑主机”，是Kubernetes中核心的资源对象</p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>虚拟化</tag>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 结构与概念</title>
    <link href="/2025/08/07/Kubernetes-%E7%BB%93%E6%9E%84%E4%B8%8E%E6%A6%82%E5%BF%B5/"/>
    <url>/2025/08/07/Kubernetes-%E7%BB%93%E6%9E%84%E4%B8%8E%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h1><p>Master 是集群的控制节点，在每个Kubernetes集群中都需要有一个或一组Master负责管理和控制整个集群。Master通常占用一台独立的服务器，是整个集群的管理者，Master主要运行下面的一些关键进程</p><ul><li>Kubernetes API Server(kube-apiserver) : 提供HTTPRESTful API 接口的主要服务，是Kubernetes中对所有资源继续增删改查等操作的唯一入口，也是集群控制的入口进程</li><li>Kubernetes Controller Manager(kube-controller-manager) : Kubernetes中所有资源对象的自动化控制中心。</li><li>Kubernetes Scheduler(kube-scheduler) : 负责资源调度（Pod调度）的进程。</li></ul><h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><p>Node 是kubernetes中的工作负载节点，每个Node都会被Master分配负载。当某个Node状态异常时，会被Master将服务转移到其他Node上。Node上一般运行着下面这些关键进程</p><ul><li>kubelet ：负责Pod对应容器的创建，启停等服务，同时与Master密切协作，实现集群管理的基本功能</li><li>kube-proxy ： 是实现Kubernetes Service 通信与负载均衡机制的服务</li><li>容器运行时： 负责本机的容器创建和管理</li></ul><p>Node 可以在运行期间被动增加到Kubernetes集群中，前提是这个Node上已正确 安装，配置和启动了这些关键进程</p><p>通过以下命令检查集群中的Node数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Kubectl  get nodes</span><br>NAME             STATUS          ROLES         AGE           VERSION<br>k8s-node-1       Ready           &lt;none&gt;        1d            v1.29.0<br></code></pre></td></tr></table></figure><p>通过kubectl describe node<node_name> 可以检查Node的状态信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># kubectl describe node work-node-01</span><br>Name:               worker-node-01<br>Roles:              &lt;none&gt;<br>Labels:             beta.kubernetes.io/arch=amd64<br>                    beta.kubernetes.io/os=linux<br>                    kubernetes.io/arch=amd64<br>                    kubernetes.io/hostname=worker-node-01<br>                    kubernetes.io/os=linux<br>                    node.kubernetes.io/instance-type=m5.large<br>                    node.kubernetes.io/node-group=worker-nodes<br>                    topology.kubernetes.io/region=us-west-2<br>                    topology.kubernetes.io/zone=us-west-2a<br>Annotations:        kubeadm.alpha.kubernetes.io/cri-socket=unix:///var/run/containerd/containerd.sock<br>                    node.alpha.kubernetes.io/ttl=0<br>                    volumes.kubernetes.io/controller-managed-attach-detach=<span class="hljs-literal">true</span><br>CreationTimestamp:  Mon, 15 Jul 2024 10:30:15 +0800<br>Taints:             &lt;none&gt;<br>Unschedulable:      <span class="hljs-literal">false</span><br>Lease:<br>  HolderIdentity:  worker-node-01<br>  AcquireTime:     &lt;<span class="hljs-built_in">unset</span>&gt;<br>  RenewTime:       Thu, 07 Aug 2025 14:23:45 +0800<br>Conditions:<br>  Type                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message<br>  ----                 ------  -----------------                 ------------------                ------                       -------<br>  NetworkUnavailable   False   Mon, 15 Jul 2024 10:32:18 +0800   Mon, 15 Jul 2024 10:32:18 +0800   WeaveIsUp                    Weave pod has <span class="hljs-built_in">set</span> this<br>  MemoryPressure       False   Thu, 07 Aug 2025 14:24:12 +0800   Mon, 15 Jul 2024 10:30:15 +0800   KubeletHasSufficientMemory   kubelet has sufficient memory available<br>  DiskPressure         False   Thu, 07 Aug 2025 14:24:12 +0800   Mon, 15 Jul 2024 10:30:15 +0800   KubeletHasNoDiskPressure     kubelet has no disk pressure<br>  PIDPressure          False   Thu, 07 Aug 2025 14:24:12 +0800   Mon, 15 Jul 2024 10:30:15 +0800   KubeletHasSufficientPID      kubelet has sufficient PID available<br>  Ready                True    Thu, 07 Aug 2025 14:24:12 +0800   Mon, 15 Jul 2024 10:30:45 +0800   KubeletReady                 kubelet is posting ready status<br>Addresses:<br>  InternalIP:  10.0.1.25<br>  ExternalIP:  52.12.34.56<br>  Hostname:    worker-node-01<br>Capacity:<br>  cpu:                2<br>  ephemeral-storage:  20Gi<br>  hugepages-1Gi:      0<br>  hugepages-2Mi:      0<br>  memory:             8Gi<br>  pods:               110<br>Allocatable:<br>  cpu:                1900m<br>  ephemeral-storage:  18Gi<br>  hugepages-1Gi:      0<br>  hugepages-2Mi:      0<br>  memory:             7.5Gi<br>  pods:               110<br>System Info:<br>  Machine ID:                 ec2a1b2c3d4e5f6789012345678901ab<br>  System UUID:                EC2A1B2C-3D4E-5F67-8901-234567890123<br>  Boot ID:                    12345678-90ab-cdef-1234-567890abcdef<br>  Kernel Version:             5.4.0-150-generic<br>  OS Image:                   Ubuntu 20.04.6 LTS<br>  Operating System:           linux<br>  Architecture:               amd64<br>  Container Runtime Version:  containerd://1.6.21<br>  Kubelet Version:            v1.27.3<br>  Kube-Proxy Version:         v1.27.3<br>PodCIDR:                      10.244.1.0/24<br>PodCIDRs:                     10.244.1.0/24<br>Non-terminated Pods:          (8 <span class="hljs-keyword">in</span> total)<br>  Namespace                   Name                                CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age<br>  ---------                   ----                                ------------  ----------  ---------------  -------------  ---<br>  default                     nginx-deployment-7d79c4f8c9-abc12  100m (5%)     200m (10%)  128Mi (1%)       256Mi (3%)     25d<br>  default                     redis-master-6bf6d99f8-xyz34       100m (5%)     500m (26%)  256Mi (3%)       512Mi (6%)     25d<br>  kube-system                 coredns-5d78c9869d-def56           100m (5%)     0 (0%)      70Mi (0%)        170Mi (2%)     25d<br>  kube-system                 kube-proxy-gh78i                   0 (0%)        0 (0%)      0 (0%)           0 (0%)         25d<br>  kube-system                 weave-net-jkl90                    100m (5%)     0 (0%)      200Mi (2%)       0 (0%)         25d<br>  monitoring                  prometheus-node-exporter-mno12     100m (5%)     200m (10%)  50Mi (0%)        100Mi (1%)     20d<br>  logging                     fluentd-pqr34                      100m (5%)     500m (26%)  200Mi (2%)       500Mi (6%)     18d<br>  ingress-nginx              nginx-ingress-controller-stu56      100m (5%)     0 (0%)      90Mi (1%)        0 (0%)         15d<br>Allocated resources:<br>  (Total limits may be over 100 percent, i.e., overcommitted.)<br>  Resource           Requests     Limits<br>  --------           --------     ------<br>  cpu                700m (36%)   1400m (73%)<br>  memory             994Mi (13%)  1538Mi (20%)<br>  ephemeral-storage  0 (0%)       0 (0%)<br>  hugepages-1Gi      0 (0%)       0 (0%)<br>  hugepages-2Mi      0 (0%)       0 (0%)<br>Events:<br>  Type    Reason                   Age                From             Message<br>  ----    ------                   ----               ----             -------<br>  Normal  NodeHasSufficientMemory  23d                kubelet          Node worker-node-01 status is now: NodeHasSufficientMemory<br>  Normal  NodeHasNoDiskPressure    23d                kubelet          Node worker-node-01 status is now: NodeHasNoDiskPressure<br>  Normal  NodeHasSufficientPID     23d                kubelet          Node worker-node-01 status is now: NodeHasSufficientPID<br>  Normal  Starting                 23d                kubelet          Starting kubelet.<br>  Normal  NodeAllocatableEnforced  23d                kubelet          Updated Node Allocatable <span class="hljs-built_in">limit</span> across pods<br>  Normal  NodeReady                23d                kubelet          Node worker-node-01 status is now: NodeReady<br>  Normal  Rebooted                 5d                 kubelet          Node worker-node-01 has been rebooted, boot <span class="hljs-built_in">id</span>: 12345678-90ab-cdef-1234-567890abcdef<br>  Normal  Starting                 5d                 kube-proxy       Starting kube-proxy.<br></code></pre></td></tr></table></figure><p>其中包含了 以下信息</p><ul><li>Node的基本信息  名称，角色，标签，创建时间等</li><li>Annotations ： Node上的注解，主要用于内部控制</li><li>Conditions ： Node的当前状况，“Ready” 表示Node处于健康状态</li><li>Addresses ： Node的主机地址与主机名</li><li>Capacity &amp; Allocatable ： Capacity 给出Node可用的系统资源，包括CPU，内存数量，最大可调度Pod数量等，Allocatable 给出Node 可用于分配的资源量</li><li>System Info  ： 包括主机ID，系统UUID，Linux Kernel版本号，操作系统类型与版本，容器运行时的版本，kubelet与kube-proxy 的版本号等</li><li>Non-terminated Pods ： 当前运行的Pod列表概要信息</li><li>Allocated resources ： 已分配的资源使用概要信息，例如资源申请的最小，最大允许使用量占系统总量的百分比</li><li>Events ： Node相关的Event信息</li></ul><h1 id="NameSpace"><a href="#NameSpace" class="headerlink" title="NameSpace"></a>NameSpace</h1><p>namespace 是一种用于进行租户间资源隔离的一种资源对象，在一个集群中可以创建多个命名空间，每个命名空间都是互相独立的存在，属于不同命名空间的资源对象从逻辑上相互隔离。kubernetes 会自动创建两个命名空间 ，一个是默认的 ，一个是系统级的。用户创建的资源对象如果没有指定命名空间，则默认存放在 default命名空间中。在yaml中定义一个命名空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Namespace<br>metadata: <br>name: development<br></code></pre></td></tr></table></figure><p>通过kubectl get pods 只能看到默认命名空间中的 容器资源， 需要添加对应的namesapce 来查询某个命名空间中的对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># kubectl get pods --namespace=development</span><br>NAME            READY          STATUS           RESTARTS         AGE<br>busybox         1/1            Running          0                1m<br></code></pre></td></tr></table></figure><h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p>Service具有一个全局唯一的虚拟Cluster地址，Service一旦被创建，Kubernetes就会自动为它分配一个可用的ClusterIP地址，而且在Service的整个生命周期内，它的ClusterIP地址都不会变，客户端可用通过“虚拟IP地址+服务的端口”的形式直接访问该服务。</p><h1 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h1><p>每个Pod中都有一个被称为“根容器”的Pause容器,并组合了多个业务容器</p><ul><li>为多进程之间的协作提供一个抽象模型，将Pod作为基本的调度，复制等管理工作的最小单位，能让多个应用进程一起有效地调度和伸缩</li><li>Pod中的多个业务容器共享Pause容器的IP，并且共享Pause容器挂接的Volume，这样既简化了密切关联的业务容器之间的通信问题，也很好地解决了它们之间的文件共享问题</li></ul><p>Kubernetes为每个Pod都分配了唯一的IP地址，称之为”Pod IP”。 Pod中的多个容器共享Pod IP地址</p><p>Pod分为普通Pod和静态Pod。</p><p>静态Pod被存放在某个具体的Node上的一个具体文件中，并且只能在此Node上启动，运行</p><p>普通Pod一旦被创建，就会被存放在etcd中，随后被Master调度到某个具体的Node上并绑定，该Pod对应的Node上的kubelet进程实例化成一组相关的Docker容器并启动。当Pod中的某个容器停止时，Kubernetes会自动检查问题，并尝试重新启动Pod，如果Pod所在的Node宕机，则会由Master将所有Pod 重新调度到其他Node上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">kubeguide/tomcat-app:v1</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>Pod的IP地址家伙是那个容器端口 组成了一个Endpoint，代表此Pod中的一个服务进程的对外通信地址。</p><h1 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h1><p>Event是一个事件记录，记录了事件的最早产生时间，最后重现时间，重复次数，发起者，类型，以及导致此事件的原因等众多信息。</p><h1 id="Label与Label-Selector"><a href="#Label与Label-Selector" class="headerlink" title="Label与Label Selector"></a>Label与Label Selector</h1><p>Label用于对给某个资源添加信息标签。再通过表达式完成对某个资源对象的筛选</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">基于等式的Label Selector表达式匹配 label :<br>name = redis-slave : 匹配所有具有 <span class="hljs-string">&quot;name = redis-slave&quot;</span> Label 的资源对象<br><span class="hljs-built_in">env</span>! = production: 匹配所有不具有 <span class="hljs-string">&quot;env=production&quot;</span> Label 的资源对象<br>基于集合的Label Selector表达式匹配 label :<br>name <span class="hljs-keyword">in</span> (redis-master, redis-slave): 匹配所有具有 <span class="hljs-string">&quot;name=redis-master&quot;</span> Label或者 <span class="hljs-string">&quot;name=redis-slave&quot;</span> Label的资源对象<br>name not <span class="hljs-keyword">in</span> (php-frontend): 匹配所有不具有 <span class="hljs-string">&quot;name=php-frontend&quot;</span> Label的资源对象<br></code></pre></td></tr></table></figure><p>在Pod中定义标签信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br></code></pre></td></tr></table></figure><p>对应的Service myweb 通过Label Selector 与 pod发生关联</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br></code></pre></td></tr></table></figure><h1 id="Pod-与-Deployment"><a href="#Pod-与-Deployment" class="headerlink" title="Pod 与 Deployment"></a>Pod 与 Deployment</h1><p>Deployment 提供了一个Pod 资源对象的部署模板</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchLabels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">template:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br><span class="hljs-string">spec</span> <br></code></pre></td></tr></table></figure><p>replicas : pod 副本数量</p><p>selector: 目标Pod的Label Selector</p><p>template: 用于自动创建新Pod副本的模板</p><p>以一个单容器的tomcat pod资源对象为例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-deploy</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">selector:</span> <br><span class="hljs-attr">matchLables:</span><br><span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">matchExpressions:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">(key:</span> <span class="hljs-string">tier</span> <span class="hljs-string">,</span> <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span> <span class="hljs-string">,</span> <span class="hljs-attr">values:</span> [<span class="hljs-string">frontend</span>]<span class="hljs-string">)</span><br><span class="hljs-attr">template:</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">app-demo</span><br><span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-demo</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">tomcat</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>运行创建对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl create -f tomcat-deployment.yaml</span><br><span class="hljs-string">deployment</span>  <span class="hljs-string">&quot;tomcat-deploy&quot;</span> <span class="hljs-string">created</span><br></code></pre></td></tr></table></figure><p>查看deployment 对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get deployments</span><br><span class="hljs-string">NAME</span>              <span class="hljs-string">DESIRED</span>      <span class="hljs-string">CURRENT</span>   <span class="hljs-string">UP-TO-DATE</span>     <span class="hljs-string">AVAILABLE</span>      <span class="hljs-string">AGE</span><br><span class="hljs-string">tomcat-deploy</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>         <span class="hljs-number">1</span>              <span class="hljs-number">1</span>              <span class="hljs-string">4m</span><br></code></pre></td></tr></table></figure><p>DESIRED: Pod副本数量的期望值，既Deployment中描述的副本数量</p><p>CURRENT: 当前实际的副本数量</p><p>UP-TO-DATE: 最新版本的Pod的副本数量，用于指示在滚动更新的过程中，有多少Pod副本已经成功工薪</p><p>AVAILABLE: 当前集群中可用的Pod副本数量</p><p>可用通过查看 replicaset 查看 配置模板与副本的对应关系</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get replicaset</span><br><span class="hljs-string">NAME</span>                       <span class="hljs-string">DESIRED</span>     <span class="hljs-string">CURRENT</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">tomcat-deploy-1640611518</span>   <span class="hljs-number">1</span>           <span class="hljs-number">1</span>         <span class="hljs-string">1m</span><br></code></pre></td></tr></table></figure><h1 id="Service的ClusterIP地址"><a href="#Service的ClusterIP地址" class="headerlink" title="Service的ClusterIP地址"></a>Service的ClusterIP地址</h1><p>每个Pod都会被分配一个单独的IP地址，并且每个Pod都提供了一个独立的Endpoint 以供客户端访问。Kubenetes在内部的每个Node上都运行了一套全局的虚拟负载均衡器，自动地注入并实时更新集群中所有Service的路由表，通过iptables或IPVS机制，将Service的请求转发到后端对应的某个Pod实例上，并在内部实现服务的负载均衡与会话保持机制。同时Kubernetes为Service提供了与服务绑定的ClusterIP 地址。这样就可以将服务发现变为TCP&#x2F;IP通信。</p><p>但是 ClusterIP 是一个虚拟的IP地址</p><ul><li>ClusterIP地址仅仅作用于Kubernetes Services 这个对象，并由Kubernetes管理和分配IP地址，与Node和Master所在的物理网络无关</li><li>因为没有一个”实体的网络对象“来响应，所以ClusterIP 无法被Ping通。ClusterIP地址只能与Service Port组成一个具体的服务访问端点。</li><li>ClusterIP属于Kubernetes集群这个封闭的空间，集群外的节点若想访问这个通信端口，则要做一些额外的工作。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">apiVersion：</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-service</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br></code></pre></td></tr></table></figure><p>创建服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl create -f tomcat-service.yaml </span><br><span class="hljs-string">service</span> <span class="hljs-string">&quot;tomcat-service&quot;</span> <span class="hljs-string">created</span><br></code></pre></td></tr></table></figure><p>通过查看端点列表，可以看到对应的pods实例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get endpoints</span><br><span class="hljs-string">NAME</span>            <span class="hljs-string">ENDPOINTS</span>                <span class="hljs-string">AGE</span><br><span class="hljs-string">kubernetes</span>      <span class="hljs-number">192.168</span><span class="hljs-number">.18</span><span class="hljs-number">.131</span><span class="hljs-string">:6443</span>      <span class="hljs-string">15d</span><br><span class="hljs-string">tomcat-service</span>  <span class="hljs-number">172.17</span><span class="hljs-number">.1</span><span class="hljs-number">.3</span><span class="hljs-string">:8080</span>          <span class="hljs-string">1m</span><br></code></pre></td></tr></table></figure><p>查询ClusterIP信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get service tomcat-service -o yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.245</span><span class="hljs-number">.85</span><span class="hljs-number">.70</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br><span class="hljs-attr">status:</span><br><span class="hljs-attr">loadBalancer:</span> <span class="hljs-string">()</span><br></code></pre></td></tr></table></figure><p>targetPort 用于确定提供该服务的容器所暴露的端口号，即具体的业务进程在容器内的targetPort提供TCP&#x2F;IP 接入；port属性则定义了Service 的端口。</p><p>还有一种特殊的Service: Headless Service 这时的服务不具备Cluster地址，而是通过DNS直接返回该Service对应的全部Pod的Endpoint列表</p><h1 id="多端口"><a href="#多端口" class="headerlink" title="多端口"></a>多端口</h1><p>在多Endpoint的情况下，每个Endpoint都定义了一个名称进行区分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-service</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">service-port</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8005</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">shutdown-port</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br></code></pre></td></tr></table></figure><h1 id="外网访问"><a href="#外网访问" class="headerlink" title="外网访问"></a>外网访问</h1><p>如何从集群外访问服务</p><ul><li>Node IP : Node的IP地址。</li><li>Pod IP : Pod的IP 地址</li><li>Service IP： Service的IP 地址</li></ul><p>Node IP 对应的是Node的物理网卡地址，所以的服务访问必然需要通过Node IP进行通信</p><p>Pod IP是每个Pod的IP地址，Pod IP间的通信是通过虚拟二层网络进行的</p><p>Service IP 使用的是集群中的地址，无法直接使用这个地址。通过Node Port 来完成对外的内部IP暴露过程。 NodePort 的实现是，在Kubernetes集群的每个Node上都为需要外部访问的Service开启一个对应的TCP监听端口，外部系统只要用任意一个Node的IP地址+NodePort端口号即可访问该服务。</p><p>通过负载均衡器来完成IP请求的分发过程。</p><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><p>通过Ingress提供对多个Service的代理服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">name-virtual-host-ingress</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">foo.bar.com</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-attr">paths:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br><span class="hljs-attr">serviceName:</span> <span class="hljs-string">service1</span><br><span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">bar.foo.com</span><br><span class="hljs-attr">paths:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br><span class="hljs-attr">serviceName:</span> <span class="hljs-string">service2</span><br><span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h1 id="有状态应用集群"><a href="#有状态应用集群" class="headerlink" title="有状态应用集群"></a>有状态应用集群</h1><p>有状态集群的特征</p><ul><li>每个节点都有固定的身份ID，通过这个ID，集群中的成员可以相互发现并通信</li><li>集群的规模是比较固定的，集群规模不能随意变动</li><li>集群中的每个节点都是有状态的，通常会持久化数据到永久存储中，每个节点在重启后都需要使用原有的持久化数据</li><li>集群中成员节点的启动顺序通常也是确定的</li><li>如果磁盘损坏，则集群中的某个节点无法正常运行，集群功能受损</li></ul><h1 id="通过StatefulSet提供状态控制"><a href="#通过StatefulSet提供状态控制" class="headerlink" title="通过StatefulSet提供状态控制"></a>通过StatefulSet提供状态控制</h1><ul><li>StatefulSet 里的每个Pod都有稳定，唯一的网络标识，可用于发现集群中的其他成员。</li><li>StatefulSet控制的Pod副本的启停顺序是受控的，在操作第n个Pod时，前n-1个Pod已经是运行且准备好的状态</li><li>StatefulSet里的Pod采用稳定的持久化存储卷，通过PV或者PVC来实现，在删除Pod时默认不会删除StatefulSet相关的存储卷</li></ul><h1 id="批处理应用"><a href="#批处理应用" class="headerlink" title="批处理应用"></a>批处理应用</h1><p>批处理应用特点是由一个或多个进程处理一组数据，在数据处理完成后，批处理任务自动结束。kubernetes 通过Job 完成 这类应用的支持</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Job</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">pi</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">pi</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">perl</span><br><span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;perl&quot;</span>,<span class="hljs-string">&quot;-Mbignum=bpi&quot;</span>,<span class="hljs-string">&quot;-wle&quot;</span>,<span class="hljs-string">&quot;print bpi(100)&quot;</span>]<br><span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br><span class="hljs-attr">parallelism:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">completions:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>completions : 需要运行的任务总数</p><p>parallelism : 并发运行的数量</p><h1 id="周期性运行批处理任务"><a href="#周期性运行批处理任务" class="headerlink" title="周期性运行批处理任务"></a>周期性运行批处理任务</h1><p>通过使用CronJob 可以周期性的执行某个任务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronJob</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">spec:</span> <br><span class="hljs-attr">schedule:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">jobTemplate:</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">template:</span> <br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">command:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">data:</span> <span class="hljs-string">echo</span> <span class="hljs-string">Hello</span> <span class="hljs-string">from</span> <span class="hljs-string">the</span> <span class="hljs-string">Kubernetes</span> <span class="hljs-string">cluster</span><br><span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><br></code></pre></td></tr></table></figure><h1 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h1><h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><ul><li>用户将配置文件的内容保存到ConfigMap中，文件名可作为key,value就是整个文件的内容，多个配置文件都可以被放入同一个ConfigMap</li><li>在建模用户应用时，在Pod中将ConfigMap定义为特殊的Volume进行挂载。在Pod被调度到某个具体的Node上时，ConfigMap里的配置文件会被自动还原到本地目录下，如何映射到Pod中指定的配置目录下，这样用户的程序就可以无感知地读取配置了</li><li>在ConfigMap修改后，Kubernetes会自动重新获取ConfigMap的内容，并在目标Node上更新对应的文件</li></ul><h2 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h2><ul><li>Secret用于解决应用配置问题。</li></ul><h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><h3 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h3><p>Volume是Pod中能够被多个容器访问的共享目录。</p><p>Kubernetes中的Volume被定义在Pod中，被一个Pod中的多个容器挂载到具体的文件目录下；Kubernetes中的Volume与Pod的生命周期相同，但与容器的生命周期不想管</p><p>Kubernetes支持多种类型的Volume</p><p>对Volume的声明</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">template:</span><br><span class="hljs-attr">metedata:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">app-demo</span><br><span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">datavol</span><br><span class="hljs-attr">emptyDir:</span> &#123;&#125;<br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-demo</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">tomcat</span><br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/mydata-data</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">datavol</span><br><span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br></code></pre></td></tr></table></figure><h2 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h2><p>emptyDir 是用于进行临时存储的空间，由Kubernetes自动分配的一个目录</p><p>当Pod从Node上移除时，emptyDir中的数据也被永久移除，它可以作为：</p><ul><li>临时空间，用于某些应用程序运行时所需的临时目录，且无须永久保留</li><li>在长时间任务执行过程中使用的临时目录</li><li>一个容器需要从另一个容器中获取的数据目录</li></ul><h2 id="hostPath"><a href="#hostPath" class="headerlink" title="hostPath"></a>hostPath</h2><p>hostPath类型用于将Node文件系统的目录或文件挂载到容器内部使用</p><ul><li>在容器应用程序生成的日志文件需要永久保存时，可以使用宿主机上的告诉文件系统对其进行存储</li><li>在需要访问宿主机上Docker引擎内部数据结构的容器应用时，可以通过定义hostPath为宿主机&#x2F;var&#x2F;lib&#x2F;docker目录，使容器内的应用直接访问Docker的文件系统</li></ul><p>需要注意的地方</p><ul><li>在不同的Node上具有相同配置的Pod，可能会因为宿主机上的目录和文件不同，导致对Volume上目录和文件的访问结果不一致</li><li>如果使用了资源配额管理，则Kubernetes无法将hostPath在宿主机上使用的资源纳入管理</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">names :</span> <span class="hljs-string">&quot;presisent-storage&quot;</span><br><span class="hljs-attr">hostPath:</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/data&quot;</span><br></code></pre></td></tr></table></figure><h2 id="动态存储管理"><a href="#动态存储管理" class="headerlink" title="动态存储管理"></a>动态存储管理</h2><h3 id="Persistent-Volume"><a href="#Persistent-Volume" class="headerlink" title="Persistent Volume"></a>Persistent Volume</h3><p>PV 是一个由系统动态创建的存储卷。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersoin:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">standard</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">kubernetes.io/aws-ebs</span><br><span class="hljs-attr">parameters:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">gp2</span><br><span class="hljs-attr">reclaimPolicy:</span> <span class="hljs-string">Retain</span><br><span class="hljs-attr">allowVolumeExpansion:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">mountOptions:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">debug</span><br><span class="hljs-attr">volumeBindingMode:</span> <span class="hljs-string">Immediate</span><br></code></pre></td></tr></table></figure><p>provisioner : 代表了创建PV的第三方存储插件</p><p>parameters : 创建PV时的必要参数</p><p>reclaimPolicy : PV回收策略</p><h3 id="PVC（persistent-volume-claim）"><a href="#PVC（persistent-volume-claim）" class="headerlink" title="PVC（persistent volume claim）"></a>PVC（persistent volume claim）</h3><p>PVC表示应用希望申请的PV规格，包括</p><p>accessModes: 存储访问模式</p><p>storageClassName: 用哪种StorageClass 实现动态创建</p><p>resources: 存储的具体规格</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">claim1</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">accessMode:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br><span class="hljs-attr">storageClassName:</span> <span class="hljs-string">standard</span><br><span class="hljs-attr">resources:</span><br><span class="hljs-attr">requests:</span><br><span class="hljs-attr">storage:</span> <span class="hljs-string">30Gi</span><br></code></pre></td></tr></table></figure><p>通过在Pod中引用PVC 来进行PV的绑定</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">tomcat:8.5.38-jre8</span><br><span class="hljs-attr">volumeMounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcatedata</span><br><span class="hljs-attr">mountPath :</span> <span class="hljs-string">&quot;/data&quot;</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcatedata</span><br><span class="hljs-attr">persistentVolumeClaim:</span><br><span class="hljs-attr">claimName:</span> <span class="hljs-string">claim1</span><br></code></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>创建Deployment , 定义微服务结构</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">app/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchLables:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">template:</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">containerPort:3306</span><br><span class="hljs-attr">env:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure><p>创建Deployment</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl apply -f mysql-deploy.yaml</span><br><span class="hljs-string">deployment.apps/mysql</span> <span class="hljs-string">created</span><br></code></pre></td></tr></table></figure><p>通过命令查看Deployment:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get deployments</span><br><span class="hljs-string">NAME</span>    <span class="hljs-string">READY</span>     <span class="hljs-string">UP-TO-DATE</span>   <span class="hljs-string">AVAILABLE</span>       <span class="hljs-string">AGE</span><br><span class="hljs-string">mysql</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>       <span class="hljs-number">1</span>            <span class="hljs-number">1</span>               <span class="hljs-string">4m13s</span><br></code></pre></td></tr></table></figure><p>检查Pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get pods</span><br><span class="hljs-string">NAME</span>                    <span class="hljs-string">READY</span>      <span class="hljs-string">STATUS</span>      <span class="hljs-string">RESTARTS</span>        <span class="hljs-string">AGE</span><br><span class="hljs-string">mysql-85f4b4cdf4-k97</span>    <span class="hljs-number">1</span>          <span class="hljs-string">Running</span>     <span class="hljs-number">0</span>               <span class="hljs-string">13s</span><br></code></pre></td></tr></table></figure><p>查看docker中的容器情况</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># docker ps  | grep mysql</span><br><span class="hljs-string">72ca992535b4</span> <span class="hljs-string">mysql</span><br><span class="hljs-string">&quot;docker-entrypoint.sh&quot;</span>    <span class="hljs-string">12minutes</span> <span class="hljs-string">age</span>      <span class="hljs-string">UP</span>  <span class="hljs-number">12</span> <span class="hljs-string">minutes</span><br><span class="hljs-string">k8s_mysql.86dc506e_mysql-c95jc_default_511d6705-5051-1le6-a9d8-000c29ed42c1_9f89d0b4</span><br> <span class="hljs-string">76c1790aad27</span>  <span class="hljs-string">k8s.gcr.io/pause:3.2</span>  <span class="hljs-string">&quot;/pause&quot;</span>   <span class="hljs-number">12</span> <span class="hljs-string">minutes</span> <span class="hljs-string">age</span>   <span class="hljs-string">UP</span> <span class="hljs-number">12</span> <span class="hljs-string">minutes</span>   <span class="hljs-string">k8s_POD.16b</span><br> <span class="hljs-string">20365_mysql-c95jc_default_511d6705-5051-lie6-a9d8-000c29ed42c1_28520aba</span><br></code></pre></td></tr></table></figure><p>创建一个与之关联的service文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-string">-port:</span> <span class="hljs-number">3306</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br></code></pre></td></tr></table></figure><p>创建服务对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl create -f mysql-svc.yaml</span><br><span class="hljs-string">service</span> <span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-string">created</span><br></code></pre></td></tr></table></figure><p>查看Service 对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get service mysql</span><br><span class="hljs-string">NAME</span>             <span class="hljs-string">CLUSTER-IP</span>           <span class="hljs-string">EXTERNAL-IP</span>         <span class="hljs-string">PORT</span>           <span class="hljs-string">AGE</span><br><span class="hljs-string">mysq</span>             <span class="hljs-number">10.245</span><span class="hljs-number">.161</span><span class="hljs-number">.22</span>        <span class="hljs-string">&lt;none&gt;</span>              <span class="hljs-number">3306</span><span class="hljs-string">/TCP</span>       <span class="hljs-string">48s</span><br></code></pre></td></tr></table></figure><p>启动Tomcat</p><p>定义deployment</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">matchLabels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">template:</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">labels:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">containers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">kubeguide/tomcat-app:v1</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">env:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_SERVICE_HOST</span><br><span class="hljs-attr">value:</span> <span class="hljs-number">10.245</span><span class="hljs-number">.161</span><span class="hljs-number">.22</span><br></code></pre></td></tr></table></figure><p>创建</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl apply -f myweb-deploy.yaml</span><br><span class="hljs-string">deployment.apps/myweb</span> <span class="hljs-string">created</span><br><br><span class="hljs-comment"># kubectl get pods </span><br><span class="hljs-string">NAME</span>                       <span class="hljs-string">READY</span>        <span class="hljs-string">STATUS</span>            <span class="hljs-string">RESTARTS</span>           <span class="hljs-string">AGE</span><br><span class="hljs-string">mysql-85f4b4cdf4-k97wh</span>     <span class="hljs-number">1</span><span class="hljs-string">/1</span>          <span class="hljs-string">Running</span>           <span class="hljs-number">0</span>                  <span class="hljs-string">23m</span><br><span class="hljs-string">myweb-6557d8b869-gdc7g</span>     <span class="hljs-number">1</span><span class="hljs-string">/1</span>          <span class="hljs-string">Running</span>           <span class="hljs-number">0</span>                  <span class="hljs-string">2m56s</span><br><span class="hljs-string">myweb-6557d8b869-w5wwx</span>     <span class="hljs-number">1</span><span class="hljs-string">/1</span>          <span class="hljs-string">Running</span>           <span class="hljs-number">0</span>                  <span class="hljs-string">2m56s</span>   <br></code></pre></td></tr></table></figure><p>创建对应Service</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span> <br><span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30001</span><br><span class="hljs-attr">selector:</span><br><span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br><br><span class="hljs-comment"># kubectl create -f myweb-svc.yaml</span><br><span class="hljs-string">service/myweb</span> <span class="hljs-string">created</span><br></code></pre></td></tr></table></figure><p>通过kubectl get 命令查看已创建的Service</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubectl get svc</span><br><span class="hljs-string">NAME</span>          <span class="hljs-string">TYPE</span>          <span class="hljs-string">CLUSTER-IP</span>      <span class="hljs-string">EXTERNAL-IP</span>   <span class="hljs-string">PORT(S)</span>     <span class="hljs-string">AGE</span><br><span class="hljs-string">kuberntes</span>     <span class="hljs-string">ClusterIP</span>     <span class="hljs-number">10.245</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>      <span class="hljs-string">&lt;none&gt;</span>        <span class="hljs-number">443</span><span class="hljs-string">/TCP</span>     <span class="hljs-string">174m</span><br><span class="hljs-string">mysql</span>         <span class="hljs-string">ClusterIP</span>     <span class="hljs-number">10.245</span><span class="hljs-number">.161</span><span class="hljs-number">.22</span>   <span class="hljs-string">&lt;none&gt;</span>        <span class="hljs-number">3306</span><span class="hljs-string">/TCP</span>    <span class="hljs-string">18m</span><br><span class="hljs-string">myweb</span>         <span class="hljs-string">NodePort</span>      <span class="hljs-number">10.245</span><span class="hljs-number">.46</span><span class="hljs-number">.172</span>   <span class="hljs-string">&lt;none&gt;</span>        <span class="hljs-number">8080</span><span class="hljs-string">:30001/TCP</span>  <span class="hljs-string">2m35s</span>           <br></code></pre></td></tr></table></figure><p>完成了一个简易的微服务搭建。</p><p><img src="https://i.111666.best/image/juTIoMTTQYxGvwxaIS1mJ8.png" alt="架构图"></p>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>虚拟化</tag>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程相关</title>
    <link href="/2025/08/06/%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    <url>/2025/08/06/%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h3 id="状态设计"><a href="#状态设计" class="headerlink" title="状态设计"></a>状态设计</h3><p>RUNNING  ： 表示线程池处于运行状态，此时线程池能够接收新提交的任务，并且能够处理阻塞队列中的任务</p><p>SHUTDOWN ： 表示线程池处于关闭状态，此时线程池不能接收新提交的任务，但是不会中断正在执行任务的线程，能够继续执行正在执行的任务，也能够处理阻塞队列中已经保存的任务。如果线程池处于RUNNING状态，那么调用线程池的shutdown()方法会使线程池进入SHUTDOWN状态</p><p>STOP ：表示线程池处于停止状态，此时线程池不能接收新提交的任务，也不能继续处理阻塞队列中的任务，同时会中断正在执行任务的线程，那么调用线程池的shutdownNow()方法会使线程池进入STOP状态</p><p>TIDYING ：如果线程池中所有的任务都已经终止，有效线程数为0，线程池就会进入TIDYING状态。换句话说，线程池中已经没有正在执行的任务，并且线程池中的阻塞队列为空，同时线程池中的工作线程数量为0，线程池就会进入TIDYING状态</p><p>TERMINATED ： 如果线程池处于TIDYING状态，此时调用线程池的terminated()方法，线程池就会进入TERMINATED状态</p><h3 id="状态转移过程"><a href="#状态转移过程" class="headerlink" title="状态转移过程"></a>状态转移过程</h3><ol><li>当线程池处于RUNNING状态时，显式调用线程池的shutdown 方法，或者隐式调用finalize()方法，线程池会由RUNNING状态转换为SHUTDOWN状态</li><li>当线程池处于RUNNING状态时，显式调用线程池的shutdownNow()方法，线程池会由RUNNING状态转换为STOP状态</li><li>当线程池处于SHUTDONW状态时，显式调用线程池的shutdownNow()方法，线程池会由SHUTDOWN状态转换为STOP状态</li><li>当线程池处于SHUTDOWN状态时，如果线程池中无工作线程，并且阻塞队列为空，则线程池会由SHUTDOWN状态转换为TIDYING状态</li><li>当线程池处于STOP状态时，如果线程池中无工作线程，则线程池会由STOP状态转换为TIDYING状态</li><li>当线程池处于TIDYING状态时，调用线程池的terminated()方法，线程池会由TIDYING状态变为TERMINATED状态</li></ol><h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><p><strong>Executors</strong></p><p>executors 提供了多种线程池创建方式</p><ul><li>Executors.newCachedThreadPool 方法<br>创建一个可缓存的线程池，如果线程池中的线程超过了运行任务的需要，则可以灵活地回收线程，再向线程池中提交任务，则会新建线程来执行任务</li><li>Executors.newFixedThreadPool方法<br>创建一个线程数量固定的线程池，能够有效地控制线程池的最大并发数，当向线程池中提交任务时，如果线程池中有空闲线程，则执行任务。如果线程池中无空闲线程，则将任务放入阻塞队列中，待线程池中出现空闲线程，再执行阻塞队列中的任务。</li><li>Executors.newScheduledThreadPool 方法</li></ul><p>创建一个计划线程池</p><ul><li>Executors.newSingleThreadExecutor 方法<br>创建一个只有一个线程的线程池，能够保证提交到线程池中的所有任务按照先进先出的顺序，或者按照某个优先级的顺序来执行，当向线程池中提交任务时，如果线程池中无空闲线程，则会将任务保存在阻塞队列中。</li><li>Executors.newSingleThreadScheduledExecutor方法<br>创建一个只有一个线程的线程池，并进行周期性执行任务</li></ul><p><strong>ThreadPoolExecutors</strong></p><p><strong>Executors 在ThreadPoolExecutors 的基础上进行扩展</strong></p><p>ThreadPoolExecutors 的基础构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize , </span><br><span class="hljs-params"><span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params"><span class="hljs-type">long</span> keepAliveTime ,</span><br><span class="hljs-params">BlockingQueue&lt;Runnale&gt; workQueue,</span><br><span class="hljs-params">ThreadFactory threadFactory,</span><br><span class="hljs-params">RejectedExecutionHandler handler)</span>&#123;<br><span class="hljs-keyword">if</span> (corePoolSize &gt; <span class="hljs-number">0</span> || <br>maximumPoolSize&lt;= <span class="hljs-number">0</span> ||<br>maximumPoolSize&lt; corePoolSize || <br>keepAliveTime &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br><span class="hljs-keyword">if</span> (workQueue == <span class="hljs-literal">null</span> || threadFactory == <span class="hljs-literal">null</span> || handler == <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br><span class="hljs-built_in">this</span>.acc = System.getSecurityManager() == <span class="hljs-literal">null</span> ?<br><span class="hljs-literal">null</span> : AccessController.getContext();<br><span class="hljs-built_in">this</span>.corePoolSize = corePoolSize ;<br><span class="hljs-built_in">this</span>.maximumPoolSize = maximumPoolSize ;<br><span class="hljs-built_in">this</span>.workQueue = workQueue;<br><span class="hljs-built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br><span class="hljs-built_in">this</span>.threadFactory = threadFactory ;<br><span class="hljs-built_in">this</span>.handler = handler ;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><p>corePoolSize : 表示线程池中的核心线程数</p><p>maximumPoolSize : 表示线程池中的最大线程数</p><p>keepAliveTime : 在表示线程池中的线程空闲时，能够保持的最长时间</p><p>unit : 表示keepAliveTime的单位时间</p><p>workQueue : 表示线程中的阻塞队列</p><p>threadFactory : 表示用来创建线程的线程工厂</p><p>handler : 表示线程池拒绝处理任务的时的策略</p><ol><li>当线程池中运行的线程数小于corePoolSize时，如果向 线程池中提交任务，那么即使线程池中存在空闲队列，也会直接创建新线程来执行任务</li><li>如果线程池中运行的线程数大于corePoolSize，并且小于maximumPoolSize，那么只有当workQueue队列已满时，才会创建新的线程来执行新提交的任务</li><li>在调用ThreadPoolExecutor类的构造方法时，如果传递的corePoolSize和maximumPoolSize参数相同，那么创建的线程池大小是固定的，此时如果向线程池中提交任务，并且workQueue队列未满，就会将新提交的任务保存到workQueue队列中，等待空闲的线程，从workQueue队列中获取任务并执行</li><li>如果线程池中运行的线程数大于maximumPoolSize，并且此时workQueue队列已满，则会触发指定的拒绝策略来拒绝任务的执行</li></ol><h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><p>如果线程池中的workQueue阻塞队列已满，同时线程池中的线程数已经达到maximumPoolSize,且没有空闲线程，此时继续有任务提交到线程池，就需要采取某种策略来拒绝任务的执行</p><p>在ThreadPoolExecutor类的executor()方法中,会在适当时机调用reject(command)方法来执行拒绝策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">reject</span><span class="hljs-params">(Runnable command)</span>&#123;<br>handler.rejectedExecution(command,<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在reject(command)方法中调用了handler的rejectedExecution()方法，这里，在ThreadPoolExecutor类中声明了handler变量，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> RejctedExecutionHandler handler;<br></code></pre></td></tr></table></figure><p>拒绝策略执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RejectedExecutionHandler</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor executor)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>RejctedExecutionHandler 有四个默认实现 分别代表</p><ul><li>AbortPolicy                              当线程池无法处理新任务时，直接抛出RejectedExecutionException异常</li><li>CallerRunsPolicy                     当线程池无法处理新任务时，让提交任务的线程（调用者线程）直接执行该任务</li><li>DiscardOldestPolicy              丢弃队列中最老的（等待时间最长的）任务</li><li>DiscardPolicy                           直接丢弃无法处理的新任务</li></ul><p>根据最初的传入参数来选择对应的策略</p><h2 id="线程池关闭"><a href="#线程池关闭" class="headerlink" title="线程池关闭"></a>线程池关闭</h2><p>使用shutdown 或者shutdownNow关闭线程池</p><h2 id="线程池线程数设置"><a href="#线程池线程数设置" class="headerlink" title="线程池线程数设置"></a>线程池线程数设置</h2><p>I&#x2F;O 密集 ： 使用I&#x2F;O阻塞时间 所以是 I&#x2F;O阻塞时间&#x2F;CPU计算耗时</p><p>CPU 密集 ： 一般与CPU核心数有关，或者+1 防止所有线程都在阻塞状态CPU闲置</p><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>ThreadLocal 是 Java 提供的一种线程隔离机制，它为每个使用该变量的线程提供独立的变量副本，每个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalTest</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;String&gt; THREAD_LOCAL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;String&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>( ()-&gt; &#123;<br>THREAD_LOCAL.set(<span class="hljs-string">&quot;ThreadA: &quot;</span> +  Thread.currentThread().getName());<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;本地变量中的值为&quot;</span>+ THREAD_LOCAL.get());<br>&#125;,<span class="hljs-string">&quot;Thread-A&quot;</span>);<br><br><span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>( ()-&gt; &#123;<br>THREAD_LOCAL.set(<span class="hljs-string">&quot;ThreadB: &quot;</span> +  Thread.currentThread().getName());<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;本地变量中的值为&quot;</span>+ THREAD_LOCAL.get());<br>&#125;,<span class="hljs-string">&quot;Thread-B&quot;</span>);<br>threadA.start();<br>threadB.start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>threadlocal的核心原理是</p><p>在编译时，给出了定义内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;String&gt; THREAD_LOCAL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;String&gt;();<br></code></pre></td></tr></table></figure><p>当运行时线程结构中定义了存储线程局部变量的结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 线程服务被加载起来</span><br><span class="hljs-comment">// 这时候在线程实现中存在</span><br>ThreadLocal.<span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">threadLocals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>ThreadLocal.<span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">inheritableThreadLocals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>当使用set方法时,ThreadLocal 先获取当前线程，再通过getMap获取到本地的ThreadLocalMap 之后向Map中设置局部变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span>&#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br><span class="hljs-keyword">if</span>(map!=<span class="hljs-literal">null</span>)<br>map.set(<span class="hljs-built_in">this</span>,value);<br><span class="hljs-keyword">else</span> <br>createMap(t,value);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// getMap实现</span><br>ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span>&#123;<br>retun t.threadLocals<br>&#125;<br></code></pre></td></tr></table></figure><p>get方法, 与set一样 获取thread 的本地变量容器结构，从中获取对象，并转换为目标类型对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br><span class="hljs-keyword">if</span>(map != <span class="hljs-literal">null</span>)&#123;<br>ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> map.getEntry(<span class="hljs-built_in">this</span>);<br><span class="hljs-keyword">if</span>(e != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (T)e.value;<br><span class="hljs-keyword">return</span> result ;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>setInitialvalue()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> T <span class="hljs-title function_">setInitialvalue</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> initialvalue();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br><span class="hljs-keyword">if</span>(map!=<span class="hljs-literal">null</span>)<br>map.set(<span class="hljs-built_in">this</span>,value);<br><span class="hljs-keyword">else</span> <br>createMap(t,value);<br><span class="hljs-keyword">return</span> value ;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> T <span class="hljs-title function_">initialvalue</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p>remove 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> getMap(Thread.currentThread());<br><span class="hljs-keyword">if</span>(m!=<span class="hljs-literal">null</span>)&#123;<br>m.remove(<span class="hljs-built_in">this</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="InheritableThreadLocal"><a href="#InheritableThreadLocal" class="headerlink" title="InheritableThreadLocal"></a>InheritableThreadLocal</h2><p>InheritableThreadLocal 会获得在主线程中存储的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritableThreadLocalTest</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;String&gt; THREAD_LOCAL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;String&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>THREAD_LOCAL.set(<span class="hljs-string">&quot;codfish&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>System.out.println(<span class="hljs-string">&quot;子线程中的本地变量值为&quot;</span>+THREAD_LOCAL.get());<br>&#125;).start();<br>System.out.println(<span class="hljs-string">&quot;在主线程中获取到的本地变量值为&quot;</span>+THREAD_LOCAL.get());<br>&#125;<br>&#125;<br><span class="hljs-comment">// 两者最终输出结果相同</span><br></code></pre></td></tr></table></figure><p>InheritableThreadLocal 的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadLocal</span>&lt;T&gt;&#123;<br><span class="hljs-keyword">protected</span> T <span class="hljs-title function_">childvalue</span><span class="hljs-params">(T parentvalue)</span>&#123;<br><span class="hljs-keyword">return</span> parentvalue ;<br>&#125;<br>ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span>&#123;<br><span class="hljs-keyword">return</span> t.inheritableThreadLocals;<br>&#125;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">createMap</span><span class="hljs-params">(Thread t , T firstvalue)</span>&#123;<br>t.inheritableThreadLocals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(<span class="hljs-built_in">this</span>,firstvalue);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Thread的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread</span><span class="hljs-params">()</span>&#123;<br>init(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;Thread-&quot;</span> + nextThreadNum(),<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread</span><span class="hljs-params">(Runnable target)</span>&#123;<br>init(<span class="hljs-literal">null</span>,target,<span class="hljs-string">&quot;Thread-&quot;</span> + nextThreadNum(),<span class="hljs-number">0</span>);<br>&#125;<br>Thread(Runnable target, AccessControlContext acc)&#123;<br>init(<span class="hljs-literal">null</span>,target,<span class="hljs-string">&quot;Thread-&quot;</span> + nextThreadNum(),<span class="hljs-number">0</span>,acc,<span class="hljs-literal">false</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread</span><span class="hljs-params">(ThreadGroup group , Runnable target)</span>&#123;<br>init(group,target, <span class="hljs-string">&quot;Thread-&quot;</span> + nextThreadNum(),<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread</span><span class="hljs-params">(String name)</span>&#123;<br>init(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,name,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread</span><span class="hljs-params">(ThreadGroup group , String name)</span>&#123;<br>init(group,<span class="hljs-literal">null</span>,name,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread</span><span class="hljs-params">(ThreadGroup group , Runnable target, String name )</span>&#123;<br>init(group,target,name,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread</span><span class="hljs-params">(ThreadGroup group , Runnable target, String name , <span class="hljs-type">long</span> stackSize)</span>&#123;<br>init(group,target,name,stackSize);<br>&#125;<br></code></pre></td></tr></table></figure><p>而初始化方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ThreadGroup g, Runnable target , String name , <span class="hljs-type">long</span> stackSize , AccessContext acc , <span class="hljs-type">boolean</span> inheritThreadLocals)</span>&#123;<br><span class="hljs-keyword">if</span>(inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals !=<span class="hljs-literal">null</span>)<br><span class="hljs-built_in">this</span>.inheritableThreadLocals = ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);<br><span class="hljs-built_in">this</span>.stackSize = stackSize;<br>tid = nextThreadID();<br>&#125;<br></code></pre></td></tr></table></figure><p>当父线程中的inheritableThreadLocals成员变量为true 是存在的，且不为null，则进行子线程中的inheritable 创建过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> ThreadLocalMap <span class="hljs-title function_">createInheritedMap</span><span class="hljs-params">(ThreadLocalMap parentMap)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(parentMap);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">ThreadLocalMap</span><span class="hljs-params">(ThreadLocalMap parentMap)</span>&#123;<br>Entry[] parentTable = parentMap.table ;<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> parentTable.length ;<br>setThreadhold(len);<br>table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[len];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span> ; j &lt; len ;  j++)&#123;<br><span class="hljs-keyword">if</span>(e != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>ThreadLocal&lt;Object&gt; key = (ThreadLocal&lt;Object&gt;) e.get();<br><span class="hljs-keyword">if</span> (key != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>ThreadLocal&lt;Object&gt; key = (ThreadLocal&lt;Object&gt;) e.get();<br><span class="hljs-keyword">if</span>(key != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> key.childvalue(e.value);<br><span class="hljs-type">Entry</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(key, value);<br><span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (len - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span> (table[h] != <span class="hljs-literal">null</span>)&#123;<br>h = nextIndex(h,len);<br>&#125;<br>table[h] = c;<br>size ++ ;<br>   &#125;<br>  &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="线程池与ThreadLocal技术文档"><a href="#线程池与ThreadLocal技术文档" class="headerlink" title="线程池与ThreadLocal技术文档"></a>线程池与ThreadLocal技术文档</h1><h2 id="线程池-1"><a href="#线程池-1" class="headerlink" title="线程池"></a>线程池</h2><h3 id="状态设计-1"><a href="#状态设计-1" class="headerlink" title="状态设计"></a>状态设计</h3><p> <strong>RUNNING</strong> ：表示线程池处于运行状态，此时线程池能够接收新提交的任务，并且能够处理阻塞队列中的任务。</p><p> <strong>SHUTDOWN</strong> ：表示线程池处于关闭状态，此时线程池不能接收新提交的任务，但是不会中断正在执行任务的线程，能够继续执行正在执行的任务，也能够处理阻塞队列中已经保存的任务。如果线程池处于RUNNING状态，那么调用线程池的shutdown()方法会使线程池进入SHUTDOWN状态。</p><p> <strong>STOP</strong> ：表示线程池处于停止状态，此时线程池不能接收新提交的任务，也不能继续处理阻塞队列中的任务，同时会中断正在执行任务的线程。调用线程池的shutdownNow()方法会使线程池进入STOP状态。</p><p> <strong>TIDYING</strong> ：如果线程池中所有的任务都已经终止，有效线程数为0，线程池就会进入TIDYING状态。换句话说，线程池中已经没有正在执行的任务，并且线程池中的阻塞队列为空，同时线程池中的工作线程数量为0，线程池就会进入TIDYING状态。</p><p> <strong>TERMINATED</strong> ：如果线程池处于TIDYING状态，此时调用线程池的terminated()方法，线程池就会进入TERMINATED状态。</p><h3 id="状态转移过程-1"><a href="#状态转移过程-1" class="headerlink" title="状态转移过程"></a>状态转移过程</h3><ol><li>当线程池处于RUNNING状态时，显式调用线程池的shutdown()方法，或者隐式调用finalize()方法，线程池会由RUNNING状态转换为SHUTDOWN状态</li><li>当线程池处于RUNNING状态时，显式调用线程池的shutdownNow()方法，线程池会由RUNNING状态转换为STOP状态</li><li>当线程池处于SHUTDOWN状态时，显式调用线程池的shutdownNow()方法，线程池会由SHUTDOWN状态转换为STOP状态</li><li>当线程池处于SHUTDOWN状态时，如果线程池中无工作线程，并且阻塞队列为空，则线程池会由SHUTDOWN状态转换为TIDYING状态</li><li>当线程池处于STOP状态时，如果线程池中无工作线程，则线程池会由STOP状态转换为TIDYING状态</li><li>当线程池处于TIDYING状态时，调用线程池的terminated()方法，线程池会由TIDYING状态变为TERMINATED状态</li></ol><h3 id="创建线程池-1"><a href="#创建线程池-1" class="headerlink" title="创建线程池"></a>创建线程池</h3><h3 id="Executors工厂类"><a href="#Executors工厂类" class="headerlink" title="Executors工厂类"></a>Executors工厂类</h3><p>Executors提供了多种线程池创建方式：</p><p> <strong>Executors.newCachedThreadPool方法</strong> ：创建一个可缓存的线程池，如果线程池中的线程超过了运行任务的需要，则可以灵活地回收线程，再向线程池中提交任务，则会新建线程来执行任务。</p><p> <strong>Executors.newFixedThreadPool方法</strong> ：创建一个线程数量固定的线程池，能够有效地控制线程池的最大并发数，当向线程池中提交任务时，如果线程池中有空闲线程，则执行任务。如果线程池中无空闲线程，则将任务放入阻塞队列中，待线程池中出现空闲线程，再执行阻塞队列中的任务。</p><p> <strong>Executors.newScheduledThreadPool方法</strong> ：创建一个计划线程池，支持周期性任务执行。</p><p> <strong>Executors.newSingleThreadExecutor方法</strong> ：创建一个只有一个线程的线程池，能够保证提交到线程池中的所有任务按照先进先出的顺序，或者按照某个优先级的顺序来执行，当向线程池中提交任务时，如果线程池中无空闲线程，则会将任务保存在阻塞队列中。</p><p> <strong>Executors.newSingleThreadScheduledExecutor方法</strong> ：创建一个只有一个线程的线程池，并进行周期性执行任务。</p><h3 id="ThreadPoolExecutor详解"><a href="#ThreadPoolExecutor详解" class="headerlink" title="ThreadPoolExecutor详解"></a>ThreadPoolExecutor详解</h3><p><strong>Executors在ThreadPoolExecutor的基础上进行扩展</strong></p><p>ThreadPoolExecutor的基础构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                         <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                         <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                         TimeUnit unit,</span><br><span class="hljs-params">                         BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                         ThreadFactory threadFactory,</span><br><span class="hljs-params">                         RejectedExecutionHandler handler)</span> &#123;<br>    <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt; corePoolSize ||<br>        keepAliveTime &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-literal">null</span> || threadFactory == <span class="hljs-literal">null</span> || handler == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-built_in">this</span>.acc = System.getSecurityManager() == <span class="hljs-literal">null</span> ?<br>            <span class="hljs-literal">null</span> : AccessController.getContext();<br>    <span class="hljs-built_in">this</span>.corePoolSize = corePoolSize;<br>    <span class="hljs-built_in">this</span>.maximumPoolSize = maximumPoolSize;<br>    <span class="hljs-built_in">this</span>.workQueue = workQueue;<br>    <span class="hljs-built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>    <span class="hljs-built_in">this</span>.threadFactory = threadFactory;<br>    <span class="hljs-built_in">this</span>.handler = handler;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> <strong>参数说明</strong> ：</p><ul><li><code>corePoolSize</code>：表示线程池中的核心线程数</li><li><code>maximumPoolSize</code>：表示线程池中的最大线程数</li><li><code>keepAliveTime</code>：表示线程池中的线程空闲时，能够保持的最长时间</li><li><code>unit</code>：表示keepAliveTime的单位时间</li><li><code>workQueue</code>：表示线程池中的阻塞队列</li><li><code>threadFactory</code>：表示用来创建线程的线程工厂</li><li><code>handler</code>：表示线程池拒绝处理任务时的策略</li></ul><h3 id="线程池工作原理详解"><a href="#线程池工作原理详解" class="headerlink" title="线程池工作原理详解"></a>线程池工作原理详解</h3><h3 id="任务提交和执行的完整流程"><a href="#任务提交和执行的完整流程" class="headerlink" title="任务提交和执行的完整流程"></a>任务提交和执行的完整流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ThreadPoolExecutor.execute() 方法的核心逻辑</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable command)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br><br>    <span class="hljs-comment">// 步骤1：如果当前线程数 &lt; corePoolSize，直接创建核心线程</span><br>    <span class="hljs-keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;<br>        <span class="hljs-keyword">if</span> (addWorker(command, <span class="hljs-literal">true</span>))<br>            <span class="hljs-keyword">return</span>;<br>        c = ctl.get();<br>    &#125;<br><br>    <span class="hljs-comment">// 步骤2：核心线程满了，尝试加入队列</span><br>    <span class="hljs-keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">recheck</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-comment">// 双重检查：如果线程池状态改变，移除任务并拒绝</span><br>        <span class="hljs-keyword">if</span> (!isRunning(recheck) &amp;&amp; remove(command))<br>            reject(command);<br>        <span class="hljs-comment">// 如果没有工作线程了，创建一个非核心线程</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(recheck) == <span class="hljs-number">0</span>)<br>            addWorker(<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 步骤3：队列满了，尝试创建非核心线程</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!addWorker(command, <span class="hljs-literal">false</span>))<br>        reject(command); <span class="hljs-comment">// 创建失败，执行拒绝策略</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="线程复用机制"><a href="#线程复用机制" class="headerlink" title="线程复用机制"></a>线程复用机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Worker线程的运行逻辑</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runWorker</span><span class="hljs-params">(Worker w)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">wt</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> w.firstTask;<br>    w.firstTask = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 循环获取任务执行，实现线程复用</span><br>        <span class="hljs-keyword">while</span> (task != <span class="hljs-literal">null</span> || (task = getTask()) != <span class="hljs-literal">null</span>) &#123;<br>            w.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                beforeExecute(wt, task);<br>                task.run(); <span class="hljs-comment">// 执行任务</span><br>                afterExecute(task, <span class="hljs-literal">null</span>);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                task = <span class="hljs-literal">null</span>;<br>                w.completedTasks++;<br>                w.unlock();<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        processWorkerExit(w, completedAbruptly);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="执行规则详解"><a href="#执行规则详解" class="headerlink" title="执行规则详解"></a>执行规则详解</h3><ol><li>当线程池中运行的线程数小于corePoolSize时，如果向线程池中提交任务，那么即使线程池中存在空闲线程，也会直接创建新线程来执行任务</li><li>如果线程池中运行的线程数大于corePoolSize，并且小于maximumPoolSize，那么只有当workQueue队列已满时，才会创建新的线程来执行新提交的任务</li><li>在调用ThreadPoolExecutor类的构造方法时，如果传递的corePoolSize和maximumPoolSize参数相同，那么创建的线程池大小是固定的，此时如果向线程池中提交任务，并且workQueue队列未满，就会将新提交的任务保存到workQueue队列中，等待空闲的线程，从workQueue队列中获取任务并执行</li><li>如果线程池中运行的线程数大于maximumPoolSize，并且此时workQueue队列已满，则会触发指定的拒绝策略来拒绝任务的执行</li></ol><h3 id="拒绝策略-1"><a href="#拒绝策略-1" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><p>如果线程池中的workQueue阻塞队列已满，同时线程池中的线程数已经达到maximumPoolSize，且没有空闲线程，此时继续有任务提交到线程池，就需要采取某种策略来拒绝任务的执行。</p><p>在ThreadPoolExecutor类的execute()方法中，会在适当时机调用reject(command)方法来执行拒绝策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reject</span><span class="hljs-params">(Runnable command)</span> &#123;<br>    handler.rejectedExecution(command, <span class="hljs-built_in">this</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在reject(command)方法中调用了handler的rejectedExecution()方法，这里，在ThreadPoolExecutor类中声明了handler变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> RejectedExecutionHandler handler;<br><br></code></pre></td></tr></table></figure><p>拒绝策略接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RejectedExecutionHandler</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor executor)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>RejectedExecutionHandler有四个默认实现，分别代表：</p><ul><li><strong>AbortPolicy</strong> ：当线程池无法处理新任务时，直接抛出RejectedExecutionException异常</li><li><strong>CallerRunsPolicy</strong> ：当线程池无法处理新任务时，让提交任务的线程（调用者线程）直接执行该任务</li><li><strong>DiscardOldestPolicy</strong> ：丢弃队列中最老的（等待时间最长的）任务</li><li><strong>DiscardPolicy</strong> ：直接丢弃无法处理的新任务</li></ul><h3 id="线程池关闭-1"><a href="#线程池关闭-1" class="headerlink" title="线程池关闭"></a>线程池关闭</h3><p>使用shutdown()或者shutdownNow()关闭线程池：</p><ul><li><code>shutdown()</code>：平滑关闭，不再接受新任务，但会执行完已提交的任务</li><li><code>shutdownNow()</code>：立即关闭，尝试停止所有正在执行的任务，并返回等待执行的任务列表</li></ul><h3 id="线程池线程数设置建议"><a href="#线程池线程数设置建议" class="headerlink" title="线程池线程数设置建议"></a>线程池线程数设置建议</h3><p> <strong>I&#x2F;O密集型任务</strong> ：线程数 &#x3D; CPU核心数 × (1 + I&#x2F;O阻塞时间&#x2F;CPU计算时间)</p><p> <strong>CPU密集型任务</strong> ：线程数 &#x3D; CPU核心数 + 1（+1是为了防止所有线程都在阻塞状态时CPU闲置）</p><h2 id="ThreadLocal-1"><a href="#ThreadLocal-1" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>ThreadLocal是Java提供的一种线程隔离机制，它为每个使用该变量的线程提供独立的变量副本，每个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本。</p><h3 id="基本使用示例"><a href="#基本使用示例" class="headerlink" title="基本使用示例"></a>基本使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;String&gt; THREAD_LOCAL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;String&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            THREAD_LOCAL.set(<span class="hljs-string">&quot;ThreadA: &quot;</span> + Thread.currentThread().getName());<br>            System.out.println(Thread.currentThread().getName() +<br>                             <span class="hljs-string">&quot;本地变量中的值为&quot;</span> + THREAD_LOCAL.get());<br>        &#125;, <span class="hljs-string">&quot;Thread-A&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            THREAD_LOCAL.set(<span class="hljs-string">&quot;ThreadB: &quot;</span> + Thread.currentThread().getName());<br>            System.out.println(Thread.currentThread().getName() +<br>                             <span class="hljs-string">&quot;本地变量中的值为&quot;</span> + THREAD_LOCAL.get());<br>        &#125;, <span class="hljs-string">&quot;Thread-B&quot;</span>);<br><br>        threadA.start();<br>        threadB.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="ThreadLocal核心原理"><a href="#ThreadLocal核心原理" class="headerlink" title="ThreadLocal核心原理"></a>ThreadLocal核心原理</h3><p>ThreadLocal的核心原理是在编译时给出了定义内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;String&gt; THREAD_LOCAL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;String&gt;();<br><br></code></pre></td></tr></table></figure><p>当运行时，线程结构中定义了存储线程局部变量的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在Thread类中存在</span><br>ThreadLocal.<span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">threadLocals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>ThreadLocal.<span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">inheritableThreadLocals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br></code></pre></td></tr></table></figure><h3 id="set方法实现"><a href="#set方法实现" class="headerlink" title="set方法实现"></a>set方法实现</h3><p>ThreadLocal先获取当前线程，再通过getMap获取到本地的ThreadLocalMap，之后向Map中设置局部变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>        map.set(<span class="hljs-built_in">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>        createMap(t, value);<br>&#125;<br><br>ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span> &#123;<br>    <span class="hljs-keyword">return</span> t.threadLocals;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="get方法实现"><a href="#get方法实现" class="headerlink" title="get方法实现"></a>get方法实现</h3><p>与set一样，获取thread的本地变量容器结构，从中获取对象，并转换为目标类型对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>        ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> map.getEntry(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (T)e.value;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> setInitialValue();<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="setInitialValue方法"><a href="#setInitialValue方法" class="headerlink" title="setInitialValue方法"></a>setInitialValue方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> T <span class="hljs-title function_">setInitialValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">T</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> initialValue();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>        map.set(<span class="hljs-built_in">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>        createMap(t, value);<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br><span class="hljs-keyword">protected</span> T <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> getMap(Thread.currentThread());<br>    <span class="hljs-keyword">if</span> (m != <span class="hljs-literal">null</span>) &#123;<br>        m.remove(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="ThreadLocal内存泄漏风险及防范"><a href="#ThreadLocal内存泄漏风险及防范" class="headerlink" title="ThreadLocal内存泄漏风险及防范"></a>ThreadLocal内存泄漏风险及防范</h3><h3 id="泄漏原理"><a href="#泄漏原理" class="headerlink" title="泄漏原理"></a>泄漏原理</h3><p>ThreadLocal的内存泄漏主要源于其内部结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ThreadLocalMap的Entry是弱引用</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;<br>    Object value; <span class="hljs-comment">// 强引用！</span><br>    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;<br>        <span class="hljs-built_in">super</span>(k);<br>        value = v;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="泄漏场景示例"><a href="#泄漏场景示例" class="headerlink" title="泄漏场景示例"></a>泄漏场景示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemoryLeakExample</span> &#123;<br>    <span class="hljs-comment">// 问题场景：ThreadLocal被回收，但value仍被引用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">problematicUsage</span><span class="hljs-params">()</span> &#123;<br>        ThreadLocal&lt;List&lt;String&gt;&gt; local = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>        local.set(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Collections.nCopies(<span class="hljs-number">1000000</span>, <span class="hljs-string">&quot;data&quot;</span>))); <span class="hljs-comment">// 大对象</span><br><br>        <span class="hljs-comment">// ThreadLocal引用丢失</span><br>        local = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 此时ThreadLocal可被GC</span><br><br>        <span class="hljs-comment">// 但ThreadLocalMap中的Entry.value仍然存在</span><br>        <span class="hljs-comment">// Thread -&gt; ThreadLocalMap -&gt; Entry -&gt; value (强引用链)</span><br>        <span class="hljs-comment">// 造成内存泄漏</span><br>    &#125;<br><br>    <span class="hljs-comment">// 正确做法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">correctUsage</span><span class="hljs-params">()</span> &#123;<br>        ThreadLocal&lt;List&lt;String&gt;&gt; local = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br>            local.set(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>            <span class="hljs-comment">// 使用local进行业务逻辑</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            local.remove(); <span class="hljs-comment">// 主动清理，避免内存泄漏</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="在线程池中的风险"><a href="#在线程池中的风险" class="headerlink" title="在线程池中的风险"></a>在线程池中的风险</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolLeakExample</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;ExpensiveObject&gt; CACHE =<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;ExpensiveObject&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> ExpensiveObject <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpensiveObject</span>(); <span class="hljs-comment">// 大对象</span><br>            &#125;<br>        &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processInThreadPool</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            executor.submit(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 每个任务都会在ThreadLocal中存储对象</span><br>                    <span class="hljs-type">ExpensiveObject</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> CACHE.get();<br>                    <span class="hljs-comment">// 处理逻辑...</span><br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 重要：在线程池环境中必须主动清理</span><br>                    CACHE.remove();<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        executor.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> <strong>关键提醒</strong> ：在线程池环境中，由于线程复用，ThreadLocal数据会在多个任务间保持，必须在每个任务结束后主动调用remove()方法清理。</p><h2 id="InheritableThreadLocal-1"><a href="#InheritableThreadLocal-1" class="headerlink" title="InheritableThreadLocal"></a>InheritableThreadLocal</h2><p>InheritableThreadLocal会获得在主线程中存储的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritableThreadLocalTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;String&gt; THREAD_LOCAL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;String&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        THREAD_LOCAL.set(<span class="hljs-string">&quot;codfish&quot;</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程中的本地变量值为&quot;</span> + THREAD_LOCAL.get());<br>        &#125;).start();<br><br>        System.out.println(<span class="hljs-string">&quot;在主线程中获取到的本地变量值为&quot;</span> + THREAD_LOCAL.get());<br>    &#125;<br>    <span class="hljs-comment">// 两者最终输出结果相同</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="InheritableThreadLocal的定义"><a href="#InheritableThreadLocal的定义" class="headerlink" title="InheritableThreadLocal的定义"></a>InheritableThreadLocal的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadLocal</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">protected</span> T <span class="hljs-title function_">childValue</span><span class="hljs-params">(T parentValue)</span> &#123;<br>        <span class="hljs-keyword">return</span> parentValue;<br>    &#125;<br><br>    ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span> &#123;<br>        <span class="hljs-keyword">return</span> t.inheritableThreadLocals;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> &#123;<br>        t.inheritableThreadLocals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(<span class="hljs-built_in">this</span>, firstValue);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="继承机制原理"><a href="#继承机制原理" class="headerlink" title="继承机制原理"></a>继承机制原理</h3><p>Thread的构造方法最终都会调用init方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ThreadGroup g, Runnable target, String name, <span class="hljs-type">long</span> stackSize,</span><br><span class="hljs-params">                 AccessControlContext acc, <span class="hljs-type">boolean</span> inheritThreadLocals)</span> &#123;<br>    <span class="hljs-comment">// ...其他初始化代码...</span><br><br>    <span class="hljs-keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="hljs-literal">null</span>)<br>        <span class="hljs-built_in">this</span>.inheritableThreadLocals =<br>            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);<br><br>    <span class="hljs-built_in">this</span>.stackSize = stackSize;<br>    tid = nextThreadID();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建继承映射的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> ThreadLocalMap <span class="hljs-title function_">createInheritedMap</span><span class="hljs-params">(ThreadLocalMap parentMap)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(parentMap);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">ThreadLocalMap</span><span class="hljs-params">(ThreadLocalMap parentMap)</span> &#123;<br>    Entry[] parentTable = parentMap.table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> parentTable.length;<br>    setThreshold(len);<br>    table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[len];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; len; j++) &#123;<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> parentTable[j];<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            ThreadLocal&lt;Object&gt; key = (ThreadLocal&lt;Object&gt;) e.get();<br>            <span class="hljs-keyword">if</span> (key != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> key.childValue(e.value);<br>                <span class="hljs-type">Entry</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(key, value);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (len - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">while</span> (table[h] != <span class="hljs-literal">null</span>)<br>                    h = nextIndex(h, len);<br>                table[h] = c;<br>                size++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="InheritableThreadLocal的局限性"><a href="#InheritableThreadLocal的局限性" class="headerlink" title="InheritableThreadLocal的局限性"></a>InheritableThreadLocal的局限性</h3><h3 id="1-线程池复用场景的问题"><a href="#1-线程池复用场景的问题" class="headerlink" title="1. 线程池复用场景的问题"></a>1. 线程池复用场景的问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritableThreadLocalProblem</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> InheritableThreadLocal&lt;String&gt; CONTEXT =<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 第一个请求</span><br>        CONTEXT.set(<span class="hljs-string">&quot;Request-1&quot;</span>);<br>        executor.submit(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Task1: &quot;</span> + CONTEXT.get()); <span class="hljs-comment">// 输出: null</span><br>            <span class="hljs-comment">// 为什么是null？因为线程池中的线程不是在设置CONTEXT后创建的</span><br>        &#125;);<br><br>        Thread.sleep(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// 第二个请求</span><br>        CONTEXT.set(<span class="hljs-string">&quot;Request-2&quot;</span>);<br>        executor.submit(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Task2: &quot;</span> + CONTEXT.get()); <span class="hljs-comment">// 可能输出: Request-1</span><br>            <span class="hljs-comment">// 复用了之前的线程，保留了旧值</span><br>        &#125;);<br><br>        executor.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-继承时机的限制"><a href="#2-继承时机的限制" class="headerlink" title="2. 继承时机的限制"></a>2. 继承时机的限制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritanceTiming</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> InheritableThreadLocal&lt;String&gt; INHERITABLE =<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demonstrateInheritanceTiming</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 场景1：先创建线程，后设置值</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Thread1: &quot;</span> + INHERITABLE.get()); <span class="hljs-comment">// null</span><br>        &#125;);<br><br>        INHERITABLE.set(<span class="hljs-string">&quot;ParentValue&quot;</span>); <span class="hljs-comment">// 设置在线程创建之后</span><br>        thread1.start(); <span class="hljs-comment">// 无法继承</span><br><br>        <span class="hljs-comment">// 场景2：先设置值，后创建线程</span><br>        INHERITABLE.set(<span class="hljs-string">&quot;ParentValue2&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Thread2: &quot;</span> + INHERITABLE.get()); <span class="hljs-comment">// ParentValue2</span><br>        &#125;);<br>        thread2.start(); <span class="hljs-comment">// 可以继承</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-深拷贝问题"><a href="#3-深拷贝问题" class="headerlink" title="3. 深拷贝问题"></a>3. 深拷贝问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritableDeepCopyIssue</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> InheritableThreadLocal&lt;List&lt;String&gt;&gt; LIST_CONTEXT =<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;List&lt;String&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">childValue</span><span class="hljs-params">(List&lt;String&gt; parentValue)</span> &#123;<br>                <span class="hljs-comment">// 默认是浅拷贝，子线程和父线程共享同一个List对象</span><br>                <span class="hljs-comment">// return parentValue; // 问题：浅拷贝</span><br><br>                <span class="hljs-comment">// 正确做法：深拷贝</span><br>                <span class="hljs-keyword">return</span> parentValue == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(parentValue);<br>            &#125;<br>        &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demonstrateShallowCopy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;item1&quot;</span>);<br>        LIST_CONTEXT.set(list);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">childThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            List&lt;String&gt; childList = LIST_CONTEXT.get();<br>            childList.add(<span class="hljs-string">&quot;item2&quot;</span>); <span class="hljs-comment">// 修改会影响父线程（如果是浅拷贝）</span><br>            System.out.println(<span class="hljs-string">&quot;Child: &quot;</span> + childList);<br>        &#125;);<br><br>        childThread.start();<br>        childThread.join();<br><br>        System.out.println(<span class="hljs-string">&quot;Parent: &quot;</span> + LIST_CONTEXT.get());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><h3 id="ThreadLocal使用建议"><a href="#ThreadLocal使用建议" class="headerlink" title="ThreadLocal使用建议"></a>ThreadLocal使用建议</h3><ol><li><strong>总是在finally块中调用remove()</strong> ，特别是在线程池环境中</li><li><strong>避免在ThreadLocal中存储大对象</strong> ，减少内存泄漏风险</li><li><strong>使用static final修饰ThreadLocal变量</strong> ，避免创建多个实例</li><li><strong>考虑使用try-with-resources模式</strong>封装ThreadLocal操作</li></ol><h3 id="线程池配置建议"><a href="#线程池配置建议" class="headerlink" title="线程池配置建议"></a>线程池配置建议</h3><ol><li><strong>根据任务类型合理设置线程数</strong> ：I&#x2F;O密集型和CPU密集型采用不同策略</li><li><strong>选择合适的阻塞队列</strong> ：有界队列防止内存溢出</li><li><strong>自定义ThreadFactory</strong> ：设置有意义的线程名称，便于问题排查</li><li><strong>监控线程池状态</strong> ：定期检查活跃线程数、队列大小等指标</li><li><strong>优雅关闭线程池</strong> ：先调用shutdown()，等待一定时间后再调用shutdownNow()</li></ol><h3 id="InheritableThreadLocal使用建议"><a href="#InheritableThreadLocal使用建议" class="headerlink" title="InheritableThreadLocal使用建议"></a>InheritableThreadLocal使用建议</h3><ol><li><strong>避免在线程池环境中使用</strong> ，考虑使用其他上下文传递方案</li><li><strong>重写childValue方法</strong>实现深拷贝，避免父子线程间的数据污染</li><li><strong>注意继承时机</strong> ，确保在创建子线程前设置父线程的值</li><li><strong>考虑使用TransmittableThreadLocal</strong>等第三方库来解决线程池场景下的上下文传递问题</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射,锁与线程</title>
    <link href="/2025/08/05/%E5%8F%8D%E5%B0%84-%E9%94%81%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <url>/2025/08/05/%E5%8F%8D%E5%B0%84-%E9%94%81%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="类与对象的建构"><a href="#类与对象的建构" class="headerlink" title="类与对象的建构"></a>类与对象的建构</h1><p>在Java中对类进行的查询主要通过SystemDictionary 管理。当需要的类已经被加载了或者通过Class对象查询目标Class对象时，通过SystemDictionary 使用”类名+类加载器”作为类的唯一标识查询底层的原类型指针获取到原类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;Person&quot;</span>)         <br>       ↓                         <br>   SystemDictionary 哈希查找       <br>   Key: (类名 + 类加载器)           <br>   Value: Klass* 指针    <br></code></pre></td></tr></table></figure><p>对于对象来说，所有的对象创建过程都是存在一个创建顺序的，所以其上层的对象必然存储了对它的引用。而对已经被废弃的对象来说，GC通过图遍历完成对所有存活对象的可达性访问，另一方面又通过堆对所有对象的管理来进行遍历堆检查所有对象是否存活。所以对于对象的管理来说，使用性能开销较大的查询方式不如由对象进行相互的引用管理来的直接高效。</p><h1 id="类的形式"><a href="#类的形式" class="headerlink" title="类的形式"></a>类的形式</h1><p>因为 Java是解释语言，所以它的类以三种形式互相关联，完成不同的功能</p><ol><li>由类创建的实例对象。用于在内存中存储实例数据</li><li>提供给编程人员访问的类对象。以Class对象为例，主要是提供了一个接口用于对运行时的实际元类对象进行访问</li><li>最底层由C++定义的实际上的原类对象InstanceClass 存储了编码中定义的类的完整信息</li></ol><p><strong>关系</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">编译期Java源码 → 字节码文件(.class)<br>                     ↓<br>运行期类加载 → <span class="hljs-built_in">InstanceKlass</span>(C++元类对象) ←→ Class对象(Java镜像)<br>                     ↓<br>对象实例化 → 具体Java对象实例<br></code></pre></td></tr></table></figure><p>另一方面，根据类所能访问到的资源的不同，还可以分为</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">模式<span class="hljs-number">1</span>: 纯Java对象 (Pure Java Objects)<br>├── 完全通过InstanceKlass创建<br>├── 所有字段都在Java堆中<br>└── 例子：普通业务对象、集合类<br><br>模式<span class="hljs-number">2</span>: Java包装器对象 (Java <span class="hljs-keyword">Wrapper</span> Objects)  <br>├── Java对象通过InstanceKlass创建<br>├── 内部持有native资源的句柄/指针<br>└── 例子：Thread、Socket、File<br><br>模式<span class="hljs-number">3</span>: JVM内部对象 (JVM <span class="hljs-type">Internal</span> Objects)<br>├── 完全在C++层创建和管理<br>├── Java层不可见或只能通过特殊API访问<br>└── 例子：ObjectMonitor、Parker、GC对象<br></code></pre></td></tr></table></figure><p>纯java对象就是平时创建的基本类，定义了一些基本类型和对象信息，它所引用的资源都在堆上创建</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">ObjectA<br>Refer <span class="hljs-selector-tag">Object</span> <span class="hljs-selector-tag">B</span> ---------&gt; <span class="hljs-selector-tag">Object</span> <span class="hljs-selector-tag">B</span><br>Refer <span class="hljs-selector-tag">Object</span> C --------------&gt; <span class="hljs-selector-tag">Object</span> C<br></code></pre></td></tr></table></figure><p>而对于java包装器对象，它的作用是用于在定义时，用户有一个可以操作的目标对象，而这个对象在内存中创建后，调用方法来创建底层资源（创建时机视资源类型而定），在应用与底层中间管理这些资源</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-title class_">Object</span>A<br><span class="hljs-title class_">Refer</span> <span class="hljs-title class_">Object</span> <span class="hljs-variable">B</span> <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-title class_">Object</span>B(存储调用底层资源创建方法的参数)<br><span class="hljs-operator">|</span><br><span class="hljs-operator">|</span><br><span class="hljs-operator">|</span><br><span class="hljs-variable">v</span><br>    创建资源最终返回对象引用给<span class="hljs-title class_">Object</span>B<br></code></pre></td></tr></table></figure><p>如 socket 的实际创建过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java层：通过InstanceKlass创建Java对象</span><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>();  <span class="hljs-comment">// 正常的Java对象创建流程</span><br><br><span class="hljs-comment">// Socket.java内部结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Socket</span> &#123;<br>    SocketImpl impl;           <span class="hljs-comment">// Java对象引用</span><br>    <span class="hljs-comment">// ... 其他Java字段</span><br>&#125;<br><br><span class="hljs-comment">// SocketImpl内部持有native句柄</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PlainSocketImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractPlainSocketImpl</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">fd</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;              <span class="hljs-comment">// 文件描述符 - 这是关键！</span><br>    InetAddress address;      <span class="hljs-comment">// Java对象</span><br>    <span class="hljs-type">int</span> port;                 <span class="hljs-comment">// Java字段</span><br>    <span class="hljs-type">int</span> localport;            <span class="hljs-comment">// Java字段</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. Java对象创建 - 正常InstanceKlass流程</span><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>();<br><span class="hljs-comment">// ↓ JVM执行new指令</span><br><span class="hljs-comment">// ↓ 查询Socket的InstanceKlass  </span><br><span class="hljs-comment">// ↓ 分配Java堆内存</span><br><span class="hljs-comment">// ↓ 初始化Java字段为默认值</span><br><br><span class="hljs-comment">// 2. Native资源创建 - 在需要时触发</span><br>socket.connect(address, port);<br><span class="hljs-comment">// ↓ 调用native方法</span><br><span class="hljs-comment">// ↓ 在C++层创建系统socket</span><br><span class="hljs-comment">// ↓ 将文件描述符存储到Java对象的fd字段</span><br><br><span class="hljs-comment">// C++实现</span><br>JNIEXPORT <span class="hljs-keyword">void</span> JNICALL<br><span class="hljs-title function_">Java_java_net_PlainSocketImpl_socketCreate</span><span class="hljs-params">(JNIEnv *env, jobject <span class="hljs-built_in">this</span>, jboolean stream)</span> &#123;<br>    <span class="hljs-comment">// 创建系统socket - 这是原生C++创建！</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">fd</span> <span class="hljs-operator">=</span> socket(AF_INET, stream ? SOCK_STREAM : SOCK_DGRAM, <span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-comment">// 将句柄存储到Java对象中</span><br>    (*env)-&gt;SetIntField(env, <span class="hljs-built_in">this</span>, psi_fdID, fd);  <span class="hljs-comment">// fd字段赋值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对于JVM内部对象，大部分时间直接对上述两种对象进行管理，如monitor</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-title class_">Object</span>A.<span class="hljs-property">synchronized_method</span>()<br>           ↓<br><span class="hljs-variable">JVM</span>检查<span class="hljs-title class_">Object</span>A的对象头<br>           ↓<br>如果无锁 → 尝试轻量级锁(栈上锁记录)<br>           ↓<br>如果竞争 → 创建<span class="hljs-title class_">ObjectMonitor</span>对象 → 关联到<span class="hljs-title class_">Object</span>A的<span class="hljs-variable">mark</span> <span class="hljs-variable">word</span><br>           ↓  <br>线程进入<span class="hljs-title class_">Monitor</span>的等待队列或获得锁继续执行<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ObjectMonitor - 完全C++原生创建</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectMonitor</span> &#123;<br>    <span class="hljs-keyword">volatile</span> markOop _header;       <span class="hljs-comment">// 对象头备份</span><br>    <span class="hljs-keyword">void</span>* <span class="hljs-keyword">volatile</span> _object;         <span class="hljs-comment">// 关联的Java对象</span><br>    <span class="hljs-keyword">void</span>* <span class="hljs-keyword">volatile</span> _owner;          <span class="hljs-comment">// 锁拥有者线程</span><br>    <span class="hljs-keyword">volatile</span> jlong _previous_owner_tid;<br>    <span class="hljs-keyword">volatile</span> intptr_t _recursions;  <span class="hljs-comment">// 重入次数</span><br>    ObjectWaiter* <span class="hljs-keyword">volatile</span> _cxq;    <span class="hljs-comment">// 竞争队列</span><br>    ParkEvent* _event;              <span class="hljs-comment">// 阻塞事件 </span><br>  <br>    <span class="hljs-comment">// 构造函数 - 原生创建</span><br>    ObjectMonitor() &#123;<br>        _header = NULL;<br>        _count = <span class="hljs-number">0</span>;<br>        _recursions = <span class="hljs-number">0</span>;<br>        _object = NULL;<br>        _owner = NULL;<br>        _WaitSet = NULL;<br>        _cxq = NULL;<br>        _event = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParkEvent</span>();  <span class="hljs-comment">// 创建另一个C++对象</span><br>    &#125;<br>&#125;;<br><br>    <span class="hljs-comment">// 获取ObjectMonitor的过程</span><br>ObjectMonitor* ObjectSynchronizer::inflate(Thread* Self, oop object) &#123;<br>    <span class="hljs-comment">// 不通过InstanceKlass，直接C++分配！</span><br>    ObjectMonitor* m = omAlloc(Self);  <span class="hljs-comment">// 从对象池分配</span><br>  <br>    <span class="hljs-comment">// 设置关联</span><br>    m-&gt;set_object(object);<br>    m-&gt;set_owner(NULL);<br>  <br>    <span class="hljs-comment">// 通过CAS设置到对象头</span><br>    <span class="hljs-type">markOop</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> (markOop) Atomic::cmpxchg_ptr(markOopDesc::encode(m), <br>                                               object-&gt;mark_addr(), mark);<br>    <span class="hljs-keyword">return</span> m;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>基于类的多重实现，我们可以看到反射本身通过接受一个java层的类对象，根据类对象中的指针查询真正的原类信息对象结构的执行器。</p><p>其工作过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 三种方式获取Class对象</span><br>Class&lt;?&gt; clazz1 = Class.forName(<span class="hljs-string">&quot;com.example.MyClass&quot;</span>);<br><span class="hljs-number">1.</span> 类加载器查找类文件<br><span class="hljs-number">2.</span> 读取字节码文件<br><span class="hljs-number">3.</span> 验证字节码合法性<br><span class="hljs-number">4.</span> 准备阶段：为静态变量分配内存<br><span class="hljs-number">5.</span> 解析阶段：符号引用转换为直接引用<br><span class="hljs-number">6.</span> 初始化阶段：执行静态代码块和静态变量初始化<br><span class="hljs-number">7.</span> 返回Class对象<br>Class&lt;?&gt; clazz2 = MyClass.class;<br>Class&lt;?&gt; clazz3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>().getClass();<br><br><span class="hljs-comment">// 获取构造器</span><br>Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 如果是私有构造器</span><br><br><span class="hljs-comment">// 创建实例</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;参数1&quot;</span>, <span class="hljs-number">123</span>);<br>分配内存空间<br>调用构造函数<br>初始化对象头信息<br>返回对象引用<br><span class="hljs-comment">// 获取方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;methodName&quot;</span>, parameterTypes);<br>method.setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 如果是私有方法</span><br><br><span class="hljs-comment">// 调用方法</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(instance, args);<br><span class="hljs-comment">// 调用过程</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object obj, Object... args)</span> &#123;<br>    <span class="hljs-comment">// 1. 访问权限检查</span><br>    <span class="hljs-keyword">if</span> (!override &amp;&amp; !Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;<br>        checkAccess();<br>    &#125;<br>  <br>    <span class="hljs-comment">// 2. 参数校验和装箱</span><br>    Object[] argsArray = checkAndConvertArgs(args);<br>  <br>    <span class="hljs-comment">// 3. 委托给MethodAccessor</span><br>    <span class="hljs-keyword">return</span> methodAccessor.invoke(obj, argsArray);<br>&#125;<br><br><span class="hljs-comment">// 前15次调用使用native方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NativeMethodAccessorImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MethodAccessorImpl</span> &#123;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object obj, Object[] args)</span> &#123;<br>        <span class="hljs-keyword">return</span> invoke0(method, obj, args); <span class="hljs-comment">// native方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 第16次调用后生成专门的字节码类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneratedMethodAccessor1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MethodAccessorImpl</span> &#123;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object obj, Object[] args)</span> &#123;<br>        <span class="hljs-comment">// 直接调用目标方法，避免native调用开销</span><br>        <span class="hljs-keyword">return</span> ((TargetClass)obj).targetMethod((String)args[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br>用户代码<br>    ↓<br>Method.invoke()<br>    ↓<br>权限检查 &amp; 参数验证<br>    ↓<br>MethodAccessor.invoke()<br>    ↓<br>┌─────────────────┬─────────────────┐<br>│  前<span class="hljs-number">15</span>次调用     │   第<span class="hljs-number">16</span>次开始    │<br>│     ↓           │       ↓         │<br>│ Native调用      │ 字节码生成调用  │<br>│     ↓           │       ↓         │<br>│ JNI → C++       │ 直接方法调用    │<br>│     ↓           │                 │<br>│ 目标方法        │ 目标方法        │<br>└─────────────────┴─────────────────┘<br></code></pre></td></tr></table></figure><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>在其他内容中已经讨论过临界区与锁的使用。这里主要讨论锁的设计以及锁的关联关系</p><h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><p>在java 中 volatile 具有两个功能</p><ol><li>可见性</li></ol><p>被volatile修饰的对象，在获取时，会先刷新缓存，获取最新的对象状态信息，在写入完毕后会所有工作缓存信息。即可见性，意味着对该对象操作会立即得到更新。但是不能保证原子操作因为一个执行过程并不一定只对volatile修饰的对象产生影响</p><ol><li>有序性</li></ol><p>通过volatile关键字提供了内存屏障，所有在volatile 执行前的指令必须在volatile前执行完毕，所有在volatile执行后执行的指令必须等待volatile执行后执行。</p><h2 id="通过对象头中markword字段完成的资源控制"><a href="#通过对象头中markword字段完成的资源控制" class="headerlink" title="通过对象头中markword字段完成的资源控制"></a>通过对象头中markword字段完成的资源控制</h2><p>定义在对象头部的markword 字段是一个动态结构，用于描述当前对象的访问状态。</p><table><thead><tr><th><strong>存储内容</strong></th><th><strong>标志位</strong></th><th><strong>状态</strong></th></tr></thead><tbody><tr><td>对象哈希码，对象分代年龄</td><td>01</td><td>未锁定</td></tr><tr><td>指向锁记录的指针</td><td>00</td><td>轻量级锁定</td></tr><tr><td>指向重量级锁的指针</td><td>10</td><td>膨胀</td></tr><tr><td>一般被设置为非法模式或者转发指针</td><td>11</td><td>GC标记</td></tr><tr><td>偏向线程ID,偏向事件戳，对象分代年龄</td><td>01</td><td>可偏向</td></tr></tbody></table><p>当对象被创建后，markword中 的标志位为01 ， 这个时候是未被锁定的状态。</p><p>当对象被标记为(synchronized)后，markword中的标志位会被重新设置，用于存储当前请求该对象的线程ID。</p><p>处于偏向锁状态下的对象，会在被使用时只判断调用线程是否和存储的ID一致，如果一致则可以直接获取对象，不需要再进行其他检查。</p><p>当该对象再次被其他线程请求后，其他线程会先尝试设置线程ID信息，若设置失败，则目标对象的markword会升级为轻量级锁定，这时会在栈空间设置一条锁记录，将markword设置为指向锁记录。这样当其他线程请求时，同样会设置一条锁记录，并尝试对该对象进行CAS操作(向markword中尝试将记录替换为自己的锁记录)</p><p>当该对象被持续请求到阈值时，或者存在多个线程请求该对象时，则将轻量级锁升级为重量级锁，在堆中创建Objectmonitor对象，这样后续线程请求对象时，会通过markword查询Objectmonitor，如果当前的Objectmontior属于其他线程，则将请求线程加入等待队列。阻塞等待。</p><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>ReentrantLock 锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java对象创建 - 完全通过InstanceKlass</span><br><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br><span class="hljs-comment">// ReentrantLock内部结构 - 都是Java对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;           <span class="hljs-comment">// Java对象</span><br>  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <span class="hljs-comment">// 继承AQS的state字段和队列</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// AbstractQueuedSynchronizer - 纯Java实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> state;        <span class="hljs-comment">// Java int字段 - 锁状态！</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node head;  <span class="hljs-comment">// Java对象引用 - 等待队列</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node tail;  <span class="hljs-comment">// Java对象引用</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>可重入性</strong> ：同一线程可以多次获取同一把锁</li><li><strong>可中断性</strong> ：支持响应中断</li><li><strong>可超时性</strong> ：支持尝试获取锁的超时机制</li><li><strong>公平性</strong> ：支持公平锁和非公平锁</li><li><strong>条件变量</strong> ：支持多个条件等待</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicExample</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();  <span class="hljs-comment">// 获取锁</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            count++;  <span class="hljs-comment">// 临界区代码</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();  <span class="hljs-comment">// 释放锁（必须在finally块中）</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可重入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantExample</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outerMethod</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;外层方法&quot;</span>);<br>            innerMethod();  <span class="hljs-comment">// 同一线程再次获取锁</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">innerMethod</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();  <span class="hljs-comment">// 重入成功，计数器+1</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;内层方法&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();  <span class="hljs-comment">// 计数器-1</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可中断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterruptibleExample</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interruptibleTask</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lock.lockInterruptibly();  <span class="hljs-comment">// 可被中断的锁获取</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 长时间运行的任务</span><br>            Thread.sleep(<span class="hljs-number">10000</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInterrupt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                interruptibleTask();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;线程被中断了&quot;</span>);<br>            &#125;<br>        &#125;);<br>      <br>        t1.start();<br>        <span class="hljs-comment">// 1秒后中断线程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            t1.interrupt();  <span class="hljs-comment">// 中断等待锁的线程</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            Thread.currentThread().interrupt();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>尝试获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryLockExample</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryDoSomething</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 尝试获取锁，最多等待3秒</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (lock.tryLock(<span class="hljs-number">3</span>, TimeUnit.SECONDS)) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 执行业务逻辑</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    lock.unlock();<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;获取锁超时&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            Thread.currentThread().interrupt();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryImmediately</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 立即尝试获取锁，不等待</span><br>        <span class="hljs-keyword">if</span> (lock.tryLock()) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 执行业务逻辑</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;锁被其他线程持有&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h3><p><strong>非公平锁</strong></p><ul><li>新来的线程可能直接获取锁，无需排队</li><li><strong>性能更好</strong> ，吞吐量更高</li><li>可能导致某些线程长时间等待（饥饿现象）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 默认创建非公平锁</span><br><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">unfairLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-comment">// 或显式指定</span><br><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">unfairLock2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p><strong>公平锁</strong></p><ul><li>严格按照请求顺序分配锁</li><li>避免线程饥饿</li><li><strong>性能较低</strong> ，因为需要维护队列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建公平锁</span><br><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">fairLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h2 id="其他层面上的锁区分"><a href="#其他层面上的锁区分" class="headerlink" title="其他层面上的锁区分"></a>其他层面上的锁区分</h2><h3 id="悲观锁与乐观锁"><a href="#悲观锁与乐观锁" class="headerlink" title="悲观锁与乐观锁"></a>悲观锁与乐观锁</h3><p><strong>悲观锁</strong></p><p>悲观锁优先控制临界区资源，并在处理过程中一直保持锁定状态，等到线程释放锁后其他线程才能获取。</p><p><strong>乐观锁</strong></p><p>乐观锁默认其他线程不会对资源进行修改，只需要对比版本号变动来决定自己的行为</p><h3 id="公平锁与非公平锁-1"><a href="#公平锁与非公平锁-1" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h3><p><strong>公平锁</strong></p><p>公平锁会在线程请求锁资源时，将线程直接加入等待队列。优点是线程不会被饿死，缺点是整体效率较低，因为当执行速度较慢的线程在执行时，其他线程必须等待，导致线程堆积</p><p><strong>非公平锁</strong></p><p>非公平锁则在线程请求锁资源时，先去尝试获取所所资源，如果未获取到锁，则加入等待队列等待。优点是整体执行效率较高，缺点是可能会出现因为一个线程一直获取不到锁资源导致，线程饥饿的问题</p><h3 id="可重入锁与不可重入锁"><a href="#可重入锁与不可重入锁" class="headerlink" title="可重入锁与不可重入锁"></a>可重入锁与不可重入锁</h3><p><strong>可重入锁</strong></p><p>可重入锁，指同一个线程可以多次占用同一个锁，在解锁是需要相同次数的解锁</p><p><strong>不可重入锁</strong></p><p>不可重入锁，指线程只能获取一次锁</p><h3 id="读-写锁"><a href="#读-写锁" class="headerlink" title="读&#x2F;写锁"></a>读&#x2F;写锁</h3><p><strong>读锁</strong></p><p>能够对共享资源进行读操作</p><p><strong>写作</strong></p><p>只有一个线程允许进行写入</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>自旋锁指某个线程没有获取到锁时，不会进入阻塞状态，而是不断尝试获取锁，直到释放锁。</p><p>优点是 对于可以快速执行的任务，能够提高效率，因为不需要进入阻塞状态</p><p>缺点是 对于执行效率较低的任务，持续的请求会白白占用CPU资源</p><h2 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h2><p>出现原因</p><ol><li>互斥条件</li></ol><p>标识一段时间内，某个或某些资源只能被一个线程占有，此时如果有其他线程需要访问，则只能等待</p><ol><li>不可剥夺条件</li></ol><p>不可剥夺条件表示线程所有的资源在使用完毕之前，不能被其他线程强行夺走，只能由获取到资源的线程主动释放</p><ol><li>请求与保持条件</li></ol><p>请求与保持条件表示当线程占有至少一个资源，又需要抢占新的资源，而需要抢占的资源已经被其他线程占有时，需要抢占新资源的线程被阻塞，但是又不会释放其已占的资源</p><ol><li>循环等待条件</li></ol><p>循环等待条件表示发生死锁时，必然存在一个线程与资源的循环等待链</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM角度的Java程序执行过程</title>
    <link href="/2025/08/04/JVM%E8%A7%92%E5%BA%A6%E7%9A%84Java%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"/>
    <url>/2025/08/04/JVM%E8%A7%92%E5%BA%A6%E7%9A%84Java%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java的执行过程"><a href="#Java的执行过程" class="headerlink" title="Java的执行过程"></a>Java的执行过程</h1><p>经过之前的整理现在我们讨论以下JAVA程序的执行过程</p><ol><li>JVM加载到内存，完成其所需的结构创建（一些内部对象的创建，GC，ObjectMonitor等）</li><li>根据传入的启动类进行启动类加载。</li><li>执行加载-验证-准备-解析-初始化过程 该启动类的过程<ol><li>检查该类是否有指向父类的指针，如果有则从父类开始进行加载。最终由启动类加载器开始加载（一般最终会查询到加载Object类）。</li><li>解析字节码数组，在内存中创建对应的结构。</li><li>进行文件格式验证、元数据验证、字节码验证、符号引用验证</li><li>准备，初始化该元类结构所需的内存空间，设置为各类型的默认值（如int为0，boolean为false，引用类型为null）</li><li>解析，根据字节码数组中的信息，完成从符号引用到直接引用的过程（将修饰符的关联关系转换为内存中的关联关系）</li><li>初始化，根据字节码中的信息对元类中的静态结构进行初始化赋值。</li></ol></li><li>完成类加载后，执行类中的main方法</li><li>main方法作为静态方法 由invokestatic 指定执行，查询instanceKlass中的方法区信息。执行main方法对应的字节指令</li><li>构建栈帧结构，组织方法所需的参数对象，放入局部变量表中，设置操作数栈空间作为运算的临时存储区域，创建程序计数器记录指令指针的偏移信息，以及链接，返回地址和其他一些用于调试的栈帧信息。</li><li>启动调用过程，对于参数信息，是直接直接放入局部变量表中的，对于在方法中创建的局部变量，则在创建后，由槽位对该变量进行引用。而操作数栈则用于存放运算中的临时数据。</li><li>对于创建的局部变量，会检查该变量的类是否被加载，如果未被加载，则启动类加载过程。之后根据new指令在堆中创建对应的对象，并将引用放入插槽中，在后续的执行中再通过插槽(数组偏移)取出对象参与执行。</li><li>之后就是依据执行的反复 入栈出栈过程。</li><li>对于不同的方法，jvm通过不同的指令来完成方法的调用<ol><li>静态方法- invokestatic  直接绑定</li><li>私有方法，构造器方法，父类方法 - invokespecial 直接绑定</li><li>实例方法 - invokevirtual 通过虚方法表再使用偏移访问</li><li>接口实现方法 - invokeinterface 通过接口方法表进行查询</li></ol></li></ol><p>后续我们需要讨论，锁实现，反射实现和线程的实现。</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM字节码执行引擎</title>
    <link href="/2025/08/04/JVM%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
    <url>/2025/08/04/JVM%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><p>Java中设置了不同的指令来完成不同的调用过程 ：</p><ol><li>invokestatic 用于调用静态方法</li><li>invokespecial 用于调用实例构造器<code>&lt;init&gt;</code>方法，私有方法和父类中的方法</li><li>invokevirtual 用于调用所有的虚方法</li><li>invokeinterface 用于调用接口方法，会在运行时再确定一个实现接口的对象</li><li>invokedynamic 先在运行时动态解析处调用点限定符所引用的方法，再执行该方法</li></ol><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>对于静态方法，私有方法，实例构造器，父类方法，被final修饰的方法都会在类加载时将符号引用转为直接引用。</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>对于静态方法，其调用版本在编译后就是确定的。相应的 静态方法和私有方法在类加载阶段进行解析</p><h1 id="分派"><a href="#分派" class="headerlink" title="分派"></a>分派</h1><h2 id="静态分派与重载"><a href="#静态分派与重载" class="headerlink" title="静态分派与重载"></a>静态分派与重载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticDispatch</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Human</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Woman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Human</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Human guy)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello guy&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Woman guy)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello lady&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Man guy)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello gentleman&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Human</span> <span class="hljs-variable">man</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>();<br><span class="hljs-type">Human</span> <span class="hljs-variable">woman</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Woman</span>();<br><span class="hljs-type">StaticDispatch</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticDispatch</span>();<br>sr.sayHello(man);<br>sr.sayHello(woman);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态分派是通过编译时的方法绑定确定了具体使用的方法。</p><p>即在编译时，通过引用声明，确定了变量的类型，再根据其类型，由编译器选择帮绑定对应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Overload</span>&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object arg)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello Object&quot;</span>);   <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello int&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(<span class="hljs-type">long</span> arg)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello long&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Character arg)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello char&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(<span class="hljs-type">char</span> arg)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello char ...&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Serializable arg)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello Serializable&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>sayHello(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><code>精确匹配 → 自动类型提升 → 自动装箱/拆箱 → 父类型匹配 → 可变参数匹配</code></p><h3 id="完整的调用过程分析"><a href="#完整的调用过程分析" class="headerlink" title="完整的调用过程分析"></a>完整的调用过程分析</h3><p>对于 <code>sayHello(&#39;a&#39;)</code> 的调用：</p><ol><li><strong>第一次调用</strong> ：精确匹配到 <code>sayHello(char arg)</code></li></ol><ul><li>输出：<code>&quot;hello char ...&quot;</code></li></ul><ol><li><strong>屏蔽 char 参数方法</strong> ：自动类型提升 char → int</li></ol><ul><li>匹配到 <code>sayHello(int arg)</code></li><li>输出：<code>&quot;hello int&quot;</code></li></ul><ol><li><strong>屏蔽 int 参数方法</strong> ：自动类型提升 int → long</li></ol><ul><li>匹配到 <code>sayHello(long arg)</code></li><li>输出：<code>&quot;hello long&quot;</code></li></ul><ol><li><strong>屏蔽 long 参数方法</strong> ：自动装箱 char → Character</li></ol><ul><li>匹配到 <code>sayHello(Character arg)</code></li><li>输出：<code>&quot;hello char&quot;</code></li></ul><ol><li><strong>屏蔽 Character 参数方法</strong> ：父类型匹配，Character → Serializable</li></ol><ul><li>匹配到 <code>sayHello(Serializable arg)</code></li><li>输出：<code>&quot;hello Serializable&quot;</code></li><li>（因为Character实现了Serializable接口）</li></ul><ol><li><strong>屏蔽 Serializable 参数方法</strong> ：最终父类型匹配</li></ol><ul><li>匹配到 <code>sayHello(Object arg)</code></li><li>输出：<code>&quot;hello Object&quot;</code></li></ul><h2 id="动态分派"><a href="#动态分派" class="headerlink" title="动态分派"></a>动态分派</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicDispatch</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span> &#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Human</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;man say hello&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Woman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Human</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;woman say hello&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Human</span> <span class="hljs-variable">man</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>();<br><span class="hljs-type">Human</span> <span class="hljs-variable">woman</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Woman</span>();<br>man.sayHello();<br>woman.sayHello();<br>man = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Woman</span>();<br>man.sayHello();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(java.lang.<span class="hljs-type">String</span>[])</span></span>;<br>Code:<br>Stack = <span class="hljs-number">2</span> , Locals = <span class="hljs-number">3</span> , Args_size = <span class="hljs-number">1</span><br><span class="hljs-number">0</span>: <span class="hljs-keyword">new</span>             <span class="hljs-comment">// 创建Man对象</span><br><span class="hljs-number">3</span>: dup             <span class="hljs-comment">// 复制对象引用（栈顶现在有两个相同引用）</span><br><span class="hljs-number">4</span>: invokespecial   <span class="hljs-comment">// 调用Man的构造方法（消耗一个引用）</span><br><span class="hljs-number">7</span>: astore_1        <span class="hljs-comment">// 将剩余的对象引用存储到局部变量槽位1（man变量）</span><br><span class="hljs-number">8</span>: <span class="hljs-keyword">new</span>             <span class="hljs-comment">// 创建Woman对象</span><br><span class="hljs-number">11</span>: dup            <span class="hljs-comment">// 复制对象引用</span><br><span class="hljs-number">12</span>: invokespecial  <span class="hljs-comment">// 调用Woman的构造方法</span><br><span class="hljs-number">15</span>: astore_2       <span class="hljs-comment">// 存储到局部变量槽位2（woman变量）</span><br><span class="hljs-number">16</span>: aload_1        <span class="hljs-comment">// 从槽位1加载man对象引用到操作数栈</span><br><span class="hljs-number">17</span>: invokevirtual  <span class="hljs-comment">// 虚方法调用sayHello()（动态分派）</span><br><span class="hljs-number">20</span>: aload_2        <span class="hljs-comment">// 从槽位2加载woman对象引用</span><br><span class="hljs-number">21</span>: invokevirtual  <span class="hljs-comment">// 虚方法调用sayHello()（动态分派）</span><br><span class="hljs-number">24</span>: <span class="hljs-keyword">new</span>            <span class="hljs-comment">// 创建新的Woman对象</span><br><span class="hljs-number">27</span>: dup            <span class="hljs-comment">// 复制引用</span><br><span class="hljs-number">28</span>: invokespecial  <span class="hljs-comment">// 调用Woman构造方法</span><br><span class="hljs-number">31</span>: astore_1       <span class="hljs-comment">// 重新赋值给槽位1（覆盖原来的man引用）</span><br><span class="hljs-number">32</span>: aload_1        <span class="hljs-comment">// 加载槽位1中的对象（现在是Woman实例）</span><br><span class="hljs-number">33</span>: invokevirtual  <span class="hljs-comment">// 虚方法调用sayHello()</span><br><span class="hljs-number">36</span>: <span class="hljs-keyword">return</span>         <span class="hljs-comment">// 方法返回</span><br></code></pre></td></tr></table></figure><h3 id="动态分派过程"><a href="#动态分派过程" class="headerlink" title="动态分派过程"></a>动态分派过程</h3><ol><li>找到操作栈数栈顶的第一个元素所指向的对象的实例类型，记作C</li><li>如果在类型C中找到与常量中的描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；不通过则返回java.lang.IllegalAccessErrorc异常</li><li>否则，按照继承关系从下往上依次对C的各个父类进行第二步的搜索和验证过程</li><li>如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常</li></ol><h3 id="单分派与多分派"><a href="#单分派与多分派" class="headerlink" title="单分派与多分派"></a>单分派与多分派</h3><p>单分派与多分派的区别是，在查询需要执行的方法是 是由某个量来决定需要执行的方法（单分派）还是由多个量来决定需要执行的方法（多分派）</p><p><strong>单分派：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>javaclass Printer &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Object obj)</span> &#123; <br>        System.out.println(<span class="hljs-string">&quot;打印Object: &quot;</span> + obj); <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String str)</span> &#123; <br>        System.out.println(<span class="hljs-string">&quot;打印String: &quot;</span> + str); <br>    &#125;<br>&#125;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;  <span class="hljs-comment">// 运行时是String，但编译时类型是Object</span><br><span class="hljs-type">Printer</span> <span class="hljs-variable">printer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>();<br>printer.print(obj);    <span class="hljs-comment">// 输出：打印Object: Hello</span><br>                       <span class="hljs-comment">// 只考虑编译时参数类型Object，不考虑运行时的String</span><br></code></pre></td></tr></table></figure><p><strong>多分派 ：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">*<span class="hljs-comment">// 假设的多分派行为*</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;  *<span class="hljs-comment">// 运行时是String*</span><br>printer.print(obj);    *<span class="hljs-comment">// 输出：打印String: Hello// 同时考虑运行时参数类型String*</span><br></code></pre></td></tr></table></figure><p><strong>实际查找过程</strong></p><p> <strong>单分派查找</strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">方法调用：receiver.method(arg1, arg2)<br>查找依据：receiver的运行时类型 + method名称 + 参数的编译时类型<br></code></pre></td></tr></table></figure><p> <strong>多分派查找</strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">方法调用：receiver.method(arg1, arg2)<br>查找依据：receiver的运行时类型 + method名称 + 所有参数的运行时类型<br></code></pre></td></tr></table></figure><h2 id="虚拟机动态分派实现"><a href="#虚拟机动态分派实现" class="headerlink" title="虚拟机动态分派实现"></a>虚拟机动态分派实现</h2><p>动态分派主要通过虚方法表来实现动态分派的支持。</p><p>虚方法表中存放着各个方法的实际入口地址，如果某个方法在子类中没有重写，那么子类中的虚方法表与父类中相同方法的地址入口是一致的。如果发生了重写，则将指向子类自己实现的方法入口。同时 父子类的虚方法表索引维持一致。这样在查找方法时，同一索引可以直接查询父类或者子类中的入口地址。</p><h1 id="Java对动态语言特性的支持"><a href="#Java对动态语言特性的支持" class="headerlink" title="Java对动态语言特性的支持"></a>Java对动态语言特性的支持</h1><p>Java中的动态语言实现是通过字节码指令invokedynamic来实现的</p><h2 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h2><p>动态类型语言的关键特征是它的类型检查的主体过程是在运行期而不是编译期。</p><h2 id="Invoke包"><a href="#Invoke包" class="headerlink" title="Invoke包"></a>Invoke包</h2><p>通过MethodHandle 允许定义一个对象接受一个方法名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodHandleTest</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassA</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(String a)</span>&#123;<br>System.out.println(s);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> System.currentTimeMills() %<span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? System.out : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassA</span>();<br>getPrintlnMH(obj).invokeExact(<span class="hljs-string">&quot;icyfenix&quot;</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> MethodHandle <span class="hljs-title function_">getPrintlnMH</span><span class="hljs-params">(Object reveiver)</span> <span class="hljs-keyword">throw</span> Throwable&#123;<br><span class="hljs-type">MethodType</span> <span class="hljs-variable">mt</span> <span class="hljs-operator">=</span> MethodType.methodType(<span class="hljs-keyword">void</span>.class,String.class);<br><span class="hljs-keyword">return</span> lookup().findVirtual(reveiver.getClass(),<span class="hljs-string">&quot;println&quot;</span>,mt).bindTo(reveiver);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="句柄与反射"><a href="#句柄与反射" class="headerlink" title="句柄与反射"></a>句柄与反射</h3><ul><li>Reflection 与MethodHandle 机制本质上都是在模拟方法调用，但是Reflection是在模拟Java代码层次的方法调用，但是Reflection是在模拟Java代码层次的方法调用，而MethodHandle是在模拟字节码层次的方法调用。</li><li>Reflection 的Method对象比MethodHandle 所包含的信息来得多，而MethodHandle中仅包含执行该方法的相关信息</li></ul><h2 id="Invoke指令"><a href="#Invoke指令" class="headerlink" title="Invoke指令"></a>Invoke指令</h2><p>JVM中有5种invoke指令，分别用于不同类型的方法调用。它们在绑定时机、查找机制和性能上各有特点。</p><h3 id="invokestatic-静态方法调用"><a href="#invokestatic-静态方法调用" class="headerlink" title="invokestatic - 静态方法调用"></a>invokestatic - 静态方法调用</h3><ul><li><strong>绑定时机</strong> : 编译时静态绑定</li><li><strong>需要实例</strong> : 否</li><li><strong>支持多态</strong> : 否</li><li><strong>性能</strong> : 最高</li></ul><p><strong>使用场景</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br><br>*<span class="hljs-comment">// 调用*</span><br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> MathUtils.add(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);`<br><br>字节码示例<br><br>iconst_5<br>iconst_3<br>invokestatic #<span class="hljs-number">2</span> <span class="hljs-comment">// Method MathUtils.add:(II)I</span><br>istore_1<br></code></pre></td></tr></table></figure><p><strong>特点</strong></p><ul><li>直接根据类名和方法签名调用</li><li>无需运行时查找，性能最优</li><li>方法地址在编译时确定</li></ul><h3 id="invokespecial-特殊方法调用"><a href="#invokespecial-特殊方法调用" class="headerlink" title="invokespecial - 特殊方法调用"></a>invokespecial - 特殊方法调用</h3><ul><li><strong>绑定时机</strong> : 编译时静态绑定</li><li><strong>调用对象</strong> : 构造方法、私有方法、super方法</li><li><strong>支持重写</strong> : 否</li><li><strong>性能</strong> : 高</li></ul><p><strong>使用场景</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">privateMethod</span><span class="hljs-params">()</span> &#123; &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span> &#123;        *<span class="hljs-comment">// 构造方法*</span><br>        <span class="hljs-built_in">super</span>();            *<span class="hljs-comment">// super调用*</span><br>        privateMethod();    *<span class="hljs-comment">// 私有方法调用*</span><br>    &#125;<br>&#125;<br><br>字节码示例<br><br>aload_0<br>invokespecial #<span class="hljs-number">1</span> <span class="hljs-comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>aload_0<br>invokespecial #<span class="hljs-number">2</span> <span class="hljs-comment">// Method privateMethod:()V</span><br></code></pre></td></tr></table></figure><p><strong>特点</strong></p><ul><li>用于不能被重写的方法调用</li><li>编译时确定目标，安全且高效</li><li>包括构造器、私有方法、父类方法调用</li></ul><h3 id="invokevirtual-虚方法调用"><a href="#invokevirtual-虚方法调用" class="headerlink" title="invokevirtual - 虚方法调用"></a>invokevirtual - 虚方法调用</h3><ul><li><strong>绑定时机</strong> : 运行时动态绑定</li><li><strong>查找结构</strong> : 虚方法表(vtable)</li><li><strong>支持多态</strong> : 是</li><li><strong>性能</strong> : 中等</li></ul><p><strong>使用场景</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal sound&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Woof!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>animal.makeSound();  *<span class="hljs-comment">// 调用Dog的实现*</span><br><br>字节码示例<br><br>aload_1<br>invokevirtual #<span class="hljs-number">3</span> <span class="hljs-comment">// Method Animal.makeSound:()V</span><br><br>查找机制<br><br>*<span class="hljs-comment">// vtable结构示例*</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    vtable[<span class="hljs-number">0</span>] = toString()    *<span class="hljs-comment">// 继承自Object*</span><br>    vtable[<span class="hljs-number">1</span>] = hashCode()    *<span class="hljs-comment">// 继承自Object*</span><br>    vtable[<span class="hljs-number">2</span>] = makeSound()   *<span class="hljs-comment">// Animal自定义*</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    vtable[<span class="hljs-number">0</span>] = toString()    *<span class="hljs-comment">// 继承自Object*</span><br>    vtable[<span class="hljs-number">1</span>] = hashCode()    *<span class="hljs-comment">// 继承自Object*  </span><br>    vtable[<span class="hljs-number">2</span>] = makeSound()   *<span class="hljs-comment">// Dog重写版本*</span><br>&#125;<br><br>*<span class="hljs-comment">// 调用：object.vtable[method_index] - O(1)操作*</span><br></code></pre></td></tr></table></figure><p><strong>特点</strong></p><ul><li>通过vtable进行O(1)查找</li><li>平衡了多态性和性能</li><li>支持方法重写和动态分派</li></ul><hr><h3 id="invokeinterface-接口方法调用"><a href="#invokeinterface-接口方法调用" class="headerlink" title="invokeinterface - 接口方法调用"></a>invokeinterface - 接口方法调用</h3><p><strong>基本特性</strong></p><ul><li><strong>绑定时机</strong> : 运行时动态绑定</li><li><strong>查找结构</strong> : 接口方法表(itable)</li><li><strong>多接口支持</strong> : 是</li><li><strong>性能</strong> : 较低</li></ul><p><strong>使用场景</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Drawable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Drawable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Drawing circle&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">Drawable</span> <span class="hljs-variable">drawable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>drawable.draw();  *<span class="hljs-comment">// 接口方法调用*</span><br><br>字节码示例<br><br>aload_1<br>invokeinterface #<span class="hljs-number">4</span>, <span class="hljs-number">1</span> <span class="hljs-comment">// InterfaceMethod Drawable.draw:()V</span><br><br>查找机制<br><br>java<br><br>*<span class="hljs-comment">// itable结构示例*</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Drawable</span> &#123; <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span>; &#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Movable</span> &#123; <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span>; &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Drawable</span>, Movable &#123;<br>    *<span class="hljs-comment">// 需要维护多个接口的方法映射*</span><br>    itable_Drawable[<span class="hljs-number">0</span>] = draw()<br>    itable_Movable[<span class="hljs-number">0</span>] = move()<br>&#125;<br><br>*<span class="hljs-comment">// 调用：需要先找到对应接口的itable，再访问方法*</span><br></code></pre></td></tr></table></figure><p><strong>特点</strong></p><ul><li>需要在多个接口表中查找</li><li>支持多接口实现</li><li>性能开销较大，但提供了高度的灵活性</li></ul><hr><h3 id="invokedynamic-动态方法调用"><a href="#invokedynamic-动态方法调用" class="headerlink" title="invokedynamic - 动态方法调用"></a>invokedynamic - 动态方法调用</h3><ul><li><strong>引入版本</strong> : Java 7</li><li><strong>绑定时机</strong> : 首次调用时动态绑定</li><li><strong>主要用途</strong> : Lambda表达式、动态语言支持</li><li><strong>性能</strong> : 优化后较高</li></ul><p><strong>使用场景</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">*<span class="hljs-comment">// Lambda表达式*</span><br>List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>list.forEach(s -&gt; System.out.println(s));<br><br>*<span class="hljs-comment">// 方法引用*</span><br>list.forEach(System.out::println);<br><br>### 字节码示例<br><br>invokedynamic #<span class="hljs-number">2</span>, <span class="hljs-number">0</span> <span class="hljs-comment">// InvokeDynamic</span><br>    <span class="hljs-comment">// Bootstrap: java/lang/invoke/LambdaMetafactory.metafactory</span><br></code></pre></td></tr></table></figure><p><strong>特点</strong></p><ul><li>通过BootstrapMethod在运行时决定调用目标</li><li>支持现代Java特性和动态语言</li><li>首次调用后会缓存结果，后续调用性能较高</li></ul>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 类加载过程</title>
    <link href="/2025/08/03/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <url>/2025/08/03/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java类的生命周期"><a href="#Java类的生命周期" class="headerlink" title="Java类的生命周期"></a>Java类的生命周期</h1><p>Java类型的生命周期主要分为7个阶段 ：</p><p>加载→ 验证→ 准备→ 解析→ 初始化→ 使用→ 卸载</p><h2 id="触发加载的条件"><a href="#触发加载的条件" class="headerlink" title="触发加载的条件"></a>触发加载的条件</h2><ol><li>在遇到new ,getstatic ,putstatic或invokestatic 这四条字节码指令时，如果对应类型没有被初始化，则需要先触发其初始化阶段，这几条指令通常会在以下情况被调用<ol><li>使用new关键字实例化对象的时候</li><li>读取或设置一个类型的静态字段的时候</li><li>调用一个类型的静态方法的时候</li></ol></li><li>使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则触发初始化</li><li>当初始化类的时候，如果发现其父类还没进行过初始化，则需要先触发其父类的初始化</li><li>当虚拟机启动时，用户需要指定又给要执行的主类，虚拟机会先初始化这个主类</li><li>当需要使用反射调用方法时，对应的类没有进行过初始化，则触发初始化</li><li>当一个接口中定义默认方法时，如果有这个接口的实现类发生了初始化，那接口要在其之前被初始化</li></ol><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>加载阶段的目标 ：</p><ol><li>通过一个类的限定名来获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表整个类的java.lang.Class对象，作为方法区整个类的各种数据的访问入口</li></ol><p>对于数组类</p><p>数组类本身不通过类加载器创建，它是由java虚拟机直接在内存中动态构造出来的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型，最终还是要靠类加载器来完成加载。</p><p>数组类的创建过程</p><ol><li>如果数组的组件类型是引用类型，那就递归采用本节中定义的加载过程区加载这个组件类型，数组C将被标识在加载该组件类型的类加载器的类命名空间上。</li><li>如果数组的组件类型不是引用类型，java虚拟机将会把数组C标记为与引导类加载器关联</li><li>数组类的可访问性与它的组件类型的可访问性一致，如果组件类型不是引用类型，它的数组类的可访问性将默认为public</li></ol><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>验证用于确保Class文件的字节流中包含信息复合规范的全部约束要求</p><h3 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a>文件格式验证</h3><p>验证字节流是否符合Class文件格式的规范,包括</p><ol><li>是否以魔数0xCAFEBABE开头</li><li>主，次版本号是否在当前Java虚拟机接受范围之内</li><li>常量池的常量中是否有不被支持的常量类型</li><li>CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据</li><li>Class文件中各个部分及文件本身是否有被删除的或附加的其他信息</li></ol><h3 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a>元数据验证</h3><p>第二阶段 对字节码描述的信息进行语义分析，以保证其描述的信息符合规范要求。</p><ol><li>这个类是否有父类</li><li>这个类的父类是否继承了不允许被继承的类</li><li>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法</li><li>类中的字段，方法是否与父类产生矛盾</li></ol><h3 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h3><p>第三阶段 通过数据流分析和控制流分析，确定程序语义是合法的，符合逻辑的。</p><ol><li>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作。</li><li>保证任何跳转指令都不会跳转到方法体以外的字节码上</li><li>保证方法体中的类型转换总是有效的</li></ol><h3 id="符合引用验证"><a href="#符合引用验证" class="headerlink" title="符合引用验证"></a>符合引用验证</h3><ol><li>符号引用中通过字符串描述的全限定名是否能找到对应的类</li><li>在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段</li><li>符号引用中的类，字段，方法的可访问性</li></ol><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备阶段是正式为类中定义的变量分配内存并设置类变量初始值的阶段。</p><p>通过这个步骤就将定义的类变量值设置为0，只有当声明的变量中存在final关键字时，会直接将对应的值设置为ConstantValue 属性。并在准备阶段将属性直接赋值给对应的变量</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程。</p><p><strong>符号引用</strong> ：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。</p><p><strong>直接引用 ：</strong>直接引用是可以直接指向目标的指针，相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的。</p><h3 id="动态解析"><a href="#动态解析" class="headerlink" title="动态解析"></a>动态解析</h3><p>在处理多次解析请求时，如果是除invokedynamic指令外的解析过程，虚拟机实现可以对第一次解析的结果进行缓存，无论是否真正执行了多次解析动作，java虚拟机都需要保证的是在同一个实体中。</p><p>而对于invokedynamic指令，则会在程序实际运行到这条指令时，解析动作才能进行，而其他的触发解析的指令都是静态的，可以在加载阶段完成</p><h3 id="类或接口解析"><a href="#类或接口解析" class="headerlink" title="类或接口解析"></a>类或接口解析</h3><p>假设当前代码所处的类为D，如果把一个从未解析过的符号引用N解析为一个类或接口C的直接引用，则需要</p><ol><li>当C不是一个数组类型时，虚拟机会将N的全限定名传递给D的类加载器去加载类C。在加载过程中，又会触发其他相关加载动作。</li><li>当C是一个数组类型，并且数组的元素类型为对象，那会按照1中的规则加载数组元素类型，接着由虚拟机生成一个代表该数组维度和元素的数组对象</li><li>如果上述两步执行完毕，那么C在虚拟机中已经是一个有效的类或者接口了，再之后需要进行符号引用验证。</li></ol><h3 id="字段解析"><a href="#字段解析" class="headerlink" title="字段解析"></a>字段解析</h3><p>要解析一个未被解析过的字段符号引用，需要先解析字段所属的类或接口的符号引用。</p><ol><li>如果C中本身包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束</li><li>否则，如果在C中实现了接口，将会按照继承关系从下往上搜索各个接口和它的父接口，如果查询到了对应的字段，则返回这个字段的直接引用，查找结束</li><li>否则，如果C不是Object的话，将会按照继承关系从上往下递归搜索其父类，如果在父类中包含对应字段，则返回该字段的直接引用，查找结束</li><li>否则，查找失败，抛出异常</li></ol><h3 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h3><p>方法解析也需要优先解析方法所属类或接口的符号引用</p><ol><li>判断 所需要解析的信息的类型与表中的类型不一致的话，抛出异常</li><li>查询C中简单名称与描述符都与目标相匹配的方法，如果存在返回该方法的直接引用，查找结束</li><li>否则，在类C的父类中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果存在返回该方法直接引用，查找结束</li><li>否则，在C实现的接口列表及父接口之中查找是否有简单名称和描述符都与目标相匹配的方法，如果存在匹配的方法，说明类C是一个抽象类。抛出异常</li><li>否则，查找失败</li></ol><h3 id="接口方法解析"><a href="#接口方法解析" class="headerlink" title="接口方法解析"></a>接口方法解析</h3><p>也需要查询所属的类或接口已经被解析</p><ol><li>如果查询到索引是个类而不是接口，则直接抛出异常</li><li>否则，在接口C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有，则返回该方法的直接引用，查找结束</li><li>否则，在接口C的父接口中递归查找，直到Object类为止</li><li>如果C的不同父接口中存在多个简单名称和描述符都与目标类相匹配的方法，则会从中返回其中一个并结束查找</li><li>否则，查找失败</li></ol><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>初始化阶段，Java虚拟机才真正开始执行类中编写的Java程序代码，将主导权移交给应用程序</p><p>初始化阶段 ，会根据编程人员通过程序编码制定的主管计划去初始化类变量和其他资源。</p><p>初始化过程就是执行类构造器<code>&lt;clinit&gt;</code>方法的过程。它由javac编译器自动生成</p><p><code>&lt;clinit&gt;</code>() 方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的</p><p>静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但不能访问</p><p><code>&lt;clinit&gt;</code> 不需要显式的执行父类的构造器，由于父类构造器先执行，则父类中定义的静态代码优先于子类的赋值操作</p><p><code>&lt;clinit&gt;</code>() 方法对于类或者接口来说不是必须的</p><p>多个线程同时去初始化一个类，那么就只会有其中一个线程去执行这个类的<code>&lt;clinit&gt;</code>方法</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>JVM在设计时有意把类加载阶段中的“通过一个类的全限定名来获取描述该类的二进制字节流”放在外部实现，这一部分的代码实现被称为 类加载器</p><p>类加载器只用于实现类的加载动作，它和类本身一起共同确立类在java虚拟机中的唯一性。是否由同一个类加载器加载 是两个类是否相等的 判定标准之一。</p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>启动类加载器</p><p>启动类加载器负责加载存放在<JAVA_HOME>\lib目录，或者被-Xbootclasspath参数所指定的路径中存储的，而且是java虚拟机能够识别的类库加载到虚拟机的内存中，启动类加载器无法被java程序直接引用，用户如果需要将加载请求委派给引导类加载器处理，直接使用null代替</p><p>扩展类加载器</p><p>扩展类加载器负责加载<JAVA_HOME>\lib\ext中 或者被java.ext.dirs 指定路径中的所有类库</p><p>应用程序类加载器</p><p>应用程序类加载器，负责加载用户类路径上的所有类库。</p><p><strong>双亲委派</strong></p><p>如果一个类加载器受到了类加载的请求，会先将这个请求委派给父类加载器去完成，最终都会将请求传递到最顶层的启动类加载器中，当父加载里中没有查询到该类，再由子类尝试完成加载。</p><p><strong>双亲委派的作用</strong></p><ul><li><strong>安全隔离</strong> ：防止恶意代码通过自定义java.lang.String等核心类来破坏系统</li><li><strong>命名空间管理</strong> ：同一个类加载器加载的类属于同一个命名空间</li><li><strong>版本控制</strong> ：不同类加载器可以加载同名但不同版本的类，实现隔离</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> Class&lt;?&gt; loadClass(String name , <span class="hljs-type">boolean</span> resolve) <span class="hljs-keyword">throws</span> <br>ClassNotFoundException<br>&#123;<br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> findLoadedClass(name);<br><span class="hljs-keyword">if</span>(c==<span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span>(parent != <span class="hljs-literal">null</span>)&#123;<br> c = parent.loadClass(name,<span class="hljs-literal">false</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br> c = findBootstrapClassOrNull(name);<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(ClassNotFoundException e)&#123;<br><span class="hljs-comment">// 如果父类抛出异常 则说明父类无法完成加载请求</span><br><br>&#125;<br><span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-comment">// 父类无法完成加载时，由本类尝试加载</span><br>c = findClass(name);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(resolve)&#123;<br>resolveClass(c);<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="破坏双亲委派"><a href="#破坏双亲委派" class="headerlink" title="破坏双亲委派"></a>破坏双亲委派</h3><ol><li>SPI 双亲委派机制只能解决各个类加载器协作时的一致性问题。对于一些用于对资源进行查询和管理的业务，它本身就需要完成管理类的加载过程，通过线程上下文加载器，去加载所需的SPI服务代码， 实际上是通过父类加载器请求子类加载器完成类加载的行为。</li><li>OSGi 有些模块需要对自身所依赖的类进行更何时的定制化加载管理，每一个程序模块都有一个自己的类加载器，当需要更换一个Bundle时，就把Bundle连同类加载器一起换掉以实现代码的热替换。这样对于一个模块来说，它本身掌握了该子系统所需的类加载逻辑，可以实现更好的定制化加载，其加载逻辑 ：<ol><li>将以java.* 开头的类委派给父类加载器加载</li><li>否则，将委派列表名单内的类，委派给父类加载器加载</li><li>否则，将Import列表中的类，委派给Export 这个类的Bundle的类加载器加载</li><li>否则，查找当前Bundle的ClassPath，使用自己的类加载器加载</li><li>否则，查找类是否在自己的Fragment Bundle中，如果在，则委派给Fragment Bundle的类加载器加载</li><li>否则，查找Dynamic Import 列表的Bundle，委派给对应Bundle的类加载器加载</li><li>否则，类查找失败</li></ol></li><li>我们可以理解到双亲委派机制本身的作用是用于控制类来源的一致性，保证基础类是通过有确定来源的位置被加载并使用的，但是为了满足实际场景中的不同需求，同一个类的不同版本被加载到同一个项目中，或者热部署的切换需求，需要有更加灵活的类加载过程，才能保证系统的定制化实现。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM类文件结构</title>
    <link href="/2025/08/02/JVM-%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2025/08/02/JVM-%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p>Class 文件是一组以8个字节为基础的二进制流，各个数据项目严格按照顺序紧凑地排列在文件之中，中间没有添加任何分隔符，这使得整个文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。这种结构中主要使用了两种数据类型</p><p>无符号数 ：</p><p>无符号数属于基本数据类型，以u1,u2,u4,u8来分别代表1个字节，2个字节，4个字节和8个字节的无符号数，可以用来描述数字，索引引用，数量值或者以UT8-8编码构成的字符串</p><p>表：</p><p>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，为了便于区分，所有表的命名都可以习惯性地以“_info”结尾，表用于描述有层次关系的复合结构的数据。</p><p>无论是无符号数还是表，当需要描述同意类型但数量不定的多个数据时，会使用一个前置的容量计数器家若干个连续的数据项的形式，这种时候称这一系列的某一类型的数据为某一类型的“集合”</p><p><img src="https://i.111666.best/image/s1CSv3RtDDSmOvw9aHlpMM.png" alt="类文件结构"></p><h2 id="魔数（4字节）"><a href="#魔数（4字节）" class="headerlink" title="魔数（4字节）"></a><strong>魔数（4字节）</strong></h2><p>用于确定一个文件是否为一个能被虚拟机接收的Class文件。</p><h2 id="版本号信息"><a href="#版本号信息" class="headerlink" title="版本号信息"></a>版本号信息</h2><p>（2字节 + 2字节） 次版本号和主版本号</p><h2 id="常量池计数（2字节）"><a href="#常量池计数（2字节）" class="headerlink" title="常量池计数（2字节）"></a>常量池计数（2字节）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">只有常量池从1开始计数 0表示不引用任何常量池<br></code></pre></td></tr></table></figure><h2 id="常量池-（集合）"><a href="#常量池-（集合）" class="headerlink" title="常量池 （集合）"></a>常量池 （集合）</h2><p>常量池中包含两大类常量，字面量和符号引用</p><p>主要包括 ：</p><ul><li>被模块导出或者开放的包</li><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法句柄和方法类型</li><li>动态调用点和动态常量</li></ul><p>常量池中的项目结构</p><table><thead><tr><th>类型</th><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>CONSTANT_Utf8_info</td><td>1</td><td>UTF-8编码的字符串</td></tr><tr><td>CONSTANT_Integer_info</td><td>3</td><td>整型字面量</td></tr><tr><td>CONSTANT_Float_info</td><td>4</td><td>浮点型字面量</td></tr><tr><td>CONSTANT_Long_info</td><td>5</td><td>长整型字面量</td></tr><tr><td>CONSTANT_Double_info</td><td>6</td><td>双精度浮点型字面量</td></tr><tr><td>CONSTANT_Class_info</td><td>7</td><td>类或接口的符号引用</td></tr><tr><td>CONSTANT_String_info</td><td>8</td><td>字符串类型字面量</td></tr><tr><td>CONSTANT_Fildref_info</td><td>9</td><td>字段的符号引用</td></tr><tr><td>CONSTANT_Methodref_info</td><td>10</td><td>类中方法的符号引用</td></tr><tr><td>CONSTANT_InterfaceMethodref_info</td><td>11</td><td>接口中方法的符号引用</td></tr><tr><td>CONSTANT_NameAndType_info</td><td>12</td><td>字段或方法的部分符号引用</td></tr><tr><td>CONSTANT_MethodHandle_info</td><td>15</td><td>表示方法句柄</td></tr><tr><td>CONSTANT_MethodType_info</td><td>16</td><td>表示方法类型</td></tr><tr><td>CONSTANT_Dynamic_info</td><td>17</td><td>表示一个动态计算常量</td></tr><tr><td>CONSTANT_InvokeDynamic_info</td><td>18</td><td>表示一个动态方法调用点</td></tr><tr><td>CONSTANT_Module_info</td><td>19</td><td>表示一个模块</td></tr><tr><td>CONSTANT_Package_info</td><td>20</td><td>表示一个模块中开放或者导出的包</td></tr></tbody></table><h3 id="CONSTANT-Class-info"><a href="#CONSTANT-Class-info" class="headerlink" title="CONSTANT_Class_info"></a>CONSTANT_Class_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;7。用于表示类或接口的符号引用。name_index指向常量池中一个CONSTANT_Utf8_info类型的常量，该常量存储了这个类或接口的全限定名（如java&#x2F;lang&#x2F;String）。全限定名使用”&#x2F;“分隔包名，而不是”.”。</p><h3 id="CONSTANT-Fieldref-info"><a href="#CONSTANT-Fieldref-info" class="headerlink" title="CONSTANT_Fieldref_info"></a>CONSTANT_Fieldref_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>class_index</td><td>1</td></tr><tr><td>u2</td><td>name_and_type_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;9。用于表示字段的符号引用。class_index指向CONSTANT_Class_info类型常量，表示该字段所属的类或接口；name_and_type_index指向CONSTANT_NameAndType_info类型常量，表示该字段的简单名称和字段描述符。字段描述符用于描述字段的数据类型。</p><h3 id="CONSTANT-Methodref-info"><a href="#CONSTANT-Methodref-info" class="headerlink" title="CONSTANT_Methodref_info"></a>CONSTANT_Methodref_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>class_index</td><td>1</td></tr><tr><td>u2</td><td>name_and_type_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;10。用于表示类中方法的符号引用。class_index指向CONSTANT_Class_info类型常量，表示该方法所属的类；name_and_type_index指向CONSTANT_NameAndType_info类型常量，表示该方法的简单名称和方法描述符。方法描述符描述了方法的参数类型列表和返回值类型。</p><h3 id="CONSTANT-InterfaceMethodref-info"><a href="#CONSTANT-InterfaceMethodref-info" class="headerlink" title="CONSTANT_InterfaceMethodref_info"></a>CONSTANT_InterfaceMethodref_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>class_index</td><td>1</td></tr><tr><td>u2</td><td>name_and_type_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;11。用于表示接口中方法的符号引用。class_index必须指向CONSTANT_Class_info类型常量，且该常量必须表示一个接口而非类；name_and_type_index指向CONSTANT_NameAndType_info类型常量，表示该接口方法的简单名称和方法描述符。</p><h3 id="CONSTANT-String-info"><a href="#CONSTANT-String-info" class="headerlink" title="CONSTANT_String_info"></a>CONSTANT_String_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>string_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;8。用于表示String类型的常量对象。string_index指向CONSTANT_Utf8_info类型常量，该常量存储了String对象的值。这种常量用于支持Java源码中的字符串字面量，如”Hello World”。</p><h3 id="CONSTANT-Integer-info"><a href="#CONSTANT-Integer-info" class="headerlink" title="CONSTANT_Integer_info"></a>CONSTANT_Integer_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u4</td><td>bytes</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;3。用于表示int类型的常量值。bytes字段按照高位在前（Big-Endian）的顺序存储32位有符号整数。这种常量用于支持Java源码中的int类型字面量和final修饰的int类型字段的初始值。</p><h3 id="CONSTANT-Float-info"><a href="#CONSTANT-Float-info" class="headerlink" title="CONSTANT_Float_info"></a>CONSTANT_Float_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u4</td><td>bytes</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;4。用于表示float类型的常量值。bytes字段按照IEEE 754单精度浮点数格式存储，采用高位在前的字节序。用于支持Java源码中的float类型字面量和final修饰的float类型字段的初始值。</p><h3 id="CONSTANT-Long-info"><a href="#CONSTANT-Long-info" class="headerlink" title="CONSTANT_Long_info"></a>CONSTANT_Long_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u4</td><td>high_bytes</td><td>1</td></tr><tr><td>u4</td><td>low_bytes</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;5。用于表示long类型的常量值。由high_bytes和low_bytes两个字段组成64位有符号长整数，按照高位在前的顺序存储。该常量占用常量池中的两个连续索引位置，第二个索引位置被认为是无效的。</p><h3 id="CONSTANT-Double-info"><a href="#CONSTANT-Double-info" class="headerlink" title="CONSTANT_Double_info"></a>CONSTANT_Double_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u4</td><td>high_bytes</td><td>1</td></tr><tr><td>u4</td><td>low_bytes</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;6。用于表示double类型的常量值。按照IEEE 754双精度浮点数格式存储，由high_bytes和low_bytes组成64位浮点数，采用高位在前的字节序。与long类型常量一样，占用常量池中的两个连续索引位置。</p><h3 id="CONSTANT-NameAndType-info"><a href="#CONSTANT-NameAndType-info" class="headerlink" title="CONSTANT_NameAndType_info"></a>CONSTANT_NameAndType_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>1</td></tr><tr><td>u2</td><td>descriptor_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;12。用于表示字段或方法的部分符号引用。name_index指向CONSTANT_Utf8_info类型常量，存储字段或方法的简单名称（不包含类名）；descriptor_index指向CONSTANT_Utf8_info类型常量，存储字段的字段描述符或方法的方法描述符。描述符用规范化的字符串描述数据类型。</p><h3 id="CONSTANT-Utf8-info"><a href="#CONSTANT-Utf8-info" class="headerlink" title="CONSTANT_Utf8_info"></a>CONSTANT_Utf8_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>length</td><td>1</td></tr><tr><td>u1</td><td>bytes</td><td>length</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;1。用于表示UTF-8编码的字符串常量，是常量池中最基础的常量类型。length字段表示后续字节数组的长度（注意不是字符个数）；bytes字段存储使用UTF-8缩略编码的字符串内容。由于length是u2类型，所以单个字符串的最大字节长度为65535字节。几乎所有其他常量类型都会引用此类型来存储文本信息。</p><h3 id="CONSTANT-MethodHandle-info"><a href="#CONSTANT-MethodHandle-info" class="headerlink" title="CONSTANT_MethodHandle_info"></a>CONSTANT_MethodHandle_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u1</td><td>reference_kind</td><td>1</td></tr><tr><td>u2</td><td>reference_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;15。用于表示方法句柄常量，支持Java 7引入的invokedynamic指令和方法句柄机制。reference_kind字段表示方法句柄的种类（1-9对应不同的操作类型，如getField、putField、invokeVirtual等）；reference_index根据reference_kind的值指向常量池中相应的字段引用、方法引用或接口方法引用常量。</p><h3 id="CONSTANT-MethodType-info"><a href="#CONSTANT-MethodType-info" class="headerlink" title="CONSTANT_MethodType_info"></a>CONSTANT_MethodType_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>descriptor_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;16。用于表示方法类型常量，支持Java 7的invokedynamic指令。descriptor_index指向CONSTANT_Utf8_info类型常量，该常量存储方法描述符，描述了方法的参数类型列表和返回值类型，但不包含方法名。方法类型常量用于在运行时表示方法的签名信息。</p><h3 id="CONSTANT-Dynamic-info"><a href="#CONSTANT-Dynamic-info" class="headerlink" title="CONSTANT_Dynamic_info"></a>CONSTANT_Dynamic_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>bootstrap_method_attr_index</td><td>1</td></tr><tr><td>u2</td><td>name_and_type_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;17。用于表示动态计算常量，支持Java 11引入的动态常量特性。bootstrap_method_attr_index指向类文件属性表中BootstrapMethods属性的bootstrap_methods数组的索引，该引导方法在运行时负责计算常量的值；name_and_type_index指向CONSTANT_NameAndType_info类型常量，描述动态常量的名称和类型描述符。</p><h3 id="CONSTANT-InvokeDynamic-info"><a href="#CONSTANT-InvokeDynamic-info" class="headerlink" title="CONSTANT_InvokeDynamic_info"></a>CONSTANT_InvokeDynamic_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>bootstrap_method_attr_index</td><td>1</td></tr><tr><td>u2</td><td>name_and_type_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;18。用于表示invokedynamic指令要调用的动态方法，支持Java 7引入的invokedynamic特性。bootstrap_method_attr_index指向BootstrapMethods属性中引导方法的索引，该引导方法在首次执行时负责解析调用点并返回CallSite对象；name_and_type_index指向CONSTANT_NameAndType_info类型常量，描述动态方法调用的方法名和方法描述符。</p><h3 id="CONSTANT-Module-info"><a href="#CONSTANT-Module-info" class="headerlink" title="CONSTANT_Module_info"></a>CONSTANT_Module_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;19。用于表示模块的符号引用，支持Java 9引入的模块系统。name_index指向CONSTANT_Utf8_info类型常量，该常量存储模块的名称（如java.base）。这种常量主要用于module-info.class文件中，描述模块的依赖关系、导出包等模块元数据。</p><h3 id="CONSTANT-Package-info"><a href="#CONSTANT-Package-info" class="headerlink" title="CONSTANT_Package_info"></a>CONSTANT_Package_info</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>1</td></tr></tbody></table><p><strong>说明：</strong> tag&#x3D;20。用于表示包的符号引用，支持Java 9的模块系统。name_index指向CONSTANT_Utf8_info类型常量，该常量存储包的名称（如java&#x2F;lang，使用”&#x2F;“分隔）。这种常量主要用于module-info.class文件中，用于描述模块导出的包、打开的包等信息。</p><h2 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h2><p>访问标志用于识别一些类或者接口层次的访问信息，包括这个Class 是类还是接口；是否定义为public类型；是否定义为abstract类型；如果是类的话是否被声明为final</p><table><thead><tr><th>标志名称</th><th>标志值</th><th>含义</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>是否为public类型</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>是否被声明为final</td></tr><tr><td>ACC_SUPER</td><td>0x0020</td><td>是否使用invokespecial字节码指令的新语义</td></tr><tr><td>ACC_INTERFACE</td><td>0x0200</td><td>标识这是一个接口</td></tr><tr><td>ACC_ABSTRACT</td><td>0x0400</td><td>是否为抽象类型</td></tr><tr><td>ACC_SYNTHETIC</td><td>0x1000</td><td>标识这个类并非由用户代码产生的</td></tr><tr><td>ACC_ANNOTATION</td><td>0x2000</td><td>标识这是一个注解</td></tr><tr><td>ACC_ENUM</td><td>0x4000</td><td>标识这是一个枚举</td></tr><tr><td>ACC_MODULE</td><td>0x8000</td><td>标识这是一个模块</td></tr></tbody></table><h2 id="类索引"><a href="#类索引" class="headerlink" title="类索引"></a>类索引</h2><p>用于确定这个类的全限定名</p><h2 id="父类索引"><a href="#父类索引" class="headerlink" title="父类索引"></a>父类索引</h2><p>用于确定这个类的父类的全限定名，而除了Object外，所有类的父类索引都不为0</p><h2 id="接口索引集合"><a href="#接口索引集合" class="headerlink" title="接口索引集合"></a>接口索引集合</h2><p>用于描述这个类实现了哪些接口，这些被实现的接口将按implements关键字后的接口顺序从左到右排列在接口索引集合中。</p><h2 id="接口索引计数器"><a href="#接口索引计数器" class="headerlink" title="接口索引计数器"></a>接口索引计数器</h2><p>如果为0 则该类未实现任何接口，则接口索引集合不占用任何字节</p><h2 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h2><p>字段表（field_info）用于描述接口或者类中声明的变量，Java语言中的“字段”包括类级变量以及实例级变量，但不包括在方法内部声明的局部变量。上述信息中，每个修饰符都是布尔值。</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>access_flags</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>1</td></tr><tr><td>u2</td><td>descriptor</td><td>1</td></tr><tr><td>u2</td><td>attributes_count</td><td>1</td></tr><tr><td>attribute_info</td><td>attributes</td><td>attributes_counter</td></tr></tbody></table><p><strong>字段访问标志</strong></p><table><thead><tr><th>标志名称</th><th>标志值</th><th>含义</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>字段是否public</td></tr><tr><td>ACC_PRIVATE</td><td>0x0002</td><td>字段是否private</td></tr><tr><td>ACC_PROTECTED</td><td>0x0004</td><td>字段是否protected</td></tr><tr><td>ACC_STATIC</td><td>0x0008</td><td>字段是否static</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>字段是否final</td></tr><tr><td>ACC_VOLATILE</td><td>0x0040</td><td>字段是否volatile</td></tr><tr><td>ACC_TRANSIENT</td><td>0x0080</td><td>字段是否transient</td></tr><tr><td>ACC_SYNTHETIC</td><td>0x0010</td><td>字段是否由编译器自动产生</td></tr><tr><td>ACC_ENUM</td><td>0x4000</td><td>字段是否enum</td></tr></tbody></table><p>简单名称，描述符和全限定名</p><p>简单名称： 没有类型和参数修饰的方法或者字段名称</p><p>全限定名：具有包路径的全部类名称使用”&#x2F;”连接</p><p>描述符：描述字段的数据类型，方法的参数列表和返回值</p><table><thead><tr><th>标识字符</th><th>含义</th></tr></thead><tbody><tr><td>B</td><td>基本类型byte</td></tr><tr><td>C</td><td>基本类型char</td></tr><tr><td>D</td><td>基本类型double</td></tr><tr><td>F</td><td>基本类型float</td></tr><tr><td>I</td><td>基本类型int</td></tr><tr><td>J</td><td>基本类型long</td></tr><tr><td>S</td><td>基本类型short</td></tr><tr><td>Z</td><td>基本类型boolean</td></tr><tr><td>V</td><td>特殊类型void</td></tr><tr><td>L</td><td>对象类型</td></tr></tbody></table><p>对于数组类型，每一维度将使用一个前置的“[”字符来描述，多维数组则继续向前面添加”[” 。</p><p>方法则被描述为()。</p><h2 id="属性表"><a href="#属性表" class="headerlink" title="属性表"></a>属性表</h2><p>有时候会在后续存在一个属性表信息</p><h2 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h2><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>access_flags</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>1</td></tr><tr><td>u2</td><td>descriptor_index</td><td>1</td></tr><tr><td>u2</td><td>attributes_count</td><td>1</td></tr><tr><td>attribute_info</td><td>attributes</td><td>attribute_count</td></tr></tbody></table><p><strong>字段访问标志</strong></p><table><thead><tr><th>标志名称</th><th>标志值</th><th>含义</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>方法是否为public</td></tr><tr><td>ACC_PRIVATE</td><td>0x0002</td><td>方法是否为private</td></tr><tr><td>ACC_PROTECTED</td><td>0x0004</td><td>方法是否为protected</td></tr><tr><td>ACC_STATIC</td><td>0x0008</td><td>方法是否为static</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>方法是否为final</td></tr><tr><td>ACC_SYNCHRONIZED</td><td>0x0020</td><td>方法是否为synchronized</td></tr><tr><td>ACC_BRIDGE</td><td>0x0040</td><td>方法是不是由编译器产生的桥接方法</td></tr><tr><td>ACC_VARRGS</td><td>0x0080</td><td>方法是否接受不定参数</td></tr><tr><td>ACC_NATIVE</td><td>0x0100</td><td>方法是否为native</td></tr><tr><td>ACC_ABSTRACT</td><td>0x0400</td><td>方法是否为abstract</td></tr><tr><td>ACC_STRICT</td><td>0x0800</td><td>方法是否为strictfp</td></tr><tr><td>ACC_SYNTHETIC</td><td>0x1000</td><td>方法是否由编译器自动产生</td></tr></tbody></table><p>方法的执行代码被存储在属性表集合的Code属性里面</p><table><thead><tr><th>属性名称</th><th>使用位置</th><th>含义</th></tr></thead><tbody><tr><td>Code</td><td>方法表</td><td>Java代码编译成的字节码指令</td></tr><tr><td>ConstantValue</td><td>字段表</td><td>final关键字定义的常量值</td></tr><tr><td>Deprecated</td><td>类、方法表、字段表</td><td>被声明为deprecated的方法和字段</td></tr><tr><td>Exceptions</td><td>方法表</td><td>方法抛出的异常</td></tr><tr><td>InnerClasses</td><td>类文件</td><td>记录内部类与宿主类之间的关联</td></tr><tr><td>LineNumberTable</td><td>Code属性</td><td>Java源码行号与字节码指令的对应关系</td></tr><tr><td>LocalVariableTable</td><td>Code属性</td><td>方法的局部变量描述</td></tr><tr><td>SourceFile</td><td>类文件</td><td>记录源文件名称</td></tr><tr><td>Synthetic</td><td>类、方法表、字段表</td><td>标识方法或字段为编译器自动生成的</td></tr><tr><td>StackMapTable</td><td>Code属性</td><td>用于新的类型检查验证器验证和处理目标方法的局部变量和操作数栈所需要的类型是否匹配</td></tr><tr><td>Signature</td><td>类、方法表、字段表</td><td>可选的定长属性，它可以出现于类、属性表和方法表结构的属性表中</td></tr><tr><td>BootstrapMethods</td><td>类文件</td><td>用于保存invokedynamic指令引用的引导方法限定符</td></tr><tr><td>MethodParameters</td><td>方法表</td><td>用于支持（编译时加上-parameters参数）将方法名称编译进Class文件中，并可运行时获取</td></tr><tr><td>RuntimeVisibleAnnotations</td><td>类、方法表、字段表</td><td>为动态注解提供支持，用于指明哪些注解是运行时可见的</td></tr><tr><td>RuntimeInvisibleAnnotations</td><td>类、方法表、字段表</td><td>与RuntimeVisibleAnnotations相反，用于指明哪些注解是运行时不可见的</td></tr><tr><td>RuntimeVisibleParameterAnnotations</td><td>方法表</td><td>作用与RuntimeVisibleAnnotations类似，只不过作用对象为方法参数</td></tr><tr><td>RuntimeInvisibleParameterAnnotations</td><td>方法表</td><td>作用与RuntimeInvisibleAnnotations类似，只不过作用对象为方法参数</td></tr><tr><td>AnnotationDefault</td><td>方法表</td><td>用于记录注解类元素的默认值</td></tr><tr><td>LocalVariableTypeTable</td><td>Code属性</td><td>它使用特征签名代替描述符，是为了引入泛型语法之后能描述泛型参数化类型而添加</td></tr><tr><td>EnclosingMethod</td><td>类文件</td><td>当一个类为局部类或者匿名类时，才能拥有这个属性，这个属性用于标示这个类所在的外围方法</td></tr><tr><td>Module</td><td>类</td><td>JDK9中新增属性，用于记录一个Module的名称以及相关信息</td></tr><tr><td>ModulePackages</td><td>类</td><td>JDK9中新增属性，用于记录一个模块中所有被exports或者opens的包</td></tr><tr><td>ModuleMainClass</td><td>类</td><td>JDK9中新增属性，用于指定一个模块的主类</td></tr><tr><td>NestHost</td><td>类</td><td>JDK11中新增属性，用于支持嵌套类的反射和访问控制的API，一个内部类通过该属性得知自己的宿主类</td></tr><tr><td>NestMembers</td><td>类</td><td>JDK11中新增属性，用于支持嵌套类的反射和访问控制的API，一个宿主类通过该属性得知自己有哪些内部类</td></tr><tr><td>SourceDebugExtension</td><td>类文件</td><td>用于存储额外的调试信息</td></tr><tr><td>RuntimeVisibleTypeAnnotations</td><td>类，方法表，字段表，Code属性</td><td>JDK8中新增属性，用于指明哪些类注解是运行时可见的</td></tr><tr><td>RuntimeInvisibleTypeAnnotations</td><td>类，方法表，字段表，Code属性</td><td>JDK8中新增属性，用于指明哪些类注解是运行时不可见的</td></tr></tbody></table><h3 id="属性表结构"><a href="#属性表结构" class="headerlink" title="属性表结构"></a>属性表结构</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u1</td><td>info</td><td>attribute_length</td></tr></tbody></table><p><strong>Code属性</strong></p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>max_stack</td><td>1</td></tr><tr><td>u2</td><td>max_locals</td><td>1</td></tr><tr><td>u4</td><td>code_length</td><td>1</td></tr><tr><td>u1</td><td>code</td><td>code_length</td></tr><tr><td>u2</td><td>exception_table_length</td><td>1</td></tr><tr><td>exception_info</td><td>exception_table</td><td>exception_table_length</td></tr><tr><td>u2</td><td>attributes_count</td><td>1</td></tr><tr><td>attribute_info</td><td>attributes</td><td>attributes_count</td></tr></tbody></table><p>attribute_name_index 是一项指向CONSTANT_Utf8_info型常量的索引，此常量值固定为“Code”,它代表了该属性的属性名称</p><p>attribute_length指示了属性值的长度，由于属性名称索引与属性长度一共为6个字节，所以属性值长度固定为属性表长度-6</p><p>max_stack 代表了操作数栈深度的最大值，在方法执行的任意时刻，操作数栈都不会超过这个深度。虚拟机运行的时候要根据这个值来分配栈帧中的操作栈深度</p><p>max_locals 代表了局部变量表所需的存储空间，单位是变量槽。代码执行超出一个局部变量的作用域时，这个局部变量所占的变量槽可以被其他局部变量所使用。编译器会根据变量的作用域来分配变量槽给各个变量使用，根据同时生存的最大局部变量数量和类型计算出max_locals</p><p>code_length 和 code 用来存储Java源程序编译后生成的字节码指令。code_length代表字节码长度，code是用于存储字节码指令的一系列字节流。</p><p>字节码指令是 u1类型的单字节控制字符， u1的取值范围在0-255</p><p>code_length 中 定义了u4类型的长度，但实际上只是用u2长度</p><p>Code属性是用于描述具体的代码，</p><h3 id="异常表集合"><a href="#异常表集合" class="headerlink" title="异常表集合"></a>异常表集合</h3><p>异常表对于Code属性来说并不是必须存在的</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>start_pc</td><td>1</td></tr><tr><td>u2</td><td>end_pc</td><td>1</td></tr><tr><td>u2</td><td>handler_pc</td><td>1</td></tr><tr><td>u2</td><td>catch_type</td><td>1</td></tr></tbody></table><h3 id="Exceptions属性"><a href="#Exceptions属性" class="headerlink" title="Exceptions属性"></a>Exceptions属性</h3><p>Exceptions属性是在方法表中与Code属性平级的一项属性，列举方法中可能抛出的受查异常。</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>number_of_exceptions</td><td>1</td></tr><tr><td>u2</td><td>exception_index_table</td><td>number_of_exceptions</td></tr></tbody></table><p>number_of_exceptions  表示方法可能抛出number_of_exceptions 种受查异常</p><p>每一种受查异常用一个exception_index_table项表示</p><p>exception_index_table 是一个指向常量池中CONSTANT_Class_info型常量的索引。代表了该受查异常的类型</p><h3 id="LineNumberTable-属性"><a href="#LineNumberTable-属性" class="headerlink" title="LineNumberTable 属性"></a>LineNumberTable 属性</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>line_number_table_length</td><td>1</td></tr><tr><td>line_number_info</td><td>line_number_table</td><td>line_number_table_length</td></tr></tbody></table><p>LineNumberTable 属性用于描述Java源行号与字节码行号之间的对应关系。</p><p>line_number_table 是一个数量为line_number_table_length,类型为line_number_info的集合，line_number_info表包含start_pc, 和 line_number 两个u2类型的数据项，前者是字节码行号，后者是java源码行号</p><h3 id="LocalVariableTable和LocalVariableTypeTable属性"><a href="#LocalVariableTable和LocalVariableTypeTable属性" class="headerlink" title="LocalVariableTable和LocalVariableTypeTable属性"></a>LocalVariableTable和LocalVariableTypeTable属性</h3><p>LocalVariableTable 属性用于描述栈帧中局部变量表的变量与Java源码中定义的变量之间的关系。</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>local_variable_table_length</td><td>1</td></tr><tr><td>local_variable_info</td><td>local_variable_table</td><td>local_variable_table_length</td></tr></tbody></table><p>local_variable_info 项目代表了一个栈帧与源码中的局部变量的关联</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>start_pc</td><td>1</td></tr><tr><td>u2</td><td>length</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>1</td></tr><tr><td>u2</td><td>descriptor_index</td><td>1</td></tr><tr><td>u2</td><td>index</td><td>1</td></tr></tbody></table><p>start_pc 和 length 属性分别代表了这个局部变量的生命周期开始的字节码偏移量及其作用范围覆盖的长度，两者结合就是这个局部变量在字节码之中的作用域范围</p><p>name_index 和 descriptor_index 都是指向常量池中CONSTANT_Utf8_info型常量的索引，分别代表了局部变量的名称以及整个局部变量的描述符</p><p>index 是整个局部变量在栈帧的局部变量表中变量操的位置。当这个变量数据类型是64位类型时，它占用的变量槽位位index和index+1</p><h3 id="SourceFile-及SourceDebugExtension属性"><a href="#SourceFile-及SourceDebugExtension属性" class="headerlink" title="SourceFile 及SourceDebugExtension属性"></a>SourceFile 及SourceDebugExtension属性</h3><p>SourceFile用于记录生成这个Class文件的源码文件名称。在Java中，对于大多数的类来说，类名和文件名是一只的。</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>sourcefile_index</td><td>1</td></tr></tbody></table><p>sourcefile_index 数据项是指向常量池中CONSTANT_Utf8_info 型常量的索引，常量值是源码文件的文件名。</p><h3 id="ConstantValue"><a href="#ConstantValue" class="headerlink" title="ConstantValue"></a>ConstantValue</h3><p>ConstantValue 属性的作用是通知虚拟机自动变为静态变量赋值只有被static关键字修饰的变量才可以使用这项属性。</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>constantvalue_index</td><td>1</td></tr></tbody></table><p>在java中实例变量赋值和 静态变量赋值发生在不同的阶段：</p><p>对于实例变量</p><p>是在实例构造器 <code>&lt;init&gt;</code>()方法中进行的</p><p>对于类变量</p><p>在类构造器 <code>&lt;clinit&gt;</code> 或者 使用ConstantValue属性。</p><p>Oracle 实现 ：</p><p>如果同时使用final和static 修饰一个变量，并且这个变量的数据类型是基本类型或者java.lang.String的话，就会生成ConstantValue 属性来进行初始化，如果没有被final修饰，或者并非基本类型及字符串会在 <code>&lt;clinit&gt;</code>中进行初始化。因为字面量中只有基本属性和字符串的字面量，所以ConstantValue 无法支持其他类型</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>constantvalue_index</td><td>1</td></tr></tbody></table><p>attribute_length 是一个固定值 为2字节</p><p>constantvalue_index 是 常量和字符串中的一种</p><h3 id="InnerClasses"><a href="#InnerClasses" class="headerlink" title="InnerClasses"></a>InnerClasses</h3><p>InnerClasses 属性用于记录内部类与宿主类之间的关联，如果一个类中定义了内部类，那编译器将会为它以及它所包含的内部类生成InnerClasses属性。</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_legnth</td><td>1</td></tr><tr><td>u2</td><td>number_of_classes</td><td>1</td></tr><tr><td>inner_classes_info</td><td>inner_classes</td><td>number_of_classes</td></tr></tbody></table><p>number_of_classes 代表需要记录多少个内部类信息，每一个内部类信息都由一个inner_classes_info表进行描述。</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>inner_class_info_index</td><td>1</td></tr><tr><td>u2</td><td>outer_class_info_index</td><td>1</td></tr><tr><td>u2</td><td>inner_name_index</td><td>1</td></tr><tr><td>u2</td><td>inner_class_access_flags</td><td>1</td></tr></tbody></table><p>inner_class_info_index 和 outer_class_info_index 都是指向常量池中CONSTANT_Class_info型常量的索引，分别代表了内部类和宿主类的符号索引</p><p>inner_name_index 是指向常量池中CONSTANT_Utf8_info型常量的索引，代表整个内部类的名称，如果是匿名内部类，这项值为0；</p><p>inner_class_access_flags 是内部类的访问标志。</p><table><thead><tr><th>标志名称</th><th>标志值</th><th>含义</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>内部类是否为public</td></tr><tr><td>ACC_PRIVATE</td><td>0x0002</td><td>内部类是否为private</td></tr><tr><td>ACC_PROTECTED</td><td>0x0004</td><td>内部类是否为protected</td></tr><tr><td>ACC_STATIC</td><td>0x0008</td><td>内部类是否为static</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>内部类是否为final</td></tr><tr><td>ACC_INTERFACE</td><td>0x0200</td><td>内部类是否为接口</td></tr><tr><td>ACC_ABSTRACT</td><td>0x0400</td><td>内部类是否为abstract</td></tr><tr><td>ACC_SYNTHETIC</td><td>0x1000</td><td>内部类是否由编译器产生</td></tr><tr><td>ACC_ANNOTATION</td><td>0x2000</td><td>内部类是否为注解类型</td></tr><tr><td>ACC_ENUM</td><td>0x4000</td><td>内部类是否为枚举类型</td></tr></tbody></table><h3 id="Deprecated及Synthetic"><a href="#Deprecated及Synthetic" class="headerlink" title="Deprecated及Synthetic"></a>Deprecated及Synthetic</h3><p>Deprecated表示某个类，字段或方法，已经被程序作者定为不再推荐使用，它可以通过代码中使用@deprecated注解进行设置</p><p>Synthetic属性代表此字段或者方法并不是由Java源码直接产生的，而是由编译器自行添加的</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr></tbody></table><h3 id="StackMapTable"><a href="#StackMapTable" class="headerlink" title="StackMapTable"></a>StackMapTable</h3><p>StackMapTable 中包含零至多个栈映射帧，每个栈映射帧都显式或隐式的代表了一个字节偏移量，用于表示执行到该字节码时，局部变量表和操作数栈的验证类型。</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>number_of_entries</td><td>1</td></tr><tr><td>stack_map_frame</td><td>stack_map_frame entries</td><td>number_of_entries</td></tr></tbody></table><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>signature用于记录泛型签名信息</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>signature_index</td><td>1</td></tr></tbody></table><p>aignature_index 必须是一个对常量池的有效索引，并且该项目必须是CONSTANT_Utf8_info 结构，</p><p>当 SigNature 是类文件属性  则表示是类签名，如果是方法表属性，则表示方法类型签名，如果是字段表属性，则表示字段类型签名</p><p>BootstrapMethods 属性</p><p>BootstrapMethods用于保存invokedynamic指令引用的引导方法限定符</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>num_bootstrap_methods</td><td>1</td></tr><tr><td>boostrap_method</td><td>bootstrap_methods</td><td>num_boostrap_methods</td></tr></tbody></table><p>num_boostrap_methods 给出引导方法限定符的数量</p><p>bootstrap_methods[]数组的每个成员包含了一个指向常量池CONSTANT_MethodHandle结构的索引值，它代表了一个引导方法</p><p>boostrap_method的表结构</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>bootstrap_method_ref</td><td>1</td></tr><tr><td>u2</td><td>num_bootstrap_arguments</td><td>1</td></tr><tr><td>u2</td><td>bootstrap_arguments</td><td>num_boostrap_arguments</td></tr></tbody></table><p>bootstrap_method_ref 必须是一个对常量池的有效索引，并且其指向的值是一个对常量池的有效索引。该索引必须是一个CONSTANT_MethodHandle_info结构</p><p>num_bootstrap_arguments 给出了boostrap_arguments[] 数组成员的数量</p><p>bootstrap_argumetns[] 数组中的每个成员必须是一个对常量池的有效索引。</p><h3 id="MethodParaments"><a href="#MethodParaments" class="headerlink" title="MethodParaments"></a>MethodParaments</h3><p>用于存储方法定义的参数名</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u1</td><td>parameters_count</td><td>1</td></tr><tr><td>parameter</td><td>parameters</td><td>parameters_count</td></tr></tbody></table><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>name_index</td><td>1</td></tr><tr><td>u2</td><td>access_flags</td><td>1</td></tr></tbody></table><p>name_index 是一个指向常量池CONSTATN_Utf8_info常量的索引值，代表了该参数的名称。</p><p>access_flags是参数的状态指示器，它提供3种状态标识</p><p>0x0010 标识该参数被final修饰</p><p>0x1000 标识该参数并未出现在源文件中，由编译器自动生成</p><p>0x8000 标识该参数是在源文件中隐式定义的</p><h3 id="模块化相关属性"><a href="#模块化相关属性" class="headerlink" title="模块化相关属性"></a>模块化相关属性</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>module_name_index</td><td>1</td></tr><tr><td>u2</td><td>module_flags</td><td>1</td></tr><tr><td>u2</td><td>module_version_index</td><td>1</td></tr><tr><td>u2</td><td>requires_count</td><td>1</td></tr><tr><td>require</td><td>requires</td><td>requires_count</td></tr><tr><td>u2</td><td>exports_count</td><td>1</td></tr><tr><td>export</td><td>exports</td><td>exports_count</td></tr><tr><td>u2</td><td>opens_count</td><td>1</td></tr><tr><td>open</td><td>opens</td><td>opens_count</td></tr><tr><td>use</td><td>uses_index</td><td>uses_count</td></tr><tr><td>u2</td><td>provides_count</td><td>1</td></tr><tr><td>provide</td><td>provides</td><td>provides_count</td></tr></tbody></table><p>module_name_index 是一个指向常量池CONSTANT_Utf8_info常量的索引值，代表了该模块的名称。</p><p>module_flags 是模块的状态指示器。</p><p>0x0020 标识该模块是开放的</p><p>0x1000 标识该模块并未出现在源文件中，是编译器自动生成的</p><p>0x8000 标识该模块是在源文件中隐式定义的</p><p>module_version_index 是一个指向常量池CONSTANT_Utf8_info常量的索引值，代表了该模块的版本号</p><p>后续的requires,exports,opens,uses,provides定义结构基本相同</p><h3 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>exports_index</td><td>1</td></tr><tr><td>u2</td><td>exports_flags</td><td>1</td></tr><tr><td>u2</td><td>exports_to_count</td><td>1</td></tr><tr><td>export</td><td>exports_to_index</td><td>exports_to_count</td></tr></tbody></table><p>exports属性的每一个元素都代表一个被模块所导出的包，</p><p>exports_index 是一个指向常量池CONSTANT_Package_info常量的索引值，代表了被该模块导出的包</p><p>exports_flags 是该导出包的状态指示器</p><p>0x1000  该导出包并未出现在源文件中，是编译器自动生成的</p><p>0x8000 该导出包是在源文件中隐式定义的</p><p>exports_to_count 是该导出包的限定计数器，为0则是开放的，不为0则 exports_to_index 是以计数器为长度的数组，每个数组元素都是一个指向常量池中CONSTANT_Module_info常量的索引值，代表着只有这个数据范围内的模块才被允许访问该导出包的内容</p><h3 id="ModulePackages"><a href="#ModulePackages" class="headerlink" title="ModulePackages"></a>ModulePackages</h3><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attirbute_length</td><td>1</td></tr><tr><td>u2</td><td>package_count</td><td>1</td></tr><tr><td>u2</td><td>package_index</td><td>package_count</td></tr></tbody></table><p>package_count是packageindexd数组的计数器，package_index中每个元素都是指向常量池CONSTATNT_Package_info常量的索引值。代表了模块中的一个包</p><h3 id="ModuleMainClass"><a href="#ModuleMainClass" class="headerlink" title="ModuleMainClass"></a>ModuleMainClass</h3><p>用于确定该模块的主类</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>main_class_index</td><td>1</td></tr></tbody></table><p>main_class_index 是一个指向常量池CONSTATN_Class_info常量的索引值，代表了该模块的主类</p><h3 id="运行时注解相关属性"><a href="#运行时注解相关属性" class="headerlink" title="运行时注解相关属性"></a>运行时注解相关属性</h3><p>用于描述源码中的注解信息</p><p>以RuntimeVisibleAnnotations 为例 ：</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u2</td><td>num_annotations</td><td>1</td></tr><tr><td>annotation</td><td>annotations</td><td>num_annotations</td></tr></tbody></table><p>num_annotations 是 annotations数组的计数器，annotations中每个元素都代表了一个运行时可见的注解，注解在Class文件中以annotation结构来存储。</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>type_index</td><td>1</td></tr><tr><td>u2</td><td>num_element_value_pairs</td><td>1</td></tr><tr><td>element_value_pair</td><td>element_value_pairs</td><td>num_element_value_pairs</td></tr></tbody></table><p>type_index 是一个指向常量池CONSTANT_Utf8_info常量的索引值，该常量应以字段描述符的形式表示一个注解。</p><p>num_element_value_pairs是element_value_pairs数组的计数器，element_value_pairs中每个元素都是一个键值对，代表该注解的参数和值。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM的垃圾回收处理</title>
    <link href="/2025/07/31/JVM%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%A4%84%E7%90%86/"/>
    <url>/2025/07/31/JVM%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="内存，对象与垃圾回收"><a href="#内存，对象与垃圾回收" class="headerlink" title="内存，对象与垃圾回收"></a>内存，对象与垃圾回收</h1><p>在解释器语言实现中，往往是通过虚拟机的方式，先向系统申请一块较大内存，再从其中逐渐开辟内存空间，创建所需要的结构体。这种方式带来了几个特性 ：</p><ol><li>通过托管内存-结构创建的方式，所有创建的对象对虚拟机来讲都是可以进行管理的。</li><li>托管内存本身也变为了可管理的，这样执行命令时虚拟机就可以对内存进行监控。</li><li>因为对象是可以被查询（通过类型定义结构）和可管理的（绝大部分实例资源都创建在堆结构下），所以就可以对这些对象的生命周期进行管理。</li></ol><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h2 id="垃圾回收需要考虑的阶段-："><a href="#垃圾回收需要考虑的阶段-：" class="headerlink" title="垃圾回收需要考虑的阶段 ："></a>垃圾回收需要考虑的阶段 ：</h2><p>哪些内存需要回收？</p><p>什么时候回收？</p><p>如何回收？</p><h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><p>引用计数法 通过在对象中添加一个引用计数器，每当有一个地方引用它时，计数器直接就加一，当引用失效时，计数器值就减一，任何时刻计数器为零的对象 就会发垃圾回收过程。</p><p>主要缺点</p><ol><li>绝大部分的对象都是在创建后很短时间内就被废弃了，但是对于每个对象都需要进行计数过程，增加了系统的CPU资源消耗</li><li>使用引用计数法的 垃圾回收会存在相互引用的问题，比如A中存在对B的引用，B中又存在对A进行了引用，则A当前的引用计数（A被B引用的计数+a对A的原本引用 &#x3D; 2，），B的引用计数（B被A引用的计数+b对B的原本引用&#x3D;2)），这时将a,b的引用分别指向别的对象，这时 A对象和B对象已经无法再从外部对其进行访问了，但是引用计数仍不为0，导致无法被销毁</li><li>无法处理复杂对象结构中被多方引用但整体不可达的情况（即仅靠引用计数难以识别全局不可达）</li></ol><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><p>可达性分析算法 通过一系列称为GC Roots的根对象作为起始节点集，从这些节点开始根据引用关系向下搜索，如果一个对象到GC Roots间没有任何引用链相连，则证明此对象是不可用的。</p><p>Java中的 “GC Roots” 对象</p><ol><li>在虚拟机栈中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数，局部变量，临时变量等。</li><li>在方法区中类静态属性引用的对象，如java类的引用类型静态变量</li><li>在方法区中常量引用的对象，如字符串常量池里的引用</li><li>在本地方法栈中引用的对象</li><li>Java虚拟机内部的引用</li><li>同步锁持有的对象</li></ol><p>相比引用计数法，可达性分析能更准确识别死对象，但需要停顿执行以保证一致性。</p><h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h2><p>对死亡对象的标记过程：</p><ol><li>对象 不可达 → 被标记</li><li>检查对象是否需要执行finalize()方法</li></ol><p>需要执行finalize方法的对象会被加入到F-Queue队列中等待执行finalize方法。</p><p>如果没有被重新引用，或者不需要执行finalize方法，则对象将要被回收了</p><h2 id="方法区的回收"><a href="#方法区的回收" class="headerlink" title="方法区的回收"></a>方法区的回收</h2><p>在方法区主要针对 不再使用的类型和废弃的常量进行回收。</p><p>对于常量： 当已经没有任何字符串对象引用常量池中的某个常量，这个常量就可以作为垃圾被回收</p><p>对于类型 ：</p><p>1.该类所有的实例已经被回收，Java堆中不存在任何该类及其派生子类的实例</p><p>2.加载该类的类加载器已经被回收。</p><p>3.该类的Class对象没有被任何地方引用，无法在任何地方通过反射访问该类的方法</p><p>满足以上条件，就可以尝试对  常量和类型进行回收。</p><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><p>为了更高效地释放托管内存，我们需要采用一套合适的垃圾收集算法。根据不同的识别策略，垃圾收集算法可以分为引用计数与追踪式两大类：</p><p>1.引用计数收集 - 即时收集 - 对象的计数为0时触发垃圾回收</p><p>2.追踪式收集 - 由解释器选择时机进行触发 - 对不再使用的对象进行标记 - 择机触发垃圾回收</p><p>Java一般使用的是以追踪式收集为基础的回收算法</p><h2 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h2><ol><li>弱分代假说 ： 绝大多数对象都是朝生夕灭的</li><li>强分代假说 ：熬过越多次垃圾收集过程的对象就越难以消亡</li></ol><p>基于以上两条理论，就可以使用分区的方式 对处于不同生命周期的对象进行管理，并筛选出其中的更可能一直存在的对象，减少对它的访问，来提升整体的GC效率。</p><p>当然，同样存在存活时间较长的对象对村存活时间较短对象的跨代引用，这时可以根据经验</p><ol><li>跨代引用假说：跨代引用对于同代引用来说仅占极少数</li></ol><p>因为如果长期存在的引用，必然会随着进入老年代的引用对象一起进入老年代。</p><p>所以可以不必因为少量跨代引用去频繁扫描老年代，只需要使用记忆集，将存在跨代引用的老年代对象标记出来只对该部分的对象进行扫描。</p><h2 id="GC-策略"><a href="#GC-策略" class="headerlink" title="GC 策略"></a>GC 策略</h2><p>部分收集（Partial GC）目标不是完整收集整个Java堆的垃圾收集。其中又分为</p><p>新生代收集（Minor GC&#x2F; Young GC） 指目标只是新生代的垃圾收集</p><p>老年代收集（Major GC&#x2F;Old GC）指目标只是老年代的垃圾收集 （CMS收集器）</p><p>混合收集 （Mixed GC）指目标是收集整个新生代以及部分老年代的垃圾收集（G1收集器）</p><p>整堆收集（Full GC）收集整个Java堆和方法区的垃圾收集</p><h2 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h2><p>首先标记出所有需要回收的对象，在标记完成之后，统一回收掉所有被标记的对象。</p><p>或者统一回收掉所以没有被标记的对象。标记过程就是判断对象是否属于垃圾的过程。</p><p>缺点 ：</p><p>1.执行效率不稳定，如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作。导致整体执行时间过长</p><p>2.内存碎片化问题。因为在创建对象时是指针碰撞或者使用空闲列表查询内存申请创建的对象，对象的生命周期并不在创建对象的内存排布策略之中，在多次创建&#x2F;销毁之后，就会导致在创建较大对象时没有连续内存而触发GC。</p><h2 id="标记复制算法"><a href="#标记复制算法" class="headerlink" title="标记复制算法"></a>标记复制算法</h2><p>标记复制算法通过半区复制的方式完成垃圾回收过程，当用于存储的半区被用完了，触发GC过程，将存活的对象复制到另外一半上。因为 大多数对象都是朝生夕灭的，所以在复制开销还是可以接收的。同时解决了内存碎片化问题。但是缺点就是有一半的内存是不可用的。</p><h3 id="增强"><a href="#增强" class="headerlink" title="增强"></a>增强</h3><p>将新生代 分为3个区域。Eden &#x2F;  Survivor0 &#x2F; Survivor1 。 内存使用比例为8：1：1， 通过观察在绝大多数情况下98%的对象都会在第一轮收集中被回收。这样当程序创建对象时，先在Eden&#x2F; Survivor0中创建对象，当发生GC时，将Eden &#x2F; Survivo0 中的存活对象写入到Servivor1中，清理Eden&#x2F;Suervivo0的空间。而当出现了存活对象超过Survivor大小时，就尝试从其他区域获取内存进行分配担保。</p><h2 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h2><p>对于新生代可以通过在内存中分区来完成对象的垃圾收集和整理过程。但是对于老年代这种存活对象较多的区域，移动所有对象是一种成本极高的操作。但是如果不移动就会因为碎片化问题需要考虑更加复杂的内存分配策略。</p><p>关注吞吐量的 会使用 标记整理算法 → 能够更好的腾出空间，减少因为没有较大内存区域而频发触发GC</p><p>关注时延的 则会使用 标记清除算法 → GC停顿时间更短，能够更快地进行内存的申请</p><p>也可以 高频率使用标记清除算法  ，当碎片过多时使用标记整理算法</p><h2 id="HotSpot-算法实现细节"><a href="#HotSpot-算法实现细节" class="headerlink" title="HotSpot 算法实现细节"></a>HotSpot 算法实现细节</h2><ol><li>为了保证对对象引用的准确性，所以在垃圾收集期间，必然会暂停用户线程。</li><li>HotSpot通过一个Oopmap的结构在类加载期间完成对某个对象中的引用对象的偏移量和类型进行收集，在GC过程中直接从这个结构中使用偏移和类型最终获取到对象进行标记，而不用完全从所有的GC Roots开始查找。这里是针对栈中所使用的引用对象信息进行的优化。</li><li>安全点与安全区域<br>对 每次OopMap的长期存储 不符合系统整体的内存使用要求，所以只有在某些节点上触发了GC时会生成当前栈调用的OopMap 结构，所以也要求线程都要执行到安全点才能暂停。<br>通过主动式中断完成在安全点暂停，当需要执行GC时，将所有线程中的标志位设置为true，一旦为true 后，线程会主动在最近的安全点将自己挂起，<br>当 线程因为指定或者获取不到时间片而无法到达安全点时，则在这些地方将自己标识为进入了安全区域，当线程要离开时，需要检查虚拟机算法已经完成了 需要暂停用户线程的阶段，完成了则可以继续执行，没有完成，则必须一直等待可以收到离开安全区域的信号为止。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>垃圾回收并不仅仅是回收内存，更重要的是在保障程序正确性的同时，尽可能提升执行效率。不同语言、不同场景下，所采用的回收算法也存在显著差异。理解其核心机制有助于我们写出更高效、稳定的代码。各种垃圾收集器的具体特性暂不在此处进行讨论。</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java</tag>
      
      <tag>内存模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM对象内存布局</title>
    <link href="/2025/07/31/JVM%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/"/>
    <url>/2025/07/31/JVM%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.111666.best/image/ebS5kXB0uP27GDW5eFhj4f.png" alt="JAVA虚拟机的内存模型"></p><h2 id="私有部分"><a href="#私有部分" class="headerlink" title="私有部分"></a>私有部分</h2><p><strong>程序计数器</strong> ： 通过改变这个计数器的值来选取下一条需要执行的字节码指令，存放在线程私有内存中。</p><p><strong>Java虚拟机栈</strong> ：它的生命周期与线程相同，虚拟机栈描述的是Java方法执行的线程内存模型，每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧用于存储局部变量表，操作数栈，动态连接，方法出口等信息。每一个方法被调用直至执行完毕的过程，对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p><img src="https://i.111666.best/image/z3epcSwH89m1mRn8LnQUF0.png" alt="栈帧结构信息"></p><p><strong>局部变量表</strong> ：  存放了编译期可知的各种Java虚拟机基本数据结构，对象引用和返回地址类型。在存储空间中以局部变量槽来表示。当进入方法时，局部变量所需的内存空间大小是完全确定的。</p><p><strong>本地方法栈</strong>  ： ****为虚拟机用到的本地方法服务</p><h2 id="公有部分"><a href="#公有部分" class="headerlink" title="公有部分"></a>公有部分</h2><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆是虚拟机所管理的内存中最大的一块，Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。堆的唯一目的是用于存放对象实例，理论上所有的对象实例和数组都应当在堆上分配。</p><p>堆是垃圾收集器管理的内存区域。从回收内存的角度看，由于现代垃圾收集器大部分是基于分代收集理论设计的，所有Java堆中经常会出现 “新生代”，“老年代”。本质上是由于垃圾回收策略不同而创建出的不同内存管理区域。</p><p>堆中还存在多个线程私有的分批额缓冲区（TLAB）</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区也是各个线程共享的内存区域，它用于存储被虚拟机加载的类型，常量，静态变量，以及代码缓存数据。</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池是方法区的一部分，用于存放编译期生成的各种字面量与符号引用。</p><h2 id="直接内存与本地内存"><a href="#直接内存与本地内存" class="headerlink" title="直接内存与本地内存"></a>直接内存与本地内存</h2><table><thead><tr><th>名称</th><th>是否堆外</th><th>是否 GC 管理</th><th>分配者</th><th>主要用途</th></tr></thead><tbody><tr><td>直接内存</td><td>是</td><td>部分（引用可见）</td><td>Java（ByteBuffer）</td><td>高性能 I&#x2F;O、Netty</td></tr><tr><td>本地内存</td><td>是</td><td>否</td><td>JVM &#x2F; JNI</td><td>类元空间、线程栈、JNI</td></tr></tbody></table><p>直接内存是 JVM 提供给 Java 程序使用的“受控的”本地内存；而本地内存是 JVM 和本地代码自己使用的“非受控”内存。</p><h2 id="Java对象的创建过程"><a href="#Java对象的创建过程" class="headerlink" title="Java对象的创建过程"></a>Java对象的创建过程</h2><h3 id="由new-启动-对象的过程"><a href="#由new-启动-对象的过程" class="headerlink" title="由new 启动 对象的过程"></a>由new 启动 对象的过程</h3><ol><li>定位所需创建类的符号引用</li><li>判断类是否已完成加载与初始化，若未初始化则先触发类初始化流程</li><li>创建对象，为新对象分配内存，在类加载过程中可以确定新对象所使用的内存大小</li><li>内存分配过程<ol><li>通过指针偏移获取对应对象大小的内存空间进行创建 （如果是规整的内存布局）<ol><li>使用标记-整理算法的收集器 选择指针碰撞</li></ol></li><li>通过列表维护一个列表记录管理内存中的布局，查询可用大小的内存块进行分配<ol><li>使用标记-清除算法的收集器 选择空闲列表</li></ol></li></ol></li><li>多线程情况下的内存分配<ol><li>分配内存空间时进行同步处理—— 实际上虚拟机采用CAS + 失败重试保证更新操作的原子性</li><li>将内存分配动作按照线程划分到不同的空间中，即线程在java堆中预先分配的一小块内存中，当这一块内存使用完了，再使用同步锁定进行内存分配 使用tlab 可以使用-XX：+&#x2F;-UseTLAB参数来设定</li></ol></li><li>初始化过程<ol><li>在内存分配完毕后进行 → 在使用了同步锁定时</li><li>在分配TLAB时直接进行了初始化</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (!constans-&gt;<span class="hljs-built_in">tag_at</span>(index).<span class="hljs-built_in">is_unresolved_klass</span>())&#123;<br>oop entry = (klassOop)* constans-&gt;<span class="hljs-built_in">obj_at_addr</span>(index);<br><span class="hljs-built_in">assert</span>(entry-&gt;<span class="hljs-built_in">is_klass</span>(), <span class="hljs-string">&quot;should be resolved klass&quot;</span>);<br>klassOop k_entry = (klassOop) entry ;<br><span class="hljs-built_in">assert</span>(k_entry-&gt;<span class="hljs-built_in">klass_part</span>()-&gt;<span class="hljs-built_in">oop_is_instance</span>(), <span class="hljs-string">&quot;should be instance Klass&quot;</span>);<br>instanceKlass* ik = (instanceKlass*) k_entry-&gt;<span class="hljs-built_in">klass_part</span>();<br><span class="hljs-keyword">if</span>( ik-&gt;<span class="hljs-built_in">is_initialized</span>() &amp;&amp; ik -&gt; <span class="hljs-built_in">can_be_fast_path_allocated</span>())&#123;<br><span class="hljs-type">size_t</span> obj_size = ik-&gt;<span class="hljs-built_in">size_helper</span>();<br>oop result = <span class="hljs-literal">NULL</span> ;<br><span class="hljs-type">bool</span> need_zero = !ZeroTLAB;<br><span class="hljs-keyword">if</span> (UseTLAB)&#123;<br>result = (oop)THREAD -&gt;<span class="hljs-built_in">tlab</span>().<span class="hljs-built_in">allocate</span>(obj_size);<br>&#125;<br><span class="hljs-keyword">if</span>(result == <span class="hljs-literal">NULL</span>)&#123;<br>need_zero = <span class="hljs-literal">true</span> ;<br>retry <br>HeapWord* compare_to =  *Universe::<span class="hljs-built_in">heap</span>()-&gt;<span class="hljs-built_in">top_addr</span>();<br>HeapWord* new_top = compare_to + obj_size ;<br><span class="hljs-keyword">if</span>(new_top &lt;= *Universe::<span class="hljs-built_in">heap</span>()-&gt;<span class="hljs-built_in">end_addr</span>())&#123;<br><span class="hljs-keyword">if</span>(Atomic::<span class="hljs-built_in">cmpxchg_ptr</span>(new_top, Universe::<span class="hljs-built_in">heap</span>()-&gt;<span class="hljs-built_in">top_addr</span>(),compare_to)!= compare_to)&#123;<br><span class="hljs-keyword">goto</span> retry ;<br>&#125;<br>result = (oop) compare_to <br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(resulte != <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-keyword">if</span>(need_zero)&#123;<br>HeapWord * to_zero = (HeapWord*)result + <span class="hljs-built_in">sizeof</span>(oopDesc)/ oopSize;<br>obj_size -= <span class="hljs-built_in">sizeof</span>(oopDesc) / oopSize ;<br><span class="hljs-keyword">if</span>(obj_size &gt; <span class="hljs-number">0</span> )&#123;<br><span class="hljs-built_in">memset</span>(to_zero , <span class="hljs-number">0</span> , obj_size * HeapWordSize);<br>&#125;<br> &#125;<br> <span class="hljs-keyword">if</span>(UseBiasedLocking)&#123;<br> result-&gt;<span class="hljs-built_in">set_mark</span>(ik-&gt;<span class="hljs-built_in">prototype_header</span>());<br> &#125; <span class="hljs-keyword">else</span> &#123;<br> result-&gt;<span class="hljs-built_in">set_mark</span>(markOopDesc::<span class="hljs-built_in">prototype</span>());<br> &#125;<br> result-&gt;<span class="hljs-built_in">set_klass_gap</span>(<span class="hljs-number">0</span>);<br> result-&gt;<span class="hljs-built_in">set_klass</span>(k_entry);<br> <span class="hljs-built_in">SET_STACK_OBJECT</span>(result,<span class="hljs-number">0</span>);<br> <span class="hljs-built_in">UPDATE_PC_AND_TOS_AND_CONTINUTE</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>对象结构</li></ol><p><img src="https://i.111666.best/image/D5rMx2kKI4YRJr86FwZFZ4.png" alt="对象内存结构"></p><p>主要由三部分组成 ： 对象头 ， 实例数据和对齐填充</p><p>对象头结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[<span class="hljs-built_in">markword</span> (<span class="hljs-number">32</span>/<span class="hljs-number">64</span>)][类型指针(<span class="hljs-number">32</span>/<span class="hljs-number">64</span>)][数组长度]<br><br>[markword]<br>[<span class="hljs-built_in">hashcode</span>(<span class="hljs-number">25</span><span class="hljs-number">-31</span>) 分代年龄(<span class="hljs-number">15</span>) 标志位(<span class="hljs-number">2</span>) 固定标志位(<span class="hljs-number">0</span>)]<br></code></pre></td></tr></table></figure><p><strong>markword</strong></p><p>mark word 是位于对象最顶部的一块内存区域，它是一个复用字段，即根据标志位的不同决定了当前它所被使用的用途。</p><table><thead><tr><th>存储内容</th><th>标志位</th><th>状态</th></tr></thead><tbody><tr><td>对象哈希码，对象分代年龄</td><td>01</td><td>未锁定</td></tr><tr><td>指向锁记录的指针</td><td>00</td><td>轻量级锁定</td></tr><tr><td>指向重量级锁的指针</td><td>10</td><td>膨胀</td></tr><tr><td>一般被设置为非法模式或者转发指针</td><td>11</td><td>GC标记</td></tr><tr><td>偏向线程ID,偏向事件戳，对象分代年龄</td><td>01</td><td>可偏向</td></tr></tbody></table><p>实例数据</p><p>实例数据是受虚拟机分配策略参数和字段在Java源码中定义顺序的应用</p><p>Hotspot 虚拟机默认的分配顺序为longs&#x2F;doubles , ints , shorts&#x2F;chars , bytesbooleans,oops(Ordinary Object Pointers )</p><p>相同宽度的字段总是被分配到一起存放，在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。如果设置+XX：CompactFields参数，则子类中较窄的变量也允许插入父类变量的空隙中节省空间</p><p>对齐填充</p><p>HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，如果没有对齐的话，就需要通过对齐填充补全</p><ol><li>访问对象</li></ol><p>java中使用引用去访问具体的对象</p><ol><li>使用句柄访问，在堆中划分一块内存作为句柄池，句柄池中包含了实例数据信息和类型数据信息，这样在实例数据中就不需要存储地址类型指针</li><li>指针访问，需要在对象模型中放入类型指针以查询类型信息</li><li>句柄的优势在于引用是间接查询实例对象数据的，这意味着在GC阶段移动对象可以间接更改句柄中的实例数据地址，而不需要修改引用本身</li><li>指针的优势在于访问速度更快，节省了一次指针定位的时间</li></ol><p><img src="https://i.111666.best/image/CydLYhuDkBYGgRumlroTv8.png" alt="句柄访问和指针访问对比"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JVM 对象的创建与内存布局，是理解 Java 程序执行原理、优化内存使用、调试性能问题的基础。在本文中，我们从运行时数据区的划分入手，梳理了线程私有与共享内存的职责与作用，随后深入剖析了对象创建的完整过程，包括类加载检查、内存分配策略（如指针碰撞与空闲列表）、线程本地缓冲（TLAB）机制与初始化流程。</p><p>在对象布局方面，我们重点讲解了对象头（Mark Word 和类型指针）的结构及其状态复用机制，分析了实例数据的内存对齐与压缩布局策略。同时，结合句柄与指针访问两种模型，比较了它们在对象定位与 GC 移动过程中的适用性和性能差异。</p><p>通过对这些机制的理解，开发者可以更准确地把握 JVM 如何管理内存、调度对象生命周期、以及背后隐藏的性能优化点。这不仅有助于编写更高效的 Java 程序，也为深入掌握 GC 策略、对象逃逸分析、内存模型优化等更高级主题打下了坚实基础。</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>Java</tag>
      
      <tag>内存模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数调用过程</title>
    <link href="/2025/07/29/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/"/>
    <url>/2025/07/29/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>; 函数调用的完整汇编执行过程示例<br>; 演示: int result &#x3D; add_numbers(10, 20);<br>; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>.text<br>.global _start</p><p>_start:<br>; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 程序开始执行，栈初始状态 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>; ESP &#x3D; 0x7FFF0000 (假设的栈顶地址)<br>; EBP &#x3D; 0x7FFF0000 (帧指针初始化)</p><p>main:<br>; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 建立main函数的栈帧 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>push %ebp               ; 保存调用者的帧指针<br>; ESP &#x3D; 0x7FFFEFFC, [ESP] &#x3D; old_EBP<br>mov %esp, %ebp          ; 建立当前函数的帧指针<br>; EBP &#x3D; 0x7FFFEFFC<br>sub $16, %esp           ; 为局部变量分配空间(16字节)<br>; ESP &#x3D; 0x7FFFEFEC</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">; ===== 准备调用add_numbers(10, 20) =====</span><br><span class="hljs-comment">; 按C调用约定，参数从右到左压栈</span><br><br><span class="hljs-comment">; 压入第二个参数 (20)</span><br>push $<span class="hljs-number">20</span>                <span class="hljs-comment">; ESP -= 4, [ESP] = 20</span><br>                        <span class="hljs-comment">; ESP = 0x7FFFEFE8, 栈顶现在是20</span><br><br><span class="hljs-comment">; 压入第一个参数 (10)</span><br>push $<span class="hljs-number">10</span>                <span class="hljs-comment">; ESP -= 4, [ESP] = 10</span><br>                        <span class="hljs-comment">; ESP = 0x7FFFEFE4, 栈顶现在是10</span><br><br><span class="hljs-comment">; ===== 执行函数调用 =====</span><br><span class="hljs-keyword">call</span> add_numbers        <span class="hljs-comment">; call指令执行两个动作:</span><br>                        <span class="hljs-comment">; 1) push 返回地址: ESP -= 4, [ESP] = 返回地址</span><br>                        <span class="hljs-comment">;    ESP = 0x7FFFEFE0</span><br>                        <span class="hljs-comment">; 2) jmp add_numbers: EIP = add_numbers地址</span><br><br><span class="hljs-comment">; ===== 此时控制权转移到add_numbers函数 =====</span><br><br></code></pre></td></tr></table></figure><p>add_numbers:<br>; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 函数序言 - 建立新的栈帧 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>push %ebp               ; 保存调用者(main)的帧指针<br>; ESP &#x3D; 0x7FFFEFD C, [ESP] &#x3D; main的EBP<br>mov %esp, %ebp          ; 建立add_numbers的帧指针<br>; EBP &#x3D; 0x7FFFEFDC<br>sub $8, %esp            ; 为局部变量分配空间<br>; ESP &#x3D; 0x7FFFEFD4</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">; ===== 当前栈布局 (从高地址到低地址) =====</span><br><span class="hljs-comment">; [EBP+12] = 20        (第二个参数)</span><br><span class="hljs-comment">; [EBP+8]  = 10        (第一个参数)</span><br><span class="hljs-comment">; [EBP+4]  = 返回地址   (call指令保存的)</span><br><span class="hljs-comment">; [EBP]    = main的EBP  (push %ebp保存的)</span><br><span class="hljs-comment">; [EBP-4]  = 局部变量1  (可用空间)</span><br><span class="hljs-comment">; [EBP-8]  = 局部变量2  (可用空间) ← ESP指向这里</span><br><br><span class="hljs-comment">; ===== 函数体 - 执行实际计算 =====</span><br>mov <span class="hljs-number">8</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span>       <span class="hljs-comment">; 将第一个参数(10)加载到EAX</span><br>                        <span class="hljs-comment">; EAX = 10</span><br><span class="hljs-keyword">add</span> <span class="hljs-number">12</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span>      <span class="hljs-comment">; 将第二个参数(20)加到EAX</span><br>                        <span class="hljs-comment">; EAX = 10 + 20 = 30</span><br>mov <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-4</span>(<span class="hljs-variable">%ebp</span>)      <span class="hljs-comment">; 将结果存储到局部变量</span><br>                        <span class="hljs-comment">; [EBP-4] = 30</span><br><br><span class="hljs-comment">; ===== 准备返回值 =====</span><br>mov <span class="hljs-number">-4</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span>      <span class="hljs-comment">; 将结果放入EAX寄存器(返回值约定)</span><br>                        <span class="hljs-comment">; EAX = 30</span><br><br><span class="hljs-comment">; ===== 函数尾声 - 清理栈帧并返回 =====</span><br>mov <span class="hljs-variable">%ebp</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%esp</span>          <span class="hljs-comment">; 恢复栈指针，释放局部变量空间</span><br>                        <span class="hljs-comment">; ESP = 0x7FFFEFDC</span><br>pop <span class="hljs-variable">%ebp</span>                <span class="hljs-comment">; 恢复调用者的帧指针</span><br>                        <span class="hljs-comment">; EBP = main的EBP, ESP = 0x7FFFEFE0</span><br><span class="hljs-keyword">ret</span>                     <span class="hljs-comment">; 返回指令执行两个动作:</span><br>                        <span class="hljs-comment">; 1) pop 返回地址到EIP: EIP = [ESP], ESP += 4</span><br>                        <span class="hljs-comment">; 2) 跳转回调用点: ESP = 0x7FFFEFE4</span><br><br><span class="hljs-comment">; ===== 控制权返回到main函数 =====</span><br><br></code></pre></td></tr></table></figure><p>back_to_main:<br>; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 清理参数 (C调用约定: 调用者负责清理) &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>add $8, %esp            ; 清理两个参数 (2 × 4字节)<br>; ESP &#x3D; 0x7FFFEFEC (回到调用前状态)</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">; ===== 保存返回值 =====</span><br>mov <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-4</span>(<span class="hljs-variable">%ebp</span>)      <span class="hljs-comment">; 将返回值(30)保存到局部变量result</span><br>                        <span class="hljs-comment">; [EBP-4] = 30</span><br><br><span class="hljs-comment">; ===== main函数结束 =====</span><br>mov <span class="hljs-variable">%ebp</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%esp</span>          <span class="hljs-comment">; 恢复栈指针</span><br>pop <span class="hljs-variable">%ebp</span>                <span class="hljs-comment">; 恢复帧指针</span><br><br><span class="hljs-comment">; ===== 程序退出 =====</span><br>mov $<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span>            <span class="hljs-comment">; 系统调用号: exit</span><br>mov $<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%ebx</span>            <span class="hljs-comment">; 退出状态码</span><br>int $<span class="hljs-number">0x80</span>               <span class="hljs-comment">; 调用内核</span><br><br></code></pre></td></tr></table></figure><p>; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>; 栈的变化过程总结:<br>;<br>; 1. 初始状态:     ESP &#x3D; 0x7FFF0000<br>; 2. main序言后:   ESP &#x3D; 0x7FFFEFEC</p><p>; 3. push 20后:    ESP &#x3D; 0x7FFFEFE8  (参数2)<br>; 4. push 10后:    ESP &#x3D; 0x7FFFEFE4  (参数1)<br>; 5. call后:       ESP &#x3D; 0x7FFFEFE0  (返回地址)<br>; 6. func序言后:   ESP &#x3D; 0x7FFFEFD4  (新栈帧)<br>; 7. ret后:        ESP &#x3D; 0x7FFFEFE4  (清理栈帧)<br>; 8. add $8后:     ESP &#x3D; 0x7FFFEFEC  (清理参数)<br>;<br>; 关键点:<br>; - push指令: 修改ESP并存储数据<br>; - call指令: 保存返回地址并跳转<br>; - 函数序言: 建立新栈帧<br>; - 函数尾声: 清理栈帧<br>; - ret指令: 恢复返回地址并跳转<br>; - 参数清理: 调用者负责(C约定)<br>; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>速查信息</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解释器模式</title>
    <link href="/2025/07/28/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/28/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>解释器模式提供了评估语言的语法或表达式的方式</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li><strong>抽象表达式（Expression）</strong> ：定义解释操作的接口，是终结符与非终结符表达式的父类。</li><li><strong>终结符表达式（TerminalExpression）</strong> ：实现表达式接口，用于表示语法中的基本元素，如数字、变量等。</li><li><strong>非终结符表达式（NonTerminalExpression）</strong> ：组合多个表达式，对应文法中的组合规则，如加减法、布尔表达式等。</li><li><strong>（可选）上下文类（Context）</strong> ：用于存储变量、函数等符号与值的映射关系。本例中简化未使用。</li><li><strong>客户端（Client）</strong> ：构建表达式并触发解释操作。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>扩展性强</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>引起类的膨胀，需要创建大量的类</li><li>效率问题，主要采用递归的调用方法</li></ol><h2 id="实现解释器模式"><a href="#实现解释器模式" class="headerlink" title="实现解释器模式"></a>实现解释器模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义操作接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expression</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 定义数值处理实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Expression</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ValueExpression</span><span class="hljs-params">()</span>&#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ValueExpression</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br><span class="hljs-built_in">this</span>.value = value ; <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> value ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br><span class="hljs-built_in">this</span>.value = value ;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value ;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">// 定义符号处理实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SymbolExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Expression</span>&#123;<br><span class="hljs-keyword">protected</span> Expression left ;<br><span class="hljs-keyword">protected</span> Expression right ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SymbolExpression</span><span class="hljs-params">(Expression left , Expression right)</span>&#123;<br><span class="hljs-built_in">this</span>.left = left ;<br><span class="hljs-built_in">this</span>.right = right ;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义加法表达式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SymbolExpression</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AddExpression</span><span class="hljs-params">(Expression left , Expression right)</span>&#123;<br><span class="hljs-built_in">super</span>(left , right);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> left.interpret() + right.interpret();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义减法表达式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SymbolExpression</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SubExpression</span><span class="hljs-params">(Expression left , Expression right)</span>&#123;<br><span class="hljs-built_in">super</span>(left,right);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> left.interpret()-right.interpret();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义一个Calculator 执行运算步骤</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(String statement)</span>&#123;<br>String[] strs = statement.split(<span class="hljs-string">&quot; &quot;</span>);<br><br><span class="hljs-type">Expression</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueExpression</span>(Integer.valueOf(strs[<span class="hljs-number">0</span>]));<br><span class="hljs-type">Expression</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueExpression</span>(Integer.valueOf(strs[<span class="hljs-number">2</span>]));<br><br><span class="hljs-type">String</span> <span class="hljs-variable">symbol</span> <span class="hljs-operator">=</span> strs[<span class="hljs-number">1</span>];<br><span class="hljs-type">Expression</span> <span class="hljs-variable">symbolExpression</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;+&quot;</span>.equals(symbol))&#123;<br>symbolExpression = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddExpression</span>(left , right);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;-&quot;</span>.equals(symbol))&#123;<br>symbolExpression = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubExpression</span>(left , right);<br>&#125;<br><span class="hljs-keyword">return</span> symbolExpression.interpret();<br>&#125;<br>&#125;<br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1+2&quot;</span>;<br><span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> calculator.calculate(statement);<br>System.out.println(statement+<span class="hljs-string">&quot;=&quot;</span> + rs );<br><br>statement = <span class="hljs-string">&quot;5-3&quot;</span>;<br>rs = calculator.calculate(statement);<br>System.out.println(statement+<span class="hljs-string">&quot;=&quot;</span> + rs );<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解释器模式（Interpreter Pattern）用于构建一个解释器，对给定语言中的语句或表达式进行求值。它定义了一个语言的文法规则，并用类来表示文法中的各个规则，最终通过组合这些规则来解析表达式。解释器模式适用于语言规则较简单、语法稳定的场景，比如计算器、脚本语言、正则表达式等。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>访问者模式</title>
    <link href="/2025/07/28/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/28/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>访问者模式表示一个作用于其对象结构中的各元素的操作，它可以在不改变各元素类的前提下，定义作用于这些元素的新操作。</p><p>访问者模式是一种将数据操作和数据结构分离的设计模式</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>抽象访问接口：定义了对每一个元素访问的行为，它的参数就是可以访问的元素，它的方法个数理论上讲与元素个数是一样的。访问者模式要求元素类的个数不能改变</li><li>具体访问者角色：它需要给出对每一个元素类访问时产生的具体行为</li><li>抽象节点角色：它定义了一个接受访问者的方法，其意义是指每一个元素都可以被访问者访问</li><li>具体节点角色：它提供接受访问的方法的具体实现，而这个具体实现，通常情况下使用访问者提供的访问该元素类的方法</li><li>结构对象角色：一个包含元素集合，并负责遍历元素并将访问请求传递出去的容器</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>访问者模式使得易于增加新的操作，访问者使得增加依赖于复杂对象结构的构件的操作变得容易，仅需增加一个新的访问者，即可在一个对象结构上定义一个新的操作。相反，如果每个功能都分散在多个类之上，定义新的操作时，必须修改每一类</li><li>访问者集中相关的操作而分离无关的操作</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>增加新的具体访问者角色很困难</li><li>访问者可能需要暴露元素的内部状态以完成访问逻辑，违反了信息隐藏原则。</li></ol><h2 id="实现访问者模式"><a href="#实现访问者模式" class="headerlink" title="实现访问者模式"></a>实现访问者模式</h2><p>访问者模式的核心思想是 状态转移与状态信息分离 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Visitor</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Engineer engineer)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Manager manager)</span>;<br>&#125;<br><br><span class="hljs-comment">// 定义员工抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br><span class="hljs-keyword">public</span> String name ;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> kpi ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name ;<br><span class="hljs-built_in">this</span>.kpi = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">10</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>;<br>&#125;<br><br><span class="hljs-comment">// 实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engineer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Engineer</span> <span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">super</span>(name);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>&#123;<br>visitor.visit(<span class="hljs-built_in">this</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Manager</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">super</span>(name);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>&#123;<br>visitor.visit(<span class="hljs-built_in">this</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessReport</span> &#123;<br><span class="hljs-keyword">private</span> List&lt;Employee&gt;employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessReport</span><span class="hljs-params">()</span>&#123;<br>employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-string">&quot;经理-A&quot;</span>));<br>employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-string">&quot;经理-B&quot;</span>));<br>employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Engineer</span>(<span class="hljs-string">&quot;工程师-A&quot;</span>));<br>employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Engineer</span>(<span class="hljs-string">&quot;工程师-B&quot;</span>));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showReport</span><span class="hljs-params">(Visitor visitor)</span>&#123;<br><span class="hljs-keyword">for</span>(Employee employee : employees)&#123;<br>employee.accept(visitor);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Visitor的实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CEOVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span>&#123;<br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Engineer engineer)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;工程师:&quot;</span> + engineer.name + <span class="hljs-string">&quot;KPI:&quot;</span> + engineer.kpi);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Manager manager)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;经理：&quot;</span> + manager.name +<span class="hljs-string">&quot;KPI&quot;</span> + manager.kpi);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">BusinessReport</span> <span class="hljs-variable">report</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessReport</span>();<br>System.out.println(<span class="hljs-string">&quot;看报表&quot;</span>);<br>report.showReport(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CEOVisitor</span>());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>访问者模式是一种 <strong>将操作与数据结构分离</strong> 的行为型设计模式，适用于对象结构稳定但操作频繁变化的场景。通过为每一个元素提供一个 <code>accept(Visitor)</code> 接口，访问者可以实现对不同元素的多态分发（双分派），从而在不修改元素类的前提下扩展新功能。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>责任链模式</title>
    <link href="/2025/07/28/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/28/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>责任链模式将处理请求的对象连城一条链，沿着这条链传递该请求，直到有一个对象处理请求为止，这使得多个对象有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>抽象处理者 ： 定义一个请求处理的接口</li><li>具体处理者 ：实现处理请求的接口，可以选择自己处理或者传递给下一个接收者。包含对下一个接收处理者的引用。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><strong>解耦请求发送者与接收者</strong> ，便于扩展与复用</li><li><strong>链结构灵活</strong> ，可以动态添加、移除处理节点</li><li><strong>增强封装性</strong> ，每个处理器专注于自身逻辑</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><strong>请求可能得不到处理</strong> （若链尾未处理）</li><li><strong>调试困难</strong> ，请求流转链路不清晰时可能增加定位成本</li><li><strong>性能问题</strong> ，链过长或处理器逻辑复杂时可能影响效率</li></ol><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>数据流转处理，如敏感词过滤、输入校验、日志处理等</p><p>权限校验链、责任审批流程等需要动态组合处理链的场景</p><h2 id="实现责任链模式"><a href="#实现责任链模式" class="headerlink" title="实现责任链模式"></a>实现责任链模式</h2><h3 id="基础实现-："><a href="#基础实现-：" class="headerlink" title="基础实现 ："></a>基础实现 ：</h3><ol><li>定义拦截器接口 （filter）</li><li>定义拦截器实现类 （xxxfilter）</li><li>创建拦截器容器，装载所有拦截器对象。</li><li>遍历容器中的对象，执行拦截方法。</li><li>每个拦截方法都对请求体进行处理，处理后将修改写入请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Filter</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Request request)</span>;<br>&#125;<br><br><span class="hljs-comment">// </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HtmlFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Request request)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> request.getMsg();<br>msg = msg.replaceAll(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>);<br>msg = msg.replaceAll(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br>request.setMsg(msg);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Request request)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> request.getMsg();<br>msg = msg.replaceAll(<span class="hljs-string">&quot;hit&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>request.setMsg(msg);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MsgProcessor</span>&#123;<br>List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFilter</span><span class="hljs-params">(Filter filter)</span>&#123;<br>filters.add(filter);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(Request request)</span>&#123;<br><span class="hljs-keyword">for</span>(Filter filter:filters)&#123;<br>filter.doFilter(request);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-type">MsgProcessor</span> <span class="hljs-variable">msgProcessor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MsgProcessor</span>();<br><br>msgProcessor.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlFilter</span>());<br>msgProcessor.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SensitiveFilter</span>());<br>msgProcessor.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FaceFilter</span>());<br>msgProcessor.process(request);<br><span class="hljs-type">String</span> <span class="hljs-variable">newMsg</span> <span class="hljs-operator">=</span> request.getMsg();<br>System.out.println(newMsg);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="增强"><a href="#增强" class="headerlink" title="增强"></a>增强</h3><p>当一个业务流程中存在多个拦截器时，可以通过定义一个chain对象来对一组拦截器进行统一管理。</p><p>这时需要进行的定义 ：</p><ol><li>定义一个FilterChain对象 ，其中包含一个容器对象用于存储拦截器对象，一个添加方法</li><li>为保持一致性，实现filter接口，允许将FilterChain对象添加到容器中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用于管理filter </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterChain</span>&#123;<br>List&lt;Filter&gt;filters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFilter</span><span class="hljs-params">(Filter filter)</span>&#123;<br>filters.add(filter);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Request request)</span>&#123;<br><span class="hljs-keyword">for</span>(Filter filter:filters)&#123;<br>filter.doFilter(request);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//将FilterChain交给MsgProcessor处理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MsgProcessor</span>&#123;<br><span class="hljs-keyword">private</span> FilterChain filterChain;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFilterChain</span><span class="hljs-params">(FilterChain filterChain)</span>&#123;<br><span class="hljs-built_in">this</span>.filterChain = filterChain ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(Request request)</span>&#123;<br>filterChain.doFilter(request);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(<span class="hljs-string">&quot;msg&quot;</span>);<br><span class="hljs-type">MsgProcessor</span> <span class="hljs-variable">msgProcessor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MsgProcessor</span>();<br><br><span class="hljs-type">FilterChain</span> <span class="hljs-variable">filterChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterChain</span>();<br>filterChain.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlFilter</span>());<br>filterChain.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SensitiveFilter</span>());<br><br><span class="hljs-type">FilterChain</span> <span class="hljs-variable">filterChain2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterChain</span>();<br>filterChain2.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FaceFilter</span>());<br><br>filterChain.addFilter(filterChain2);<br>msgProcessor.setFilterChain(filterChain);<br>msgProcessor.process(request);<br><span class="hljs-type">String</span> <span class="hljs-variable">newMsg</span> <span class="hljs-operator">=</span> request.getMsg();<br>System.out.println(newMsg);<br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterChain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;<br>List&lt;Filter&gt;filters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Request request)</span>&#123;<br><span class="hljs-keyword">for</span>(Filter filter:filters)&#123;<br>filter.doFilter(request);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为 filterchain 已经具备了 filter的管理和调用能力，所以去除MsgProcessor，改为由filterchain 管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(<span class="hljs-string">&quot;msg&quot;</span>);<br><span class="hljs-type">FilterChain</span> <span class="hljs-variable">filterChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterChain</span>();<br>filterChain.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlFilter</span>());<br>filterChain.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SensitiveFilter</span>());<br><br><span class="hljs-type">FilterChain</span> <span class="hljs-variable">filterChain2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterChain</span>();<br>filterChain.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FaceFilter</span>());<br><br>filterChain.doFilter(request);<br><span class="hljs-type">String</span> <span class="hljs-variable">newMsg</span> <span class="hljs-operator">=</span> request.getMsg();<br>System.out.println(newMsg);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双向拦截"><a href="#双向拦截" class="headerlink" title="双向拦截"></a>双向拦截</h3><p>在上述功能实现后，可以通过添加一个Response来对最终相应的数据进行处理。</p><ol><li>定义Response 类</li><li>将response 参数添加到Filter的doFilter中</li><li>向相关的方法中添加response对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Response</span> &#123;<br><span class="hljs-keyword">private</span> String msg ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Response</span><span class="hljs-params">(String msg)</span>&#123;<br><span class="hljs-built_in">this</span>.msg = msg ;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> msg ;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span>&#123;<br><span class="hljs-built_in">this</span>.msg = msg ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//添加Response到addFilter中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Filter</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Request request , Response response)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Request request , Response response)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> request.getMsg();<br>msg = msg.replaceAll(<span class="hljs-string">&quot;hit&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>request.setMsg(msg);<br><br>response.setMsg(response.getMsg()+<span class="hljs-string">&quot;-SensitiveFilter&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 修改对应的FilterChain中的addFilter 实现</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Request request , Response response)</span>&#123;<br><span class="hljs-keyword">for</span>(Filter filter : filters )&#123;<br>filter.doFilter(request,response);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(<span class="hljs-string">&quot;msg&quot;</span>);<br><span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&quot;I love you&quot;</span>);<br><br><span class="hljs-type">FilterChain</span> <span class="hljs-variable">filterChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterChain</span>();<br>filterChain.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlFilter</span>());<br>filterChain.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SensitiveFilter</span>());<br><br><span class="hljs-type">FilterChain</span> <span class="hljs-variable">filterChain2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterChain</span>();<br>filterChain2.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SensitiveFilter</span>());<br>filterChain2.addFilter(filterChain2);<br><br>filterChain.doFilter(request,response);<br><span class="hljs-type">String</span> <span class="hljs-variable">newMsg</span> <span class="hljs-operator">=</span> request.getMsg();<br>System.out.println(newMsg);<br>System.out.println(response.getMsg());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在添加后在doFilter中 具备两个对象可以被拦截器操作。</p><p>通过遍历执行所有拦截器的doFilter方法，其调用链如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 前述的调用逻辑 </span><br>Client<br>- FilterChain.doFilter()<br>- FilterChain.doFilter.doFilter();<br>- FilterChain.doFilter.doFilter.HtmlFilter();<br>- FilterChain.doFilter.doFilter.SensitiveFilter();<br>- ...<br>- <br></code></pre></td></tr></table></figure><p>当我们需要在 正向处理 请求的解码过程，逆向处理响应的编码过程时，需要通过嵌套调用doFilter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 双向拦截的请求</span><br>Client<br>- FilterChain.doFiler()<br>- FilterChain.doFilter.resolve_request1()<br>-FilterChain.doFilter()<br>- FilterChain.doFilter.resolve_request2()<br>- FilterChain.doFilter()<br>- FilterChain.doFilter.resolve_request3()<br>- FilterChain.doFilter.resolve_response3()<br>- <br>- FilterChain.doFilter.resolve_response2()<br>-<br>- FilterChain.doFilter.resolve_response1()<br>-<br></code></pre></td></tr></table></figure><p>修</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 向拦截器的doFilter方法中传入chain对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Request request , Response response , FilterChain filterChain)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> request.getMsg();<br>msg = msg.replaceAll(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>);<br>msg = msg.replaceAll(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br>request.setMsg(msg);<br><br>filterChain.doFilter(request,response,filterChain);<br><br><span class="hljs-comment">//过滤.. response</span><br>response.setMsg(reponse.getMsg()+<span class="hljs-string">&quot;-HtmlFilter&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 定义FilterChain 中的doFilter方法，传入chain对象，通过chain对象的处理改为使用index进行遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterChain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;<br>List&lt;Filter&gt;filters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFilter</span><span class="hljs-params">(Filter filter)</span>&#123;<br>filters.add(filter);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Request request , Response response , FilterChain filterChain)</span>&#123;<br><span class="hljs-keyword">if</span>(index == filters.size()) <span class="hljs-keyword">return</span> ;<br><span class="hljs-type">Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> filters.get(index);<br>index++;<br>filter.doFilter(request,response,filterChain);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>责任链模式是一种非常实用的行为型设计模式，它天然适用于“流水线”式的处理流程，尤其在框架级别的请求预处理、响应后处理机制中广泛使用。通过链式结构实现灵活组合、解耦与扩展，使得系统处理流程更加可控、可组合、可扩展。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迭代器模式</title>
    <link href="/2025/07/27/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/27/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>提供一种方法顺序访问一个聚合对象中的各个元素，而不是暴露其内部的表示。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>抽象迭代器 ： 定义了访问和遍历元素的接口，然后在其子类中实现这些方法</li><li>具体迭代器 ：实现抽象迭代接口，完成对集合对象的遍历，同时对遍历时的位置进行跟踪</li><li>抽象聚合类 ： 用于存储对象，创建相应的迭代器对象的接口。它带有一个iterator()方法，用于创建迭代器对象</li><li>具体聚合类 ：用于实现创建相应的迭代器对象的接口，以及iterator方法，并且返回于该具体聚合相对应的具体迭代器实例</li></ol><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>需要访问一个集合对象的内容，而又不想暴露它的内部表示。</p><p>需要对集合对象进行多种方式的遍历。</p><p>需要对多个不同结构的集合使用统一的遍历接口。</p><h2 id="实现迭代器"><a href="#实现迭代器" class="headerlink" title="实现迭代器"></a>实现迭代器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义迭代器接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyIterator</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;<br>Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 定义抽象聚合类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyContainer</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object obj)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object obj)</span>;<br>MyIterator <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 实现类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListContainer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyContainer</span> &#123;<br><span class="hljs-keyword">private</span> List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object obj)</span>&#123;<br>list.add(obj);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object obj)</span>&#123;<br>list.remove(obj);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> MyIterator <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyIteratorImpl</span>();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIteratorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyIterator</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> index &gt;= list.size()? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span> ;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> list.get(index);<br>index++;<br><span class="hljs-keyword">return</span> obj ;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">ListContainer</span> <span class="hljs-variable">listContainer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListContainer</span>();<br>listContainer.add(<span class="hljs-string">&quot;张三&quot;</span>);<br>listContainer.add(<span class="hljs-string">&quot;李四&quot;</span>);<br><br><span class="hljs-type">MyIterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> listContainer.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>System.out.println(iterator.next());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>提供一种顺序访问聚合对象中各个元素的方法，而不暴露其内部结构。其核心思想是将集合的遍历行为抽象为一个独立的对象，使遍历过程与集合对象解耦，从而支持多个遍历器共存、统一接口访问不同类型的集合结构。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式</title>
    <link href="/2025/07/27/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/27/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>观察者模式定义了一种一对多的依赖关系。让多个观察者对象同时监听某一个主题对象，这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>抽象观察者角色 ： 为所有的具体观察者定义一个接口，在得到主题通知时更新自己</li><li>具体观察者角色 ： 实现抽象观察者角色所需要的更新接口，以便使本身的状态与主题的状态相协调</li><li>抽象被观察者角色 ：一个抽象主题，把所有对观察者对象的引用保存在一个集合中，每个主题可以有任意数量的观察者。</li><li>具体被观察者角色 ：一个具体主题，在具体主题的内部状态改变时，向所有登记过的观察者发出通知。</li></ol><h2 id="实现观察者模式"><a href="#实现观察者模式" class="headerlink" title="实现观察者模式"></a>实现观察者模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象观察者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NewsObserver</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String msg)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体观察者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BBCNews</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NewsObserver</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String msg)</span>&#123;<br>System.out.println(msg);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ABCNews</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NewsObserver</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String msg)</span>&#123;<br>System.out.println(msg);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象被观察者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NewsObject</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addObserver</span><span class="hljs-params">(NewsObserver newsObserver)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(NewsObserver newsObserver)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">(String msg)</span>;<br>&#125;<br><br><span class="hljs-comment">// 被观察者实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">News</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NewsObject</span>&#123;<br><span class="hljs-keyword">private</span> List&lt;NewsObserver&gt;newsObservers =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addObserver</span><span class="hljs-params">(NewsObserver newsObserver)</span>&#123;<br>newsObservers.add(newsObserver);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(NewsObserver newsObserver)</span>&#123;<br>newsObservers.remove(newsObserver);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">(String msg)</span>&#123;<br><span class="hljs-keyword">for</span>(NewsObserver newsObserver:newsObservers)&#123;<br>newsObserver.update(msg);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">NewsObject</span> <span class="hljs-variable">news</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">News</span>();<br><br><span class="hljs-type">NewsObserver</span> <span class="hljs-variable">bbc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BBCNews</span>(); <br><span class="hljs-type">NewsObserver</span> <span class="hljs-variable">abc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ABCNews</span>();<br><br>news.addObserver(bbc);<br>news.addObserver(abc);<br><br>news.notify(<span class="hljs-string">&quot;break news !&quot;</span>);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>观察者模式是一种 <strong>行为型设计模式</strong> ，用于建立 <strong>一对多的对象依赖关系</strong> 。当一个对象的状态发生变化时，它能够 <strong>自动通知并更新所有依赖于它的对象</strong> ，而无需主动调用。这种模式实现了 <strong>对象间的松耦合</strong> ，在实际系统中常用于<strong>事件监听、数据推送、UI刷新的通知机制</strong>等场景。通过该模式， <strong>被观察者与观察者之间只通过抽象接口联系，避免了直接依赖，提高了系统的可扩展性与可维护性</strong> 。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中介者模式</title>
    <link href="/2025/07/27/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/27/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>用一个中介对象来封装一系列的对象交互。中介者模式使各对象不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>抽象中介者 ： 抽象中介者角色定义统一的接口，以及一个或者多个事件方法，用于各同事角色之间的通信</li><li>具体中介者 ： 实现了抽象中介者所声明的事件方法，协调各同事类之间的行为，持有所有同事类对象的引用。</li><li>抽象同事类 ：定义了抽象同事类，持有抽象中介者对象的引用</li><li>具体同事类 ：继承抽象同事类，实现自己的业务通过中介者跟其他同事类进行通信</li></ol><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li>系统中的对象间存在较为复杂的引用，导致依赖关系和结构混乱而无法复用的情况</li><li>想通过一个中间类来封装多个类的行为，但是又不想要太多的子类</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>松散耦合将多个对象之间的联系紧耦合封装到中介对象中，做到松耦合，不会导致牵一发而动全身</li><li>将多个对象之间的交互联系集中在中介对象中，发生变化时，仅需修改中介对象即可，提供系统的灵活性，使同事对象对立而易于复用</li><li>符合迪米特原则，一个对象应当对其他对象有尽可能少的了解</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>当各个同事间的交互非常多且非常复杂时，如果都交给中介者处理，会导致中介者变得十分复杂。</p><h2 id="实现中介者模式"><a href="#实现中介者模式" class="headerlink" title="实现中介者模式"></a>实现中介者模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象中介者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PostOffice</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deliverLetter</span><span class="hljs-params">(String letter , String receiver)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addPeople</span><span class="hljs-params">(People people)</span>;<br><br>&#125;<br><br><span class="hljs-comment">// 中介者的实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostOfficeImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PostOffice</span>&#123;<br><span class="hljs-keyword">private</span> Map&lt;String , People&gt;peopleMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deliverLetter</span><span class="hljs-params">(String letter , String receiver)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;=&gt;收信&quot;</span>);<br><span class="hljs-type">People</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> peopleMap.get(receiver);<br>System.out.println(<span class="hljs-string">&quot;=&gt;送信&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;=&gt;收信人看信&quot;</span>);<br>people.receiveLetter(letter);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPeople</span><span class="hljs-params">(People people)</span>&#123;<br>peopleMap.put(people.getClass().getSimpleName(),people);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象同事类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-keyword">protected</span> PostOffice postOffice;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> address ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveLetter</span><span class="hljs-params">(String letter)</span>&#123;<br>System.out.println(letter);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendLetter</span><span class="hljs-params">(String letter,String receiver)</span>&#123;<br>postOffice.deliverLetter(letter,receiver);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(String address)</span>&#123;<br><span class="hljs-built_in">this</span>.address = address ;<br>&#125;<br><span class="hljs-keyword">private</span> String address ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">(PostOffice postOffice , String address)</span>&#123;<br><span class="hljs-built_in">this</span>.postOffice = postOffice;<br><span class="hljs-built_in">this</span>.address = address ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 同事实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">People1</span><span class="hljs-params">(PostOffice postOffice, String address)</span>&#123;<br><span class="hljs-built_in">super</span>(postOffice , address);<br>&#125;<br>&#125; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">People2</span><span class="hljs-params">(PostOffice postOffice , String address)</span>&#123;<br><span class="hljs-built_in">super</span>(postOffice , address);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">PostOffice</span> <span class="hljs-variable">postOffice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostOfficeImpl</span>();<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>中介者模式通过引入一个中介对象将多个对象之间的复杂依赖转化为<strong>“一对多”</strong>的依赖关系，避免了“网状”结构演变为“星型”结构。这样不仅降低了类与类之间的耦合性，还提升了对象之间协作的灵活性和系统的可维护性。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘录模式</title>
    <link href="/2025/07/27/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/27/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可以将该对象恢复到原先保存的状态</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>备忘录创建者：负责创建一个备忘录，可以记录，恢复自身的内部状态， 同时还可以根据需要决定备忘录存储自身的哪些内部状态</li><li>备忘录角色：用于存储创建者的内部状态，并且可以防止其他对象访问备忘录</li><li>备忘录存储角色：负责存储备忘录，不能队备忘录的内容进行操作和访问，只能够将备忘录传递给其他对象</li></ol><h2 id="实现备忘录模式"><a href="#实现备忘录模式" class="headerlink" title="实现备忘录模式"></a>实现备忘录模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span> &#123;<br><span class="hljs-keyword">private</span> String content ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Memento</span><span class="hljs-params">(String content)</span>&#123;<br><span class="hljs-built_in">this</span>.content = content;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> content;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoteCaretaker</span>&#123;<br><span class="hljs-keyword">private</span> List&lt;Memonto&gt;mementoList =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveMemento</span><span class="hljs-params">(Memento memento)</span>&#123;<br>mementoList.add(memento);<br>index = mementoList.size() -<span class="hljs-number">1</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">getPreMemento</span><span class="hljs-params">()</span>&#123;<br>index = index &gt; <span class="hljs-number">0</span> ? --index : index ;<br><span class="hljs-type">Memento</span> <span class="hljs-variable">memento</span> <span class="hljs-operator">=</span> mementoList.get(index);<br><span class="hljs-keyword">return</span> memento;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoteEditText</span> &#123;<br><span class="hljs-keyword">private</span> String content ;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> content;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span>&#123;<br><span class="hljs-built_in">this</span>.content = content ;<br>System.out.println(<span class="hljs-string">&quot;写入的内容是:&quot;</span>+content);<br>&#125;<br><br><span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">createMemento</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Memento</span> <span class="hljs-variable">memento</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memento</span>(content);<br><span class="hljs-keyword">return</span> memento;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restore</span><span class="hljs-params">(Memento memento)</span>&#123;<br><span class="hljs-built_in">this</span>.setContent(memento.getContent());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">NoteEditText</span> <span class="hljs-variable">noteEditText</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoteEditText</span>();<br><span class="hljs-type">NoteCaretaker</span> <span class="hljs-variable">noteCaretaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoteCaretaker</span>();<br><br>noteEditText.setContent(<span class="hljs-string">&quot;something to record 1 &quot;</span>);<br>noteCaretaker.saveMemento(noteEditText.createMemento());<br><br>noteEditText.setContent(<span class="hljs-string">&quot;something to record 2 &quot;</span>);<br>noteCaretaker.saveMemento(noteEditText.createMemento());<br><br>noteEditText.restore(noteCaretaker.getPreMemento());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>备忘录模式是一种 <strong>行为型设计模式</strong> ，通过将对象的内部状态提取到一个独立的“备忘录对象”中，使得对象可以在未来被恢复到特定的历史状态。它 <strong>既保留了封装性</strong> ，又为状态管理提供了清晰的机制，尤其适用于实现“撤销（undo）”、“历史记录”、“快照恢复”等功能。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板方法模式</title>
    <link href="/2025/07/26/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/26/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>定义一个操作中的算法框架，而将一些步骤延迟到子类中，使子类可以不改变一个算法的结构，即可重新定义该算法的某些步骤。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>算法定义类 ： 定义算法架构的类，可以在某个操作方法中定义完整的流程，定义流程中会调用方法，这些方法将由子类重新实现</li><li>实现类 ： 重新实现父类中定义的方法，并可按照子类的执行情况，反应步骤实际的内容</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h2><p>封装不变部分，扩展可变部分。</p><p>提高代码复用，减少重复代码。</p><p>避免子类重复实现整体流程逻辑。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h2><p>增加类的数量，每个变化点都可能导致创建多个子类。</p><p>父类对子类的约束较强，违反开闭原则时可能影响多个子类。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>多个类有相同方法结构，但某些步骤实现不同。</p><p>程序中有固定流程，允许局部变化。</p><h2 id="实现模板方法模式"><a href="#实现模板方法模式" class="headerlink" title="实现模板方法模式"></a>实现模板方法模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模板类（定义算法框架）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WayToHome</span> &#123;<br>  <br>    <span class="hljs-comment">// 模板方法，定义流程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">goHome</span><span class="hljs-params">()</span> &#123;<br>        prepare();     <span class="hljs-comment">// 通用步骤</span><br>        tool();        <span class="hljs-comment">// 可变步骤（由子类替换）</span><br>        arrive();      <span class="hljs-comment">// 通用步骤</span><br>    &#125;<br><br>    <span class="hljs-comment">// 固定步骤：准备</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;准备回家&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 抽象步骤：使用哪种方式回家</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tool</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// 固定步骤：到达</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arrive</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;已经到家&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 子类实现具体步骤</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WayToHomeByCar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WayToHome</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tool</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开车回家&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WayToHomeByBike</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WayToHome</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tool</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;骑自行车回家&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">WayToHome</span> <span class="hljs-variable">homeByCar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WayToHomeByCar</span>();<br>        homeByCar.goHome();  <span class="hljs-comment">// 输出完整流程</span><br><br>        <span class="hljs-type">WayToHome</span> <span class="hljs-variable">homeByBike</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WayToHomeByBike</span>();<br>        homeByBike.goHome();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模板方法模式通过 <strong>在父类中定义一个算法的框架</strong> ，并将具体步骤延迟到子类中，使得子类在不改变算法整体结构的前提下，灵活地重定义某些步骤。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>状态模式</title>
    <link href="/2025/07/26/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/26/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>当一个对象的内在状态改变时，允许改变其行为，这个对象看起来好像是改变了基类。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>含有状态的对象 ： 它可以处理一些请求，这些请求最终产生的响应会与状态有关</li><li>状态接口 ： 定义了每一个状态的行为集合，这些行为会在Context中得以使用</li><li>具体状态实现类 ：实现相关行为的具体状态类</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>用于减少判断逻辑，以及组织各种状况下的状态变更和跳转</p><h2 id="实现状态模式"><a href="#实现状态模式" class="headerlink" title="实现状态模式"></a>实现状态模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义抽象状态类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LiftState</span>&#123;<br><span class="hljs-keyword">protected</span> Lift lift ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLift</span><span class="hljs-params">(Lift lift)</span>&#123;<br><span class="hljs-built_in">this</span>.lift = lift ;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 定义状态实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpeningLiftState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LiftState</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;open&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">super</span>.lift.setCurrentState(Lift.CLOSING_STATE);<br><span class="hljs-built_in">super</span>.lift.getCurrentState().close();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//</span><br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClosingLiftState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LiftState</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">super</span>.lift.setCurrentState(Lift.OPENING_STATE);<br><span class="hljs-built_in">super</span>.lift.getCurrentState().open();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;close&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">super</span>.lift.setCurrentState(Lift.RUNNING_STATE);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">super</span>.lift.setCurrentState(Lift.STOPPING_STATE);<br><span class="hljs-built_in">super</span>.lift.getCurrentState().stop();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 实际使用状态的类定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lift</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">LiftState</span> <span class="hljs-variable">OPENING_STATE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpeningLiftState</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">LiftState</span> <span class="hljs-variable">CLOSING_STATE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClosingLiftState</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">LiftState</span> <span class="hljs-variable">RUNNING_STATE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunningLiftState</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">LiftState</span> <span class="hljs-variable">STOPPING_STATE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StoppingLiftState</span>();<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">LiftState</span> <span class="hljs-variable">currentState</span> <span class="hljs-operator">=</span> CLOSING_STATE ;<br>  <span class="hljs-keyword">public</span> LiftState <span class="hljs-title function_">getCurrentState</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-keyword">return</span> currentState;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCurrentState</span><span class="hljs-params">(LiftState currentState)</span>&#123;<br>  <span class="hljs-built_in">this</span>.currentState = currentState ;<br>  <span class="hljs-built_in">this</span>.currentState.setLift(<span class="hljs-built_in">this</span>);<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-built_in">this</span>.currentState.open();<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">this</span>.currentState.close();  <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">this</span>.currentState.run();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">this</span>.currentState.stop();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Lift</span> <span class="hljs-variable">lift</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lift</span>();<br>lift.open() <br><span class="hljs-comment">// 此时调用的 是CLOSING_STATE 的open方法 将状态切换为OPENING_STATE</span><br><span class="hljs-comment">// 调用OPENING_STATE的open方法。 </span><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>状态模式是一种行为型设计模式，它通过将状态的行为封装到独立类中，实现了对象在不修改自身代码的前提下根据内部状态的不同而呈现出不同的行为。它的核心思想是： <strong>将状态转移逻辑局部化，并将行为委托给当前状态对象</strong> ，从而达到消除冗长条件判断、增强可读性和可扩展性的目的。在状态复杂、变化频繁的系统中，状态模式尤其适用，如电梯状态、工作流引擎、游戏角色状态机等场。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令模式</title>
    <link href="/2025/07/26/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/26/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>命令模式将请求封装成对象，以便使用不同的请求，日志，队列等来参数化其他对象</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>客户端 ： 创建一个具体命令对象，并确定其接收者</li><li>命令 ： 声明了一个给所有具体命令类的接口对象</li><li>具体命令 ：定义一个接收者和行为之间的弱耦合，实现execute()方法，并负责调用接收者的相应操作</li><li>请求者：负责调用命令对象执行请求</li><li>接收者：负责具体实施和执行一个请求</li></ol><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>请求需要排队或日志记录的系统（如任务调度系统）</li><li>需要支持操作撤销&#x2F;重做（如编辑器、事务系统）</li><li>需要将行为抽象成参数进行传递（如菜单栏、按钮绑定操作）</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>命令模式中，请求者不直接与接收者交互，即请求者不包含接收者的引用，因此彻底消除了彼此之间的耦合</li><li>命令模式满足“开闭”原则。如果增加信的具体命令和该命令的接收者，不必修改调用者的代码，调用者就可以使用新的命令对象</li><li>由于请求者被封装到了命令中，那么就可以将具体命令保存到持久化的媒介中，在需要的时候，重新执行这个具体命令</li><li>使用命令模式可以对请求者的请求排队，每个请求对应一个具体命令</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>可能产生大量具体命令类</p><h2 id="实现命令模式"><a href="#实现命令模式" class="headerlink" title="实现命令模式"></a>实现命令模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 最终会被调用到的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Barbecuer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bakeMutton</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;烤羊肉串&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bakeChickenWing</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;烤鸡翅&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义抽象类，驱动最终被调用的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Command</span>&#123;<br><span class="hljs-keyword">protected</span> Barbecuer barbecuer ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Command</span><span class="hljs-params">(Barbecuer barbecuer)</span>&#123;<br><span class="hljs-built_in">this</span>.barbecuer = barbecuer ;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 定义具体实现类 执行方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BakeChickenWingCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Command</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BakeChickenWingCommand</span><span class="hljs-params">(Barbecuer barbecuer)</span>&#123;<br><span class="hljs-built_in">super</span>(barbecuer);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>&#123;<br>barbecuer.bakeChickenWing();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BakeMuttonCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Command</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BakeMuttonCommand</span><span class="hljs-params">(Barbecuer barbecuer)</span>&#123;<br><span class="hljs-built_in">super</span>(barbecuer);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>&#123;<br>barbecuer.bakeMutton();<br>&#125;<br>&#125;<br><span class="hljs-comment">// 中间调用者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Waiter</span>&#123;<br><span class="hljs-keyword">private</span> List&lt;Command&gt;commandList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCommand</span><span class="hljs-params">(Command command)</span>&#123;<br>commandList.add(command);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyBarbecuer</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">for</span>(Command command:commandList)&#123;<br>command.execute();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Barbecuer</span> <span class="hljs-variable">barbecuer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Barbecuer</span>();<br><span class="hljs-type">Waiter</span> <span class="hljs-variable">waiter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">waiter</span>();<br><br>waiter.addCommand(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BakeChickenWingComand</span>(barbecuer));<br>waiter.addCommand(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BakeMuttonCommand</span>(barbecuer));<br><br>waiter.notifyBarbecuer();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>命令模式是一种将“动作的请求者”与“动作的执行者”彻底解耦的行为型设计模式。它通过将操作请求封装为对象，使得请求本身可以被排队、记录、撤销，甚至在分布式系统中跨网络传递。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式</title>
    <link href="/2025/07/26/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/26/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>策略模式 定义了一组算法，将每个算法封装起来，并且使它们之间可以互换</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>抽象的策略 ： 一个接口或抽象类</li><li>具体的策略 ： 实现了抽象的策略</li><li>一个普通的类 ： 上下文环境，对抽象策略的引用</li></ol><h2 id="实现策略模式"><a href="#实现策略模式" class="headerlink" title="实现策略模式"></a>实现策略模式</h2><p>策略模式本身就是 一种多态机制的利用。通过同一个类下的不同实现，来达成根据不同的情况调用不同方法的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象策略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Strategy</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">operate</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体策略实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoOutWithRain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operate</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;带把雨伞出门&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoOutWithSun</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operate</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;穿防晒衣出门&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoOutWithWind</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operate</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;风太大了，不出去了&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br><span class="hljs-keyword">private</span> Strategy strategy;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Context</span><span class="hljs-params">(Strategy strategy)</span> &#123;<br><span class="hljs-built_in">this</span>.strategy = strategy;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>strategy.operate();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">weather</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;雨天&quot;</span>;<br>Strategy strategy;<br><span class="hljs-keyword">if</span> (weather.equals(<span class="hljs-string">&quot;晴天&quot;</span>)) &#123;<br>strategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GoOutWithSun</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weather.equals(<span class="hljs-string">&quot;雨天&quot;</span>)) &#123;<br>strategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GoOutWithRain</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>strategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GoOutWithWind</span>();<br>&#125;<br><span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(strategy);<br>context.execute();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>策略模式（Strategy Pattern）是一种 <strong>行为型设计模式</strong> ，它定义了一组算法或行为，将每个算法封装成独立的策略类，并使它们可以相互替换。客户端可以在运行时选择合适的策略，而不必修改使用策略的上下文类。通过将行为抽象提取出来并注入上下文对象，策略模式实现了 <strong>行为的封装、解耦与复用</strong> ，特别适用于具有<strong>多种变换行为</strong>的场景，如支付方式切换、出行策略选择、排序算法替换等。其核心是<strong>面向接口编程+组合优于继承</strong>的思想。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理模式</title>
    <link href="/2025/07/26/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/26/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>代理模式是指为其他对象提供一种代理，以控制对这个对象的访问。</p><p>在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介作用。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>抽象主题角色 ： 抽象主题类的主要职责是声明真实主题与代理的共同接口方法，该类可以是接口也可以是抽象类</li><li>真实主题角色 ： 该类也称为被代理类，定义了代理所表示的真实对象，是负责执行系统真正逻辑的业务对象</li><li>代理主题角色 ： 也称为代理类，其内部持有RealSubject的引用，因此完全具备对RealSubject的代理权。客户端调用代理对象的方法，同时也调用被代理对象的方法。</li></ol><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li>静态代理：由程序创建或特定工具自动生成源代码，在程序运行前，代理类的.class文件已经存在</li><li>动态代理：在程序运行时，运用反射机制动态创建而成，无须手动编写代码</li></ol><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li>保护目标对象</li><li>增强目标对象</li></ol><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理本身就是一种委托调用的实现，定义代理类接收被代理类，对被代理类进行增强。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 统一的接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>;<br><br>Object <span class="hljs-title function_">findUser</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;<br><br>&#125;<br><br><span class="hljs-comment">// 被代理类定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;调用DAO保存用户信息&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">findUser</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;调用DAO查询用户信息&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&#123;name:&#x27;codfish&#x27;&#125;&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 静态代理扩展</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserServices</span> &#123;<br><span class="hljs-keyword">private</span> UserService userService ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span>(UserService userService)&#123;<br><span class="hljs-built_in">this</span>.userService = userService;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>userService.saveUser();<br><span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;saveUser方法耗时：&quot;</span> + (endTime-startTime));<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">findUser</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-type">Object</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> userService.findUser(uid);<br><span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;findUser 方法耗时:&quot;</span> + (endTime - startTime));<br><span class="hljs-keyword">return</span> rs ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>());<br>userService.saveUser();<br>userService.findUser();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>普通的静态代理，只能在同一接口定义下，完成对被代理类的代理过程。</p><p>这时可以使用动态代理，来对在编码时不确定具体接口，类信息的对象进行动态代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现InvocationHandler 接口,重写invoke 方法,创建动态代理</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><span class="hljs-keyword">private</span> Object target ;<br><span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<br>    target.getClass().getClassLoader(),<br>    target.getClass().getInterfaces(),<br>    <span class="hljs-built_in">this</span><br>);<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy , Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-type">Object</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> method.invoke(target , args);<br><span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;JDK Proxy耗时:&quot;</span> + (endTime-startTime));<br><span class="hljs-keyword">return</span> rs ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">JDKProxy</span> <span class="hljs-variable">jdkProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDKProxy</span>();<br><span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService)jdkProxy.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>());<br>userService.saveUser();<br>userService.findUser();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以在不修改原有对象的基础上，完成对原对象方法的调用</p><p>JDK实现的动态代理的缺点是  被代理类必须实现了接口。</p><p>而另一种方式是 通过使用CGLib 完成动态代理过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 被代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;保存用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;查找用户&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用 CGLIB Proxy 进行代理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">bind</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br><br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        enhancer.setSuperclass(target.getClass()); <span class="hljs-comment">// 设置父类（目标类）</span><br>        enhancer.setCallback(<span class="hljs-built_in">this</span>);                <span class="hljs-comment">// 设置回调</span><br>        <span class="hljs-keyword">return</span> enhancer.create();                  <span class="hljs-comment">// 创建代理对象</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> proxy.invoke(target, args); <span class="hljs-comment">// 调用目标对象的方法</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;CGLIB Proxy耗时:&quot;</span> + (endTime - startTime));<br>        <span class="hljs-keyword">return</span> rs;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CglibProxy</span> <span class="hljs-variable">cglibProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibProxy</span>();<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) cglibProxy.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>());<br>        userService.saveUser();<br>        userService.findUser();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>CGLIB 是通过创建被继承类的子类来完成代理过程的，所以在使用CGLiB 进行动态代理创建的时候，无法为被final 修饰的类创建动态代理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代理模式通过引入一个代理对象，在不修改目标对象的前提下，控制对目标对象的访问或增强其功能。它将请求的发起与实际执行进行解耦，常用于权限控制、延迟加载、远程调用与功能扩展等场景。代理模式包括静态代理和动态代理两种形式，静态代理在编译期生成代码，适合结构清晰的场景；动态代理则在运行时生成代理类，更加灵活，常用于 AOP 和框架设计中，是实现开闭原则和职责分离的重要手段。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>享元模式</title>
    <link href="/2025/07/26/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/26/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>享元模式通过共享技术有效地支持大量细粒度的对象</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>抽象享元角色， 它是产品的抽象类，同时定义出对象的外部状态和内部状态的接口或实现</li><li>具体享元角色，是具体的产品类，实现抽象角色定义的业务</li><li>享元工厂 ，用于构造一个池容器，同时提供从池中获得对象的方法</li></ol><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>享元模式一般用于创建一个池容器用来一次性创建一组资源对象，当服务需要使用对应资源时，从容器中直接取出资源对象进行使用，减少了频繁创建&#x2F;销毁资源对象的开销。同时解耦了资源与资源调用请求过程。方便对资源进行统一管理</p><h2 id="使用享元模式"><a href="#使用享元模式" class="headerlink" title="使用享元模式"></a>使用享元模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建基础资源实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Toy</span>&#123;<br><span class="hljs-keyword">private</span> String name ;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> name ;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name ;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Toy Name&quot;</span> + name ;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 创建池容器。定义获取资源对象的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToyFactory</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String , Toy&gt;toyMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Toy <span class="hljs-title function_">getToy</span><span class="hljs-params">(String name )</span>&#123;<br><span class="hljs-type">Toy</span> <span class="hljs-variable">toy</span> <span class="hljs-operator">=</span> toyMap.get(name);<br><span class="hljs-keyword">if</span>(toy == <span class="hljs-literal">null</span>)&#123;<br> toy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">toy</span>();<br> toy.setName(name);<br> toyMap.put(name,toy);<br>&#125; <br><span class="hljs-keyword">return</span> toy ;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">// 第一次使用会创建对应资源</span><br><span class="hljs-type">Toy</span> <span class="hljs-variable">toy1</span> <span class="hljs-operator">=</span> ToyFactory.getToy(<span class="hljs-string">&quot;变形金刚&quot;</span>);<br><span class="hljs-type">Toy</span> <span class="hljs-variable">toy2</span> <span class="hljs-operator">=</span> ToyFactory.getToy(<span class="hljs-string">&quot;数码暴龙&quot;</span>);<br><br><br>System.out.println(toy1 == ToyFactory.getToy(<span class="hljs-string">&quot;变形金刚&quot;</span>)); <span class="hljs-comment">// true</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>享元模式是一种通过<strong>共享对象</strong>来避免重复创建，<strong>优化系统性能</strong>的结构型设计模式。在本例中，我们以 <code>Toy</code> 类为共享对象，通过 <code>ToyFactory</code> 实现了一个简单的对象池：当请求相同名称的玩具时，直接从池中返回已有实例，而不是重复创建，从而达到资源复用的目的。</p><p>享元模式的核心在于：</p><ul><li><strong>共享内部状态</strong> ：不随使用者变化，可复用；</li><li><strong>分离外部状态</strong> ：由调用者动态传入，不参与共享；</li><li><strong>工厂统一管理对象池</strong> ：保障同一类型只创建一次。</li></ul><p>适用于需要频繁创建大量相似对象的场景，如游戏资源、连接池、图形系统等。通过享元模式，系统不仅节省了内存，还提升了对象管理的集中性与一致性。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合模式</title>
    <link href="/2025/07/25/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/25/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>组合模式组合多个对象形成树形结构，以表示“整体-部分”的结构层次</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>组合中的对象声明接口 ： 在适当的情况下，实现所有类共有接口的默认行为，声明一个接口用于访问和管理子部件</li><li>叶子对象 ：叶子节点没有子节点</li><li>容器对象 ：定义有枝节点行为，用来存储子部件</li></ol><h2 id="实现组合模式"><a href="#实现组合模式" class="headerlink" title="实现组合模式"></a>实现组合模式</h2><p>以公司架构模式实现组合模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Company</span>&#123;<br><span class="hljs-keyword">protected</span> String name ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Company</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name ;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Company company)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Company company)</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">duty</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-comment">// 容器对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteCompany</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Company</span>&#123;<br><span class="hljs-keyword">private</span> List&lt;Company&gt; companyList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteCompany</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">super</span>(name);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Company company)</span>&#123;<br>companyList.add(company);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Company company)</span>&#123;<br>companyList.remove(company);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; depth ; i++)&#123;<br>System.out.println(<span class="hljs-string">&quot;-&quot;</span>);<br>&#125;<br>System.out.println(name);<br><span class="hljs-keyword">for</span>(Company company:companyList)&#123;<br>company.display(depth+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">duty</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">for</span>(Company company:companyList)&#123;<br>company.duty();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 叶子对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HRDepartment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Company</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HRDepartment</span> <span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">super</span>(name);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Company company)</span>&#123;<br><span class="hljs-comment">//</span><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Company company)</span>&#123;<br><span class="hljs-comment">//</span><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; depth ; i++)&#123;<br>System.out.print(<span class="hljs-string">&#x27;-&#x27;</span>);<br>&#125;<br>System.out.println(name);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">duty</span><span class="hljs-params">()</span> &#123;<br>System.out.println(name + <span class="hljs-string">&quot;人员管理&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinanceDepartment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Company</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FinanceDepartment</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">super</span>(name);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Company company)</span>&#123;<br><span class="hljs-comment">//</span><br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Company company)</span>&#123;<br><span class="hljs-comment">//</span><br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; depth ; i++ )&#123;<br>System.out.print(<span class="hljs-string">&#x27;-&#x27;</span>);<br>&#125;<br>System.out.println(name);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">duty</span><span class="hljs-params">()</span>&#123;<br>System.out.println(name + <span class="hljs-string">&quot;财务管理&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Company</span> <span class="hljs-variable">headCompany</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteCompany</span>(<span class="hljs-string">&quot;总公司&quot;</span>);<br><br><span class="hljs-type">Company</span> <span class="hljs-variable">branchCompany</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteCompany</span>(<span class="hljs-string">&quot;分公司&quot;</span>);<br>branchCompany.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HRDepartment</span>(<span class="hljs-string">&quot;分公司人力资源部&quot;</span>));<br>branchCompany.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FinanceDepartment</span>(<span class="hljs-string">&quot;分公司财务部&quot;</span>));<br>headCompany.add(branchCompany);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出 组合模式的逻辑是 在一个抽象类定义下，</p><p>定义两套不同的功能 ：</p><ol><li>作为容器部分的对于叶子节点的管理。</li><li>作为叶子节点所具备的自身功能。</li></ol><p>通过分别实现不同的方法，完成功能调用和管理两种能力。</p><p>将两种能力“组合” 到同一个类定义中，对外界来说提供一致的调用方法。</p><h2 id="透明模式与安全模式"><a href="#透明模式与安全模式" class="headerlink" title="透明模式与安全模式"></a>透明模式与安全模式</h2><p>根据一致性需要的不同，可以对组合模式进行两种不同的实现</p><p>透明模式 ： 在基类中定义所有的方法 ，优点是调用程序可以进行一致性调用，但叶子节点实现的对象管理方法是不存在的。</p><p>安全模式 ： 在基类中只定义容器和叶子都需要的方法，在容器接口中定义对象管理方法。优点是叶子对象不必再重写不必要的方法，缺点是访问的一致性被破坏。需要调用程序判断对象是否可以进行对应方法的调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 安全模式下的结构</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Company</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">duty</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CompanyComposite</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Company</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Company company)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Company company)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>组合模式（Composite Pattern）是一种结构型设计模式，旨在通过将对象组织成树形结构，实现“整体-部分”的统一管理。它使客户端能够以一致的方式对待单个对象与组合对象，极大地提升了系统的扩展性与可维护性。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桥模式</title>
    <link href="/2025/07/25/%E6%A1%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/25/%E6%A1%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>桥模式即将抽象部分与它的实现分离，使它们可以独立地变化</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>抽象类 ： 维护了Implementor即它的实现类</li><li>扩展抽象类 ：扩展抽象部分的接口</li><li>实现接口： 定义实现部分的接口</li><li>具体实现：Implementor 接口的具体实现</li></ol><h2 id="应用桥模式"><a href="#应用桥模式" class="headerlink" title="应用桥模式"></a>应用桥模式</h2><p>以发送消息为例。当存在多种通知模式的时候，可以使用接口和抽象类来管理具体实现。在最终的流程中以基类组件业务流程，最终创建实现类完成通知-发送操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义消息格式的接口部分</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageImplementor</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String toUser , String messages)</span>;<br>&#125;<br><br><span class="hljs-comment">// 消息格式的实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeixinMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MessageImplementor</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String toUser, String message)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;[微信消息]&quot;</span>+toUser+<span class="hljs-string">&quot;:&quot;</span>+message);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 消息格式的实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MessageImplementor</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String toUser , String message)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;[短信消息]&quot;</span>+toUser+<span class="hljs-string">&quot;:&quot;</span>+message);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义消息发送的抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMessage</span>&#123;<br><span class="hljs-keyword">protected</span> MessageImplementor impl ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractMessage</span><span class="hljs-params">(MessageImplementor impl)</span>&#123;<br><span class="hljs-built_in">this</span>.impl = impl ;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String toUser,String message)</span>&#123;<br><span class="hljs-built_in">this</span>.impl.send(toUser,message);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义消息发送的实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessage</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">CommonMessage</span><span class="hljs-params">(MessageImplementor impl)</span>&#123;<br><span class="hljs-built_in">super</span>(impl);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String toUser, String message)</span>&#123;<br><span class="hljs-built_in">super</span>.send(toUser,message);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义消息发送的实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UrgencyMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessage</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">UrgencyMessage</span><span class="hljs-params">(MessageImplementor impl)</span>&#123;<br><span class="hljs-built_in">super</span>(impl);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String toUser , String message)</span>&#123;<br>message = <span class="hljs-string">&quot;[加急]&quot;</span>+message;<br><span class="hljs-built_in">super</span>.send(toUser,message);<br>&#125;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">watch</span><span class="hljs-params">(String messageId)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[watch]收到&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span>&#123;<br><span class="hljs-keyword">public</span> staic <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">MessageImplementor</span> <span class="hljs-variable">messageImplementor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeixinMessage</span>();<br><span class="hljs-type">AbstractMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonMessage</span>(messageImplementor);<br>message.send(<span class="hljs-string">&quot;hello from WeChat&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span>&#123;<br><span class="hljs-keyword">public</span> staic <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">MessageImplementor</span>  <span class="hljs-variable">messageImplementor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SMSMessage</span>();<br>  <span class="hljs-type">AbstractMessage</span><span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrgencyMessage</span>(messageImplementor);<br>message.send(<span class="hljs-string">&quot;hello from SMS&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>桥接模式通过 <strong>将抽象与实现解耦</strong> ，有效解决了系统中多维度扩展所带来的类爆炸问题。在实际应用中，如“消息发送”这种存在<strong>消息类型与发送方式</strong>两种变化维度的场景，桥接模式可以帮助我们灵活地组合不同的实现方式， <strong>扩展性强、层次清晰、遵循开闭原则</strong> 。在系统设计中，当你发现一个类需要同时支持多个独立变化的方向，桥接模式是一个非常值得优先考虑的解决方案。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>门面模式</title>
    <link href="/2025/07/25/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/25/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>门面模式提供了一个统一的接口，用于访问子系统中的功能，外观模式定义了一个高层接口，让子系统更容易使用</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>门面角色  ：门面模式的核心，被客户角色调用，它熟悉子系统的功能，内部根据客户角色的需求预定了几种功能的组合</li><li>子系统角色 ：实现了子系统功能，对客户角色和门面角色是未知的。它的内部可以有系统内的相互交互，也可以有供外界调用的接口</li><li>客户角色 ：通过调用门面角色完成要实现的功能</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>降低了客户类与子系统类的耦合度，实现了子系统与客户之间的松耦合关系<ol><li>只提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类</li><li>减少了与子系统的关联对象，实现了子系统与客户之间的松耦合关系，松耦合使得子系统的组件变化不会影响到它的客户</li></ol></li><li>外观模式对客户屏蔽了子系统组件，从而简化了接口，减少了客户处理的对象数目，并使子系统的使用更加简单<ol><li>引入外观角色之后，用户只需要与外观角色交互即可</li><li>用户与子系统之间的复杂逻辑关系由外观角色来实现</li></ol></li><li>降低原有系统的复杂度和系统中的编译依赖性</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码。</p><p>不能很好地限制客户使用子类系统，如果对客户访问子系统类做出太多的限制，则减少了可变性和灵活性。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>门面模式一般用于在系统网关位置提供统一接口，对外提供明确间接的调用方法。在内部定义响应的绑定方案。</p><h2 id="实现门面模式"><a href="#实现门面模式" class="headerlink" title="实现门面模式"></a>实现门面模式</h2><p>系统内部的多个子系统</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 内部子系统</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubSystemLight</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;开灯&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;关灯&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubSystemSunblind</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;打开窗帘&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;关闭窗帘&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubSystemTV</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;打开电视&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;关闭电视&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义门面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeviceFacade</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">SubSystemLight</span> <span class="hljs-variable">light</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubSystemLight</span>();<br><span class="hljs-keyword">private</span> <span class="hljs-type">SubSystemSunblind</span> <span class="hljs-variable">sunblind</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubSystemSunblind</span>();<br><span class="hljs-keyword">private</span> <span class="hljs-type">SubSystemTV</span> <span class="hljs-variable">tv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubSystemTV</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>&#123;<br>light.on();<br>sunblind.on();<br>tv.on();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>&#123;<br>light.off();<br>sunblind.off();<br>tv.off();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">DeviceFacade</span> <span class="hljs-variable">deviceFacade</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeviceFacade</span>();<br>deviceFacade.on();<br>deviceFacade.off();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>门面模式的核心在于“统一接口、简化使用、解耦子系统”，它是架构设计中实现<strong>模块隔离、降低耦合度</strong>的重要手段。在微服务网关、系统适配层、三方服务集成等场景中，门面模式均有广泛应用。值得注意的是，门面并不限制直接访问子系统，因此更强调“简化”和“组合”而非“强控制”。合理使用门面模式，可以有效提高系统的可维护性与清晰度。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装饰器模式</title>
    <link href="/2025/07/25/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/25/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p><p>装饰器模式主要对现有的类对象进行包裹和封装，以期望在不改变类对象及其类定义的情况下对对象添加额外功能，是一种对象结构型模式</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>Component ： Component是一个接口或者抽象类，是定义最核心的对象，也可以说是最原始的对象</p><p>ComcreteComponent ：是最核心，最原始，最基本的接口或抽象类实现，可以单独用也可以进行装饰</p><p>Decorator ： 一般是一个抽象类，继承自或实现Component，在它的属性里面有一个变量指向Component抽象构件</p><p>ConcreteDecorator ： 把基础构建装饰成新的东西</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>相较于类的继承来扩展功能，对对象进行包裹更加灵活</li><li>装饰类和被装饰类相互独立，耦合度较低</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>没有继承结构清晰</li><li>包裹层数较多时，难以理解和管理</li></ol><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li>动态地增加对象的功能，在原先的对象上增加功能</li><li>不能以派生子类的方式来扩展功能</li><li>限制对象的执行条件，在什么情况下，才能执行对象，否则抛出异常</li><li>参数控制和检查等，对参数的校验和检查，不通过就抛出异常</li></ol><h2 id="实现装饰器模式"><a href="#实现装饰器模式" class="headerlink" title="实现装饰器模式"></a>实现装饰器模式</h2><p>所以在java中实现装饰器的原理是 目标类与装饰器类实现同一个类型接口，装饰器实现类接收该接口的实现类，并在其中对实现类进行调用，并进行扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Camera</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TakePhotoCamera</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Camera</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;拍照功能&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 装饰器抽象类，实现抽象接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CameraDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Camera</span>&#123;<br>Camera camera ; <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">CameraDecorator</span><span class="hljs-params">(Camera camera)</span>&#123;<br><span class="hljs-built_in">this</span>.camera = camera ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 装饰器实现类，接收一个接口实现类作为参数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeautyCameraDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CameraDecorator</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BeautyCameraDecorator</span><span class="hljs-params">(Camera camera)</span>&#123;<br><span class="hljs-built_in">super</span>(camera);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>&#123;<br>camera.operation();<br>System.out.println(<span class="hljs-string">&quot;扩展功能1&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterCameraDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CameraDecorator</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FilterCameraDecorator</span><span class="hljs-params">(Camera camera)</span>&#123;<br><span class="hljs-built_in">super</span>(camera);<br>&#125;<br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>&#123;<br>camera.operation();<br>System.out.println(<span class="hljs-string">&quot;扩展功能2&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Camera</span> <span class="hljs-variable">camera</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TakePhotoCamera</span>();<br>camera.operation();<br><span class="hljs-comment">//基础实现类功能</span><br><br><span class="hljs-type">Camera</span> <span class="hljs-variable">camera1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeautyCameraDecorator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TakePhotoCamera</span>());<br>camera1.operation();<br><br><span class="hljs-type">Camera</span> <span class="hljs-variable">camera2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterCameratDecorator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeautyCameraDecorator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TakePhotoCamera</span>));<br>camera2.operation();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>装饰器模式是一种结构型设计模式，它通过将对象“包装”在装饰器类中，动态地为对象添加新的功能，而无需修改其原始代码或继承其子类。这种设计极大增强了系统的 <strong>灵活性与可扩展性</strong> ，是继承机制的一种优雅替代方案。</p><p>在实现上，装饰器与被装饰对象实现相同的接口，并通过组合的方式将原始对象作为构造参数传入，从而在保留原有行为的基础上扩展功能。装饰器可以层层嵌套，实现功能叠加，符合<strong>开闭原则（对扩展开放，对修改封闭）</strong>的设计思想。</p><p>装饰器模式适用于希望对已有对象动态增强功能、限制继承扩展、或进行权限控制与参数校验的场景。虽然多层装饰可能导致调用结构复杂，但它提供了一种<strong>高内聚、低耦合、可组合</strong>的设计方式，是现代开发中非常实用的一种结构模式。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>适配器模式</title>
    <link href="/2025/07/25/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/25/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>将类的接口转换成客户需要的另一个接口。使得原本由于接口不兼容而不能在一起工作的那些类可以一起工作</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>1 目标角色   目标抽象类定义客户所需的接口，可以是一个抽象类或接口，也可以是具体类</p><p>2 适配者角色 适配者就是被适配的橘色，它定义了一个已经存在的接口，这个接口需要适配。</p><p>3 适配器角色 适配器可以调用另一个接口，作为一个转换器，完成适配者和目标中间的适配过程。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>1 系统需要使用现有的类，但现有的类不兼容</p><p>2 需要建立一个可以重复使用，用于一些彼此关系不大的类，并易于扩展，以便于面对将来会出现的类</p><p>3 需要一个统一的输出接口，但是输入类型却不可预知</p><p>简单来说 适配器模式就是通过一些手段完成对数据的组织和内容进行重新表示。</p><h2 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h2><p>类适配器模式主要是通过接口实现的方式，将原类结构以重写方法形式转换为目标所需的数据形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 原始适配者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerAdaptee</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-number">220</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output220v</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;电源输出电压：&quot;</span> + output);<br><span class="hljs-keyword">return</span> output ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 目标角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PowerTarget</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-title function_">output5v</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-comment">// 适配器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PowerAdaptee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PowerTarget</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output5v</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.output220v();<br>System.out.println(<span class="hljs-string">&quot;classadapter-适配器开始工作,输出电压是：&quot;</span> + output ) ;<br>output = output/<span class="hljs-number">44</span> ;<br>System.out.println(<span class="hljs-string">&quot;classadapter-适配工作完成，输出电压是：&quot;</span> + output ) ;<br><span class="hljs-keyword">return</span> output ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">PowerTarget</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PowerAdapter</span>();<br>target.output5v();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><p>对于对象适配器，其实是通过组合的方式，拿到适配者的原始实例，实现目标方法，完成最终数据的组装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 适配者角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerAdaptee</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-number">220</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output220V</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;电源输出电压：&quot;</span> + output);<br><span class="hljs-keyword">return</span> output ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 目标角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PowerTarget</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-title function_">output5v</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 适配器角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PowerTarget</span>&#123;<br><span class="hljs-keyword">private</span> PowerAdaptee powerAdaptee;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PowerAdapter</span><span class="hljs-params">(PowerAdaptee powerAdaptee)</span>&#123;<br><span class="hljs-built_in">this</span>.powerAdaptee  = powerAdaptee ;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output5v</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> powerAdaptee.output220v();<br>System.out.println(<span class="hljs-string">&quot;objectadapter-适配器开始工作,输出电压是：&quot;</span> + output);<br>output = output/<span class="hljs-number">44</span> ;<br>System.out.println(<span class="hljs-string">&quot;objectadapter-适配工作完成，输出电压是：&quot;</span> + output ) ;<br><span class="hljs-keyword">return</span> output ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">PowerTarget</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PowerAdapter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PowerAdaptee</span>());<br>target.output5v();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="缺省适配器"><a href="#缺省适配器" class="headerlink" title="缺省适配器"></a>缺省适配器</h2><p>当不需要全部实现接口提供的方法时，可以设计一个适配器抽象类实现接口，并未接口中的每个方法提供默认方法，抽象类的子类就可以有选择的覆盖父类的某些方法实现需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 适配者角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerAdaptee</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-number">220</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output220V</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;电源输出电压：&quot;</span> + output);<br><span class="hljs-keyword">return</span> output ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 目标角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PowerTarget</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-title function_">output5v</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">output8v</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">output12v</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 适配器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PowerTarget</span>&#123;<br><span class="hljs-keyword">protected</span> PowerAdaptee powerAdaptee ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PowerAdapter</span><span class="hljs-params">(PowerAdaptee powerAdaptee)</span>&#123;<br><span class="hljs-built_in">this</span>.powerAdaptee = powerAdaptee ;<br>&#125;<br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output5v</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output9v</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output12v</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 实现，在具体实现类中重写方法完成适配</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Power5vAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PowerAdapter</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Power5vAdapter</span><span class="hljs-params">(PowerAdaptee powerAdaptee)</span>&#123;<br><span class="hljs-built_in">super</span>(powerAdaptee);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output5v</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> powerAdaptee.output220v();<br>System.out.println(<span class="hljs-string">&quot;defaultadapter-适配器开始工作,输出电压是：&quot;</span> + output);<br>output = output/<span class="hljs-number">44</span> ;<br>System.out.println(<span class="hljs-string">&quot;defaultadapter-适配工作完成，输出电压是：&quot;</span> + output ) ;<br><span class="hljs-keyword">return</span> output ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">PowerTarget</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Power5vAdapter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PowerAdaptee</span>());<br>target.output5v();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>适配器模式作为结构型设计模式的典型代表，解决了 <strong>接口不兼容导致无法复用的问题</strong> ，使得原本互不兼容的类可以协同工作。通过 <strong>类适配器（继承）、对象适配器（组合）与缺省适配器（抽象类）三种形式，它为不同场景下的适配需求提供了解决思路。实际开发中，我们更推荐使用对象适配器模式</strong> ，因其遵循了组合优于继承的设计原则，具有更好的扩展性与灵活性。而缺省适配器则常用于接口方法过多但只需实现部分方法的场景，降低实现成本。掌握适配器模式，不仅有助于提升系统的 <strong>兼容性与灵活性</strong> ，也体现了对面向对象<strong>开闭原则与复用性</strong>的深刻理解。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型模式</title>
    <link href="/2025/07/25/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/25/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象，在这里原型实例指定了要创建的对象的种类，用这种方式创建对象非常高效，根本无需知道对象的创建细节</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>1 抽象原型类  ： 规定了具体原型对象必须实现的接口</p><p>2 具体原型类 ： 实现抽象原型类的clone()方法，它是可被复制的对象</p><p>3 访问类 ： 使用具体原型类中的clone()方法来复制新的对象</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>效率高，直接克隆，避免了重新执行构造过程的步骤。克隆类似于new，但是不同于new。new创建新的对象属性采用的是默认值。克隆对象的属性值完全和原型对象相同，并且克隆的新对象的改变不会影响原型对象</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>原型模式通过clone()方法创建对象副本，因此设计一个<strong>安全且高效的 clone 方法</strong>往往较为复杂。</p><p>特别是当原始对象中存在 <strong>持久性资源连接</strong> （如数据库连接、文件句柄、Socket 等）时，直接复制这些资源引用会导致克隆对象出现资源冲突或不可用的问题。为了确保克隆后的对象行为正确，开发者需要特别处理这些资源的重建或剥离过程，这无疑加大了 clone 方法的设计难度和出错风险。</p><h2 id="实现原型模式"><a href="#实现原型模式" class="headerlink" title="实现原型模式"></a>实现原型模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Resume</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br><span class="hljs-keyword">private</span> String name ;<br><span class="hljs-keyword">private</span> String position ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> salary ;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> name ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name ;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPosition</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> position ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPosition</span><span class="hljs-params">(String position)</span>&#123;<br><span class="hljs-built_in">this</span>.position = position;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> salary ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">int</span> salary)</span>&#123;<br><span class="hljs-built_in">this</span>.salary = salary ;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Resume <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Resume</span> <span class="hljs-variable">resume</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-keyword">try</span> &#123;<br>resume = (Resume)<span class="hljs-built_in">super</span>.clone();<br>&#125;<span class="hljs-keyword">catch</span>(CloneNotSupportedException e)&#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> resume ;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Resume&#123;&quot;</span> +<br> <span class="hljs-string">&quot;name=\\&#x27;&quot;</span> + name + <span class="hljs-string">&quot;\\&#x27;,&quot;</span> +<br> <span class="hljs-string">&quot;position= \\&#x27;&quot;</span> + position + <span class="hljs-string">&quot;\\&#x27;,&quot;</span> +<br> <span class="hljs-string">&quot;salary=\\&#x27;&quot;</span> + salary +  <span class="hljs-string">&quot;\\&#x27;&#125;&quot;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostResume</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Resume</span> <span class="hljs-variable">resume1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Resume</span>();<br>resume1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Resume</span>();<br>resume1.setName(<span class="hljs-string">&quot;Codfish&quot;</span>);<br>resume1.setPosition(<span class="hljs-string">&quot;测试工程师&quot;</span>);<br>System.out.println(resume1);<br><br><span class="hljs-type">Resume</span> <span class="hljs-variable">resume2</span> <span class="hljs-operator">=</span> resume1.clone();<br>resume2.setName(<span class="hljs-string">&quot;catfish&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拷贝问题"><a href="#拷贝问题" class="headerlink" title="拷贝问题"></a>拷贝问题</h2><p>当我们进行对象拷贝时，拷贝的究竟是什么？</p><p>在现代编程语言中，对象的内部属性可以分为两类：</p><ul><li><strong>值类型（value type）属性</strong> ：例如整数、布尔、浮点数等，实际存储的是数据本身。</li><li><strong>引用类型（reference type）属性</strong> ：例如数组、自定义类、集合等，实际存储的是指向对象在堆内存中的地址（指针）。</li></ul><h3 id="内存表示模型（简化说明）"><a href="#内存表示模型（简化说明）" class="headerlink" title="内存表示模型（简化说明）"></a>内存表示模型（简化说明）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>复制编辑<br>Object<br>├── value_field       <span class="hljs-comment">// 直接存储值，如 int、boolean、double 等</span><br>└── reference_field   <span class="hljs-comment">// 存储的是指向其他对象的地址（如 Education 对象）</span><br><br></code></pre></td></tr></table></figure><h3 id="浅拷贝与引用共享"><a href="#浅拷贝与引用共享" class="headerlink" title="浅拷贝与引用共享"></a>浅拷贝与引用共享</h3><p>在进行浅拷贝（即默认的 <code>Object.clone()</code> 或简单赋值）时：</p><ul><li><strong>值类型字段</strong> ：会被逐字节复制到新对象中，两个对象互不影响。</li><li><strong>引用类型字段</strong> ：复制的是“引用地址”，即两个对象共享同一个堆内对象。这样就会导致克隆对象与原对象 <strong>指向相同的子对象实例</strong> ，从而引发 <strong>状态共享问题</strong> 。</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>复制编辑<br><span class="hljs-type">Resume</span> <span class="hljs-variable">resume1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Resume</span>();<br>resume1.setEducation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Education</span>(<span class="hljs-string">&quot;MIT&quot;</span>, <span class="hljs-string">&quot;2020-2024&quot;</span>));<br><br><span class="hljs-type">Resume</span> <span class="hljs-variable">resume2</span> <span class="hljs-operator">=</span> resume1.clone(); <span class="hljs-comment">// 浅拷贝</span><br>resume2.getEducation().setSchoolName(<span class="hljs-string">&quot;Harvard&quot;</span>);<br><br><span class="hljs-comment">// resume1 的 Education 对象也会被修改！</span><br><br></code></pre></td></tr></table></figure><h3 id="深拷贝与对象隔离"><a href="#深拷贝与对象隔离" class="headerlink" title="深拷贝与对象隔离"></a>深拷贝与对象隔离</h3><p>为了避免这种引用共享导致的副作用，必须在 <code>clone()</code> 方法中 <strong>显式地对引用类型字段进行深拷贝</strong> ，即：</p><ul><li>对每个引用类型字段调用其 <code>clone()</code> 方法（前提是该字段类型也实现了 <code>Cloneable</code>）。</li><li>并将新生成的子对象重新赋值给克隆对象中的字段，确保两个对象的引用指向 <strong>完全不同的实例</strong> 。</li></ul><h2 id="处理深拷贝情况"><a href="#处理深拷贝情况" class="headerlink" title="处理深拷贝情况"></a>处理深拷贝情况</h2><p>如当我们向resume 中添加了一个自定义类（本身会创建一个引用对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Education</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br><span class="hljs-keyword">private</span> String schoolName ;<br><span class="hljs-keyword">private</span> String time ;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSchoolName</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> schoolName ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSchoolName</span><span class="hljs-params">(String schoolName)</span>&#123;<br><span class="hljs-built_in">this</span>.schoolName = schoolName ;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTime</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> time ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTime</span><span class="hljs-params">(String time )</span>&#123;<br><span class="hljs-built_in">this</span>.time = time ;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Education <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> (Education)<span class="hljs-built_in">super</span>.clone();<br>&#125;<span class="hljs-keyword">catch</span> (CloneNotSupportedException e)&#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>&#125;<br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Education&#123;&quot;</span> +<br><span class="hljs-string">&quot;schoolName=&#x27;&quot;</span> + schoolName + <span class="hljs-string">&quot;\\&#x27;&quot;</span> +<br><span class="hljs-string">&quot;time=\\&#x27;&quot;</span> + time + <span class="hljs-string">&quot;\\&#x27;&quot;</span> +<br><span class="hljs-string">&quot;&#125;&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要对clone方法进行对应的修改，将resume中的Education 引用对象 与新创建的Education 对象进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Resume <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Resume</span> <span class="hljs-variable">resume</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-keyword">try</span> &#123;<br>resume = (Resume) <span class="hljs-built_in">super</span>.clone();<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.education != <span class="hljs-literal">null</span>)&#123;<br>resume.setEducation(<span class="hljs-built_in">this</span>.education.clone());<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span> (CloneNotSupportedException e)&#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> resume ;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原型模式是一种通过<strong>复制已有实例（原型）</strong>来创建新对象的创建型设计模式，它跳过了复杂的构造过程，适用于对象创建成本高或结构复杂的场景。</p><p>其核心在于调用 <code>clone()</code> 方法进行 <strong>对象内存层面的复制</strong> ，相比于 <code>new</code> 操作，它能保留原型对象的属性状态并快速生成副本，从而提升效率。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建造者模式</title>
    <link href="/2025/07/24/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/24/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>建造者模式 是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>本质上建造者模式是向对象创建过程中加入了软件构建理念</p><p>Builder  :     抽象层的建造者定义</p><p>ConcreteBuilder ： 具体的产品创建过程，对应了软件中的执行过程。</p><p>Product ： 具体的产品，对应了软件中的业务描述者</p><p>Director ： 指挥建造者去建造目标，对应了软件中的执行器</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>客户不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象</li><li>每一个具体建造者是独立的，因此可以方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象</li><li>可以更加精细地控制产品的创建过程，将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程</li><li>增加新的创建则，无需修改原有类库的代码，指挥者类针对建造者类编程，系统扩展方便</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>当建造者过多时，会产生很多类</li><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，若产品间差异过大，则不适合该模式</li><li>若产品内部变化复杂，可能需要定义很多具体建造者类来实现这种变化</li></ol><h2 id="创建建造者模式"><a href="#创建建造者模式" class="headerlink" title="创建建造者模式"></a>创建建造者模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义原型数据类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> &#123;<br><span class="hljs-keyword">private</span> String cpu ;<br><span class="hljs-keyword">private</span> String memory ;<br><span class="hljs-keyword">private</span> String hardDisk ;<br><span class="hljs-keyword">private</span> String keyboard ;<br><span class="hljs-keyword">private</span> String mouse ;<br><span class="hljs-keyword">private</span> String display ;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCpu</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> cpu ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCpu</span><span class="hljs-params">(String cpu)</span>&#123;<br><span class="hljs-built_in">this</span>.cpu = cpu ;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMemory</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> memory ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMemory</span><span class="hljs-params">(String memory)</span>&#123;<br><span class="hljs-built_in">this</span>.memory = memory;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHardDisk</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> hardDisk;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHardDisk</span><span class="hljs-params">(String hardDisk)</span>&#123;<br><span class="hljs-built_in">this</span>.hardDisk = hardDisk  ;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getKeyboard</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> keyboard ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKeyboard</span><span class="hljs-params">(String keyboard)</span>&#123;<br><span class="hljs-built_in">this</span>.keyboard = keyboard ;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMouse</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> mouse ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMouse</span><span class="hljs-params">(String mouse)</span>&#123;<br><span class="hljs-built_in">this</span>.mouse = mouse ;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDisplay</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> display ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDisplay</span><span class="hljs-params">(String display)</span>&#123;<br><span class="hljs-built_in">this</span>.display = display ;<br>&#125;<br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Computer&#123;&quot;</span> +<br><span class="hljs-string">&quot;cpu=\\&#x27;&quot;</span>+ cpu + <span class="hljs-string">&quot;\\&#x27;,&quot;</span>+<br><span class="hljs-string">&quot;memory=\\&#x27;&quot;</span> + memory + <span class="hljs-string">&quot;\\&#x27;,&quot;</span> +<br><span class="hljs-string">&quot;hardDisk=\\&#x27;&quot;</span> + hardDisk + <span class="hljs-string">&quot;\\&#x27;,&quot;</span> +<br><span class="hljs-string">&quot;keyboard=\\&#x27;&quot;</span> + keyboard + <span class="hljs-string">&quot;\\&#x27;,&quot;</span> +<br><span class="hljs-string">&quot;mouse=\\&#x27;&quot;</span> + mouse + <span class="hljs-string">&quot;\\&#x27;,&quot;</span> +<br><span class="hljs-string">&quot;display=\\&#x27;&quot;</span> + display + <span class="hljs-string">&quot;\\&#x27;,&quot;</span> + <br><span class="hljs-string">&#x27;&#125;&#x27;</span>;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义建造者接口，规定所需要执行的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ComputerConfigBuilder</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">buildCpu</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMemory</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">buildHardDisk</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">buildKeyboard</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMouse</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">buildDisplay</span><span class="hljs-params">()</span>;<br><br>Computer <span class="hljs-title function_">build</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义ConcreteBuilder 即Builderd的实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LowComputerConfigBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ComputerConfigBuilder</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LowComputerConfigBuilder</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">this</span>.computer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildCpu</span><span class="hljs-params">()</span>&#123;<br>computer.setCpu(<span class="hljs-string">&quot;2核&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMemory</span><span class="hljs-params">()</span>&#123;<br>computer.setMemory(<span class="hljs-string">&quot;4GB&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildHardDisk</span><span class="hljs-params">()</span>&#123;<br>computer.setHardDisk(<span class="hljs-string">&quot;20GB&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildKeyboard</span><span class="hljs-params">()</span>&#123;<br>computer.setKeyboard(<span class="hljs-string">&quot;普通键盘&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMouse</span><span class="hljs-params">()</span>&#123;<br>computer.setMouse(<span class="hljs-string">&quot;普通鼠标&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildDisplay</span><span class="hljs-params">()</span>&#123;<br>computer.setDisplay(<span class="hljs-string">&quot;普通显示器&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Computer <span class="hljs-title function_">build</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> computer ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义ConcreteBuilder 即Builderd的实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HighComputerConfigBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ComputerConfigBuilder</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HighComputerConfigBuilder</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">this</span>.computer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildCpu</span><span class="hljs-params">()</span>&#123;<br>computer.setCpu(<span class="hljs-string">&quot;8核&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMemory</span><span class="hljs-params">()</span>&#123;<br>computer.setMemory(<span class="hljs-string">&quot;16GB&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildHardDisk</span><span class="hljs-params">()</span>&#123;<br>computer.setHardDisk(<span class="hljs-string">&quot;500GB&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildKeyboard</span><span class="hljs-params">()</span>&#123;<br>computer.setKeyboard(<span class="hljs-string">&quot;高端键盘&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMouse</span><span class="hljs-params">()</span>&#123;<br>computer.setMouse(<span class="hljs-string">&quot;高端鼠标&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildDisplay</span><span class="hljs-params">()</span>&#123;<br>computer.setDisplay(<span class="hljs-string">&quot;高端显示器&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Computer <span class="hljs-title function_">build</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> computer ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义指挥者，定义配置逻辑</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span>&#123;<br><span class="hljs-keyword">private</span> ComputerConfigBuilder builder ;<br><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBuilder</span><span class="hljs-params">(ComputerConfigBuilder builder)</span>&#123;<br><span class="hljs-built_in">this</span>.builder = builder ;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createComputer</span><span class="hljs-params">()</span>&#123;<br>builder.buildCpu();<br>builder.buildDisplay();<br>builder.buildHardDisk();<br>builder.buildKeyboard();<br>builder.buildMemory();<br>builder.buildMouse();<br>&#125;<br><br><span class="hljs-keyword">public</span> Computer <span class="hljs-title function_">getComputer</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> builder.build();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//创建装机人员</span><br><span class="hljs-type">Director</span> <span class="hljs-variable">director</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Director</span>();<br><br><span class="hljs-comment">//</span><br>director.setBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LowComputerConfigBuilder</span>());<br>director.createComputer();<br><span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> director.getComputer();<br>System.out.println(<span class="hljs-string">&quot;计算机配置:&quot;</span> + computer.toString());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>建造者模式通过将 对象定义，对象调用和对象的生命周期 托管给不同的类进行管理。这样可以灵活自由的对对象进行预配置，自定义配置和对象创建。</p><h2 id="Java中的建造者模式"><a href="#Java中的建造者模式" class="headerlink" title="Java中的建造者模式"></a>Java中的建造者模式</h2><p>在java中一般通过私有类定义+暴露get&#x2F;set方法来完成对配置类的预定义和自定义类配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NutritionFacts</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> servingSize ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> servings ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> calories ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> fat ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> sodium ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> carbohydrate ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> servingSize ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> servings ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">calories</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">fat</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">sodium</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">carbohydrate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">( <span class="hljs-type">int</span> servingSize , <span class="hljs-type">int</span> servings )</span>&#123;<br><span class="hljs-built_in">this</span>.servingSize = servingSize ;<br><span class="hljs-built_in">this</span>.servings = servings ;<br>&#125;<br><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">calories</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>calories = val ;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">fat</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>fat = val ;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">sodium</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>sodium = val ;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">carbohydrate</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>carbohydrate = val ;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> NutritionFacts <span class="hljs-title function_">build</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NutritionFacts</span>(<span class="hljs-built_in">this</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">NutritionFacts</span><span class="hljs-params">(Builder builder)</span>&#123;<br>servingSize = builder.servingSize ;<br>servings = builder.servings ;<br>calories = builder.calories ;<br>fat = builder.fat ;<br>sodium = builder.sodium ;<br>carbohydrate = builder.carbohydrate ;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Spring中的建造者模式应用"><a href="#Spring中的建造者模式应用" class="headerlink" title="Spring中的建造者模式应用"></a>Spring中的建造者模式应用</h2><p>BeanDefinitionBuilder是用于构建Bean定义的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanDefinitionBuilder</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BeanDefinitionBuilder <span class="hljs-title function_">genericBeanDefinition</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericBeanDefinition</span>());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BeanDefinitionBuilder 提供了构建BeanDefinition对象的一系列方法，代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> BeanDefinitionBuilder <span class="hljs-title function_">setParentName</span><span class="hljs-params">(String parentName)</span>&#123;<br><span class="hljs-built_in">this</span>.beanDefinition.setParentName(parentName);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> ;<br>&#125;<br><br><span class="hljs-keyword">public</span> BeanDefinitionBuilder <span class="hljs-title function_">setFactoryMethod</span><span class="hljs-params">(String factoryMethod)</span>&#123;<br><span class="hljs-built_in">this</span>.beanDefinition.setFactoryMethodName(factoryMethod);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>建造者模式不仅是经典的设计模式之一，更是现代软件系统中构建复杂对象的一种 <strong>工程化解耦思想</strong> 。通过抽象构建步骤、分离产品结构与构建过程，建造者模式可以大幅提升代码的清晰度、可维护性和扩展性。</p><p>在 Java 和 Spring 生态中，从 <code>NutritionFacts</code> 的静态 Builder 到 <code>BeanDefinitionBuilder</code> 的 API 构造方式，我们可以看到建造者模式已经深入各类框架与工具的底层设计，是真正值得掌握和理解的核心模式之一。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="/2025/07/24/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/24/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>抽象工厂模式提供了更细粒度的对象创建过程，通过接口定义和接口实现 提供了具备更丰富功能的工厂对象创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;这里是动物工厂&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">House</span>&#123;<br><span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;得到了一只小狗&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Sheep</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;得到了一只小羊&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DogHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">House</span> &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">House</span> &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 定义接口，组合管理对象实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AnimalFactory</span>&#123;<br>Animal <span class="hljs-title function_">createAnimal</span><span class="hljs-params">()</span>;<br><br>House <span class="hljs-title function_">createHouse</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 构建接口实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DogFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AnimalFactory</span>&#123;<br><span class="hljs-keyword">public</span> Animal <span class="hljs-title function_">createAnimal</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> House <span class="hljs-title function_">createHouse</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DogHouse</span>();<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AnimalFactory</span>&#123;<br><span class="hljs-keyword">public</span> Animal <span class="hljs-title function_">createAnimal</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> House <span class="hljs-title function_">createHouse</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SheepHouse</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">AnimalFactory</span> <span class="hljs-variable">af</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DogFactory</span>();<br><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> af.createAnimal();<br><span class="hljs-type">House</span> <span class="hljs-variable">house</span> <span class="hljs-operator">=</span> af.createHouse();<br>af = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SheepFactory</span>();<br>animal = af.createAnimal();<br>house = af.createHouse(); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象工厂通过组合多个产品接口的方式，定义一个“产品族”的创建规范。在 Java 中通过接口实现多种产品的创建组合，从而在一个工厂中统一创建相关联的对象。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>以工厂方法实现支付路径创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">payChannel</span>&#123;<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(BigDecimal price)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PayChannel</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(BigDecimal price)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;调用支付宝SDK发起支付，价格：&quot;</span>+price);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WXpay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PayChannel</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(BigDecimal price)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;调用微信支付SDK发起支付，价格：&quot;</span>+price);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayChannelFactory</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PayChannel <span class="hljs-title function_">getPayChannel</span><span class="hljs-params">(<span class="hljs-type">int</span> type)</span>&#123;<br><span class="hljs-type">PayChannel</span> <span class="hljs-variable">payChannel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-keyword">if</span>(type == <span class="hljs-number">0</span>)&#123;<br>payChannel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AliPay</span>();<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-number">1</span>)&#123;<br>payChannel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WXpay</span>();<br>&#125;<br><span class="hljs-keyword">return</span> payChannel;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">PayChannel</span> <span class="hljs-variable">payChannel</span> <span class="hljs-operator">=</span> PayChannelFactory.getPayChannel(<span class="hljs-number">0</span>);<br>payChannel.pay(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">88.88</span>));<br><br>payChannel = PayChannelFactory.getPayChannel(<span class="hljs-number">1</span>);<br>payChannel.pay(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">88.88</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><ol><li>需要创建的对象较少</li><li>客户端不关心对象的创建过程</li></ol><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><ol><li>客户只知道创建产品的工厂名，而不知道具体的产品名</li><li>创建对象的任务由多个具体子工厂中的某一个完成</li><li>客户不关心创建产品的细节</li></ol><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><ol><li>和工厂方法一样，客户端不需要知道它所创建的对象的类</li><li>需要一组对象共同完成某种功能，并且可能存在多组对象完成不同功能的情况</li><li>系统结构稳定，不会频繁增加对象</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从简单工厂到工厂方法，再到抽象工厂，这一系列模式的演进本质上是 <strong>对象创建职责的转移与粒度的细化过程</strong> ，也是 <strong>从面向实现到面向抽象的设计思想升级</strong> 。</p><ul><li><strong>在简单工厂模式中</strong> ，对象的创建依赖于条件判断逻辑，通常由客户端提供参数来决定创建哪种具体对象。这种方式虽然集中控制了实例化过程，但违背了开放封闭原则，扩展性较差。</li><li><strong>在工厂方法模式中</strong> ，将对象的创建逻辑延迟到具体的工厂子类中，客户端通过不同的工厂实现来获取具体对象。相比简单工厂，它消除了条件分支，提高了可扩展性，并遵循了“对扩展开放、对修改关闭”的设计原则。</li><li><strong>在抽象工厂模式中</strong> ，进一步抽象出一组相关产品（即“产品族”）的创建接口，通过组合多个产品的创建方法，使得客户端可以在保持产品族一致性的同时，批量创建功能相关的对象。这种设计强调了 <strong>对象间的协同关系</strong> ，适用于构建结构稳定、业务复杂、依赖协调的系统场景。</li></ul><blockquote><p>抽象工厂的设计思路强调：对象本身服务于业务流程，而不是主导业务流程，因此更适合在流程驱动或组件化架构中构建一整套相互依赖的业务资源，以实现高度内聚、低耦合的目标。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/2025/07/24/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/24/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>工厂模式的理念是，将组合中的对象与属性的绑定关系替换为更为松散的耦合关系，这样在主对象进行调用时，可以根据情况创建多种不同对象。通过这样的设计，完成了对象间的结构，如果存在后续的扩展，不再需要对原对象进行扩展，而可以直接在工厂类中定义新的对象。</p><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>简单工厂的即通过字段识别 + 分支控制的方式完成对象的选取和创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;这里是动物工厂&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;得到了一只小狗&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Sheep</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;得到了一只小羊&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalFactory</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Animal <span class="hljs-title function_">getAnimal</span><span class="hljs-params">(String type)</span>&#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">Animal</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;dog&quot;</span>))&#123;<br>Animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type.equals(<span class="hljs-string">&quot;sheep&quot;</span>))&#123;<br>Animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span>();<br>&#125;<br><span class="hljs-keyword">return</span> Animal;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">Animal</span> <span class="hljs-operator">=</span> AnimalFactory.getAnimal(<span class="hljs-string">&quot;dog&quot;</span>);<br><span class="hljs-comment">// 输出 得到了一只小狗</span><br>Animal = AnimalFactory.getAnimal(<span class="hljs-string">&quot;sheep&quot;</span>);<br><span class="hljs-comment">// 输出 得到了一只小羊</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样只需要通过传入分支内容 交给工厂，由工厂自动创建对应的对象返回给处理流程中的类。</p><p>这里我们就可以注意到。对于用户来说。 通过工厂最终交付的是一个Animal 类型的对象，我们并不能观察到其Animal 之外的属性和方法定义。</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂方法模式通过定义抽象工厂和具体工厂子类，将对象创建的职责下沉到每个工厂类中。用户只需持有抽象类型的引用，通过多态即可获取所需对象。这种设计避免了对工厂类内部进行条件判断，符合开闭原则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;这里是动物工厂&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;得到了一只小狗&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Sheep</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;得到了一只小羊&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象工厂类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Animal <span class="hljs-title function_">getAnimal</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 工厂实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DogFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnimalFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> Animal <span class="hljs-title function_">getAnimal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnimalFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> Animal <span class="hljs-title function_">getAnimal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">AnimalFactory</span> <span class="hljs-variable">af</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DogFactory</span>();<br><span class="hljs-type">Animal</span> <span class="hljs-variable">Animal</span> <span class="hljs-operator">=</span>  af.getAnimal();<br><span class="hljs-comment">// 输出 得到了一只小狗</span><br>**af = <span class="hljs-keyword">new</span>** SheepFactory**();**<br>Animal **= af.**getAnimal**();<br><span class="hljs-comment">// 输出 得到了一只小羊**</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单工厂要求调用方显式传入类型参数（如 “dog”），这使得调用方必须了解具体的类型信息，导致调用方与产品的具体实现产生耦合。而在工厂方法中，调用方只依赖抽象工厂接口，由外部注入不同实现即可，不再关心具体产品类，有利于遵循依赖倒置原则。</p><h2 id="扩展性能"><a href="#扩展性能" class="headerlink" title="扩展性能"></a>扩展性能</h2><p>当需要对当前工厂的设计进行扩展时，对于简单工厂需要做的 ：</p><ol><li>创建抽象类的新实现类</li><li>设置条件分支处理创建为调用者创建对应的对象</li><li>调用者接收调用目标的类型信息，调用工厂创建对应的对象</li></ol><p>而对于工厂模式则是：</p><ol><li>创建抽象类的新实现类</li><li>创建对应的工厂类实现类</li><li>在业务过程中使用新的工厂创建对象</li></ol><p>简单工厂通过参数传递的方式创建对象意味着在对象新增后业务的承载方对扩展已知，并且参数传递需要穿透更长的业务流程来完成对象的创建。工厂模式则在更小的作用域内完成了对象的创建控制。<br>举例来说，当新增 <code>Cat</code> 类时，必须修改 <code>AnimalFactory</code> 的 <code>if</code>&#x2F;<code>switch</code> 分支，这违背了开闭原则。而在工厂方法中，只需新增 <code>CatFactory</code> 实现类即可，扩展更优雅。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2025/07/23/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2025/07/23/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>单例模式 是一种常见的软件设计模式，其定义是单例对象的类只能允许有一个实例存在。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>在面向对象系统的业务处理过程中，通常涉及多个对象之间的协作。根据其职责与调用特征，我们可以将其大致分为两类：</p><ol><li><strong>事务描述者（以状态变更为主）</strong> ：主要负责维护核心业务状态，如订单状态、用户会话等，它们持有可变字段，反映业务流程的演进；</li><li><strong>过程处理者（以调用与中间处理为主）</strong> ：如服务对象、控制器等，侧重执行逻辑与临时数据的处理，其本身状态通常较少或为无状态。</li></ol><p>根据 JVM 的内存模型，对象的方法定义（包括字节码）存储在“方法区（或元空间）“中，为所有实例共享，且为只读结构。因此，对于无状态或轻状态的过程处理对象，我们通常可以使用单例模式进行复用，因为它们的方法是线程安全的，只要不引入共享可变状态，就不会产生线程安全问题。</p><p>另一类是用于访问底层资源的 <strong>资源访问对象</strong> （如数据库连接、文件句柄、Socket 等），这类对象封装了对外部资源的引用和生命周期管理，具备一定的重量级。在实际使用中，我们通常通过<strong>连接池</strong>等方式创建有限数量的资源对象，结合<strong>对象池化复用机制</strong>来降低频繁创建&#x2F;释放资源的性能开销。</p><p>总结来说：</p><ul><li><strong>方法只读 → 可共享 → 适合单例模式</strong> ；</li><li><strong>资源昂贵 → 应复用 → 适合连接池机制</strong> 。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1 内存中只有一个对象，节省内存空间：在内存中只存在一个对象，不会频繁地创建对象，节省了内存空间</p><p>2 避免频繁地创建，销毁对象，可以提高性能：对象只初始化一次，在调用的时候，无需重复进行对象的创建，提高了程序的性能</p><p>3 避免对共享资源的多重占用：比如写文件操作</p><p>4 全局访问：在程序的任何一个地方都能进行调用，并且是同一个对象。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>1 不适用于变化的对象，如果是同一类型的对象总是在不同的用例场景发生变化，单例就会引起数据错误，不能保存彼此的状态</p><p>2 由于单例模式中没有抽象层，因此单例类的扩展有很大的困难</p><p>3 单例类的职责过重，在一定程度上违背了”单一职责原则“：要负责对象本身的职责，还需要负责对象的创建</p><p>4 滥用单例将带来一些负面问题，如为了节省资源，将数据库连接池对象设计为单例，可能会导致共享连接池对象的程序过多，而出现连接池溢出；如果实例化的对象长时间不被利用，会被认为是垃圾而被系统回收，这将导致对象状态的丢失</p><h2 id="结构实现"><a href="#结构实现" class="headerlink" title="结构实现"></a>结构实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">------------------------------<br>|       Singleton            |<br>------------------------------<br>| - instance: Singleton      |<br>------------------------------<br>| - Singleton()              |<br>| + getInstance(): Singleton |<br>------------------------------<br></code></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><p>懒汉模式即在首次被请求时，才会完成对象的创建。优点是节省内存空间和应用启动时间，缺点则是在创建时，可能存在线程安全问题。</p><p><strong>创建过程</strong></p><ol><li>构造方法私有化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">Executor</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>提供对象创建方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Executor</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span>  Executor executor ;<br><span class="hljs-comment">// 定义私有化实例对象，使用volatile提示编译器不要修改执行过程</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Executor</span><span class="hljs-params">()</span>&#123;&#125;;<br><span class="hljs-comment">// 私有化实例构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Executor <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span>(executor == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-comment">// 如果私有化实例不存在,则创建实例</span><br>executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Executor</span>();<br>&#125;<br><span class="hljs-keyword">return</span> executor ;<br><span class="hljs-comment">// 最终返回创建后的唯一实例</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>线程安全问题</strong></p><p>根据代码，我们可以看到处理过程主要是一个实例的对象创建过程，如果实例已经被创建，则返回实例。这样在未创建时，就存在一个临界区，即静态方法被同时调用，临界区内不存在已创建的对象，这时就会有多个线程进行私有实例的创建，进而导致创建了多个实例。</p><p><strong>解决方案</strong></p><ul><li>使用synchronized同步代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> Executor <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Executor</span>();<br>&#125;<br><span class="hljs-keyword">return</span> instance ;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是 线程安全问题仅存在于实例创建阶段，当实例创建后，每次请求再涉及到线程安全检查则会销毁不必要的资源。则可以使用 多次检查+synchronized 的方式进行创建过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Executor <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">synchronized</span>(GirlFriend.class)&#123;<br><span class="hljs-keyword">if</span>(executor == <span class="hljs-literal">null</span>)&#123;<br>executor= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Executor</span>();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> executor<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><p>饿汉模式即在类加载阶段完成了对单例的创建，在后续请求中直接返回该单例对象，优点在于不存在线程安全问题，缺点则在于如果对象加载过程资源消耗很大，则会影响应用整体的启动时间。</p><p><strong>创建过程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Executor</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">executor</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> executor ;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Executor</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassHolder</span>()&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Executor</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Executor <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> InnerClassHolder.instance ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举类实现"><a href="#枚举类实现" class="headerlink" title="枚举类实现"></a>枚举类实现</h3><p>通过定义单枚举类对象，创建单一实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Executor</span> &#123;<br>EXECUTOR ;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单例模式的线程池实现"><a href="#单例模式的线程池实现" class="headerlink" title="单例模式的线程池实现"></a>单例模式的线程池实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPool</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> ThreadPool threadPool ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">THREAD_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span> ;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">ThreadPool</span><span class="hljs-params">()</span>&#123;<br>threadPoolExecutor = (ThreadPoolExecutor)Executors.newFixedThreadPool(THREAD_COUNT);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Thread t)</span>&#123;<br><span class="hljs-keyword">if</span>(!threadPoolExecutor.isShutdown())&#123;<br>threadPoolExecutor.execute(t);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadPool <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span>(threadPool == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">synchronized</span>(ThreadPool.class)&#123;<br><span class="hljs-keyword">if</span>(threadPool == <span class="hljs-literal">null</span>)&#123;<br>threadPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPool</span>();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> threadPool ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从编码到设计模式：系统是如何被组织的?</title>
    <link href="/2025/07/23/%E4%BB%8E%E7%BC%96%E7%A0%81%E5%88%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%AB%E7%BB%84%E7%BB%87%E7%9A%84/"/>
    <url>/2025/07/23/%E4%BB%8E%E7%BC%96%E7%A0%81%E5%88%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%AB%E7%BB%84%E7%BB%87%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<h2 id="从编码开始"><a href="#从编码开始" class="headerlink" title="从编码开始"></a>从编码开始</h2><p>当我们开始实现一个需求时，首先关注的是”如何实现功能？”以虚拟房子为例，用面向对象思路组织基本结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">House</span> &#123;<br>    <span class="hljs-keyword">private</span> Bathroom bathroom;<br>    <span class="hljs-keyword">private</span> Bedroom bedroom;<br>    <span class="hljs-keyword">private</span> Kitchen kitchen;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">House</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.bathroom = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bathroom</span>();<br>        <span class="hljs-built_in">this</span>.bedroom = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bedroom</span>();<br>        <span class="hljs-built_in">this</span>.kitchen = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Kitchen</span>();<br>    &#125;<br>    <br>    *<span class="hljs-comment">// 提供访问各个房间的方法*</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useBathroom</span><span class="hljs-params">()</span> &#123; *<span class="hljs-comment">/* ... */</span>* &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rest</span><span class="hljs-params">()</span> &#123; *<span class="hljs-comment">/* ... */</span>* &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cook</span><span class="hljs-params">()</span> &#123; *<span class="hljs-comment">/* ... */</span>* &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bathroom</span> &#123;<br>    <span class="hljs-keyword">private</span> Shower shower;<br>    <span class="hljs-keyword">private</span> Mirror mirror;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">takeShower</span><span class="hljs-params">()</span> &#123; shower.start(); &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lookInMirror</span><span class="hljs-params">()</span> &#123; mirror.reflect(); &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bedroom</span> &#123;<br>    <span class="hljs-keyword">private</span> Bed bed;<br>    <span class="hljs-keyword">private</span> Chair chair;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123; bed.layDown(); &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sit</span><span class="hljs-params">()</span> &#123; chair.sitOn(); &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Kitchen</span> &#123;<br>    <span class="hljs-keyword">private</span> Knife knife;<br>    <span class="hljs-keyword">private</span> Dish dish;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareMeal</span><span class="hljs-params">()</span> &#123; knife.cut(); &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serveMeal</span><span class="hljs-params">()</span> &#123; dish.serve(); &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过面向对象，我们可以明确地描述对象具备的功能与方法，创建可操作的对象结构。</p><h2 id="系统中的对象角色"><a href="#系统中的对象角色" class="headerlink" title="系统中的对象角色"></a>系统中的对象角色</h2><p>房子并非目的本身，构建房子是为了更好地利用这个结构完成我们的目标。我们可以将对象分为三种角色：</p><h3 id="1-事务发起者-Initiator"><a href="#1-事务发起者-Initiator" class="headerlink" title="1. 事务发起者 (Initiator)"></a>1. 事务发起者 (Initiator)</h3><ul><li><strong>职责</strong>：定义需要达成的目的，orchestrate整个处理流程</li><li><strong>特征</strong>：了解业务目标，控制执行顺序</li><li><strong>示例</strong>：<code>PersonLivingInHouse</code> 类，决定何时睡觉、做饭、洗澡</li></ul><h3 id="2-事务描述者-Domain-Object"><a href="#2-事务描述者-Domain-Object" class="headerlink" title="2. 事务描述者 (Domain Object)"></a>2. 事务描述者 (Domain Object)</h3><ul><li><strong>职责</strong>：描述被处理事务的状态和行为规则</li><li><strong>特征</strong>：封装业务逻辑，维护对象状态</li><li><strong>示例</strong>：<code>House</code>、<code>Room</code> 等领域对象</li></ul><h3 id="3-过程处理者-Service-Handler"><a href="#3-过程处理者-Service-Handler" class="headerlink" title="3. 过程处理者 (Service&#x2F;Handler)"></a>3. 过程处理者 (Service&#x2F;Handler)</h3><ul><li><strong>职责</strong>：处理事务在特定阶段的逻辑，协调对象间交互</li><li><strong>特征</strong>：无状态，专注于处理逻辑</li><li><strong>示例</strong>：<code>HousekeepingService</code>、<code>MealPreparationService</code></li></ul><h2 id="语义关系重新定义"><a href="#语义关系重新定义" class="headerlink" title="语义关系重新定义"></a>语义关系重新定义</h2><p>基于面向对象设计原则，类与类之间主要有以下语义关系：</p><h3 id="IS-A-关系-继承"><a href="#IS-A-关系-继承" class="headerlink" title="IS-A 关系 (继承)"></a>IS-A 关系 (继承)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span> &#123;<br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bedroom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Room</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span> &#123; *<span class="hljs-comment">/* 卧室特有的清洁方式 */</span>* &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>语义</strong>：描述类型层次关系，子类是父类的特化</li><li><strong>原则</strong>：子类必须能完全替代父类（里氏替换原则）</li><li><strong>创建</strong>：通过继承机制，子类自动获得父类的属性和方法</li></ul><h3 id="HAS-A-关系-组合-聚合"><a href="#HAS-A-关系-组合-聚合" class="headerlink" title="HAS-A 关系 (组合&#x2F;聚合)"></a>HAS-A 关系 (组合&#x2F;聚合)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">House</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Room&gt; rooms; *<span class="hljs-comment">// 组合关系*</span><br>    <span class="hljs-keyword">private</span> Address address;   *<span class="hljs-comment">// 聚合关系*</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>语义</strong>：描述整体与部分的关系</li><li><strong>区别</strong>：组合是强拥有（生命周期一致），聚合是弱拥有</li><li><strong>创建</strong>：通过成员变量持有其他对象的引用</li></ul><h3 id="USE-A-关系-依赖"><a href="#USE-A-关系-依赖" class="headerlink" title="USE-A 关系 (依赖)"></a>USE-A 关系 (依赖)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">liveIn</span><span class="hljs-params">(House house)</span> &#123;<br>        house.useBathroom(); *<span class="hljs-comment">// 依赖关系*</span><br>    &#125;<br>&#125;`<br></code></pre></td></tr></table></figure><ul><li><strong>语义</strong>：描述临时性的使用关系</li><li><strong>特征</strong>：对象间耦合度最低，通过参数传递或临时创建</li><li><strong>创建</strong>：通过方法参数、局部变量或工厂模式获得对象</li></ul><h3 id="CAN-DO-关系-接口实现"><a href="#CAN-DO-关系-接口实现" class="headerlink" title="CAN-DO 关系 (接口实现)"></a>CAN-DO 关系 (接口实现)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cleanable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cleanable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span> &#123; *<span class="hljs-comment">/* 实现清洁功能 */</span>* &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>语义</strong>：描述对象具备某种能力或契约</li><li><strong>原则</strong>：定义what而不是how，支持多重实现</li><li><strong>创建</strong>：通过实现接口方法，获得多态能力</li></ul><h2 id="定义与调用分离：不同关系模式的解耦机制"><a href="#定义与调用分离：不同关系模式的解耦机制" class="headerlink" title="定义与调用分离：不同关系模式的解耦机制"></a>定义与调用分离：不同关系模式的解耦机制</h2><p>在面向对象设计中，每种关系模式都代表了不同的”定义与调用分离”策略。核心在于回答三个问题：</p><ul><li><strong>定义权</strong>：属性和方法由谁定义？</li><li><strong>调用权</strong>：属性和方法由谁调用？</li><li><strong>管理权</strong>：对象生命周期由谁管理？</li></ul><h3 id="继承关系：纵向的定义与调用分离"><a href="#继承关系：纵向的定义与调用分离" class="headerlink" title="继承关系：纵向的定义与调用分离"></a>继承关系：纵向的定义与调用分离</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>    <span class="hljs-keyword">protected</span> String brand;          <span class="hljs-comment">// 父类定义通用属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>;   <span class="hljs-comment">// 父类定义调用契约</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayInfo</span><span class="hljs-params">()</span> &#123;     <span class="hljs-comment">// 父类定义并实现调用逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;Brand: &quot;</span> + brand);<br>        start(); <span class="hljs-comment">// 调用子类的具体实现</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;           <span class="hljs-comment">// 子类定义具体实现</span><br>        System.out.println(<span class="hljs-string">&quot;Car engine starts&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>分离特征</strong>：</p><ul><li><strong>定义分工</strong>：父类定义契约和通用逻辑，子类定义具体实现</li><li><strong>调用分工</strong>：父类负责统一调用逻辑，子类提供被调用的实现</li><li><strong>管理模式</strong>：通过多态机制，调用者无需知道具体类型，只需面向抽象编程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Vehicle</span> <span class="hljs-variable">vehicle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(); <span class="hljs-comment">// 调用者只需要知道Vehicle接口</span><br>vehicle.displayInfo();       <span class="hljs-comment">// 父类控制调用流程，子类提供实现</span><br><br></code></pre></td></tr></table></figure><h3 id="接口关系：契约式的定义与调用分离"><a href="#接口关系：契约式的定义与调用分离" class="headerlink" title="接口关系：契约式的定义与调用分离"></a>接口关系：契约式的定义与调用分离</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Flyable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>;     <span class="hljs-comment">// 接口定义调用契约，不提供实现</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Flyable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;                    <span class="hljs-comment">// 实现类定义具体实现</span><br>        System.out.println(<span class="hljs-string">&quot;Bird flies&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FlightController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">controlFlight</span><span class="hljs-params">(Flyable flyable)</span> &#123;  <span class="hljs-comment">// 调用者面向接口调用</span><br>        flyable.fly(); <span class="hljs-comment">// 不关心具体是谁实现的fly方法</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>分离特征</strong>：</p><ul><li><strong>定义分工</strong>：接口定义what（契约），实现类定义how（具体实现）</li><li><strong>调用分工</strong>：调用者面向接口调用，完全不依赖具体实现</li><li><strong>管理模式</strong>：调用者通过依赖注入或参数传递获得实例，不负责创建</li></ul><h3 id="组合关系：委托式的定义与调用分离"><a href="#组合关系：委托式的定义与调用分离" class="headerlink" title="组合关系：委托式的定义与调用分离"></a>组合关系：委托式的定义与调用分离</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">running</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;              <span class="hljs-comment">// 被组合类定义自己的行为</span><br>        running = <span class="hljs-literal">true</span>;<br>        System.out.println(<span class="hljs-string">&quot;Engine started&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRunning</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> running; &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> Engine engine;             <span class="hljs-comment">// 组合类拥有被组合对象</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.engine = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Engine</span>();    <span class="hljs-comment">// 组合类负责创建和管理</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;              <span class="hljs-comment">// 组合类定义对外接口</span><br>        engine.start();                <span class="hljs-comment">// 委托给被组合对象执行</span><br>        System.out.println(<span class="hljs-string">&quot;Car is ready&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>分离特征</strong>：</p><ul><li><strong>定义分工</strong>：被组合类定义内部行为，组合类定义对外接口和协调逻辑</li><li><strong>调用分工</strong>：外部调用组合类接口，组合类内部调用被组合对象方法</li><li><strong>管理模式</strong>：组合类全权负责被组合对象的生命周期管理</li></ul><h3 id="依赖关系：临时式的定义与调用分离"><a href="#依赖关系：临时式的定义与调用分离" class="headerlink" title="依赖关系：临时式的定义与调用分离"></a>依赖关系：临时式的定义与调用分离</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendEmail</span><span class="hljs-params">(String message)</span> &#123;    <span class="hljs-comment">// 被依赖类定义服务能力</span><br>        System.out.println(<span class="hljs-string">&quot;Sending: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderProcessor</span> &#123;<br>    <span class="hljs-comment">// 依赖类定义使用场景和调用时机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processOrder</span><span class="hljs-params">(Order order, EmailService emailService)</span> &#123;<br>        <span class="hljs-comment">// 处理订单逻辑...</span><br><br>        <span class="hljs-comment">// 在需要时调用被依赖对象的服务</span><br>        emailService.sendEmail(<span class="hljs-string">&quot;Order processed: &quot;</span> + order.getId());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>分离特征</strong>：</p><ul><li><strong>定义分工</strong>：被依赖类定义服务能力，依赖类定义使用场景</li><li><strong>调用分工</strong>：依赖类在特定时机调用被依赖类的服务</li><li><strong>管理模式</strong>：被依赖对象由外部创建和管理，依赖类只负责使用</li></ul><p>所谓解耦，就是将定义，调用，生命周期分离的设计过程。</p><h2 id="SOLID原则"><a href="#SOLID原则" class="headerlink" title="SOLID原则"></a>SOLID原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>核心：一个类应该只有一个引起它变化的原因。这意味着在定义层面上一个类只对其关注的处理过程负责，通过这种设计方便于减少与其他类之间的依赖，同时因为功能与类的一一对应，减少了后续扩展时的修改成本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 违反SRP - 订单类承担了太多职责</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Item&gt; items;<br>    <span class="hljs-keyword">private</span> Customer customer;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addItem</span><span class="hljs-params">(Item item)</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>    <br>    <span class="hljs-comment">// 职责1：计算逻辑</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateTotal</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>    <br>    <span class="hljs-comment">// 职责2：持久化逻辑</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveToDatabase</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>    <br>    <span class="hljs-comment">// 职责3：通知逻辑</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendConfirmationEmail</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>&#125;<br><br><span class="hljs-comment">// 遵循SRP - 职责分离</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Item&gt; items;<br>    <span class="hljs-keyword">private</span> Customer customer;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addItem</span><span class="hljs-params">(Item item)</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateTotal</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderRepository</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Order order)</span> &#123; <span class="hljs-comment">/* 持久化逻辑 */</span> &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderNotificationService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendConfirmation</span><span class="hljs-params">(Order order)</span> &#123; <span class="hljs-comment">/* 通知逻辑 */</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p><strong>核心</strong>：对扩展开放，对修改封闭。这意味着基类提供基础明确的功能定义，派生类完成对原功能的增强和扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 违反OCP - 每次新增形状都要修改AreaCalculator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AreaCalculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateArea</span><span class="hljs-params">(Object shape)</span> &#123;<br>        <span class="hljs-keyword">if</span> (shape <span class="hljs-keyword">instanceof</span> Rectangle) &#123;<br>            <span class="hljs-type">Rectangle</span> <span class="hljs-variable">rect</span> <span class="hljs-operator">=</span> (Rectangle) shape;<br>            <span class="hljs-keyword">return</span> rect.width * rect.height;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shape <span class="hljs-keyword">instanceof</span> Circle) &#123;<br>            <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> (Circle) shape;<br>            <span class="hljs-keyword">return</span> Math.PI * circle.radius * circle.radius;<br>        &#125;<br>        <span class="hljs-comment">// 每次新增形状都要在这里添加if-else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 遵循OCP - 通过抽象实现扩展</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">calculateArea</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateArea</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> width * height;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AreaCalculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateArea</span><span class="hljs-params">(Shape shape)</span> &#123;<br>        <span class="hljs-keyword">return</span> shape.calculateArea(); <span class="hljs-comment">// 新增形状无需修改此方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p><strong>核心</strong>：子类对象必须能够替换其基类对象。通过这条规则，我们可以更好的完成定义阶段和调用阶段的解耦，子类服从于标准的父类实现，就可以在编码阶段优先完成过程的设计。多态的安全边界，建立在语义契约的一致性之上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正确的LSP示例</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sparrow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        fly(); <span class="hljs-comment">// 麻雀通过飞行移动</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* 飞行实现 */</span> &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Penguin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        walk(); <span class="hljs-comment">// 企鹅通过走路移动</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">walk</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* 行走实现 */</span> &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码可以统一处理所有鸟类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveBird</span><span class="hljs-params">(Bird bird)</span> &#123;<br>    bird.move(); <span class="hljs-comment">// 无论是麻雀还是企鹅都能正确工作</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a><strong>接口隔离原则</strong></h3><p><strong>核心</strong>：客户端不应该依赖它不需要的接口。通过接口隔离，我们可以更好的在编码阶段定义业务处理过程，面向一个过程，只需要该过程的具体实现，而不需要关系该实现类具备的其他能力。接口不是能力的集合，而是角色的边界。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 违反ISP - 胖接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Worker</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Worker</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* 机器人工作 */</span> &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* 机器人不需要吃饭！ */</span> &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* 机器人不需要睡觉！ */</span> &#125;<br>&#125;<br><br><span class="hljs-comment">// 遵循ISP - 接口隔离</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Workable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Eatable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Sleepable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Workable</span>, Eatable, Sleepable &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Workable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">/* 机器人只需要实现工作接口 */</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p><strong>核心</strong>：高层模块不应该依赖低层模块，两者都应该依赖于抽象。依赖倒置原则讨论的是设计与实现的分离。高层模块服务于业务流程，而底层模块则服务于功能实现。两者通过抽象完成从流程到每一阶段的业务处理的绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 违反DIP - 高层模块直接依赖低层模块</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendEmail</span><span class="hljs-params">(String message)</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderProcessor</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmailService</span> <span class="hljs-variable">emailService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmailService</span>(); <span class="hljs-comment">// 直接依赖具体类</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processOrder</span><span class="hljs-params">(Order order)</span> &#123;<br>        <span class="hljs-comment">// 处理订单...</span><br>        emailService.sendEmail(<span class="hljs-string">&quot;Order processed&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 遵循DIP - 依赖抽象</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">NotificationService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendNotification</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NotificationService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendNotification</span><span class="hljs-params">(String message)</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderProcessor</span> &#123;<br>    <span class="hljs-keyword">private</span> NotificationService notificationService; <span class="hljs-comment">// 依赖抽象</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderProcessor</span><span class="hljs-params">(NotificationService notificationService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.notificationService = notificationService;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processOrder</span><span class="hljs-params">(Order order)</span> &#123;<br>        <span class="hljs-comment">// 处理订单...</span><br>        notificationService.sendNotification(<span class="hljs-string">&quot;Order processed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>所谓设计模式，就是在上述原则和解耦思想下提出的依据业务来实现的对象设计处理框架。设计模式不是凭空产生的编程技巧，而是在长期的软件开发实践中，针对特定问题场景总结出的成熟解决方案。每一个设计模式都体现了特定的解耦策略，帮助我们在复杂的业务逻辑中保持代码的灵活性和可维护性。</p><h3 id="设计模式的区分"><a href="#设计模式的区分" class="headerlink" title="设计模式的区分"></a>设计模式的区分</h3><p>可以从 它们提供的思路和实现方式来区分：</p><ol><li>创建型模式：创建型模式提供了一种创建对象的最佳方式。 如单例模式，工厂方法模式，抽象工厂模式</li><li>结构型模式：结构型模式关注对象之间的组合。如适配器模式，代理模式，装饰模式</li><li>行为型模式：行为型模式关注对象之间的通信。如迭代器模式，模板方法模式，策略模式</li></ol><h3 id="模式的设计理念"><a href="#模式的设计理念" class="headerlink" title="模式的设计理念"></a>模式的设计理念</h3><p>🔨 创建型模式（5）<br>单例模式：某个类只有一个实例，并提供一个全局访问点。</p><p>工厂方法模式：通过工厂方法创建对象实例，延迟到子类实现。</p><p>抽象工厂模式：创建多个相关对象的工厂接口，定义产品族。</p><p>建造者模式：将一个复杂对象的构建过程与其表示分离，使构建过程可复用、可扩展。</p><p>原型模式：通过复制原型对象来创建新对象，无需指定其具体类。</p><p>🧱 结构型模式（7）<br>适配器模式：将一个类的接口转换成客户端期望的接口，解决接口不兼容问题。</p><p>装饰器模式：动态地为对象添加新的功能，而无需修改其结构。</p><p>代理模式：为其他对象提供一种代理以控制对它的访问。</p><p>桥接模式：将抽象部分与实现部分分离，使它们可以独立变化。</p><p>组合模式：将对象组合成树形结构，以表示“部分-整体”的层次结构。</p><p>外观模式：为子系统中的一组接口提供统一的高层接口，简化使用。</p><p>享元模式：通过共享大量细粒度对象来减少内存使用和对象创建开销。</p><p>⚙️ 行为型模式（11）<br>模板方法模式：定义算法骨架，将一些步骤延迟到子类实现。</p><p>策略模式：定义一系列算法，并使它们可互换。</p><p>观察者模式：对象之间建立一对多的依赖关系，被观察者状态改变时通知所有观察者。</p><p>命令模式：将请求封装为对象，以支持命令的撤销、排队和记录日志等功能。</p><p>职责链模式：多个对象组成一条链，请求沿链传递，直到被某个对象处理。</p><p>状态模式：允许对象在内部状态改变时改变其行为。</p><p>访问者模式：在不改变对象结构的前提下定义新的操作。</p><p>中介者模式：通过一个中介对象封装对象间交互，减少对象之间的耦合。</p><p>解释器模式：为语言定义文法并建立解释器，用于解释语言中的句子。</p><p>备忘录模式：在不破坏封装性的前提下保存并恢复对象的内部状态。</p><p>迭代器模式：提供一种方式顺序访问聚合对象中的元素，而不暴露其内部结构。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>系统架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Spring Boot 的 HTTP服务构建</title>
    <link href="/2025/07/16/%E5%9F%BA%E4%BA%8ESpring-Boot-%E7%9A%84-HTTP%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA/"/>
    <url>/2025/07/16/%E5%9F%BA%E4%BA%8ESpring-Boot-%E7%9A%84-HTTP%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="如何构建一个Web服务"><a href="#如何构建一个Web服务" class="headerlink" title="如何构建一个Web服务"></a>如何构建一个Web服务</h1><h2 id="架构与实现"><a href="#架构与实现" class="headerlink" title="架构与实现"></a>架构与实现</h2><p>web服务本身是一种 基于BS（Browser-Server）架构的服务提供模式。其中包含了</p><p>Browser（Web Proxy）： 面向客户的本地应用，提供连接管理，HTTP请求解析，本地存储等功能</p><p>HTTP ： 客户与服务器间通信的应用层协议，用于规范 用户和服务器间的请求&#x2F;响应格式和响应逻辑</p><p>Server  ： 运行于远端的监听程序，监听来自网络HTTP请求，并根据请求内心进行对应的动态或静态资源响应</p><p>数据过程</p><p><img src="https://i.111666.best/image/y21Ppv4vvuAX3DPm1Qso4e.png" alt="数据通信传输过程"></p><p>MAC（Media Access Controll）:  用于设备入网的唯一标识信息。（定义唯一性）</p><p>IP（Internet Protocol）: 用于网络寻址的设备网络信息。（入网后的可识别地址方便其他设备更好的查询到目标设备）</p><p>TCP（Transmission Control Protocol）:  用于承载上层的信息传输，它是可靠的（即提供了相关的机制保证了数据的一致性（但是无法解决网络故障导致的数据不一致）），流式的（通过滑动窗口完成的服务端-设备端的 数据写入&#x2F;写出过程）。</p><p>UDP （User Datagram Protocol）： 同样用于承载上层信息，但是它是不可靠的，只负责对上层数据进行简单封装，将其转发到对端，包式的（以数据包的形式进行数据传输）</p><p>SOCKET （套接字）： 用于完成对网络层的抽象，使上层只需要通过传递 网络协议族&#x2F;网络协议&#x2F;具体协议信息。 就可以完成网络连接的创建，它通过四元组来特别定义某一个具体的连接（源IP，源端口，目的IP，目的端口）。</p><p>I&#x2F;O  ：  由SOCKET 接收&#x2F;写入的内容会被存放在内核缓冲区，最终被通过网卡转发出去或被复制写入用户空间的缓冲区。这时受到的内容是一个字节数组。后续的应用层处理过程就需要对这些字节信息进行解释。</p><h2 id="应用层处理"><a href="#应用层处理" class="headerlink" title="应用层处理"></a>应用层处理</h2><p>如上所属。后续的处理过程主要是如何将接收到的字节数组进行反序列化的过程。</p><p>所以在现代服务器的实现和处理上 一般会分为两阶段</p><p>1.将字节数组 反序列化为符合目标协议的序列化内容 （如json）</p><p>2.对序列化内容进行识别处理</p><p>这里分别考虑 Java和Python的两种实现</p><h3 id="Python的web-规范——WSGI"><a href="#Python的web-规范——WSGI" class="headerlink" title="Python的web 规范——WSGI"></a>Python的web 规范——WSGI</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">application</span>(<span class="hljs-params">environ, start_response</span>):<br>    ...<br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">b&quot;response body&quot;</span>]<br></code></pre></td></tr></table></figure><p>通过wsgi规范，我们可以只关注 传递过来的 environ 即对请求的对象化封装和一个回调方法start_response , 这样只需要专注于处理请求中的内容，而不必再去考虑具体的解析过程。</p><h3 id="Java的web规范-———-Servlet"><a href="#Java的web规范-———-Servlet" class="headerlink" title="Java的web规范 ——— Servlet"></a>Java的web规范 ——— Servlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;<br>    <span class="hljs-comment">// 处理 GET 请求</span><br>&#125;<br></code></pre></td></tr></table></figure><p>servlet 接口定义了 http的处理过程， 接收一个HttpServletRequest 对象，并最终响应</p><p>一个HttpServletResponse 返回对象。然后 Servlet的容器（如tomcat，jetty）就可以遵守这个规范完成前置和后续的信息处理。</p><h1 id="Spring-Boot的HTTP服务构建"><a href="#Spring-Boot的HTTP服务构建" class="headerlink" title="Spring Boot的HTTP服务构建"></a>Spring Boot的HTTP服务构建</h1><p>Spring 相比传统的Servlet 实现-装配过程提供了</p><ol><li>内置Servlet容器。通过集成Servlet容器，到springboot 可以直接启动服务作为HTTP服务，不再需要打包为war包安装到servlet容器中</li><li>提供了丰富的过程化管理，通过接口实现可以完成对基础HTTP服务的功能扩展</li><li>提供了集成到外部sevlet容器的，扩展方案， 方便多场景下部署</li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><strong>一个基础的Spring Boot Web应用目录结构 ：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">--- java  <br>--- com.codfish.springweb <br>--- controller<br><span class="hljs-comment">//接收客户端请求（HTTP、RPC等）</span><br><span class="hljs-comment">//参数校验与转换</span><br><span class="hljs-comment">//调用 Service 层处理业务逻辑</span><br><span class="hljs-comment">//将业务处理结果封装为响应结果返回（如 JSON、XML）</span><br>--- service<br><span class="hljs-comment">//封装业务逻辑（处理、计算、组合等）</span><br><span class="hljs-comment">//协调多个 DAO 或远程服务调用</span><br>  <span class="hljs-comment">//处理事务管理（如增删改）</span><br>  --- repository<br><span class="hljs-comment">//执行增删改查操作（CRUD）</span><br><span class="hljs-comment">//屏蔽底层数据源的复杂性</span><br>--- entity<br><span class="hljs-comment">// 自配置类</span><br>--- resources<br>--- application.properties <br><span class="hljs-comment">// 放置服务所需的配置项信息</span><br></code></pre></td></tr></table></figure><h2 id="请求处理过程"><a href="#请求处理过程" class="headerlink" title="请求处理过程"></a>请求处理过程</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">浏览器请求<br>   ↓<br>前端控制器 DispatcherServlet（统一入口）<br>   ↓<br>HandlerMapping：查找匹配的控制器和拦截器链<br>   ↓<br>HandlerInterceptor（前置拦截器 preHandle）<br>   ↓<br>Controller（业务控制器）<br>   ↓<br>Service（业务逻辑）<br>   ↓<br>Repository/DAO（数据访问层）<br>   ↓<br>Controller 返回 ModelAndView 或 <span class="hljs-built_in">JSON</span> 对象<br>   ↓<br>HandlerInterceptor（后置拦截器 postHandle/afterCompletion）<br>   ↓<br>ViewResolver（视图解析器）<br>   ↓<br>视图层渲染（JSP/Thymeleaf/Freemarker 等）或直接返回 <span class="hljs-built_in">JSON</span><br>   ↓<br>DispatcherServlet 响应客户端<br></code></pre></td></tr></table></figure><h2 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer id ;<br>    <span class="hljs-keyword">private</span> String location ;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id,String name,String location)</span>&#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.location = location;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name,String location)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.location = location;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLocation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> location;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLocation</span><span class="hljs-params">(String location)</span> &#123;<br>        <span class="hljs-built_in">this</span>.location = location;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(Integer code, String message, T data)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(Integer code, String message)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Result&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;code=&quot;</span> + code +<br>                <span class="hljs-string">&quot;, message=&#x27;&quot;</span> + message + <span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27; +</span><br><span class="hljs-string">                &quot;, data=&quot; + data +</span><br><span class="hljs-string">                &#x27;</span>&#125;<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RestTemplate restTemplate;<br><span class="hljs-comment">// 定义一个 restTemplate 对象来收发HTTP请求</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderController</span><span class="hljs-params">(RestTemplateBuilder restTemplateBuilder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.restTemplate = restTemplateBuilder.build();<br>        <span class="hljs-comment">// 通过构造器获取restTemplate对象</span><br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br>    <span class="hljs-comment">// 绑定请求路径</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">order</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;http://localhost:8085/user/1&gt;&quot;</span>;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">forobject</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.restTemplate.getForObject(url, Result.class,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 使用 getForObject 将响应体转换为一个传入的对象结构</span><br>        <span class="hljs-keyword">return</span> forobject.getData().toString();<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;codfish&quot;</span>,<span class="hljs-string">&quot;hangzhou&quot;</span>);<br>    ResponseEntity&lt;Result&gt; responoseentity = <span class="hljs-built_in">this</span>.restTemplate.postForEntity(<span class="hljs-string">&quot;&lt;http://localhost:8085/user/add&quot;</span>,user,Result.class<span class="hljs-string">&quot;&gt;);</span><br><span class="hljs-string">    // 传输一个携带包头，响应状态码，响应体信息的结构</span><br><span class="hljs-string">    return responseentity.getBody().getData().toString();</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  </span><br><span class="hljs-string">    @RequestMapping(&quot;</span>/put<span class="hljs-string">&quot;)</span><br><span class="hljs-string">    public String put()&#123;</span><br><span class="hljs-string">    User user = new User(1,&quot;</span>codfish<span class="hljs-string">&quot;,&quot;</span>hangzhou<span class="hljs-string">&quot;);</span><br><span class="hljs-string">    HttpEntity&lt;User&gt; httpEntity = new HttpEntity&lt;&gt;(user);</span><br><span class="hljs-string">    // 创建一个 http 请求对象。解析user为json</span><br><span class="hljs-string">    ResponseEntity&lt;Result&gt; resultResponseEntity = restTemplate.exchange(&quot;</span>&lt;http:<span class="hljs-comment">//localhost:8085/user/&gt;&quot;+user.getId(), HttpMethod.PUT,httpentity,Result.class)</span><br>  <span class="hljs-comment">// 使用exchange 裸发送http 请求,指定 URL,请求方法,以及响应体中的json 转换定义。</span><br>  <span class="hljs-keyword">return</span> responseEntity.getBody().getData().toString();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 单元测试中使用 TestRestTemplate 创建对象</span><br><br><span class="hljs-meta">@SpringBootTest()</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">TestRestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestRestTemplate</span>();<br>ResponseEntity&lt;Result&gt;  resultResponseEntity = restTemplate.exchange(url,HTTP.get,result.class);<br><span class="hljs-keyword">return</span> resultResponseEntity.getBody().toString();<br>  <br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="应用于HTTP服务的一些注解"><a href="#应用于HTTP服务的一些注解" class="headerlink" title="应用于HTTP服务的一些注解"></a>应用于HTTP服务的一些注解</h2><p>@Controller标识一个类为控制器组件，返回的是视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/codfish&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodfishController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;codfish&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-comment">// 这里不会响应codfish 字段，而是查询对应的codfish 视图</span><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Codfish</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContentType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/html&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        response.getWriter().write(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Codfish&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-comment">// 视图实现</span><br><br></code></pre></td></tr></table></figure><p>@RestController是 @Controller + @ResponseBody 的缩写，用于构建 RESTful API，方法返回数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/codfish&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodfishController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;codfish&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-comment">// 最终将字符串&quot;codfish&quot; 作为返回响应</span><br></code></pre></td></tr></table></figure><p>@RequestMapping用于映射请求路径和方法（支持 GET&#x2F;POST&#x2F;PUT&#x2F;DELETE 等）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/codfish&quot;)</span>  <span class="hljs-comment">// 映射 &lt;http://x.x.x.x/codfish&gt; </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodfishController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.GET ,&quot;/test&quot;)</span>  <span class="hljs-comment">// 映射 &lt;http://x.x.x.x/codfish/test&gt; GET</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;codfish&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@GetMapping简化版 @RequestMapping(method &#x3D; RequestMethod.GET)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/codfish&quot;)</span>  <span class="hljs-comment">// 映射 &lt;http://x.x.x.x/codfish&gt; </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodfishController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span>  <span class="hljs-comment">// 映射 &lt;http://x.x.x.x/codfish/test&gt; GET</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;codfish&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@PostMapping简化版 @RequestMapping(method &#x3D; RequestMethod.POST)<br>@PutMapping简化版 @RequestMapping(method &#x3D; RequestMethod.PUT)<br>@DeleteMapping简化版 @RequestMapping(method &#x3D; RequestMethod.DELETE)<br>@PatchMapping简化版 @RequestMapping(method &#x3D; RequestMethod.PATCH)</p><p>@RequestParam绑定请求参数到方法参数（通常用于 GET&#x2F;POST 表单字段）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;keyword&quot;)</span> String keyword)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;搜索关键字是：&quot;</span> + keyword;<br>&#125;<br></code></pre></td></tr></table></figure><p>@PathVariable绑定 URI 路径中的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户ID：&quot;</span> + userId;<br>&#125;<br></code></pre></td></tr></table></figure><p>@RequestBody将请求体 JSON&#x2F;XML 数据绑定到方法参数（通常用于 POST&#x2F;PUT）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户名：&quot;</span> + user.getName();<br>&#125;<br></code></pre></td></tr></table></figure><p>@ResponseBody将返回值作为响应体输出，不经过视图解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>@ModelAttribute用于绑定表单提交的对象数据，也可用于提前在方法调用前处理模型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/register&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute</span> User user)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;注册用户：&quot;</span> + user.getName();<br>&#125;<br></code></pre></td></tr></table></figure><p>@RequestHeader绑定请求头字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/agent&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">userAgent</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;User-Agent&quot;)</span> String agent)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你的浏览器信息是：&quot;</span> + agent;<br>&#125;<br></code></pre></td></tr></table></figure><p>@CookieValue绑定 Cookie 中的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/showCookie&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCookie</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(&quot;token&quot;)</span> String token)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie中的Token值为：&quot;</span> + token;<br>&#125;<br></code></pre></td></tr></table></figure><p>@RequestPart用于处理 multipart&#x2F;form-data 请求中的文件或字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传文件名：&quot;</span> + file.getOriginalFilename();<br>&#125;<br></code></pre></td></tr></table></figure><p>@ResponseStatus自定义响应状态码（如返回 201、404 等）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseStatus(HttpStatus.NOT_FOUND)</span><br><span class="hljs-meta">@GetMapping(&quot;/notfound&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notFound</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 返回 404</span><br>&#125;<br></code></pre></td></tr></table></figure><p>@ExceptionHandler处理控制器层抛出的异常（单个异常处理）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">handleArithmetic</span><span class="hljs-params">(Exception e)</span> &#123;<br>    <span class="hljs-keyword">return</span> ResponseEntity.status(<span class="hljs-number">400</span>).body(<span class="hljs-string">&quot;出现数学错误: &quot;</span> + e.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><p>@ControllerAdvice全局异常处理器、数据绑定、模型属性注入等的集中配置组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalControllerAdvice</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(NullPointerException.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleNPE</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error/npe&quot;</span>; <span class="hljs-comment">// 跳转视图页面</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@RestControllerAdvice@ControllerAdvice + @ResponseBody，用于构建 REST 风格全局处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalRestAdvice</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(RuntimeException.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleRuntime</span><span class="hljs-params">(RuntimeException ex)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;全局异常：&quot;</span> + ex.getMessage();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>@SessionAttributes将模型属性存入 Session 范围中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@SessionAttributes(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/store&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">store</span><span class="hljs-params">(Model model)</span> &#123;<br>        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">20</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>@SessionAttribute从 Session 中获取属性绑定到方法参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/getUser&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserFromSession</span><span class="hljs-params">(<span class="hljs-meta">@SessionAttribute(&quot;user&quot;)</span> User user)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;从Session中获取到用户：&quot;</span> + user.getName();<br>&#125;<br></code></pre></td></tr></table></figure><p>@RequestAttribute绑定 request.setAttribute 设置的属性到方法参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/useAttr&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">useAttr</span><span class="hljs-params">(<span class="hljs-meta">@RequestAttribute(&quot;attr&quot;)</span> String value)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;请求中的属性值：&quot;</span> + value;<br>&#125;<br></code></pre></td></tr></table></figure><p>@InitBinder初始化数据绑定器，用于自定义参数绑定格式（如日期格式转换）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@InitBinder</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBinder</span><span class="hljs-params">(WebDataBinder binder)</span> &#123;<br>    binder.registerCustomEditor(Date.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomDateEditor</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>), <span class="hljs-literal">false</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>在SpringMVC 中可以通过实现 HandlerInterceptor接口创建一个拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(TimeInterceptor.class);<br>    LocalDateTime startTime;<br>    LocalDateTime endTime;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        startTime = LocalDateTime.now();<br>        logger.info(<span class="hljs-string">&quot;请求&quot;</span> + request.getRequestURI()+<span class="hljs-string">&quot;开始执行&quot;</span>+startTime+<span class="hljs-string">&quot;时间&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="hljs-meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception  &#123;<br>        endTime = LocalDateTime.now();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(startTime, endTime);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> duration.toMillis();<br>        logger.info(<span class="hljs-string">&quot;请求&quot;</span> + request.getRequestURI()+<span class="hljs-string">&quot;执行时间&quot;</span>+ l+<span class="hljs-string">&quot;毫秒&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>再通过实现WebMvcConfigurer 接口完成注册过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWebMvcConfigurer</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span>&#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/tuling&quot;</span>).setViewName(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry  registry)</span>&#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeInterceptor</span>())<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/pages/**&quot;</span>);<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LocaleChangeInterceptor</span>())<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title function_">localeResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">CookieLocaleResolver</span> <span class="hljs-variable">localeResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CookieLocaleResolver</span>();<br>        localeResolver.setCookieMaxAge(<span class="hljs-number">3600</span>);<br>        localeResolver.setCookieName(<span class="hljs-string">&quot;locale&quot;</span>);<br>        <span class="hljs-keyword">return</span> localeResolver;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注册消息转换器"><a href="#注册消息转换器" class="headerlink" title="注册消息转换器"></a>注册消息转换器</h2><p>Spring MVC 中允许 JSON 或XML 数据类型的请求格式可以自动转换为Java Bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonHttpMessageConvertersConfiguration</span>&#123;<br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(ObjectMapper.class)</span><br><span class="hljs-meta">@ConditionalOnBean(ObjectMapper.class)</span><br><span class="hljs-meta">@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRD_MAPPER_PROPERTY,</span><br><span class="hljs-meta">havingValue = &quot;jackson&quot;, matchIfMissing = true )</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MappingJackSon2HttpMessageConverterConfiguration</span>&#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(value = MappingJackson2HttpMessageConverter.class ,</span><br><span class="hljs-meta">ignoredType = &#123;</span><br><span class="hljs-meta">&quot;org.springframework.hateoas.server.mvc.TypeConstrainedMappingJackson2HttpMessageConverter&quot;,</span><br><span class="hljs-meta">&quot;org.springframework.data.rest.webmvc.alps.AplsJsonHttpMessageConverter&quot;&#125;)</span><br>MappingJackson2HttpMessageConverter <span class="hljs-title function_">mappingJackson2HttpMessageConverter</span><span class="hljs-params">(ObjectMapper objectMapper)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>(objectMapper);<br>&#125;<br>&#125;<br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(XmlMapper.class)</span><br><span class="hljs-meta">@ConditionalOnBean(Jaconson2ObjectMapperBuilder.class)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MappingJackson2XmlHttpMessageConverterConfiguration</span>&#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionOnMissingBean</span><br><span class="hljs-keyword">public</span> MappingJackson2XmlHttpMessageConverter <span class="hljs-title function_">mappingJackson2XmlHttpMessageConverter</span><span class="hljs-params">(</span><br><span class="hljs-params">Jackson2ObjectMapperBuilder builder)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2XmlHttpMessageConverter</span>(builder.createXmlMapper(<span class="hljs-literal">true</span>).build());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注册类型转换器"><a href="#注册类型转换器" class="headerlink" title="注册类型转换器"></a>注册类型转换器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFormatters</span><span class="hljs-params">(FormatterRegistry registry)</span>&#123;<br>registry.addCoverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomConverter</span>());<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String,String&gt;&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span>&#123;<br><span class="hljs-keyword">if</span>(StringUtils.isNotEmpty(source))&#123;<br>source = source.trim();<br>&#125;<br><span class="hljs-keyword">return</span> source ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注册MVC组件"><a href="#注册MVC组件" class="headerlink" title="注册MVC组件"></a>注册MVC组件</h2><h3 id="静态注册-Servlet"><a href="#静态注册-Servlet" class="headerlink" title="静态注册 Servlet"></a>静态注册 Servlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> getServletConfig().getInitParameter(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> getServletConfig().getInitParameter(<span class="hljs-string">&quot;sex&quot;</span>);<br><br>resp.getOutputStream().println(<span class="hljs-string">&quot;name is&quot;</span> + name);<br>resp.getOutputStream().println(<span class="hljs-string">&quot;sex is&quot;</span> + sex);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//创建Bean对servlet进行注册</span><br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">registerServlet</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ServletRegistrationBean</span> <span class="hljs-variable">servletRegistrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">RegisterServlet</span>(),<span class="hljs-string">&quot;/registerServlet&quot;</span>);<br>servletRegistrationBean.addInitParameter(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;javastack&quot;</span>);<br>servletRegistrationBean.addInitParameter(<span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>);<br><span class="hljs-keyword">return</span> servletRegistrationBean;<br>)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态注册-Servlet"><a href="#动态注册-Servlet" class="headerlink" title="动态注册 Servlet"></a>动态注册 Servlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse reps)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> getServletConfig().getInitParameter(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> getServletConfig().getInitParameter(<span class="hljs-string">&quot;sex&quot;</span>);<br><br>resp.getOutputStream().println(<span class="hljs-string">&quot;name is &quot;</span>+ name);<br>resp.getOutputStream().println(<span class="hljs-string">&quot;sex is &quot;</span> + sex);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServetletConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextInitializer</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartup</span><span class="hljs-params">(ServletContext servletContext)</span>&#123;<br><span class="hljs-type">ServletRegistration</span> <span class="hljs-variable">initServlet</span> <span class="hljs-operator">=</span> servletContext<br>.addServlet(<span class="hljs-string">&quot;initServlet&quot;</span>, InitServlet.class);<br>initServlet.addMapping(<span class="hljs-string">&quot;/initServlet&quot;</span>);<br>initServlet.setInitParameter(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;initServlet&quot;</span>);<br>initServlet.setInitParameter(<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-string">&quot;male&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ServletContextInitializer <span class="hljs-title function_">servleContextInitializer</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> (servletContext) -&gt; &#123;<br><span class="hljs-type">ServletRegistration</span> <span class="hljs-variable">initServlet</span> <span class="hljs-operator">=</span> servletContext.addServlet(<span class="hljs-string">&quot;initServlet&quot;</span>, InitServlet.class);<br>initServlet.addMapping(<span class="hljs-string">&quot;/initServlet&quot;</span>);<br>initServlet.setInitParameter(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;initServlet&quot;</span>);<br>initServlet.setInitParameter(<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-string">&quot;male&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="使用ControllerAdvice进行全局异常处理"><a href="#使用ControllerAdvice进行全局异常处理" class="headerlink" title="使用ControllerAdvice进行全局异常处理"></a>使用ControllerAdvice进行全局异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span>&#123;<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@ExceptionHandler(value = &#123; Exception.class &#125;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;?&gt; handleException(HttpServletRequest request, Throwable ex)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(<span class="hljs-string">&quot;global exception&quot;</span>, HttpStatus.OK);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用视图或restapi接口响应异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span><br><span class="hljs-comment">// 当请求的资源类型为TEXT_HTML_VALUE时进行的处理</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">errorHtml</span><span class="hljs-params">(HttpServletRequest request , HttpServletResponse response)</span>&#123;<br><span class="hljs-comment">// 定义一个函数，最终响应一个视图作为返回</span><br><span class="hljs-type">HttpStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> getStatus(request);<br>Map&lt;String,Object&gt; model = Collections <br>.unmodifiableMap(getErrorAttributes(request , getErrorAttributeOptions(request,MediaType.TEXT_HTML)));<br>response.setStatus(status.value());<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> resolveErrorView(request, response, status ,model);<br><span class="hljs-comment">// 查询对应的异常视图</span><br><span class="hljs-keyword">return</span> (modelAndView !=<span class="hljs-literal">null</span>) ? modelAndView : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;error&quot;</span>, model) ; <br><span class="hljs-comment">// 如果视图为空则使用指定视图，如果存在 则返回视图给客户端</span><br>&#125;<br>...<br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request , HttpServletResponse response ,</span><br><span class="hljs-params">Map&lt;String ,Object&gt; model )</span>&#123;<br><span class="hljs-keyword">for</span> (ErrorViewResolver resolver : <span class="hljs-built_in">this</span>.errorViewResolvers)&#123;<br><span class="hljs-comment">// 遍历所有的视图解释器</span><br> <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span>  <span class="hljs-operator">=</span> resolver.resolverErrorView(request, status , model);<br> <span class="hljs-keyword">if</span>(modelAndView !=<span class="hljs-literal">null</span>)&#123;<br> <span class="hljs-keyword">return</span> modelAndView ;<br> &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>&#125;<br>...<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request ,  HttpStataus status , Map&lt;String ,Object&gt; model)</span>&#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> resolve(String.valueOf(status.value()),model);<br><span class="hljs-keyword">if</span>(modelAndView == <span class="hljs-literal">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series()))&#123;<br><span class="hljs-comment">// 在每个具体的视图解释器中查询响应信息，匹配响应信息并返回</span><br>modelAndView = resolve(SERIES_VIEW.get(status.series()),model);<br>&#125;<br><span class="hljs-keyword">return</span> modelAndView ;<br>&#125;<br>...<br><span class="hljs-keyword">private</span>  ModelAndView <span class="hljs-title function_">resolve</span><span class="hljs-params">(String viewName , Map&lt;String, Object&gt; model)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">errorViewName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;error/&quot;</span> + viewName;<br><span class="hljs-comment">// Spring 默认的 异常视图处理</span><br><span class="hljs-type">TemplateAvailabilityProvider</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span>  <span class="hljs-built_in">this</span>.templateAvailabilityProviders.getProvider(errorViewName,<br><span class="hljs-built_in">this</span>.applicationContext);<br><span class="hljs-keyword">if</span>(provider != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(errorViewName , model);<br>&#125;<br><span class="hljs-keyword">return</span> resolveResource(errorViewName , model);<br>&#125;<br>...<br><span class="hljs-keyword">private</span> ModelAndView <span class="hljs-title function_">resolveResoure</span><span class="hljs-params">(String viewName, Map&lt;String , Object&gt; model)</span>&#123;<br><span class="hljs-keyword">for</span>(String location : <span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations())&#123;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationContext.getResource(location);<br>resource = resource.createRelative(viewName + <span class="hljs-string">&quot;.html&quot;</span>);<br><span class="hljs-comment">// 从资源地址查询静态资源</span><br><span class="hljs-keyword">if</span>(resource.exists())&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlResourceView</span>(resource),model);<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span>(Exception ex)&#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>&#125;<br>...<br><span class="hljs-keyword">protected</span> ErrorAttributeOptions <span class="hljs-title function_">getErrorAttributeOptions</span><span class="hljs-params">(HttpServletRequest request,MediaType mediaType)</span>&#123;<br><span class="hljs-type">ErrorAttributeOptions</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> ErrorAttributeOptions.defaults();<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.errorProperties.isIncludeException())&#123;<br>options = options.including(Include.EXCEPTION);<br>&#125;<br><span class="hljs-keyword">if</span>(isIncludeStatckTrace(request), mediaType)&#123;<br>options = options.including(Include.STACK_TRACE);<br>&#125;<br><span class="hljs-keyword">if</span>(isIncludeMessag(request,mediaType))&#123;<br>options = options.including(Include.MESSAGE);<br>&#125;<br><span class="hljs-keyword">if</span>(isIncludeBindingErrors(request,mediaType))&#123;<br>options = options.including(Include.BINDING_ERRORS);<br>&#125;<br><span class="hljs-keyword">return</span> options ;<br>&#125;<br>...<br><br><span class="hljs-meta">@RequestMapping</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Map&lt;String , Object&gt;&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br><span class="hljs-type">HttpStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> getStatus(request);<br><span class="hljs-keyword">if</span>(status == HttpStatus.NO_CONTENT)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(status);<br>&#125;<br>Map&lt;String,Object&gt; body = getErrorAttributes(request,getErrorAttributeOptions(request, MediaType.ALL));<br><span class="hljs-comment">// 获取 异常信息</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(body,status);<br><span class="hljs-comment">// 直接返回接口响应</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>国际化是指根据用户请求，向用户响应不同的响应信息</p><p><strong>请求语言获取途径</strong></p><ol><li>通过头部携带的session,cookie,accept-languaget Header等字段  检索&#x2F;确认国际化请求</li><li>通过get请求中的 “?locale&#x3D; “字段 确认国家化请求</li></ol><p><strong>核心实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfiguration</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = AbstractApplicationContext.MESSAGE_SOURCE_BEAN_NAME, search = SerarchStrategy.CURRENT)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="hljs-comment">// @Conditional 自定义条件匹配，会传入一个实现了Condition接口的类-ResouceBudleCondition</span><br><span class="hljs-comment">// ResourceBundleCondition 会重写matches 方法，自定义匹配规则，返回true 则成功</span><br><span class="hljs-meta">@Conditional(ResourceBundleCondition.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageSourceAutoConfiguration</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Resource[] NO_RESOURCES = &#123;&#125;;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span><br><span class="hljs-keyword">public</span> MessageSourceProperties <span class="hljs-title function_">messageSourceProperties</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageSourceProperties</span>();<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageSource <span class="hljs-title function_">messageSource</span><span class="hljs-params">(MessageSourceProperties properties)</span>&#123;<br><span class="hljs-type">ResourceBundleMessageSource</span> <span class="hljs-variable">messageSource</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceBundleMessageSource</span>();<br><span class="hljs-keyword">if</span>(StringUtils.hasText(properties.getBasename()))&#123;<br>messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));<br><span class="hljs-keyword">if</span>(properties.getEncoding()!= <span class="hljs-literal">null</span>)&#123;<br>messageSource.setDefaultEncoding(properties.getEncoding().name());<br>&#125;<br>messageSource.setFallbackToSystemlocale(prperties.isFallbackToSystemLocaole());<br><span class="hljs-type">Duration</span> <span class="hljs-variable">cacheDuration</span> <span class="hljs-operator">=</span> properties.getCacheDuration();<br><span class="hljs-keyword">if</span>(cacheDuration != <span class="hljs-literal">null</span>)&#123;<br>messageSource.setCacheMillis(cacheDuration.toMillis());<br>&#125;<br>messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());<br><span class="hljs-type">Duration</span> <span class="hljs-variable">cacheDuration</span> <span class="hljs-operator">=</span> properties.getCacheDuration();<br><span class="hljs-keyword">if</span>(cacheDuration != <span class="hljs-literal">null</span>) &#123;<br>messageSource.setCacheMillis(cacheDuration.toMillis());<br>&#125;<br>messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());<br>messageSource.setUseCodeAsDefaultMessage(properites.isUseCodeAsDefaultMessage());<br><span class="hljs-keyword">return</span> messageSource;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过注册一个MessageSource 实例，使用spring.message.*完成自动配置</p><p>通过match 方法来查询是否存在对应的语言配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context , AnnotatedTypeMetadata metdata)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">classOrMethodName</span> <span class="hljs-operator">=</span> getClassOrMethodName(metadata);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ConditionOutcome</span> <span class="hljs-variable">outcome</span> <span class="hljs-operator">=</span> getMatchOutcome(context , metadata);<br><span class="hljs-comment">// 通过getMatchOutcone 方法获取匹配结果</span><br>logOutcome(classOrMethodName , outcome);<br>recordEvaluation(context , classOrMethodName,outcome);<br><span class="hljs-keyword">return</span> outcome.isMatch(); <br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ConditionOutcome <span class="hljs-title function_">getMatchOutcome</span><span class="hljs-params">(ConditionContext context , AnnotatedTypeMetadata metadata)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">basename</span> <span class="hljs-operator">=</span> context.getEnviroment().getProperty(<span class="hljs-string">&quot;spring.message.basename&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>);<br><span class="hljs-comment">// 获取环境信息中存储的对应的国际化资源文件</span><br><span class="hljs-type">ConditionOutcome</span> <span class="hljs-variable">outcome</span> <span class="hljs-operator">=</span> cache.get(basename);<br><span class="hljs-comment">// 加载到内存</span><br><span class="hljs-keyword">if</span>(outcome == <span class="hljs-literal">null</span>) &#123;<br>outcome = getMatchOutcomeForBasename(context,basename);<br><span class="hljs-comment">// 调用getMatchOutcomeForBasename 检查是否存在资源文件</span><br>cache.put(basename,outcome);<br>&#125;<br><span class="hljs-keyword">return</span> outcome ;<br>&#125;<br><br><span class="hljs-keyword">private</span> ConditionOutcome <span class="hljs-title function_">getMatchOutcomeForBasename</span><span class="hljs-params">(ConditionContext context , String basename)</span>&#123;<br>ConditionMessage.<span class="hljs-type">Builder</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> ConditionMessage.forCondition(<span class="hljs-string">&quot;ResourceBundle&quot;</span>);<br><span class="hljs-keyword">for</span> (String name : StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(basename)))&#123;<br><span class="hljs-keyword">for</span>(Resource resource : getResouce(context.getClassLoader(),name))&#123;<br><span class="hljs-keyword">if</span>(resouce.exists())&#123;<br><span class="hljs-comment">// 检查路径中是否存在资源文件</span><br><span class="hljs-keyword">return</span> ConditionOutcome.match(message.found(<span class="hljs-string">&quot;bundle&quot;</span>).items(resource));<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ConditionOutcome.noMatch(message.didNotFind(<span class="hljs-string">&quot;bundle with basename&quot;</span>+basename).atAll());<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过注册LocaleResolver 区域解析器完成 国际化切换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-meta">@ConditionOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span><br><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title function_">localeResolver</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">// 配置spring.mvc.locale-resolver=fixed</span><br><span class="hljs-comment">// spring.mvc.locale= en_US </span><br><span class="hljs-comment">// 使用配置文件中的本地化语言</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FixedLocaleResolver</span>(<span class="hljs-built_in">this</span>.mvcProperties.getLocale());<br>&#125; <br><span class="hljs-comment">// 默认使用AcceptHeaderLocaleResolver作为本地化解析器</span><br><span class="hljs-type">AcceptHeaderLocaleResolver</span> <span class="hljs-variable">localeResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AcceptHeaderLocaleResolver</span>();<br><span class="hljs-comment">// 设置 sping.mvc.locale = en_US 作为默认本地化语言</span><br>localeResolver.setDefaultLocale(<span class="hljs-built_in">this</span>.mvcProperties.getLocale());<br><span class="hljs-keyword">return</span> localResolver; <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Servlet容器加载过程"><a href="#Servlet容器加载过程" class="headerlink" title="Servlet容器加载过程"></a>Servlet容器加载过程</h1><p>servlet 容器注入的多种方法</p><p><strong>实现WebServerFactoryCustomizer 接口，对内置容器进行配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customize</span><span class="hljs-params">(ConfigurableServletWebServerFactory factory)</span> &#123;<br>    factory.setContextPath(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">SpringApplication</span> <span class="hljs-variable">springApplication</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(CustomizationBean.class);<br>    springApplication.run(args);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>自行定义一个容器 ，作为bean纳入spring 管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean&lt;BeanServlet&gt; <span class="hljs-title function_">servletRegistrationBean</span><span class="hljs-params">()</span>&#123;<br>        ServletRegistrationBean&lt;BeanServlet&gt; bean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>&lt;&gt;();<br>        <span class="hljs-comment">//声明一个注册器bean</span><br>        bean.setServlet(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanServlet</span>());<br>        <span class="hljs-comment">//设置Servlet</span><br>        bean.setName(<span class="hljs-string">&quot;BeanServlet&quot;</span>);<br>        <span class="hljs-comment">// 设置名字</span><br>        bean.addUrlMappings(<span class="hljs-string">&quot;/BeanServlet&quot;</span>);<br>        <span class="hljs-comment">// 设置资源绑定路径</span><br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现一个HttpServlet接口，即自定义一套路由处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name=&quot;HelloServlet&quot;,urlPatterns = &quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        writer.println(<span class="hljs-string">&quot;HelloServlet.doGet&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Servlet的自动装配 由@EnableAutoConfiguration注解触发</p><p>@EnableAutoConfiguration 会触发AutoConfigurationImportselector 检索SPI路径中声明的需要装备的配置类。调用 ServletWebServerFactoryAutoConfiguration 完成Servlet容器的自动装配过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="hljs-meta">@ConditionOnClass(ServletRequest.class)</span><br><span class="hljs-comment">// 在类路径中存在ServletRequest.class 才会被加载</span><br><span class="hljs-meta">@ConditionOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@EnableConfigurationProperties(ServerProperties.class)</span><br><span class="hljs-meta">@Import(&#123;ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span><br><span class="hljs-meta">ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span><br><span class="hljs-meta">ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span><br><span class="hljs-meta">ServletWebServerFactoryConfiguration.EmbeddedUndertow.class,</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-comment">// 导入嵌入的servlet 容器类，进行初始化过程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletWebServerFactoryAutoConfiguration</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>对应的servlet容器初始化过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(</span><br><span class="hljs-meta">    proxyBeanMethods = false</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123;Servlet.class, Tomcat.class, UpgradeProtocol.class&#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(</span><br><span class="hljs-meta">    value = &#123;ServletWebServerFactory.class&#125;,</span><br><span class="hljs-meta">    search = SearchStrategy.CURRENT</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmbeddedTomcat</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    TomcatServletWebServerFactory <span class="hljs-title function_">tomcatServletWebServerFactory</span><span class="hljs-params">(ObjectProvider&lt;TomcatConnectorCustomizer&gt; connectorCustomizers, ObjectProvider&lt;TomcatContextCustomizer&gt; contextCustomizers, ObjectProvider&lt;TomcatProtocolHandlerCustomizer&lt;?&gt;&gt; protocolHandlerCustomizers)</span> &#123;<br>        <span class="hljs-type">TomcatServletWebServerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TomcatServletWebServerFactory</span>();<br>        factory.getTomcatConnectorCustomizers().addAll(connectorCustomizers.orderedStream().toList());<br>        <span class="hljs-comment">// 获取容器配置信息，完成配置</span><br>        factory.getTomcatContextCustomizers().addAll(contextCustomizers.orderedStream().toList());<br>        factory.getTomcatProtocolHandlerCustomizers().addAll(protocolHandlerCustomizers.orderedStream().toList());<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当存在ServletWebServerFactory时 ， 不再加载内置容器 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ServiceWebServerFactoryCustomizer <span class="hljs-title function_">servletWebServerFactoryCustomizer</span><span class="hljs-params">(ServerProperties serverProperties)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServicetWebServerFactoryCustomizer</span>(serverProperties);<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义的容器类和内嵌tomcat 都继承自 <code>WebServerFactory</code> 创建对应的容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customize</span><span class="hljs-params">(ConfigurationServletWebServerFactory factory)</span>&#123;<br><span class="hljs-type">PropertyMapper</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> PropertyMapper.get().alwaysApplyingWhenNonNull();<br><span class="hljs-comment">/* if(serverProperties.getPort()!=null)&#123;</span><br><span class="hljs-comment">factor.serPort(serverProperties.getPort())</span><br><span class="hljs-comment">&#125; */</span><br>map.from(<span class="hljs-built_in">this</span>.serverProperties::getPort).to(factory::setPort);<br>map.from(<span class="hljs-built_in">this</span>.serverProperties::getAddress).to(factory::setAddress);<br>map.from(<span class="hljs-built_in">this</span>.serverProperties::getServlet()::getContextPath).to(factory::setContextPath);<br>map.from(<span class="hljs-built_in">this</span>.serverProperties::getServlet()::getApplicationDisplayName).to(factory::setDisplayName);<br>map.from(<span class="hljs-built_in">this</span>.serverProperties::getServlet()::isRegisterDefaultServlet).to(factory::setRegisterDefaultServlet);<br>map.from(<span class="hljs-built_in">this</span>.serverProperties::getServlet()::getSession).to(factory::setSession);<br>map.from(<span class="hljs-built_in">this</span>.serverProperties::getSsl).to(factory::setSsl);<br>map.from(<span class="hljs-built_in">this</span>.serverProperties.getServlet()::getJsp).to(factory::setJsp);<br>&#125;<br></code></pre></td></tr></table></figure><p>从配置文件中获取信息，配置到容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata,</span><br><span class="hljs-params">BeanDefinitionRegistry registry)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.beanFactory == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>registerSyntheticBeanIfMissing(registry, WebServerFactoryCustomizerBeanPostProcessor.class);<br>registerSyntheticBeanIfMissing(registry, ErrorPageRegistrarBeanPostProcessor.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用注册器，将对应的servlet容器 加入到Spring中进行管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Collection&lt;WebServerFactoryCustomizer&lt;?&gt;&gt; getCustomizers()&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.customizers == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-built_in">this</span>.customizers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(getWebServerFactoryCustomizerBeans());<br><span class="hljs-built_in">this</span>.customizers.sort(AnnotationAwareOrderComparator.INSTANCE);<br><span class="hljs-built_in">this</span>.customizers = Collections.unmodifiableList(<span class="hljs-built_in">this</span>.customizers);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.customizers;<br>&#125;<br></code></pre></td></tr></table></figure><p>将所有servlet容器 放入容器中管理，之后调用 每个具体容器实现的customize()方法完成响应容器的配置初始化</p><p>在对应embedding启动时， 会在里面配置一个WebServerFactory类型的一个Bean 负责对应的容器和启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean , String beanName)</span> <span class="hljs-keyword">throws</span> BeansException&#123;<br><span class="hljs-comment">// 判断当前创建的bean 是不是配置类型</span><br><span class="hljs-keyword">if</span>(bean instance of WebServerFactory)&#123;<br>postProcessBeforeInitialization((WebServerFactory) bean);<br>&#125;<br><span class="hljs-keyword">return</span> bean ;<br>&#125;<br></code></pre></td></tr></table></figure><p>自动配置中根据不同的依赖，启动对应的一个Embeded ， 然后配置了一个对应的servlet容器工厂类</p><p>在springboot应用启动的时候 就回调用容器refresh方法，调用getWebServer 并启动</p><h1 id="使用外部servlet-容器"><a href="#使用外部servlet-容器" class="headerlink" title="使用外部servlet 容器"></a>使用外部servlet 容器</h1><p>1 下载tomcat服务</p><p>2 设置maven打包方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3 设置tomcat相关依赖不参与打包部署</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4 配置启动类定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">public class TomcatStartSpringBoot extends SpringBootServletInitializer&#123;<br>@Override<br>protected SpringApplicationBuilder configure(SpringApplicationBuilder builder)&#123;<br>return builder.sources(Application.class);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5 在idea中运行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">配置 URL <br>选择tomcat版本<br>指定 部署war包<br></code></pre></td></tr></table></figure><p>外部容器启动原理</p><p>打包后指定启动类 对java程序进行启动</p><p>tomcat不会主动启动Spring 应用，所以在启动过程中tomcat 调用了SpringBootServletInitializer的SpringApplicationBuilder 。</p><p>当servlet容器启动的时候 就会去META-INF&#x2F;services文件夹中找到javax.servlet.ServletContainerInitializer 这个文件对应绑定了ServletContainerInitalizer.从该文件中找到对应的实现类创建实例，调用 on startup</p><p>tomcat → 启动WEB-INF&#x2F;lib  → 查找对应接口的实现类</p><p>WebApplicationInitializer</p><p>AbstractContextLoaderInitialzer  SpringBootServletInitializer</p><p>AbstractDispatcherServerletInitializer TomcatStartSpringBoot</p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot  基础，配置与启动</title>
    <link href="/2025/07/15/Spring-Boot-%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%90%AF%E5%8A%A8/"/>
    <url>/2025/07/15/Spring-Boot-%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-核心思想"><a href="#Spring-Boot-核心思想" class="headerlink" title="Spring Boot 核心思想"></a>Spring Boot 核心思想</h1><blockquote><p>基于Spring框架派生的脚手架</p></blockquote><p>SpringBoot 提供了各种技术组件的一站式启动器，开发者只要定义好对应技术组件的配置参数，SpringBoot 就会进行自动配置</p><p>SpringBoot 框架的核心思想是：约定大于配置，即按照约定进行编程</p><p>1.独立运行</p><p>Spring Boot通过内置servlet容器 可以直接完成 web应用的部署</p><p>2.简化配置</p><p>通过注解和SPI的方法简化了配置过程，并且允许用户自定义自动配置启动的部署过程。</p><p>3.自动配置</p><p>提供了自动配置功能，通过自动配置注解完成 对应对应依赖的查询，实例化以及装载过程，可以快速的开箱即用</p><h1 id="配置类定义"><a href="#配置类定义" class="headerlink" title="配置类定义"></a>配置类定义</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">使用SpringBootConfiguration注解 定义SpringBoot 配置类<br></code></pre></td></tr></table></figure><p>SpringBootConfiguration 只是Cofiguration 注解的别名，用于区分SpringBoot与原生Spring应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Taget(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Indexed</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration&#123;<br><span class="hljs-meta">@AliasFor(annotation = Configuration.class)</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">proxyBeanMethods</span><span class="hljs-params">()</span>  <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><p>application (注册.properties 文件到spring项目中，从文件中读取字符串信息用于对对象进行赋值)</p><p>springboot 通过查询 配置文件信息加载值到对应的bean变量声明中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONFIG_NAME_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.config.name&quot;</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] DEFAULT_CONFIG_NAMES = &#123; <span class="hljs-string">&quot;application&quot;</span> &#125;;<br></code></pre></td></tr></table></figure><p>配置格式</p><p>.properties ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">server.port = <span class="hljs-number">8080</span><br>server.servlet.contextPath = /javastack <br></code></pre></td></tr></table></figure><p>.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">server : <br>port : <span class="hljs-number">8080</span><br>servlet :<br>contextPath : /javastack<br></code></pre></td></tr></table></figure><h2 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h2><p>bootstrap 文件用于在加载阶段，为Spring Cloud 项目提供环境配置信息</p><h2 id="向Bean对象中进行注入"><a href="#向Bean对象中进行注入" class="headerlink" title="向Bean对象中进行注入"></a>向Bean对象中进行注入</h2><p>使用@Value注解 和 Spel 表达式完成 值对属性的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;user.username&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String username ;<br><br><span class="hljs-meta">@Value(&quot;$&#123;user.age&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br><br><span class="hljs-meta">@Value(&quot;$&#123;user.sex&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sex ; <br></code></pre></td></tr></table></figure><p>使用@PropertySource 执行需要注入的properties文件(默认application.properties)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@PropertySource(value = &#123;&quot;config/db-config.properties&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DbProperties</span> &#123;<br><span class="hljs-meta">@Value(&quot;$&#123;db.username&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String username ;<br><span class="hljs-meta">@Value(&quot;&#123;db.password&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String password ;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 @ConfigurationProperties 完成注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties( prefix =&quot;javastack&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavastackProperties</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> enabled ;<br><span class="hljs-keyword">private</span> String name ;<br><span class="hljs-keyword">private</span> String site ;<br><span class="hljs-keyword">private</span> String author ;<br><span class="hljs-keyword">private</span> List&lt;String&gt; users ;<br><span class="hljs-keyword">private</span> Map&lt;String , String&gt; params ;<br><span class="hljs-keyword">private</span> Security security ;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在启动类中添加@EnableConfigurationProperties 注解，用于从目标类中创建&#x2F;配置Bean ，如果有需要将该Bean注入到 被注解类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-meta">@EnableConfigurationProperties(value = &#123;JavastackProperties.class&#125;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JavastackProperties  javastatckProperties ;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CommandLineRunner <span class="hljs-title function_">commandLineRunner</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span>( args ) -&gt; &#123;<br>log.info(<span class="hljs-string">&quot;javastack properties:&#123;&#125;&quot;</span>, javastackProperties);<br>&#125;;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="构造器绑定"><a href="#构造器绑定" class="headerlink" title="构造器绑定"></a>构造器绑定</h2><p>定义配置参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">member :<br> name : Tom<br> sex : <span class="hljs-number">1</span><br> age : <span class="hljs-number">18</span><br> birthday : <span class="hljs-number">2000</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">12</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <br></code></pre></td></tr></table></figure><p>创建一个MemberProperties参数类进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;member&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberProperties</span> &#123;<br><span class="hljs-keyword">private</span> String name ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sex ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br><span class="hljs-keyword">private</span> String country ;<br><span class="hljs-keyword">private</span> Date birthday ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MemberProperties</span><span class="hljs-params">(String name , <span class="hljs-type">int</span> sex , <span class="hljs-type">int</span> age)</span>&#123;<br> <span class="hljs-built_in">this</span>.name = name ;<br> <span class="hljs-built_in">this</span>.sex = sex ;<br> <span class="hljs-built_in">this</span>.age = age ;<br>&#125;<br><span class="hljs-meta">@ConstructorBinding</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MemberProperties</span><span class="hljs-params">(String name , </span><br><span class="hljs-params">                        <span class="hljs-type">int</span> sex , </span><br><span class="hljs-params">                        <span class="hljs-type">int</span> age , </span><br><span class="hljs-params"><span class="hljs-meta">@DefaultValue(&quot;Chiane&quot;)</span> String country ,</span><br><span class="hljs-params"><span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> Date birthday)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name ;<br><span class="hljs-built_in">this</span>.sex = sex ;<br><span class="hljs-built_in">this</span>.age = age ;<br><span class="hljs-built_in">this</span>.country = country ;<br><span class="hljs-built_in">this</span>.birthday = birthday ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在@Bean 中使用 @ConfigurationProperties 完成 属性配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherMember</span> &#123;<br><span class="hljs-keyword">private</span> String name ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sex ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br>&#125;<br><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainConfig</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;member&quot;)</span><br><span class="hljs-keyword">public</span> OtherMember <span class="hljs-title function_">otherMember</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OtherMember</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在应用类中进行 相关调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-meta">@EnableConfigurationProperties(value = &#123;JavastackProperties.class, MemberProperties.class&#125;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JavastackProperties javastackProperties ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MemberProperties memberProperties ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> OtherMember otherMember ;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CommandLineRunner <span class="hljs-title function_">commandLineRunner</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> (args) -&gt; &#123;<br>log.info(<span class="hljs-string">&quot;javastack properties : &#123;&#125;&quot;</span>, javastackProperties);<br>log.info(<span class="hljs-string">&quot;member properties : &#123;&#125;&quot;</span>, memberProperties);<br>log.info(<span class="hljs-string">&quot;other member: &#123;&#125;&quot;</span>, otherMember);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参数类扫描"><a href="#参数类扫描" class="headerlink" title="参数类扫描"></a>参数类扫描</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-meta">@ConfigurationPropertiesScan</span> <span class="hljs-comment">// 扫描当前包中的配置类信息</span><br><span class="hljs-meta">@Slf4j</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><p>使用profile指定环境配置信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">spring :<br>profiles :<br><span class="hljs-keyword">default</span> : dev <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">spring : <br>profiles :<br>active : dev, test<br></code></pre></td></tr></table></figure><p>加载对应的Profile信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Profile(&quot;main&quot;)</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@Import(&#123;Configuration1.class , Configuration2.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainConfig</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><h3 id="Spring-Boot的自动装配过程"><a href="#Spring-Boot的自动装配过程" class="headerlink" title="Spring Boot的自动装配过程"></a>Spring Boot的自动装配过程</h3><p>SpringBoot 通过 @EnableAutoConfiguration完成自动装配过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@AutoConfigurationPackeage</span><br><span class="hljs-comment">// 注册需要自动配置的包，如果不指定技术当前注解所在的包</span><br><span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span><br><span class="hljs-comment">// 导入配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.boot.enableautoconfiguration&quot;</span>;<br><br>Class&lt;?&gt;[]  exclude() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现的ImportSelector 接口描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImportSelector</span>&#123;<br>String[] selectImports(AnnotationMetadata importingClassMetadata);<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">default</span> Predicate&lt;String&gt; <span class="hljs-title function_">getExclusionFilter</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata)&#123;<br><span class="hljs-keyword">if</span>(!isEnabled(annotationMetadata))&#123;<br><span class="hljs-keyword">return</span> NO_IMPORTS;<br>&#125;<br><span class="hljs-type">AutoConfigurationEntry</span> <span class="hljs-variable">autoConfigurationEntry</span> <span class="hljs-operator">=</span> getAutoConfigurationEntry(annotationMetadata);<br><span class="hljs-keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());<br>&#125;<br></code></pre></td></tr></table></figure><p>在2.7中的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata,</span><br><span class="hljs-params">AnnotationAttributes attributes)</span> &#123;<br><span class="hljs-comment">//1.获取自动配置列表（Spring Boot 2.7）</span><br>List&lt;String&gt; configurations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<br>SpringFactories.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()));<br><span class="hljs-comment">//2.导入候选自动配置列表</span><br>ImportCanditates.load(AutoConfiguration.class , getBeanClassLoader()).forEach(configurations::add);<br>Assert.notEmpty(configurations,<span class="hljs-string">&quot;No auto configuration classes found ...&quot;</span>);<br><span class="hljs-keyword">return</span> configurations;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.0 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMedata metadata,</span><br><span class="hljs-params">AnnotationAttributes attributes)</span>&#123;<br>List&lt;String&gt; configurations = ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader())<br>.getCandidates();<br>Assert.notEmpty(configurations,<span class="hljs-string">&quot;No auto configuration classes found ...&quot;</span>);<br><span class="hljs-keyword">return</span> configurations;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">LoadFactoryNames</span><span class="hljs-params">(Class&lt;?&gt; factoryType , <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br><span class="hljs-keyword">return</span> forDefaultResourceLoader(classLoader).loadFactory(factoryType);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SpringFactoriesLoader <span class="hljs-title function_">forDefaultResourceLocation</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span>&#123;<br><span class="hljs-keyword">return</span> forResourceLocation(classLoader, FACTORIES_RESOURCE_LOCATION);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FACTORIES_RESOURCE_LOCATION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SpringFactoriesLoader <span class="hljs-title function_">forResourceLocation</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ClassLoader classLoader, String resrouceLocation)</span>&#123;<br>Assert.hasText(resourceLocation, <span class="hljs-string">&quot;&#x27;resourceLocation&#x27; must not be empty&quot;</span>);<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">resourceClassLoader</span> <span class="hljs-operator">=</span> (classLoader != <span class="hljs-literal">null</span>) ? classLoader : SpringFactoriesLoader.class.getClassLoader();<br>Map&lt;String , SpringFactoriesLoader&gt; loaders = SpringFactoriesLoader.cache.get(resourceClassloader);<br><span class="hljs-keyword">if</span>(loaders == <span class="hljs-literal">null</span>)&#123;<br>loaders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentReferenceHashMap</span>&lt;&gt;();<br>SpringFactoriesLoader.cache.put(resourceClassLoader,loaders);<br>&#125;<br><span class="hljs-type">SpringFactoriesLoader</span> <span class="hljs-variable">lodaer</span> <span class="hljs-operator">=</span> loaders.get(resourceLocation);<br><span class="hljs-keyword">if</span>(loader == <span class="hljs-literal">null</span>)&#123;<br>Map&lt;String, List&lt;String&gt;&gt; factories = loadFactoriesResource(resourceClassLoader, resourceLocation);<br>loader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringFactoriesLoader</span>(classLoader, factories);<br>loaders.put(resourceLocation,loader);<br>&#125;<br><span class="hljs-keyword">return</span> loader; <br>&#125;<br><br><span class="hljs-keyword">static</span> Map&lt;String , List&lt;String&gt;&gt; <span class="hljs-title function_">loadFactoriesResource</span><span class="hljs-params">(ClassLoader classLoader , String resourceLocation)</span>&#123;<br>Map&lt;String, List&lt;String&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br><span class="hljs-keyword">try</span> &#123;<br>Enumeration&lt;URL&gt; urls = classLoader.getResources(resourceLocation);<br><span class="hljs-keyword">while</span>(urls.hasMoreElements())&#123;<br><span class="hljs-type">UrlResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlResource</span>(urls.nexElement());<br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> PropertiesLoaderUtils.loadProperties(resource);<br>properties.forEach((name, value) -&gt; &#123;<br>List&lt;String&gt; implementations = result.computeIfAbsent(((String) name),trim(),<br>key -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>Arrays.stream(StringUtils.commaDelimitedListToStringArray((String)vale))<br>.map(Strintg::trim).forEach(implementations::add);<br>&#125;);<br>&#125;<br>result.replaceAll(SpringFactoriesLoader::toDistinctUnmodifiableList);<br>&#125;<br><span class="hljs-keyword">catch</span>(IOException ex)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unable to load factories from location ...&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> Collections.unmodifiableMap(result);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LOCATION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;META-INF/spring/%s.imports&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImportCandidates <span class="hljs-title function_">load</span><span class="hljs-params">(Class&lt;?&gt; annotation, ClassLoader classLoader)</span>&#123;<br>Assert.notNull(annotation, <span class="hljs-string">&quot;ananotation must not be null&quot;</span>);<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoaderToUse</span> <span class="hljs-operator">=</span> decideClassloader(classLoader);<br><span class="hljs-type">String</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> String.format(LOCATION,annotation.getName());<br>Enumeration&lt;URL&gt; urls = findUrlsInClasspath(classLoaderToUse , location);<br>List&lt;String&gt; importCandidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">while</span>(urls.hasMoreElements())&#123;<br><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> urls.nextElement();<br>importCandidates.addAll(readACandidateConfigurations(url));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImportCandidates</span>(importCandidates);<br>&#125;<br></code></pre></td></tr></table></figure><p>从 加载位置加载自动配置类进行注册</p><p>以DataSrouce 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfiguration(before = SqlInitializationAutoConfiguration.class)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123;DataSrouce.class , EmbeddedDatabaseType.class&#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(type = &quot;io.r2dbc.spi.ConnectionFactory&quot;)</span><br><span class="hljs-meta">@EnableConfigurationProperties(DataSourceProperties.class)</span><br><span class="hljs-meta">@Import(DataSourcePoolMetadataProvidersConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceAutoConfiguration</span>&#123;<br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Conditional(EmbeddedDatabaseCondition.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(&#123;DataSource.class,XADAataSource.class&#125;)</span><br><span class="hljs-meta">@Import(EmbeddedDataSourceConfiguration.class)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmebddedDatabaseConfiguration</span>&#123;<br>&#125;<br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Conditional(PooledDataSourceCondition.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(&#123;DataSource.class, XADataSource.class&#125;)</span><br><span class="hljs-meta">@Import(&#123;DataSourceConfiguration.Hikari.class , DataSourceConfiguration.Tomcat.class ,</span><br><span class="hljs-meta">DataSourceConfiguration.Dbcp2.class , DataSourceConfiguration.OracleUcp.class ,</span><br><span class="hljs-meta">DataSourceConfiguration.Generic.class , DataSourceJmxConfiguration.class &#125; )</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PooledDataSourceConfiguration</span>&#123;<br><br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ConditionalOn-注解"><a href="#ConditionalOn-注解" class="headerlink" title="@ConditionalOn 注解"></a>@ConditionalOn 注解</h3><p>当满足条件时 触发配置类的自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE,  ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Conditional(OnClassCondition.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ConditionalOnClass &#123;<br>Class &lt;?&gt;[] value() <span class="hljs-keyword">default</span> &#123;&#125;;<br>String[] name() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h3><p>排除部分类的加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAutoConfiguration(exclude = &#123;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Applicaiton</span>&#123;<br><br>&#125;<br>...<br></code></pre></td></tr></table></figure><h1 id="Spring-Boot-启动过程"><a href="#Spring-Boot-启动过程" class="headerlink" title="Spring Boot 启动过程"></a>Spring Boot 启动过程</h1><p>1 初始化SpringApplication 从spring.factories 读取listener ApplicationContextInitializer</p><p>2 运行run方法</p><p>3 读取环境信息 配置信息</p><p>4 创建SpringApplication上下文</p><p>5 预初始化上下文： 读取启动类</p><p>6 调用refresh加载IOC容器 加载所有的自动配置类 创建servlet 容器</p><p>7 在这个过程中springboot会调用很多监听器对外进行扩展</p><p>创建的Spring Boot 应用 通过main方法启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>SpringApplication.run(Application.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retetion(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM , classes = TypeExcludeFilter.class),</span><br><span class="hljs-meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigrationExcludeFilter.class&#125;)</span><br><span class="hljs-meta">public @interface SpringBootApplication&#123;</span><br><span class="hljs-meta">&#125;</span><br></code></pre></td></tr></table></figure><p>@SpringBootConfiguration  alias为@Configuration</p><p>@EnableAutoConfiguration  启动自动配置功能</p><p>@ComponentScan                 自动扫描Spring组件</p><p>Springboot 会通过一个run方法 来启动程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(Class&lt;?&gt;[] primarySources , String[] args)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(primarySources).run(args);<br>&#125; <br><br></code></pre></td></tr></table></figure><p>创建Spring Application 应用 ，进行相关的资源加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;<br>    <span class="hljs-built_in">this</span>.addCommandLineProperties = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.addConversionService = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.headless = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.additionalProfiles = Collections.emptySet();<br>    <span class="hljs-built_in">this</span>.applicationContextFactory = ApplicationContextFactory.DEFAULT;<br>    <span class="hljs-built_in">this</span>.applicationStartup = ApplicationStartup.DEFAULT;<br>    <span class="hljs-built_in">this</span>.properties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationProperties</span>();<br>    <span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br>    Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br>    <span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>(Arrays.asList(primarySources));<br>    <span class="hljs-comment">// 装载启动类到容器</span><br>    <span class="hljs-built_in">this</span>.properties.setWebApplicationType(WebApplicationType.deduceFromClasspath());<br>    <span class="hljs-comment">// 推断应用类型</span><br>    <span class="hljs-built_in">this</span>.bootstrapRegistryInitializers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(BootstrapRegistryInitializer.class));<br>  <span class="hljs-comment">// 从spring.factories 中去获取所有key:BootstrapRegistryInitializer 进行资源绑定</span><br>    <span class="hljs-built_in">this</span>.setInitializers(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(ApplicationContextInitializer.class));<br>  <span class="hljs-comment">// 从spring.factories 中去获取所有key:ApplicaitonContextInitializer 进行资源绑定</span><br>    <span class="hljs-built_in">this</span>.setListeners(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(ApplicationListener.class));<br>    <span class="hljs-comment">// 从spring.factories 中获取所有的key:ApplicaitonListener 进行资源绑定</span><br>    <span class="hljs-built_in">this</span>.mainApplicationClass = <span class="hljs-built_in">this</span>.deduceMainApplicationClass();<br>    <span class="hljs-comment">// 根据main方法推算出mainApplicationClass</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>加载类资源后，进行应用类型推断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> WebApplicationType <span class="hljs-title function_">deduceFromClasspath</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, <span class="hljs-literal">null</span>) &amp;&amp; !ClassUtils.isPresent<br>&amp;&amp; !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, <span class="hljs-literal">null</span>))&#123;<br><span class="hljs-keyword">return</span> WebApplicationType.REACTIVE;<br>&#125;<br><span class="hljs-keyword">for</span>(String className : SERVLET_INDICATOR_CLASSES)&#123;<br><span class="hljs-keyword">if</span>(!ClassUtils.isPresent(className, <span class="hljs-literal">null</span>))&#123;<br><span class="hljs-keyword">return</span> WebApplicationType.NONE;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> WebApplicationType.SERVLET; <br>&#125;<br></code></pre></td></tr></table></figure><p>最终在实例化过程中组织了 SpringApplication 对象。 执行run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br>    <span class="hljs-type">Startup</span> <span class="hljs-variable">startup</span> <span class="hljs-operator">=</span> SpringApplication.Startup.create();<br>    <span class="hljs-comment">// 定义启动计时统计</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.properties.isRegisterShutdownHook()) &#123;<br>        shutdownHook.enableShutdownHookAddition();<br>    &#125;<br>    <span class="hljs-comment">// 关闭钩子，触发销毁方法</span><br><span class="hljs-comment">// 环境配置信息上下文</span><br>    <span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.createBootstrapContext();<br><span class="hljs-comment">// 任何spring 上下文的接口，可以接收任何springcontext 实现</span><br>    <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 无头模式，部分IO设备未正常加载时，进行的设置。</span><br>    <span class="hljs-built_in">this</span>.configureHeadlessProperty();<br>    <span class="hljs-comment">// 去spring.factoies中读取了SpringApplicationListeners组件 用于发布事件 或者运行监听器</span><br>    <span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getRunListeners(args);<br>    listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br><span class="hljs-comment">// 发布启动事件</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 根据命令行参数 实例化一个ApplicationArguments 的对象</span><br>        <span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br>        <span class="hljs-comment">// 预初始化环境，设置环境变量</span><br>        <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>        <span class="hljs-comment">// 横幅信息</span><br>        <span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.printBanner(environment);<br>    <span class="hljs-comment">// 创建应用上下文（ApplicationContext），负责管理所有的 Bean。</span><br>        context = <span class="hljs-built_in">this</span>.createApplicationContext();<span class="hljs-string">&#x27;</span><br><span class="hljs-string">        // 设置应用启动监控器，用于记录启动过程中的各种指标。</span><br><span class="hljs-string">        context.setApplicationStartup(this.applicationStartup);</span><br><span class="hljs-string">        // 环境准备 设置环境变量，应用初始化器，注册监听器，加载著配置类</span><br><span class="hljs-string">        this.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="hljs-string">        // 加载/解析配置，创建和初始化Bean，解决依赖关系，启动内嵌服务器</span><br><span class="hljs-string">        this.refreshContext(context);</span><br><span class="hljs-string">        // 执行刷新后的回调处理，标记启动阶段完成。</span><br><span class="hljs-string">        this.afterRefresh(context, applicationArguments);</span><br><span class="hljs-string">        startup.started();</span><br><span class="hljs-string">        if (this.properties.isLogStartupInfo()) &#123;</span><br><span class="hljs-string">            (new StartupInfoLogger(this.mainApplicationClass, environment)).logStarted(this.getApplicationLog(), startup);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        listeners.started(context, startup.timeTakenToStarted());</span><br><span class="hljs-string">        this.callRunners(context, applicationArguments);</span><br><span class="hljs-string">    &#125; catch (Throwable ex) &#123;</span><br><span class="hljs-string">        throw this.handleRunFailure(context, ex, listeners);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    try &#123;</span><br><span class="hljs-string">        if (context.isRunning()) &#123;</span><br><span class="hljs-string">            listeners.ready(context, startup.ready());</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        return context;</span><br><span class="hljs-string">    &#125; catch (Throwable ex) &#123;</span><br><span class="hljs-string">        throw this.handleRunFailure(context, ex, (SpringApplicationRunListeners)null);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>prepareEnvironment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ConfigurableEnvironment <span class="hljs-title function_">prepareEnvironment</span><span class="hljs-params">(SpringApplicationRunListeners listeners, DefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments)</span> &#123;<br>    <span class="hljs-comment">// 加载环境信息</span><br>    <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getOrCreateEnvironment();<br>    <span class="hljs-comment">// 向加载的环境信息中进行属性赋值</span><br>    <span class="hljs-built_in">this</span>.configureEnvironment(environment, applicationArguments.getSourceArgs());<br><span class="hljs-comment">// 更准确的描述：将环境转换为配置属性源并附加到环境中</span><br>    ConfigurationPropertySources.attach(environment);<br>    <span class="hljs-comment">// 发起事件</span><br>    listeners.environmentPrepared(bootstrapContext, environment);<br>    <span class="hljs-comment">// 属性信息配置是一个查询过程，而不是一个重复加载过程</span><br>    ApplicationInfoPropertySource.moveToEnd(environment);<br>    <span class="hljs-comment">// 将环境配置信息加载到最后，最低优先级配置</span><br>    DefaultPropertiesPropertySource.moveToEnd(environment);<br>    Assert.state(!environment.containsProperty(<span class="hljs-string">&quot;spring.main.environment-prefix&quot;</span>), <span class="hljs-string">&quot;Environment prefix cannot be set via properties.&quot;</span>);<br>    <span class="hljs-built_in">this</span>.bindToSpringApplication(environment);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isCustomEnvironment) &#123;<br>        <span class="hljs-type">EnvironmentConverter</span> <span class="hljs-variable">environmentConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnvironmentConverter</span>(<span class="hljs-built_in">this</span>.getClassLoader());<br>        environment = environmentConverter.convertEnvironmentIfNecessary(environment, <span class="hljs-built_in">this</span>.deduceEnvironmentClass());<br>    &#125;<br><br>    ConfigurationPropertySources.attach(environment);<br>    <span class="hljs-keyword">return</span> environment;<br>&#125;<br></code></pre></td></tr></table></figure><p>prepareContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareContext</span><span class="hljs-params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context, ConfigurableEnvironment environment, SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> &#123;<br>    <span class="hljs-comment">// 设置环境信息</span><br>    context.setEnvironment(environment);<br>    <span class="hljs-built_in">this</span>.postProcessApplicationContext(context);<br>    <span class="hljs-built_in">this</span>.addAotGeneratedInitializerIfNecessary(<span class="hljs-built_in">this</span>.initializers);<br>    <span class="hljs-built_in">this</span>.applyInitializers(context);<br>    listeners.contextPrepared(context);<br>    bootstrapContext.close(context);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.properties.isLogStartupInfo()) &#123;<br>        <span class="hljs-built_in">this</span>.logStartupInfo(context.getParent() == <span class="hljs-literal">null</span>);<br>        <span class="hljs-built_in">this</span>.logStartupInfo(context);<br>        <span class="hljs-built_in">this</span>.logStartupProfileInfo(context);<br>    &#125;<br><br>    <span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> context.getBeanFactory();<br>    beanFactory.registerSingleton(<span class="hljs-string">&quot;springApplicationArguments&quot;</span>, applicationArguments);<br>    <span class="hljs-keyword">if</span> (printedBanner != <span class="hljs-literal">null</span>) &#123;<br>        beanFactory.registerSingleton(<span class="hljs-string">&quot;springBootBanner&quot;</span>, printedBanner);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> AbstractAutowireCapableBeanFactory autowireCapableBeanFactory) &#123;<br>        autowireCapableBeanFactory.setAllowCircularReferences(<span class="hljs-built_in">this</span>.properties.isAllowCircularReferences());<br>       <span class="hljs-comment">// 在Sping中 如果出现重名的bean 后出现的会覆盖前面的</span><br><span class="hljs-comment">// 在SpringBoot中 设置了不允许覆盖</span><br>        <span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> DefaultListableBeanFactory listableBeanFactory) &#123;<br>            listableBeanFactory.setAllowBeanDefinitionOverriding(<span class="hljs-built_in">this</span>.properties.isAllowBeanDefinitionOverriding());<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 设置 spring容器 是不是懒加载</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.properties.isLazyInitialization()) &#123;<br>        context.addBeanFactoryPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyInitializationBeanFactoryPostProcessor</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.properties.isKeepAlive()) &#123;<br>        context.addApplicationListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeepAlive</span>());<br>    &#125;<br><br>    context.addBeanFactoryPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertySourceOrderingBeanFactoryPostProcessor</span>(context));<br>    <span class="hljs-keyword">if</span> (!AotDetector.useGeneratedArtifacts()) &#123;<br>        Set&lt;Object&gt; sources = <span class="hljs-built_in">this</span>.getAllSources();<br>        Assert.notEmpty(sources, <span class="hljs-string">&quot;Sources must not be empty&quot;</span>);<br>        <span class="hljs-built_in">this</span>.load(context, sources.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]));<br>    &#125;<br><span class="hljs-comment">// 读取主启动类</span><br>listeners.contextLoaded(context);<br><span class="hljs-comment">// 读取完毕后 发送ApplicationPreparedEvent </span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件与监听过程"><a href="#事件与监听过程" class="headerlink" title="事件与监听过程"></a>事件与监听过程</h2><p>在Spring Boot 中通过构建监听器，在执行过程中在不同的阶段触发对应的监听器，来完成数据和资源的准备工作</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式 提供了一种 注册-通知机制。在流程开始时，将所有关注被观察对象的对象注册到观察者容器中，当被观察对象状态发生变化时，遍历观察者容器中的对象，执行其中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addObserver</span><span class="hljs-params">(Observer observer)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer observer)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 观察者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体主题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NewsAgency</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> String news;<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addObserver</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observers.add(observer);<br>    &#125;<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Observer observer : observers) &#123;<br>            observer.update(news);  <span class="hljs-comment">// 通知所有观察者</span><br>        &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNews</span><span class="hljs-params">(String news)</span> &#123;<br>        <span class="hljs-built_in">this</span>.news = news;<br>        notifyObservers();  <span class="hljs-comment">// 状态改变时自动通知</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体观察者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NewsChannel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String news)</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot; 收到新闻: &quot;</span> + news);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-type">NewsAgency</span> <span class="hljs-variable">agency</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewsAgency</span>();<br>agency.addObserver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewsChannel</span>(<span class="hljs-string">&quot;CNN&quot;</span>));<br>agency.addObserver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewsChannel</span>(<span class="hljs-string">&quot;BBC&quot;</span>));<br>agency.setNews(<span class="hljs-string">&quot;重大新闻！&quot;</span>);  <span class="hljs-comment">// 自动通知所有频道</span><br></code></pre></td></tr></table></figure><h2 id="事件与监听"><a href="#事件与监听" class="headerlink" title="事件与监听"></a>事件与监听</h2><p>Spring boot 中 实现了更加复杂的观察者模式</p><p>定义了一个事件对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCustomEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ApplicationEvent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCustomEvent</span><span class="hljs-params">(Object source)</span> &#123;<br>        <span class="hljs-built_in">super</span>(source);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>监听器通过实现ApplicationListener 接口，重写onApplicationEvent 方法来定义事件发生时所需要调用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyEventListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;MyCustomEvent&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(MyCustomEvent event)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;收到事件：&quot;</span> + event.getSource());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过ApplicationEventPublisher  对象 发布事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ApplicationEventPublisher publisher;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>    publisher.publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCustomEvent</span>(<span class="hljs-string">&quot;自定义事件&quot;</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在SpringBoot 启动过程中，</p><p>1 在创建SpringApplication 对象阶段，检索.factories中的实现了ApplicationListener 接口的类定义，建立映射关系</p><p>2 在SpringApplicationRunListeners listeners &#x3D; this.getRunListeners(args)过程中，创建事件广播其与监听器进行绑定，将所有监听器实例注册到 listeners容器中。</p><p>3 使用listeners.function , 触发事件，发布对应的事件类型，在容器中遍历监听器，执行定义的对应事件触发功能。</p><p>在启动过程中会发布的事件有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationStartingEvent<br>这个事件在Spring Boot 应用运行开始时，且进行任何处理之前发送<br>ApplicationEnvironmentPreparedEvent<br>这个事件在当已知要在上下文中使用Spring环境 Environment时，在Spring上下文context创建前发送<br>ApplicationContextInitializedEvent<br>这个事件在Spring应用上下文ApplicationContext准备好了，并且应用初始化器Application-ContextInitializers已经被调用<br>在bean definitions被加载前发送<br>ApplicationPreparedEvent<br>这个事件是在Spring上下文context刷新之前，且在bean definitions被加载之后发送<br>ApplicationStartEvent<br>这个事件是在Spring上下文coontext刷新后，且在任何application/command-line runners被调用之前发送<br>AvailabilityChangeEvent<br>这个事件紧随上个事件之后发送，激活状态ReadinessState.CORRECT 表示应用已处于活动状态<br>ApplicationReadyEvent<br>这个事件在任何application/command-line runners 调用之后发送<br>AvailabilityChangeEvent<br>这个事件紧随上个事件之后发送，激活状态ReadinessState.ACCEPTING_TRAFFIC，表示应用可以开始准备接收请求了<br>ApplicationFailedEvent<br>这个事件在应用启动异常时发送。<br>WebServerInitializedEvent<br>这个Web服务器初始化事件在WebServer启动之后发送，实现事件类包括ServletWebServerInitializedEvent，<br>ReactiveWebServerInitializedEvent 事件<br>ContextRefreshedEvent<br>这个上下文刷新事件在Spring应用上下文ApplicationContext刷新之后发送<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 部署与自动装配</title>
    <link href="/2025/06/30/Spring-Boot-%E9%83%A8%E7%BD%B2%E4%B8%8E%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <url>/2025/06/30/Spring-Boot-%E9%83%A8%E7%BD%B2%E4%B8%8E%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="Start-Up"><a href="#Start-Up" class="headerlink" title="Start Up"></a>Start Up</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/Hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span>&#123;<br><span class="hljs-meta">@RequestMapping(&quot;/world&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringwebApplication</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">SpringApplication</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(SpringwebApplication.class);<br>app.run(args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Spring Boot 会从application.properties 中加载配置</p><h2 id="配置加载顺序"><a href="#配置加载顺序" class="headerlink" title="配置加载顺序"></a>配置加载顺序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> 根目录   application.propertites<br><span class="hljs-number">2.</span> 根目录的config文件  .\\config\\application.propertites<br><span class="hljs-number">3.</span> 项目根目录  root\\application.propertites<br><span class="hljs-number">4.</span> 项目根目录的config文件  root\\config\\application.propertites<br><span class="hljs-number">5.</span> 直接使用 --spring.config.location =  path 作为输入参数  <span class="hljs-keyword">class</span> <span class="hljs-title class_">path</span> 查询<br><span class="hljs-number">6.</span> 直接传入物理配置路径<br></code></pre></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>通过spring.profiles.active &#x3D;  prod（则会加载一个application-prod文件）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">application-dev.propertites <br>application-prod.propertites <br></code></pre></td></tr></table></figure><h2 id="批量注入属性"><a href="#批量注入属性" class="headerlink" title="批量注入属性"></a>批量注入属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">application.properties :<br>user.name = codfish<br>user.age = <span class="hljs-number">18</span><br><br><span class="hljs-comment">//User类：</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix=&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-keyword">private</span> String username ;<br><span class="hljs-keyword">private</span> Integer age ;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> username ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span>&#123;<br><span class="hljs-built_in">this</span>.username = username;<br>&#125;<br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> age ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span>&#123;<br><span class="hljs-built_in">this</span>.age = age ;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 测试类：</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringwebApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> User user ;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println( user);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 输出 User&#123;username=&quot;codfish&quot;,age=18&#125;</span><br></code></pre></td></tr></table></figure><p>添加属性自动提示</p><p>添加 spring-boot-configuration-processor 依赖</p><p>使能注解处理器（idea）</p><h2 id="属性注入的两种方式"><a href="#属性注入的两种方式" class="headerlink" title="属性注入的两种方式"></a>属性注入的两种方式</h2><p>properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">server.port</span>=<span class="hljs-number">8083</span><br><span class="hljs-attr">user.username</span> = codfish<br><span class="hljs-attr">user.age</span> = <span class="hljs-number">8</span><br><span class="hljs-attr">user.birthday</span> = <span class="hljs-number">2019</span>/<span class="hljs-number">05</span>/<span class="hljs-number">01</span><br><span class="hljs-attr">user.hobbies</span>= [a,v,c]   <br><span class="hljs-attr">user.girlfriend.3</span>=cat    //字典或自定义类需要使用.key 来进行赋值<br><span class="hljs-attr">user.girlfriend.8</span>=li<br><span class="hljs-attr">user.address.id</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">user.address.desc</span>=cheng hua avenue<br></code></pre></td></tr></table></figure><p>yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">User:</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">codfish</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">hobbies:</span>        <span class="hljs-comment"># 列表支持 数组赋值或 yaml 格式赋值</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">girl-friend:</span>    <span class="hljs-comment"># 字典支持 &#123;key:value,key:value&#125; 或 yaml格式赋值</span><br>      <span class="hljs-attr">1:</span> <span class="hljs-string">zhao</span><br>      <span class="hljs-attr">2:</span> <span class="hljs-string">li</span><br>  <span class="hljs-attr">address:</span> &#123;<span class="hljs-attr">id:</span> <span class="hljs-number">1</span>, <span class="hljs-attr">desc:</span> <span class="hljs-string">zhongguancun</span>&#125;<br>  <span class="hljs-attr">birthday:</span> <span class="hljs-number">2020</span><span class="hljs-string">/08/06</span>  <br></code></pre></td></tr></table></figure><p>可以使用 ${} 在配置文件中进行占位</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$&#123;random.value&#125;</span><br><span class="hljs-string">$&#123;random.int&#125;</span><br><span class="hljs-string">$&#123;random.int[1024,65536]&#125;</span>  <span class="hljs-string">范围</span><br><span class="hljs-string">$&#123;random.int(2)&#125;</span>           <span class="hljs-string">范围</span><br><br><span class="hljs-string">@Validated</span> <span class="hljs-string">进行数据校验</span><br><br><span class="hljs-string">对</span> <span class="hljs-string">不能为空的值</span> <span class="hljs-string">指定为NOT</span> <span class="hljs-literal">NULL</span><br><br></code></pre></td></tr></table></figure><h1 id="Spring-Boot自动装配过程"><a href="#Spring-Boot自动装配过程" class="headerlink" title="Spring Boot自动装配过程"></a>Spring Boot自动装配过程</h1><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="SpringBootApplication"></a>SpringBootApplication</h2><p>从主程序开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootwebApplication</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">SpringApplication</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(SpringBootwebApplication.class);<br>app.run(args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@SpringBootApplication 是一个合成注解</p><p>其中包含了 一些元注解</p><blockquote><p>@Target({ElementType.TYPE})    &#x2F;&#x2F;元注解 定义注解使用的位置，这里声明了可以在类位置进行注解<br>@Retention(RetentionPolicy.RUNTIME) &#x2F;&#x2F; 元注解：指定注解的生命周期。RetentionPolicy.RUNTIME 表示注解在运行时仍然可用，JVM 会保留它，可通过反射读取。<br>@Documented  &#x2F;&#x2F; 元注解：表示该注解会被包含在 Javadoc 文档中。<br>@Inherited   &#x2F;&#x2F; 元注解：表示子类可以继承父类上标注的注解（仅限 class 类型注解，对方法和字段无效）。</p></blockquote><p>Spring 提供的注解</p><blockquote><p>@SpringBootConfiguration  &#x2F;&#x2F; @Configuration 的派生注解，标识该类是 Spring Boot 应用的配置类入口。<br>@EnableAutoConfiguration  &#x2F;&#x2F; 启用 Spring Boot 的自动配置机制，根据类路径中的依赖及配置自动装配 Spring Bean。<br>@ComponentScan(</p><p>&#x2F;&#x2F; 扫描指定包路径下的组件（如 @Component、@Service、@Controller 等），<br>&#x2F;&#x2F; excludeFilters 用于排除指定类型的类（如自动配置类、用户配置类），防止重复装配或冲突。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span>  <br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <br><span class="hljs-meta">@Documented</span>  <br><span class="hljs-meta">@Inherited</span>  <br><span class="hljs-meta">@SpringBootConfiguration</span> <br><span class="hljs-meta">@EnableAutoConfiguration</span>  <br>    excludeFilters = &#123;<span class="hljs-meta">@Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="hljs-meta">)</span>, <span class="hljs-meta">@Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="hljs-meta">)</span>&#125;<br>)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br> ...<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 EnableAutoConfiguration    自动装配支持自动装配的配置类</p><p>通过 ComponentScan  加载剔除了用户配置类和自动装配类的其他类。</p><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="EnableAutoConfiguration"></a>EnableAutoConfiguration</h2><p>EnableAutoConfiguration 注解中提供了两个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span>              <span class="hljs-comment">// 注解位置</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span>      <span class="hljs-comment">// 生命周期</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span> <br><span class="hljs-meta">@AutoConfigurationPackage</span>                <span class="hljs-comment">//  提供工具方法</span><br><span class="hljs-meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span>  <span class="hljs-comment">// 执行自动装配的核心类</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.boot.enableautoconfiguration&quot;</span>;<br><br>    Class&lt;?&gt;[] exclude() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="AutoConfigurationPackage"></a>AutoConfigurationPackage</h3><p>autoConfigurationPackage 是一个声明为抽象类的静态工具类。它主要负责对基础java类路径的检索，并且提供方法将factories中的类描述信息注册到Beandefinition中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationPackages</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogFactory.getLog(AutoConfigurationPackages.class);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BEAN</span> <span class="hljs-operator">=</span> AutoConfigurationPackages.class.getName();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">has</span><span class="hljs-params">(BeanFactory beanFactory)</span> &#123;<br>  <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">get</span><span class="hljs-params">(BeanFactory beanFactory)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasePackages</span> &#123;<br>...<br>        List&lt;String&gt; <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.loggedBasePackageInfo) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.packages.isEmpty()) &#123;<br>                    <span class="hljs-keyword">if</span> (AutoConfigurationPackages.logger.isWarnEnabled()) &#123;<br>                        AutoConfigurationPackages.logger.warn(<span class="hljs-string">&quot;@EnableAutoConfiguration was declared on a class in the default package. Automatic @Repository and @Entity scanning is not enabled.&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (AutoConfigurationPackages.logger.isDebugEnabled()) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">packageNames</span> <span class="hljs-operator">=</span> StringUtils.collectionToCommaDelimitedString(<span class="hljs-built_in">this</span>.packages);<br>                    AutoConfigurationPackages.logger.debug(<span class="hljs-string">&quot;@EnableAutoConfiguration was declared on a class in the package &#x27;&quot;</span> + packageNames + <span class="hljs-string">&quot;&#x27;. Automatic @Repository and @Entity scanning is enabled.&quot;</span>);<br>                &#125;<br><br>                <span class="hljs-built_in">this</span>.loggedBasePackageInfo = <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.packages;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="AutoConfigurationImportSelector"><a href="#AutoConfigurationImportSelector" class="headerlink" title="AutoConfigurationImportSelector"></a>AutoConfigurationImportSelector</h3><p>autoconfigurationimportselector 是用于执行自动装配的核心类，它实现了一个延迟注册方法。</p><p>保证了整体的 Bean注入装配过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br>        ↓<br><span class="hljs-meta">@ComponentScan</span> 扫描用户自定义类<br>        ↓<br><span class="hljs-meta">@EnableAutoConfiguration</span> 加载自动配置类<br>        ↓<br>注册 BeanDefinition（用户 + 自动配置类）<br>        ↓<br>创建 Bean（实例化 → 注入依赖 → 初始化）<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeferredImportSelector</span> ... &#123;<br><span class="hljs-keyword">public</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DeferredImportSelector</span>.Group&gt; getImportGroup() &#123;<br>        <span class="hljs-keyword">return</span> AutoConfigurationGroup.class;<br>        <span class="hljs-comment">// 回调传输存储了自动配置类信息集合的结构</span><br>    &#125;<br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationGroup</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeferredImportSelector</span>.Group&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> <br>  <br>    <span class="hljs-comment">// 实现DeferredImportSelector的内部接口Group。 用于存储通过检查的配置类</span><br>    &#125;<br>&#125; <span class="hljs-comment">// 外部的importselector 方法基本已被弃用(存在是为了保持向前兼容)</span><br><br><span class="hljs-keyword">protected</span> AutoConfigurationEntry <span class="hljs-title function_">getAutoConfigurationEntry</span><span class="hljs-params">(AnnotationMetadata annotationMetadata)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isEnabled(annotationMetadata)) &#123;<br>        <span class="hljs-keyword">return</span> EMPTY_ENTRY;  <span class="hljs-comment">// 这一步完成了 对是否启用 @EnableAutoConfiguration 的判断</span><br>        <span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getAttributes(annotationMetadata);<br>        List&lt;String&gt; configurations = <span class="hljs-built_in">this</span>.getCandidateConfigurations(annotationMetadata, attributes);<br>        configurations = <span class="hljs-built_in">this</span>.&lt;String&gt;removeDuplicates(configurations);<br>        Set&lt;String&gt; exclusions = <span class="hljs-built_in">this</span>.getExclusions(annotationMetadata, attributes);<br>        <span class="hljs-built_in">this</span>.checkExcludedClasses(configurations, exclusions);<br>        configurations.removeAll(exclusions);<br>        configurations = <span class="hljs-built_in">this</span>.getConfigurationClassFilter().filter(configurations); <span class="hljs-comment">// 条件注解匹配筛选</span><br>        <span class="hljs-built_in">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoConfigurationEntry</span>(configurations, exclusions);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringBoot 的自动装配过程</p><p>对于常规配置类，直接进行Bean注册过程；</p><p>对于自动配置类先进行延迟处理；</p><p>待所有常规配置类注册完毕后，进行自动配置类的注册。之后进行Bean 的创建</p><p>Spring3 之后 使用类似org.springframework.boot.autoconfigure.AutoConfiguration.import 通过spi的方式 进行类的查询和加载</p><p>自动配置类加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethod=false)</span> (允许类对bean进行代理)<br><span class="hljs-meta">@EnableConfigurationProperties(ServerPropertites.class )</span>  <span class="hljs-comment">// 声明启动了哪些属性</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type= ConditionalOnWebApplication.Type.SERVLET)</span> <span class="hljs-comment">// 环境未SERVLET </span><br><span class="hljs-meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span>  <span class="hljs-comment">// 类路径中存在对应类 </span><br><span class="hljs-meta">@ConditionalOnProperty(prefix=&quot;server.servlet.encoding&quot;,value=&quot;enable&quot;,matchIfMissing=True)</span> <span class="hljs-comment">// server.servlet.encoding = true</span><br>条件满足时 加载组件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编码与解码：软件系统是如何实现的</title>
    <link href="/2025/06/29/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81%EF%BC%9A%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/"/>
    <url>/2025/06/29/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81%EF%BC%9A%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<blockquote><p>数据是如何被组织、传输和执行的</p></blockquote><h1 id="数据的底层表示"><a href="#数据的底层表示" class="headerlink" title="数据的底层表示"></a>数据的底层表示</h1><p>在计算机系统中，所有信息最终都以二进制形式存储在内存中。当我们从硬盘加载数据到内存时，看到的是这样的二进制序列：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">11100110 </span><span class="hljs-number">10011100</span> <span class="hljs-number">10001011</span><br><span class="hljs-symbol">11100101 </span><span class="hljs-number">10001111</span> <span class="hljs-number">10001011</span><br><span class="hljs-symbol">11100100 </span><span class="hljs-number">10111101</span> <span class="hljs-number">10100000</span><br><span class="hljs-symbol">11100101 </span><span class="hljs-number">10100101</span> <span class="hljs-number">10111101</span><br><span class="hljs-number">00000000</span><br><br></code></pre></td></tr></table></figure><p>为了便于理解和处理，我们通常用16进制来表示这些数据：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">E6</span> <span class="hljs-number">9</span>C <span class="hljs-number">8</span>B E5 <span class="hljs-number">8</span>F <span class="hljs-number">8</span>B E4 BD A0 E5 A5 BD <span class="hljs-number">00</span><br><br></code></pre></td></tr></table></figure><p>这段数据遵循Unicode UTF-8编码规范。在UTF-8中，中文字符通常占用3个字节（注意：UTF-8是变长编码，不同字符占用的字节数可能不同），数据以00作为字符串结束标志。</p><p>下面用C语言演示如何将16进制数据转换为可读字符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 基于 UTF-8 解码 E6 9C 8B E5 8F 8B E4 BD A0 E5 A5 BD 00</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> utf8_peng[] = &#123; <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">// 朋</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> utf8_you[] = &#123; <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0</span>&#125; ;  <span class="hljs-comment">// 友</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> utf8_ni[] = &#123; <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0</span>&#125;;    <span class="hljs-comment">// 你</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> utf8_hao[] = &#123; <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0</span>&#125;;   <span class="hljs-comment">// 好</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* utf8_string[] = &#123;utf8_peng, utf8_you, utf8_ni, utf8_hao&#125;;<br><br>    <span class="hljs-type">int</span> len = <span class="hljs-keyword">sizeof</span>(utf8_string)/<span class="hljs-keyword">sizeof</span>(utf8_string[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, utf8_string[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 输出结果：</span><br><span class="hljs-comment">   朋友你好</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><p>同样，我们也可以将字符转换回二进制编码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* ch = (<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)<span class="hljs-string">&quot;朋友你好&quot;</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; ch[i] != <span class="hljs-string">&#x27;\\0&#x27;</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = <span class="hljs-number">7</span>; b &gt;= <span class="hljs-number">0</span>; b--) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, (ch[i] &gt;&gt; b) &amp; <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 输出结果：</span><br><span class="hljs-comment">   11100110 10011100 10001011 11100101 10001111 10001011 11100100 10111101 10100000 11100101 10100101 10111101</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><p>通过这个过程，我们可以清楚地看到编解码的本质：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">人类可读字符 ←→ 编码规则 ←→ 机器可读数据<br></code></pre></td></tr></table></figure><p>这个转换过程是双向的：</p><ul><li><strong>编码</strong> ：将人类可理解的符号转换为机器可处理的数据</li><li><strong>解码</strong> ：将机器数据按照特定规则还原为人类可理解的信息</li></ul><p>需要注意的是，数据的组织形式并不一定要保持字符形式。在无需人类直接参与的系统内部处理中，通常采用更高效的存储形式（如字节码、机器码）来提升性能。</p><h1 id="编程语言的内存管理与执行模型"><a href="#编程语言的内存管理与执行模型" class="headerlink" title="编程语言的内存管理与执行模型"></a>编程语言的内存管理与执行模型</h1><h2 id="C语言：直接的系统映射"><a href="#C语言：直接的系统映射" class="headerlink" title="C语言：直接的系统映射"></a>C语言：直接的系统映射</h2><p>C&#x2F;C++直接使用系统的内存栈结构。经过预处理→编译→汇编→链接→装载的完整流程后，程序在内存中的布局如下：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs llvm">┌─────────────────┐<br>│    内核空间      │<br>├─────────────────┤<br>│    用户空间      │<br>│  ┌─────────────┐│<br>│  │   栈空间     ││ ← 函数调用、局部变量、参数传递<br>│  ├─────────────┤│<br>│  │   堆空间     ││ ← 动态内存分配(<span class="hljs-keyword">malloc</span>/<span class="hljs-keyword">free</span>)<br>│  ├─────────────┤│<br>│  │   .BSS段    ││ ← 未初始化或零初始化的全局变量<br>│  ├─────────────┤│<br>│  │   数据段     ││ ← 已初始化的全局变量和字符串常量<br>│  ├─────────────┤│<br>│  │   代码段     ││ ← 编译后的机器码指令<br>│  └─────────────┘│<br>└─────────────────┘<br><br></code></pre></td></tr></table></figure><p>在C语言中，所有数据都以机器码形式存储，可以直接被CPU处理。程序执行遵循”加载→解释→执行”的基本模式，没有中间抽象层的开销。</p><h2 id="Java语言：虚拟机抽象层"><a href="#Java语言：虚拟机抽象层" class="headerlink" title="Java语言：虚拟机抽象层"></a>Java语言：虚拟机抽象层</h2><p>Java引入了虚拟机(JVM)作为应用程序与操作系统之间的抽象层，其内存结构与C语言的映射关系如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs scss">C++内存结构                    Java内存结构(JVM视角)<br>┌─────────────────┐          ┌─────────────────────────┐<br>│    内核空间      │         │                         │<br>├─────────────────┤          │                        │<br>│    用户空间      │         │    JVM进程空间          │<br>│  ┌─────────────┐│          │  ┌─────────────────────┐│<br>│  │   栈空间     ││  ←→     │  │  Java虚拟机栈        ││<br>│  ├─────────────┤│          │  │  (栈帧/局部变量表)   ││<br>│  │   堆空间     ││  ←→     │  ├─────────────────────┤│<br>│  │             ││          │  │  Java堆             ││<br>│  │             ││          │  │  ┌─────────────────┐││<br>│  │             ││          │  │  │   新生代        │││<br>│  │             ││          │  │  │   (Eden/S0/S1)  │││<br>│  │             ││          │  │  ├─────────────────┤││<br>│  │             ││          │  │  │   老年代        │││<br>│  │             ││          │  │  └─────────────────┘││<br>│  │             ││          │  ├─────────────────────┤│<br>│  │             ││          │  │  元空间(Metaspace)  ││<br>│  │             ││          │  │  (类元数据/常量池)  ││<br>│  ├─────────────┤│          │  ├─────────────────────┤│<br>│  │   代码段     ││  ←→     │  │  方法区             ││<br>│  │             ││          │  │  (字节码/JIT编译码) ││<br>│  └─────────────┘│          │  └─────────────────────┘│<br>└─────────────────┘          └─────────────────────────┘<br><br></code></pre></td></tr></table></figure><p>Java的执行流程分为三个关键阶段：</p><h3 id="1-编译时"><a href="#1-编译时" class="headerlink" title="1. 编译时"></a>1. 编译时</h3><p>将 <code>.java</code>源文件编译为遵循严格结构规范的 <code>.class</code>字节码文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">ClassFile &#123;<br>    u4 magic;                        <span class="hljs-comment">// 魔数(0xCAFEBABE)，校验文件格式</span><br>    u2 minor_version;                <span class="hljs-comment">// 次版本号</span><br>    u2 major_version;                <span class="hljs-comment">// 主版本号</span><br>    u2 constant_pool_count;          <span class="hljs-comment">// 常量池条目数量</span><br>    cp_info constant_pool[...];      <span class="hljs-comment">// 常量池(类、方法、字段引用)</span><br>    u2 access_flags;                 <span class="hljs-comment">// 访问修饰符</span><br>    u2 this_class;                   <span class="hljs-comment">// 当前类在常量池中的索引</span><br>    u2 super_class;                  <span class="hljs-comment">// 父类在常量池中的索引</span><br>    u2 interfaces_count;             <span class="hljs-comment">// 接口数量</span><br>    u2 interfaces[...];              <span class="hljs-comment">// 接口索引数组</span><br>    u2 fields_count;                 <span class="hljs-comment">// 字段数量</span><br>    field_info fields[...];          <span class="hljs-comment">// 字段信息数组</span><br>    u2 methods_count;                <span class="hljs-comment">// 方法数量</span><br>    method_info methods[...];        <span class="hljs-comment">// 方法信息数组</span><br>    u2 attributes_count;             <span class="hljs-comment">// 属性数量</span><br>    attribute_info attributes[...];   <span class="hljs-comment">// 属性信息数组</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-类加载时"><a href="#2-类加载时" class="headerlink" title="2. 类加载时"></a>2. 类加载时</h3><p>JVM将 <code>.class</code>文件加载并解析为内部的 <code>InstanceKlass</code>结构：</p><ul><li><strong>验证</strong> ：检查字节码的合法性和安全性</li><li><strong>准备</strong> ：为静态变量分配内存并设置默认值</li><li><strong>解析</strong> ：将符号引用转换为直接引用</li></ul><h3 id="3-运行时"><a href="#3-运行时" class="headerlink" title="3. 运行时"></a>3. 运行时</h3><ul><li>创建对象时，在堆中分配内存空间</li><li>设置对象头(mark word)和类型指针</li><li>根据类定义信息初始化实例字段</li><li>执行构造方法完成对象创建</li></ul><p>让我们通过一个具体示例来观察这个过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">instanceVar</span> <span class="hljs-operator">=</span> <span class="hljs-number">42</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>        demo.sayHi();<br>        Demo.sayBye();<br>        System.out.println(demo.instanceVar);<br>        System.out.println(Demo.CONST);<br>        System.out.println(Demo.counter);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Demo</span><span class="hljs-params">()</span> &#123;<br>        instanceVar = <span class="hljs-number">100</span>;  <span class="hljs-comment">// 覆盖字段初始化值</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hi&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayBye</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Bye&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        counter = <span class="hljs-number">123</span>;  <span class="hljs-comment">// 静态初始化块</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用 <code>javap -v Demo.class</code>反编译后，可以看到详细的字节码结构，其中包含：</p><ul><li><strong>常量池</strong> ：存储字符串字面量、类引用、方法引用等</li><li><strong>字段信息</strong> ：访问修饰符、类型描述符、初始值等</li><li><strong>方法信息</strong> ：字节码指令序列、局部变量表、操作数栈等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">// javap -v Demo.java</span><br>  Last modified <span class="hljs-number">2025</span>年<span class="hljs-number">6</span>月<span class="hljs-number">28</span>日; size <span class="hljs-number">855</span> bytes   <span class="hljs-comment">// 文件系统获取的信息</span><br>  SHA-<span class="hljs-number">256</span> checksum 73545095324c4d5886edf3477a1e9d340a5e7d5eb940103f0e261063158e44f7  <br>  Compiled from <span class="hljs-string">&quot;Demo.java&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>                         <span class="hljs-comment">// 类名</span><br>  minor version: <span class="hljs-number">0</span>                 <br>  major version: <span class="hljs-number">65</span><br>  flags: (<span class="hljs-number">0x0021</span>) ACC_PUBLIC, ACC_SUPER   <span class="hljs-comment">// 访问控制符</span><br>  this_class: #<span class="hljs-number">1</span>                          <span class="hljs-comment">// Demo 对常量池中的索引映射</span><br>  super_class: #<span class="hljs-number">38</span>                        <span class="hljs-comment">// java/lang/Object  父类Object</span><br>  interfaces: <span class="hljs-number">0</span>, fields: <span class="hljs-number">3</span>, methods: <span class="hljs-number">5</span>, attributes: <span class="hljs-number">1</span>  <span class="hljs-comment">//接口/属性/方法/元信息统计</span><br>Constant pool:<br>   #<span class="hljs-number">1</span> = Class              #<span class="hljs-number">2</span>             <span class="hljs-comment">// Demo</span><br>   #<span class="hljs-number">2</span> = Utf8               Demo<br>   #<span class="hljs-number">3</span> = Methodref          #<span class="hljs-number">1.</span>#<span class="hljs-number">4</span>          <span class="hljs-comment">// Demo.&quot;&lt;init&gt;&quot;:()V  ()V 即需要被执行的代码</span><br>   #<span class="hljs-number">4</span> = NameAndType        #<span class="hljs-number">5</span>:#<span class="hljs-number">6</span>          <span class="hljs-comment">// &quot;&lt;init&gt;&quot;:()V</span><br>   #<span class="hljs-number">5</span> = Utf8               &lt;init&gt;<br>   #<span class="hljs-number">6</span> = Utf8               ()V<br>   #<span class="hljs-number">7</span> = Methodref          #<span class="hljs-number">1.</span>#<span class="hljs-number">8</span>          <span class="hljs-comment">// Demo.sayHi:()V</span><br>   #<span class="hljs-number">8</span> = NameAndType        #<span class="hljs-number">9</span>:#<span class="hljs-number">6</span>          <span class="hljs-comment">// sayHi:()V</span><br>   #<span class="hljs-number">9</span> = Utf8               sayHi<br>  #<span class="hljs-number">10</span> = Methodref          #<span class="hljs-number">1.</span>#<span class="hljs-number">11</span>         <span class="hljs-comment">// Demo.sayBye:()V</span><br>  #<span class="hljs-number">11</span> = NameAndType        #<span class="hljs-number">12</span>:#<span class="hljs-number">6</span>         <span class="hljs-comment">// sayBye:()V</span><br>  #<span class="hljs-number">12</span> = Utf8               sayBye<br>  #<span class="hljs-number">13</span> = Fieldref           #<span class="hljs-number">14.</span>#<span class="hljs-number">15</span>        <span class="hljs-comment">// java/lang/System.out:Ljava/io/PrintStream;</span><br>  #<span class="hljs-number">14</span> = Class              #<span class="hljs-number">16</span>            <span class="hljs-comment">// java/lang/System</span><br>  #<span class="hljs-number">15</span> = NameAndType        #<span class="hljs-number">17</span>:#<span class="hljs-number">18</span>        <span class="hljs-comment">// out:Ljava/io/PrintStream;</span><br>  #<span class="hljs-number">16</span> = Utf8               java/lang/System<br>  #<span class="hljs-number">17</span> = Utf8               out<br>  #<span class="hljs-number">18</span> = Utf8               Ljava/io/PrintStream;<br>  #<span class="hljs-number">19</span> = Fieldref           #<span class="hljs-number">1.</span>#<span class="hljs-number">20</span>         <span class="hljs-comment">// Demo.instanceVar:I</span><br>  #<span class="hljs-number">20</span> = NameAndType        #<span class="hljs-number">21</span>:#<span class="hljs-number">22</span>        <span class="hljs-comment">// instanceVar:I</span><br>  #<span class="hljs-number">21</span> = Utf8               instanceVar<br>  #<span class="hljs-number">22</span> = Utf8               I<br>  #<span class="hljs-number">23</span> = Methodref          #<span class="hljs-number">24.</span>#<span class="hljs-number">25</span>        <span class="hljs-comment">// java/io/PrintStream.println:(I)V</span><br>  #<span class="hljs-number">24</span> = Class              #<span class="hljs-number">26</span>            <span class="hljs-comment">// java/io/PrintStream</span><br>  #<span class="hljs-number">25</span> = NameAndType        #<span class="hljs-number">27</span>:#<span class="hljs-number">28</span>        <span class="hljs-comment">// println:(I)V</span><br>  #<span class="hljs-number">26</span> = Utf8               java/io/PrintStream<br>  #<span class="hljs-number">27</span> = Utf8               println<br>  #<span class="hljs-number">28</span> = Utf8               (I)V<br>  #<span class="hljs-number">29</span> = String             #<span class="hljs-number">30</span>            <span class="hljs-comment">// Hello</span><br>  #<span class="hljs-number">30</span> = Utf8               Hello<br>  #<span class="hljs-number">31</span> = Methodref          #<span class="hljs-number">24.</span>#<span class="hljs-number">32</span>        <span class="hljs-comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>  #<span class="hljs-number">32</span> = NameAndType        #<span class="hljs-number">27</span>:#<span class="hljs-number">33</span>        <span class="hljs-comment">// println:(Ljava/lang/String;)V</span><br>  #<span class="hljs-number">33</span> = Utf8               (Ljava/lang/String;)V<br>  #<span class="hljs-number">34</span> = Fieldref           #<span class="hljs-number">1.</span>#<span class="hljs-number">35</span>         <span class="hljs-comment">// Demo.counter:I</span><br>  #<span class="hljs-number">35</span> = NameAndType        #<span class="hljs-number">36</span>:#<span class="hljs-number">22</span>        <span class="hljs-comment">// counter:I</span><br>  #<span class="hljs-number">36</span> = Utf8               counter<br>  #<span class="hljs-number">37</span> = Methodref          #<span class="hljs-number">38.</span>#<span class="hljs-number">4</span>         <span class="hljs-comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>  #<span class="hljs-number">38</span> = Class              #<span class="hljs-number">39</span>            <span class="hljs-comment">// java/lang/Object</span><br>  #<span class="hljs-number">39</span> = Utf8               java/lang/Object<br>  #<span class="hljs-number">40</span> = String             #<span class="hljs-number">41</span>            <span class="hljs-comment">// Hi</span><br>  #<span class="hljs-number">41</span> = Utf8               Hi<br>  #<span class="hljs-number">42</span> = String             #<span class="hljs-number">43</span>            <span class="hljs-comment">// Bye</span><br>  #<span class="hljs-number">43</span> = Utf8               Bye<br>  #<span class="hljs-number">44</span> = Utf8               CONST<br>  #<span class="hljs-number">45</span> = Utf8               Ljava/lang/String;<br>  #<span class="hljs-number">46</span> = Utf8               ConstantValue<br>  #<span class="hljs-number">47</span> = Utf8               main<br>  #<span class="hljs-number">48</span> = Utf8               ([Ljava/lang/String;)V<br>  #<span class="hljs-number">49</span> = Utf8               Code<br>  #<span class="hljs-number">50</span> = Utf8               LineNumberTable<br>  #<span class="hljs-number">51</span> = Utf8               &lt;clinit&gt;<br>  #<span class="hljs-number">52</span> = Utf8               SourceFile<br>  #<span class="hljs-number">53</span> = Utf8               Demo.java<br>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> java.lang.String CONST;<br>    descriptor: Ljava/lang/String;<br>    flags: (<span class="hljs-number">0x0019</span>) ACC_PUBLIC, ACC_STATIC, ACC_FINAL<br>    ConstantValue: String Hello<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> counter;<br>    descriptor: I<br>    flags: (<span class="hljs-number">0x0009</span>) ACC_PUBLIC, ACC_STATIC<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(java.lang.String[])</span>;<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: (<span class="hljs-number">0x0009</span>) ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">2</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">1</span>                  <span class="hljs-comment">// class Demo</span><br>         <span class="hljs-number">3</span>: dup<br>         <span class="hljs-number">4</span>: invokespecial #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Method &quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-number">7</span>: astore_1<br>         <span class="hljs-number">8</span>: aload_1<br>         <span class="hljs-number">9</span>: invokevirtual #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method sayHi:()V</span><br>        <span class="hljs-number">12</span>: invokestatic  #<span class="hljs-number">10</span>                 <span class="hljs-comment">// Method sayBye:()V</span><br>        <span class="hljs-number">15</span>: getstatic     #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-number">18</span>: aload_1<br>        <span class="hljs-number">19</span>: getfield      #<span class="hljs-number">19</span>                 <span class="hljs-comment">// Field instanceVar:I</span><br>        <span class="hljs-number">22</span>: invokevirtual #<span class="hljs-number">23</span>                 <span class="hljs-comment">// Method java/io/PrintStream.println:(I)V</span><br>        <span class="hljs-number">25</span>: getstatic     #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-number">28</span>: ldc           #<span class="hljs-number">29</span>                 <span class="hljs-comment">// String Hello</span><br>        <span class="hljs-number">30</span>: invokevirtual #<span class="hljs-number">31</span>                 <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        <span class="hljs-number">33</span>: getstatic     #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-number">36</span>: getstatic     #<span class="hljs-number">34</span>                 <span class="hljs-comment">// Field counter:I</span><br>        <span class="hljs-number">39</span>: invokevirtual #<span class="hljs-number">23</span>                 <span class="hljs-comment">// Method java/io/PrintStream.println:(I)V</span><br>        <span class="hljs-number">42</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">7</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">8</span>: <span class="hljs-number">8</span><br>        line <span class="hljs-number">9</span>: <span class="hljs-number">12</span><br>        line <span class="hljs-number">10</span>: <span class="hljs-number">15</span><br>        line <span class="hljs-number">11</span>: <span class="hljs-number">25</span><br>        line <span class="hljs-number">12</span>: <span class="hljs-number">33</span><br>        line <span class="hljs-number">13</span>: <span class="hljs-number">42</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Demo</span><span class="hljs-params">()</span>;<br>    descriptor: ()V<br>    flags: (<span class="hljs-number">0x0001</span>) ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: aload_0<br>         <span class="hljs-number">1</span>: invokespecial #<span class="hljs-number">37</span>                 <span class="hljs-comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-number">4</span>: aload_0<br>         <span class="hljs-number">5</span>: bipush        <span class="hljs-number">42</span><br>         <span class="hljs-number">7</span>: putfield      #<span class="hljs-number">19</span>                 <span class="hljs-comment">// Field instanceVar:I</span><br>        <span class="hljs-number">10</span>: aload_0<br>        <span class="hljs-number">11</span>: bipush        <span class="hljs-number">100</span><br>        <span class="hljs-number">13</span>: putfield      #<span class="hljs-number">19</span>                 <span class="hljs-comment">// Field instanceVar:I</span><br>        <span class="hljs-number">16</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">15</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">2</span>: <span class="hljs-number">4</span><br>        line <span class="hljs-number">16</span>: <span class="hljs-number">10</span><br>        line <span class="hljs-number">17</span>: <span class="hljs-number">16</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">()</span>;<br>    descriptor: ()V<br>    flags: (<span class="hljs-number">0x0001</span>) ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: getstatic     #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>         <span class="hljs-number">3</span>: ldc           #<span class="hljs-number">40</span>                 <span class="hljs-comment">// String Hi</span><br>         <span class="hljs-number">5</span>: invokevirtual #<span class="hljs-number">31</span>                 <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>         <span class="hljs-number">8</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">20</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">21</span>: <span class="hljs-number">8</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayBye</span><span class="hljs-params">()</span>;<br>    descriptor: ()V<br>    flags: (<span class="hljs-number">0x0009</span>) ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">0</span>, args_size=<span class="hljs-number">0</span><br>         <span class="hljs-number">0</span>: getstatic     #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>         <span class="hljs-number">3</span>: ldc           #<span class="hljs-number">42</span>                 <span class="hljs-comment">// String Bye</span><br>         <span class="hljs-number">5</span>: invokevirtual #<span class="hljs-number">31</span>                 <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>         <span class="hljs-number">8</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">24</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">25</span>: <span class="hljs-number">8</span><br><br>  <span class="hljs-keyword">static</span> &#123;&#125;;<br>    descriptor: ()V<br>    flags: (<span class="hljs-number">0x0008</span>) ACC_STATIC<br>    Code:<br>      stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">0</span>, args_size=<span class="hljs-number">0</span><br>         <span class="hljs-number">0</span>: iconst_0<br>         <span class="hljs-number">1</span>: putstatic     #<span class="hljs-number">34</span>                 <span class="hljs-comment">// Field counter:I</span><br>         <span class="hljs-number">4</span>: bipush        <span class="hljs-number">123</span><br>         <span class="hljs-number">6</span>: putstatic     #<span class="hljs-number">34</span>                 <span class="hljs-comment">// Field counter:I</span><br>         <span class="hljs-number">9</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">4</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">28</span>: <span class="hljs-number">4</span><br>        line <span class="hljs-number">29</span>: <span class="hljs-number">9</span><br>&#125;<br>SourceFile: <span class="hljs-string">&quot;Demo.java&quot;</span><br></code></pre></td></tr></table></figure><h3 id="方法执行过程-："><a href="#方法执行过程-：" class="headerlink" title="方法执行过程 ："></a><strong>方法执行过程</strong> ：</h3><ol><li>JVM从 <code>main</code>方法开始执行字节码指令流</li><li>遇到方法调用指令时，解析常量池中的符号引用</li><li>为目标方法创建新的栈帧(包含局部变量表、操作数栈)</li><li>逐条执行字节码指令：<ul><li>加载参数和局部变量到操作数栈</li><li>执行运算并管理栈中的中间结果</li><li>调用其他方法或访问字段</li></ul></li><li>热点代码通过JIT编译器优化为本地机器码</li><li>方法结束时栈帧出栈，返回值传递给调用者</li></ol><h2 id="Python语言：动态对象系统"><a href="#Python语言：动态对象系统" class="headerlink" title="Python语言：动态对象系统"></a>Python语言：动态对象系统</h2><p>Python(以CPython实现为例)采用了更加灵活的动态对象系统：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs scss">C内存结构                     Python内存结构(CPython)<br>┌─────────────────┐          ┌──────────────────────────┐<br>│    内核空间      │          │                          │<br>├─────────────────┤          │                          │<br>│    用户空间      │          │    CPython进程空间        │<br>│  ┌─────────────┐│          │  ┌──────────────────────┐│<br>│  │   栈空间     ││  ←→     │  │  Python调用栈         ││<br>│  ├─────────────┤│          │  │  (栈帧/局部命名空间)  ││<br>│  │   堆空间     ││  ←→     │  ├──────────────────────┤│<br>│  │             ││          │  │  Python对象堆         ││<br>│  │             ││          │  │  ┌──────────────────┐││<br>│  │             ││          │  │  │ 小对象池          │││<br>│  │             ││          │  │  │ (Arena→Pool→Block)│││<br>│  │             ││          │  │  ├──────────────────┤││<br>│  │             ││          │  │  │ 大对象区          │││<br>│  │             ││          │  │  │ (直接malloc)     │││<br>│  │             ││          │  │  ├──────────────────┤││<br>│  │             ││          │  │  │ 缓存区            │││<br>│  │             ││          │  │  │ (整数/字符串)     │││<br>│  │             ││          │  │  └──────────────────┘││<br>│  ├─────────────┤│          │  ├──────────────────────┤│<br>│  │   代码段     ││  ←→     │  │  字节码区            ││<br>│  │             ││          │  │  (PyCodeObject)      ││<br>│  └─────────────┘│          │  └──────────────────────┘│<br>└─────────────────┘          └──────────────────────────┘<br><br></code></pre></td></tr></table></figure><h3 id="Python的对象模型"><a href="#Python的对象模型" class="headerlink" title="Python的对象模型"></a><strong>Python的对象模型</strong></h3><p><strong>CPython中所有数据结构都继承自 <code>PyObject</code>基类，包含引用计数和类型信息。内存管理采用分层策略：</strong></p><ul><li><strong>小对象</strong> (≤512字节)：使用Arena(256KB)→Pool(4KB)→Block的层次结构</li><li><strong>大对象</strong> (&gt;512字节)：直接使用系统malloc分配</li><li><strong>缓存机制</strong> ：小整数(-5到256)、单字符、短字符串等常用对象被缓存复用</li></ul><h3 id="Python的执行流程"><a href="#Python的执行流程" class="headerlink" title="Python的执行流程"></a><strong>Python的执行流程</strong></h3><ol><li><strong>编译阶段</strong> ：源代码编译为字节码(可选择保存为.pyc文件)</li><li><strong>加载阶段</strong> ：</li></ol><ul><li>常量对象(数字、字符串)加载到对应缓存区或堆区</li><li>代码对象封装为 <code>PyCodeObject</code></li><li>根据类型进一步封装为 <code>PyFunctionObject</code>、<code>PyTypeObject</code>等</li></ul><ol><li><strong>执行阶段</strong> ：</li></ol><ul><li>建立命名空间和作用域链</li><li>Python解释器逐条执行字节码指令</li><li>通过switch语句分派到对应的C函数实现</li></ul><p>以一个简单的类定义为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>:<br>    description = <span class="hljs-string">&#x27;this is a description&#x27;</span>  <span class="hljs-comment"># 类属性</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name  <span class="hljs-comment"># 实例属性</span><br><br><span class="hljs-comment"># 类加载后，description成为类命名空间的一部分</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(People))  <span class="hljs-comment"># 可以看到&#x27;description&#x27;在列表中</span><br><span class="hljs-built_in">print</span>(People.description)  <span class="hljs-comment"># 直接访问类属性</span><br><br><span class="hljs-comment"># 实例化后，name被添加到实例的命名空间</span><br>wang = People(<span class="hljs-string">&#x27;wang&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(wang))  <span class="hljs-comment"># 可以看到既有&#x27;description&#x27;也有&#x27;name&#x27;</span><br><span class="hljs-built_in">print</span>(wang.name)  <span class="hljs-comment"># 访问实例属性</span><br><br></code></pre></td></tr></table></figure><p> <strong>属性访问的两个层次</strong> ：</p><ol><li><strong>Python层</strong> ：建立变量名与对象的映射关系，管理命名空间</li><li><strong>C层</strong> ：通过 <code>PyObject</code>结构体查询具体的数据内容</li></ol><p> <strong>方法调用的两种模式</strong> ：</p><ol><li><strong>内建方法</strong> ：直接调用C函数指针(<code>tp_call</code>)</li><li><strong>Python方法</strong> ：解释器解析字节码，通过switch分派执行</li></ol><h1 id="网络协议：分布式系统的编解码"><a href="#网络协议：分布式系统的编解码" class="headerlink" title="网络协议：分布式系统的编解码"></a>网络协议：分布式系统的编解码</h1><p>在前面的章节中，我们讨论了单机环境下的”数据→编码→执行”过程。网络协议将这个概念扩展到分布式环境，实现跨主机的数据交换和协同处理。</p><h2 id="协议的本质：多端协同编解码"><a href="#协议的本质：多端协同编解码" class="headerlink" title="协议的本质：多端协同编解码"></a>协议的本质：多端协同编解码</h2><p>网络协议本质上是一套 <strong>分布式编解码规范</strong> ，它定义了：</p><ul><li>发送端如何将应用数据编码为网络可传输的格式</li><li>接收端如何解码网络数据并恢复为应用可理解的信息</li><li>双方如何协调处理异常、流控、安全等问题</li></ul><p>这个过程可以抽象为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">应用数据 → 协议编码 → 网络传输 → 协议解码 → 应用数据<br>   ↑                                           ↓<br>发送方应用 ←── 协议握手/协商 ──→ 接收方应用<br><br></code></pre></td></tr></table></figure><h2 id="分层协议栈：逐级编解码"><a href="#分层协议栈：逐级编解码" class="headerlink" title="分层协议栈：逐级编解码"></a>分层协议栈：逐级编解码</h2><p>现代网络协议采用分层设计，每一层都有自己的编码格式和处理逻辑：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">┌─────────────────┐  ┌──────────────────────────────────┐</span><br><span class="hljs-attribute">│   应用层         │  │ HTTP</span><span class="hljs-punctuation">:</span> <span class="hljs-string">文本/JSON/XML编码          │</span><br><span class="hljs-attribute">├─────────────────┤  ├──────────────────────────────────┤</span><br><span class="hljs-attribute">│   传输层         │  │ TCP</span><span class="hljs-punctuation">:</span> <span class="hljs-string">序列号、确认号、窗口管理     │</span><br><span class="hljs-attribute">├─────────────────┤  ├──────────────────────────────────┤</span><br><span class="hljs-attribute">│   网络层         │  │ IP</span><span class="hljs-punctuation">:</span> <span class="hljs-string">地址路由、分片重组           │</span><br><span class="hljs-attribute">├─────────────────┤  ├──────────────────────────────────┤</span><br><span class="hljs-attribute">│  数据链路层       │  │ Ethernet</span><span class="hljs-punctuation">:</span> <span class="hljs-string">MAC地址、帧校验        │</span><br><span class="hljs-attribute">├─────────────────┤  ├──────────────────────────────────┤</span><br><span class="hljs-attribute">│   物理层         │  │ 电信号/光信号</span><span class="hljs-punctuation">:</span> <span class="hljs-string">模数转换          │</span><br>└─────────────────┘  └──────────────────────────────────┘<br><br></code></pre></td></tr></table></figure><p>每层协议都会在数据前后添加自己的<strong>协议头部</strong>和 <strong>尾部</strong> ，形成层层封装：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">发送时(封装)：<br>应用数据 → [TCP头|<span class="hljs-string">应用数据] → [IP头</span>|<span class="hljs-string">TCP头</span>|<span class="hljs-string">应用数据] → [以太网头</span>|<span class="hljs-string">IP头</span>|<span class="hljs-string">TCP头</span>|<span class="hljs-string">应用数据</span>|<span class="hljs-string">以太网尾]</span><br><span class="hljs-string"></span><br><span class="hljs-string">接收时(解封装)：</span><br><span class="hljs-string">[以太网头</span>|<span class="hljs-string">IP头</span>|<span class="hljs-string">TCP头</span>|<span class="hljs-string">应用数据</span>|<span class="hljs-string">以太网尾] → [IP头</span>|<span class="hljs-string">TCP头</span>|<span class="hljs-string">应用数据] → [TCP头</span>|<span class="hljs-string">应用数据] → 应用数据</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="HTTP协议：从文本到二进制的演进"><a href="#HTTP协议：从文本到二进制的演进" class="headerlink" title="HTTP协议：从文本到二进制的演进"></a>HTTP协议：从文本到二进制的演进</h2><p>让我们以HTTP协议为例，深入分析协议的编解码过程。</p><h3 id="HTTP-1-1：基于文本的协议"><a href="#HTTP-1-1：基于文本的协议" class="headerlink" title="HTTP&#x2F;1.1：基于文本的协议"></a>HTTP&#x2F;1.1：基于文本的协议</h3><p>HTTP&#x2F;1.1使用纯文本格式，便于人类阅读和调试：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/api/user?id=123</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>api.example.com<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64)<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><br></code></pre></td></tr></table></figure><p> <strong>编码过程</strong> ：</p><ol><li>应用程序构造HTTP请求对象</li><li>将请求对象序列化为ASCII文本</li><li>通过TCP连接发送文本数据</li></ol><p> <strong>解码过程</strong> ：</p><ol><li>服务器接收TCP数据流</li><li>按行解析HTTP文本协议</li><li>还原为HTTP请求对象供应用处理</li></ol><h3 id="HTTP-2：二进制帧协议"><a href="#HTTP-2：二进制帧协议" class="headerlink" title="HTTP&#x2F;2：二进制帧协议"></a>HTTP&#x2F;2：二进制帧协议</h3><p>HTTP&#x2F;2改用二进制格式，提升了解析效率和功能扩展性：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">HTTP/2 Frame Format:<br><span class="hljs-code"> 0                   1                   2                   3</span><br><span class="hljs-section"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|                 Length (24)                   |   Type (8)    |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|   Flags (8)   |R|                 Stream ID (31)             |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|                   Frame Payload (0...)                      ...</span><br><span class="hljs-section">+---------------------------------------------------------------+</span><br><br></code></pre></td></tr></table></figure><p> <strong>关键改进</strong> ：</p><ul><li><strong>二进制解析</strong> ：比文本解析更高效、更不容易出错</li><li><strong>多路复用</strong> ：单连接上并发处理多个请求&#x2F;响应</li><li><strong>头部压缩</strong> ：使用HPACK算法减少重复头部传输</li><li><strong>服务器推送</strong> ：主动向客户端推送资源</li></ul><h2 id="TCP协议：可靠传输的实现"><a href="#TCP协议：可靠传输的实现" class="headerlink" title="TCP协议：可靠传输的实现"></a>TCP协议：可靠传输的实现</h2><p>TCP作为传输层协议，负责在不可靠的IP网络上提供可靠的数据传输。</p><h3 id="TCP报文段结构"><a href="#TCP报文段结构" class="headerlink" title="TCP报文段结构"></a>TCP报文段结构</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">TCP Header Format:<br><span class="hljs-code"> 0                   1                   2                   3</span><br><span class="hljs-section"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|          Source Port          |       Destination Port        |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|                        Sequence Number                        |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|                    Acknowledgment Number                      |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br>|  Data |           |U|A|P|R|S|F|                               |<br>| Offset| Reserved  |R|C|S|S|Y|I|            Window             |<br><span class="hljs-section">|       |           |G|K|H|T|N|N|                               |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|           Checksum            |         Urgent Pointer        |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|                    Options                    |    Padding    |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|                             data                              |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><br></code></pre></td></tr></table></figure><h3 id="可靠性保证机制"><a href="#可靠性保证机制" class="headerlink" title="可靠性保证机制"></a>可靠性保证机制</h3><p><strong>1. 序列号与确认机制</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 发送方编码</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_segment</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> seq_num;    <span class="hljs-comment">// 当前数据的序列号</span><br>    <span class="hljs-type">uint32_t</span> ack_num;    <span class="hljs-comment">// 期望收到的下一个序列号</span><br>    <span class="hljs-type">uint8_t</span> flags;       <span class="hljs-comment">// ACK, SYN, FIN等控制标志</span><br>    <span class="hljs-comment">// ... 其他字段</span><br>&#125;;<br><br><span class="hljs-comment">// 接收方解码并响应</span><br><span class="hljs-keyword">if</span> (received_seq == expected_seq) &#123;<br>    send_ack(received_seq + data_length);<br>    expected_seq += data_length;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 乱序或丢失，重传最后正确的ACK</span><br>    send_ack(expected_seq);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>2. 流量控制</strong><br>通过窗口大小字段实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 接收方通告可用缓冲区大小</span><br>tcp_header.window = available_buffer_size;<br><br><span class="hljs-comment">// 发送方根据窗口大小控制发送速度</span><br><span class="hljs-keyword">if</span> (bytes_in_flight &lt; advertised_window) &#123;<br>    send_more_data();<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>3. 拥塞控制</strong><br>TCP使用多种算法避免网络拥塞：</p><ul><li><strong>慢启动</strong> ：指数增长发送窗口</li><li><strong>拥塞避免</strong> ：线性增长发送窗口</li><li><strong>快速重传</strong> ：收到3个重复ACK时立即重传</li><li><strong>快速恢复</strong> ：避免慢启动的性能损失</li></ul><h2 id="现代协议的创新：QUIC-HTTP3"><a href="#现代协议的创新：QUIC-HTTP3" class="headerlink" title="现代协议的创新：QUIC&#x2F;HTTP3"></a>现代协议的创新：QUIC&#x2F;HTTP3</h2><p>QUIC协议代表了网络协议设计的最新发展，它基于UDP构建，但提供了类似TCP的可靠性保证。</p><h3 id="核心创新点"><a href="#核心创新点" class="headerlink" title="核心创新点"></a>核心创新点</h3><p><strong>1. 连接迁移</strong><br>传统TCP连接由四元组(源IP, 源端口, 目的IP, 目的端口)标识，网络切换时连接会断开。QUIC使用连接ID标识连接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">quic_connection_id</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span> length;          <span class="hljs-comment">// 连接ID长度(0-20字节)</span><br>    <span class="hljs-type">uint8_t</span> data[<span class="hljs-number">20</span>];        <span class="hljs-comment">// 连接ID数据</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p><strong>2. 0-RTT连接建立</strong><br>QUIC将TLS握手集成到传输协议中，支持0往返时间连接建立：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">传统TCP+TLS</span><span class="hljs-punctuation">:</span><br><span class="hljs-attribute">Client → Server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP SYN                    (1 RTT)</span><br><span class="hljs-attribute">Client ← Server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP SYN-ACK</span><br><span class="hljs-attribute">Client → Server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP ACK</span><br><span class="hljs-attribute">Client → Server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TLS ClientHello           (2 RTT)</span><br><span class="hljs-attribute">Client ← Server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TLS ServerHello + Certificate</span><br><span class="hljs-attribute">Client → Server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TLS Finished</span><br><span class="hljs-attribute">Client → Server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HTTP Request              (3 RTT)</span><br><br><span class="hljs-attribute">QUIC</span><span class="hljs-punctuation">:</span><br><span class="hljs-attribute">Client → Server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">QUIC Initial + ClientHello + HTTP Request (0 RTT, 如果有缓存的连接参数)</span><br><br></code></pre></td></tr></table></figure><p><strong>3. 流级别的多路复用</strong><br>HTTP&#x2F;2在TCP上实现多路复用，但TCP的队头阻塞问题依然存在。QUIC在传输层原生支持多流：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">quic_stream</span> &#123;</span><br>    <span class="hljs-type">uint64_t</span> stream_id;      <span class="hljs-comment">// 流标识符</span><br>    <span class="hljs-type">uint8_t</span> stream_type;     <span class="hljs-comment">// 双向/单向，客户端/服务端发起</span><br>    <span class="hljs-comment">// ... 流状态和数据</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="协议栈对比"><a href="#协议栈对比" class="headerlink" title="协议栈对比"></a>协议栈对比</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs armasm">传统协议栈              QUIC协议栈<br>┌─────────────┐        ┌─────────────┐<br>│   HTTP/<span class="hljs-number">2</span>    │        │   HTTP/<span class="hljs-number">3</span>    │<br>├─────────────┤        ├─────────────┤<br>│     TLS     │        │             │<br>├─────────────┤        │    QUIC     │<br>│     TCP     │        │             │<br>├─────────────┤        ├─────────────┤<br>│     <span class="hljs-built_in">IP</span>      │        │     UDP     │<br>└─────────────┘        ├─────────────┤<br>                       │     <span class="hljs-built_in">IP</span>      │<br>                       └─────────────┘<br><br></code></pre></td></tr></table></figure><h3 id="协议设计的核心原则"><a href="#协议设计的核心原则" class="headerlink" title="协议设计的核心原则"></a>协议设计的核心原则</h3><p>通过对各种网络协议的分析，我们可以总结出几个重要的设计原则：</p><h3 id="1-分层解耦"><a href="#1-分层解耦" class="headerlink" title="1. 分层解耦"></a>1. 分层解耦</h3><p>每层专注于解决特定问题，层间通过标准接口交互：</p><ul><li><strong>物理层</strong> ：信号传输</li><li><strong>数据链路层</strong> ：点对点可靠传输</li><li><strong>网络层</strong> ：端到端路由</li><li><strong>传输层</strong> ：进程间通信</li><li><strong>应用层</strong> ：业务逻辑</li></ul><h3 id="2-向后兼容性"><a href="#2-向后兼容性" class="headerlink" title="2. 向后兼容性"></a>2. 向后兼容性</h3><p>协议演进时必须考虑与旧版本的兼容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// HTTP协议版本协商</span><br><span class="hljs-keyword">if</span> (supports_http3) &#123;<br>    use_quic_connection();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (supports_http2) &#123;<br>    use_http2_over_tls();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    use_http1_1();<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-性能与功能的权衡"><a href="#3-性能与功能的权衡" class="headerlink" title="3. 性能与功能的权衡"></a>3. 性能与功能的权衡</h3><ul><li><strong>文本 vs 二进制</strong> ：可读性 vs 解析效率</li><li><strong>可靠性 vs 实时性</strong> ：TCP vs UDP的选择</li><li><strong>安全性 vs 性能</strong> ：加密开销 vs 数据保护</li></ul><h3 id="4-端到端原则"><a href="#4-端到端原则" class="headerlink" title="4. 端到端原则"></a>4. 端到端原则</h3><p>网络核心保持简单，复杂功能在端点实现：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">简单转发 (路由器)     智能处理 (端主机)<br>      ↓                    ↓<br>   <span class="hljs-selector-attr">[路由器]</span> ←→ <span class="hljs-selector-attr">[路由器]</span> ←→ <span class="hljs-selector-attr">[主机]</span><br>      ↑                    ↑<br>  只做路由转发          实现所有协议逻辑<br><br></code></pre></td></tr></table></figure><h2 id="实际案例：HTTP请求的完整生命周期"><a href="#实际案例：HTTP请求的完整生命周期" class="headerlink" title="实际案例：HTTP请求的完整生命周期"></a>实际案例：HTTP请求的完整生命周期</h2><p>让我们通过一个具体的HTTP请求来观察协议栈各层的编解码过程。</p><p>假设我们要访问 <code>https://api.example.com/users/123</code>：</p><h3 id="第一阶段：DNS解析"><a href="#第一阶段：DNS解析" class="headerlink" title="第一阶段：DNS解析"></a>第一阶段：DNS解析</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">应用层编码:<br>域名字符串: &quot;api.example.com&quot;<br><span class="hljs-code">     ↓</span><br><span class="hljs-section">DNS协议编码:</span><br><span class="hljs-section">+-----+-----+-----+-----+-----+-----+</span><br><span class="hljs-section">|  12 |  0  |  0  |  1  |  0  |  0  | DNS Header</span><br><span class="hljs-section">+-----+-----+-----+-----+-----+-----+</span><br><span class="hljs-section">| 3|a|p|i|7|e|x|a|m|p|l|e|3|c|o|m|0| Query Name</span><br><span class="hljs-section">+-----+-----+-----+-----+-----+-----+</span><br><span class="hljs-section">|  0  |  1  |  0  |  1  |           | Query Type/Class</span><br><span class="hljs-section">+-----+-----+-----+-----+</span><br><br></code></pre></td></tr></table></figure><h3 id="第二阶段：TCP连接建立"><a href="#第二阶段：TCP连接建立" class="headerlink" title="第二阶段：TCP连接建立"></a>第二阶段：TCP连接建立</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">应用请求: connect(<span class="hljs-string">&quot;api.example.com&quot;</span>, 443)<br>     ↓<br>TCP三次握手编码:<br><br>1. SYN包:<br>TCP Header: [SRC_PORT|<span class="hljs-string">DST_PORT</span>|<span class="hljs-string">SEQ=100</span>|<span class="hljs-string">ACK=0</span>|<span class="hljs-string">SYN=1</span>|<span class="hljs-string">...]</span><br><span class="hljs-string">IP Header:  [SRC_IP</span>|<span class="hljs-string">DST_IP</span>|<span class="hljs-string">TCP_PROTOCOL</span>|<span class="hljs-string">...]</span><br><span class="hljs-string">Ethernet:   [SRC_MAC</span>|<span class="hljs-string">DST_MAC</span>|<span class="hljs-string">IP_TYPE</span>|<span class="hljs-string">...</span>|<span class="hljs-string">CRC]</span><br><span class="hljs-string"></span><br><span class="hljs-string">2. SYN-ACK包:</span><br><span class="hljs-string">TCP Header: [DST_PORT</span>|<span class="hljs-string">SRC_PORT</span>|<span class="hljs-string">SEQ=200</span>|<span class="hljs-string">ACK=101</span>|<span class="hljs-string">SYN=1</span>|<span class="hljs-string">ACK=1</span>|<span class="hljs-string">...]</span><br><span class="hljs-string"></span><br><span class="hljs-string">3. ACK包:</span><br><span class="hljs-string">TCP Header: [SRC_PORT</span>|<span class="hljs-string">DST_PORT</span>|<span class="hljs-string">SEQ=101</span>|<span class="hljs-string">ACK=201</span>|<span class="hljs-string">ACK=1</span>|<span class="hljs-string">...]</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h3 id="第三阶段：TLS握手"><a href="#第三阶段：TLS握手" class="headerlink" title="第三阶段：TLS握手"></a>第三阶段：TLS握手</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">应用层: 发起HTTPS连接<br><span class="hljs-code">     ↓</span><br>TLS编码过程:<br><br><span class="hljs-section">1. ClientHello:</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">|   22   |  3  3  |   Length        | TLS Header</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">|   01   |      Length              | Handshake Header</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">|  3  3  |    Random (32 bytes)    | Client Version + Random</span><br><span class="hljs-section">+--------+------------------------+</span><br><span class="hljs-section">|SessionID|   Cipher Suites      | Session &amp; Ciphers</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><br>2. ServerHello + Certificate:<br><span class="hljs-meta">[TLS Header][ServerHello][Certificate Chain][ServerHelloDone]</span><br><br>3. Key Exchange:<br><span class="hljs-meta">[TLS Header][ClientKeyExchange][ChangeCipherSpec][Finished]</span><br><br></code></pre></td></tr></table></figure><h3 id="第四阶段：HTTP-2请求发送"><a href="#第四阶段：HTTP-2请求发送" class="headerlink" title="第四阶段：HTTP&#x2F;2请求发送"></a>第四阶段：HTTP&#x2F;2请求发送</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">应用层数据:<br>HTTP请求对象 &#123;<br><span class="hljs-code">    method: &quot;GET&quot;,</span><br><span class="hljs-code">    path: &quot;/users/123&quot;,</span><br><span class="hljs-code">    headers: &#123;</span><br><span class="hljs-code">        &quot;Host&quot;: &quot;api.example.com&quot;,</span><br><span class="hljs-code">        &quot;User-Agent&quot;: &quot;MyApp/1.0&quot;</span><br><span class="hljs-code">    &#125;</span><br>&#125;<br><span class="hljs-code">     ↓</span><br>HTTP/2编码:<br><br><span class="hljs-section">1. HEADERS帧:</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">|   Length = 25   |   1   |   5     | Frame Header</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">|  0  |      Stream ID = 1          |</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">| HPACK编码的头部数据...           | Frame Payload</span><br><span class="hljs-section">+--------------------------------+</span><br><br>HPACK编码示例:<br>&quot;:method&quot;: &quot;GET&quot;     → 0x02 (索引表中的值)<br>&quot;:path&quot;: &quot;/users/123&quot; → 0x04 + &quot;/users/123&quot; (字面量)<br>&quot;host&quot;: &quot;api.example.com&quot; → 0x01 + &quot;api.example.com&quot;<br><br>2. 数据封装到TCP:<br>TCP Header: [SRC_PORT|DST_PORT|SEQ|ACK|PSH=1|...]<br>TCP Data: [TLS Application Data [HTTP/2 HEADERS Frame]]<br><br></code></pre></td></tr></table></figure><h3 id="第五阶段：网络传输"><a href="#第五阶段：网络传输" class="headerlink" title="第五阶段：网络传输"></a>第五阶段：网络传输</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">网络层编码:<br><span class="hljs-section">IP Header:</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">|Ver=4|HL=5|TOS=0|   Total Length  |</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">|   ID        |Flags|Frag Offset   |</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">| TTL=64| Proto=6|   Checksum      |</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">|          Source IP               |</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><span class="hljs-section">|        Destination IP            |</span><br><span class="hljs-section">+--------+--------+--------+--------+</span><br><br>数据链路层编码:<br><span class="hljs-section">Ethernet Header:</span><br><span class="hljs-section">+--------+--------+--------+--------+--------+--------+</span><br><span class="hljs-section">|           Destination MAC (6 bytes)              |</span><br><span class="hljs-section">+--------+--------+--------+--------+--------+--------+</span><br><span class="hljs-section">|             Source MAC (6 bytes)                 |</span><br><span class="hljs-section">+--------+--------+--------+--------+--------+--------+</span><br><span class="hljs-section">| Type=0x0800 (IP) |</span><br><span class="hljs-section">+--------+--------+</span><br><br></code></pre></td></tr></table></figure><h3 id="第六阶段：服务器处理和响应"><a href="#第六阶段：服务器处理和响应" class="headerlink" title="第六阶段：服务器处理和响应"></a>第六阶段：服务器处理和响应</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">服务器接收过程(解码):<br>Ethernet帧 → IP包 → TCP段 → TLS解密 → HTTP/<span class="hljs-number">2</span>帧 → 应用数据<br><br>服务器业务逻辑:<br><span class="hljs-number">1.</span> 路由匹配: &quot;/users/123&quot; → getUserById(<span class="hljs-number">123</span>)<br><span class="hljs-number">2.</span> 数据库查询: <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id = <span class="hljs-number">123</span><br><span class="hljs-number">3.</span> 业务处理: 验证权限、格式化数据<br><span class="hljs-number">4.</span> 构造响应: &#123;&quot;id&quot;: <span class="hljs-number">123</span>, &quot;name&quot;: &quot;John&quot;, &quot;email&quot;: &quot;john@example.com&quot;&#125;<br><br>响应编码:<br><span class="hljs-type">JSON</span>序列化 → HTTP/<span class="hljs-number">2</span> HEADERS帧 + DATA帧 → TLS加密 → TCP段 → IP包 → Ethernet帧<br><br></code></pre></td></tr></table></figure><h1 id="总结：编解码的统一视角"><a href="#总结：编解码的统一视角" class="headerlink" title="总结：编解码的统一视角"></a>总结：编解码的统一视角</h1><p>通过对编程语言实现和网络协议的深入分析，我们可以看到一个统一的模式：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile">数据表示 ←→ 编码规则 ←→ 执行/传输环境<br><br><span class="hljs-section">单机环境:</span><br>源代码 ←→ 编译器/解释器 ←→ 运行时系统<br><br><span class="hljs-section">网络环境:</span><br>应用数据 ←→ 协议栈 ←→ 网络传输<br><br></code></pre></td></tr></table></figure><p>无论是程序执行还是网络通信，核心都是 <strong>如何在不同的表示层之间进行准确、高效的转换</strong> 。理解这个本质，有助于我们：</p><ol><li><strong>设计更好的系统架构</strong> : 选择合适的编码方式和传输协议</li><li><strong>优化性能</strong> : 识别编解码瓶颈，采用更高效的实现</li><li><strong>解决兼容性问题</strong> : 理解不同系统间的数据转换需求</li><li><strong>跟上技术发展</strong> : 把握协议演进的内在逻辑和发展方向</li></ol><p>技术的发展永远在寻求更好的平衡：性能与功能、简单与强大、兼容与创新。编解码作为信息系统的基础，将继续在这个平衡中发挥关键作用。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>架构</tag>
      
      <tag>编码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 启动与加载过程</title>
    <link href="/2025/06/25/Spring-%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <url>/2025/06/25/Spring-%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Spring 本身是一套为服务提供管理和扩展的JAVA框架。为所有纳入它管理的对象（Bean） 提供注入，增强，初始化，生命周期管理等功能。其简单调用过程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">[BeanDefinition] <br>通过注解/XML 声明的类的描述信息<br>     ↓<br>[createBean()]<br>创建ApplicationContext，由容器创建Bean对象<br>     ↓<br>[instantiateBean() → InstantiationStrategy.instantiate()]<br>创建裸对象<br> ↓<br>[生成裸对象]<br>创建了目标Bean对象，但是Bean对象中的属性未初始化<br>     ↓<br>[加入三级缓存 (ObjectFactory)]<br>创建后将自己暴露到三级缓存中，通过ObjectFactory可以获取到处于创建过程中引用对象<br>     ↓<br>[属性填充 populateBean()]<br>向Bean中进行注入<br>     ↓<br>[BeanPostProcessor → AOP代理封装]<br>这一步将裸对象封装为动态代理，提供功能增强<br>     ↓<br>[放入一级缓存]<br>Bean完成初始化<br></code></pre></td></tr></table></figure><h1 id="循环依赖场景下的-Spring-Bean-创建完整流程"><a href="#循环依赖场景下的-Spring-Bean-创建完整流程" class="headerlink" title="循环依赖场景下的 Spring Bean 创建完整流程"></a>循环依赖场景下的 Spring Bean 创建完整流程</h1><h2 id="Bean创建入口"><a href="#Bean创建入口" class="headerlink" title="Bean创建入口"></a>Bean创建入口</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">↓</span><br><span class="hljs-string">一级缓存</span> <span class="hljs-attr">singletonObjects:</span> <span class="hljs-string">【最终对象】</span>  <span class="hljs-string">→</span>  <span class="hljs-string">检查是否存在？</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">二级缓存</span> <span class="hljs-attr">earlySingletonObjects:</span> <span class="hljs-string">【早期对象】</span>  <span class="hljs-string">→</span>  <span class="hljs-string">检查是否存在？</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">三级缓存</span> <span class="hljs-attr">singletonFactories:</span> <span class="hljs-string">【延迟工厂</span> <span class="hljs-string">ObjectFactory】</span> <span class="hljs-string">→</span> <span class="hljs-string">检查是否存在？</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">【缓存都没有</span> <span class="hljs-string">→</span> <span class="hljs-string">开始实例化】</span><br></code></pre></td></tr></table></figure><h2 id="doCreateBean-beanName-流程"><a href="#doCreateBean-beanName-流程" class="headerlink" title="doCreateBean(beanName) 流程"></a><strong>doCreateBean(beanName) 流程</strong></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-string">实例化裸对象</span> <span class="hljs-string">newInstance()</span><br>    <span class="hljs-string">→</span> <span class="hljs-string">裸对象</span> <span class="hljs-string">A@100</span> <span class="hljs-string">诞生（堆上地址）</span><br><span class="hljs-string">↓</span><br><span class="hljs-number">2</span><span class="hljs-string">.</span> <span class="hljs-string">注册三级缓存</span><br>    <span class="hljs-string">singletonFactories.put(beanName,</span> <span class="hljs-string">()</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">getEarlyBeanReference(beanName,</span> <span class="hljs-string">A@100))</span><br>    <span class="hljs-string">→</span> <span class="hljs-string">延迟执行的代理工厂</span><br><span class="hljs-string">↓</span><br><span class="hljs-number">3</span><span class="hljs-string">.</span> <span class="hljs-string">开始属性填充</span> <span class="hljs-string">populateBean()</span><br>    <span class="hljs-string">→</span> <span class="hljs-string">如果此时依赖了B，递归</span> <span class="hljs-string">getBean(B)</span><br></code></pre></td></tr></table></figure><h2 id="在B初始化时-getBean-A-逻辑"><a href="#在B初始化时-getBean-A-逻辑" class="headerlink" title="在B初始化时 getBean(A) 逻辑"></a><strong>在B初始化时 getBean(A) 逻辑</strong></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">B</span> <span class="hljs-string">→</span> <span class="hljs-string">getBean(A)</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">一级缓存未命中</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">二级缓存未命中</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">三级缓存命中</span> <span class="hljs-string">→</span> <span class="hljs-string">执行</span> <span class="hljs-string">ObjectFactory</span><br>    <span class="hljs-string">→</span> <span class="hljs-string">getEarlyBeanReference(beanName,</span> <span class="hljs-string">A@100)</span><br>        <span class="hljs-string">→</span> <span class="hljs-string">判断是否需要AOP增强</span><br>            <span class="hljs-string">→</span> <span class="hljs-string">若需要</span> <span class="hljs-string">→</span> <span class="hljs-string">创建代理对象</span> <span class="hljs-string">Proxy(A)@300</span><br>            <span class="hljs-string">→</span> <span class="hljs-string">若不需要</span> <span class="hljs-string">→</span> <span class="hljs-string">返回</span> <span class="hljs-string">A@100</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">把返回对象放入二级缓存</span> <span class="hljs-string">earlySingletonObjects.put(beanName,</span> <span class="hljs-string">reference)</span><br><br></code></pre></td></tr></table></figure><h2 id="B-初始化完成-→-一级缓存"><a href="#B-初始化完成-→-一级缓存" class="headerlink" title="B 初始化完成 → 一级缓存"></a>B 初始化完成 → 一级缓存</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">B</span> <span class="hljs-string">属性填充完成</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">执行</span> <span class="hljs-string">BeanPostProcessor</span> <span class="hljs-string">初始化逻辑</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">进入一级缓存</span> <span class="hljs-string">singletonObjects.put(&quot;B&quot;,</span> <span class="hljs-string">完整B对象)</span><br></code></pre></td></tr></table></figure><h2 id="A-继续完成初始化"><a href="#A-继续完成初始化" class="headerlink" title="A 继续完成初始化"></a>A 继续完成初始化</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">A</span> <span class="hljs-string">继续属性填充，填入刚创建好的</span> <span class="hljs-string">B</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">执行完整初始化</span> <span class="hljs-string">initializeBean()</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">进入</span> <span class="hljs-string">postProcessAfterInitialization()</span><br>    <span class="hljs-string">→</span> <span class="hljs-string">二次判断是否已有代理（提前暴露已处理时）</span><br><span class="hljs-string">是</span> <span class="hljs-string">→</span> <span class="hljs-string">直接返回已有代理</span><br><span class="hljs-string">否</span> <span class="hljs-string">→</span> <span class="hljs-string">再次增强生成代理</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">最终确定完整对象引用（裸对象或代理对象）</span><br><span class="hljs-string">↓</span><br><span class="hljs-string">进入一级缓存</span> <span class="hljs-string">singletonObjects.put(&quot;A&quot;,</span> <span class="hljs-string">最终A对象)</span><br></code></pre></td></tr></table></figure><p>我们可以分析出  Spring 三级缓存 所存储内容的阶段</p><table><thead><tr><th>缓存级别</th><th>变量名</th><th>存储内容</th><th>作用时机</th></tr></thead><tbody><tr><td><strong>一级缓存</strong></td><td><code>singletonObjects</code></td><td>完全初始化的Bean对象（最终对象）</td><td>Bean完成所有初始化步骤后</td></tr><tr><td><strong>二级缓存</strong></td><td><code>earlySingletonObjects</code></td><td>提前暴露的Bean对象（早期对象）</td><td>解决循环依赖时，从三级缓存提升而来</td></tr><tr><td><strong>三级缓存</strong></td><td><code>singletonFactories</code></td><td>ObjectFactory工厂对象</td><td>Bean实例化后立即放入，用于延迟创建代理</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 事务</title>
    <link href="/2025/06/24/Spring-%E4%BA%8B%E5%8A%A1/"/>
    <url>/2025/06/24/Spring-%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h1><p>事务，是系统在处理业务时，为保障<strong>数据一致性、完整性与可靠性</strong>而设计的一种逻辑单元抽象。它源于现实中的业务流程抽象，如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">复制编辑<br>客户发起请求 —&gt; 供应商响应请求<br></code></pre></td></tr></table></figure><p>但在现代系统中，业务请求通常会被分解为一系列跨越多个系统组件的处理过程，例如：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">rust<br>复制编辑<br>Customer<span class="hljs-function"><span class="hljs-params">(请求)</span></span><br><span class="hljs-function">  -&gt;</span> Web代理<br>  -&gt; 应用服务<br>  -&gt; 缓存服务器<br>  -&gt; 消息队列<br>  -&gt; 数据库服务<br></code></pre></td></tr></table></figure><p>事务的目标就是在这种复杂系统流转中，确保数据的 <strong>正确性和一致性</strong> 。</p><h2 id="事务的-ACID-特性"><a href="#事务的-ACID-特性" class="headerlink" title="事务的 ACID 特性"></a>事务的 ACID 特性</h2><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>原子性（Atomicity）</td><td>要么全部成功，要么全部失败</td></tr><tr><td>一致性（Consistency）</td><td>事务执行前后，系统状态合法且符合业务规则</td></tr><tr><td>隔离性（Isolation）</td><td>多个事务互不干扰，互不影响</td></tr><tr><td>持久性（Durability）</td><td>事务提交后的结果永久保存</td></tr></tbody></table><hr><h2 id="不同组件中的事务处理机制"><a href="#不同组件中的事务处理机制" class="headerlink" title="不同组件中的事务处理机制"></a>不同组件中的事务处理机制</h2><h3 id="代理服务与缓存服务器"><a href="#代理服务与缓存服务器" class="headerlink" title="代理服务与缓存服务器"></a>代理服务与缓存服务器</h3><ul><li><strong>代理层</strong> ：一般只做请求转发，不参与事务控制；</li><li><strong>缓存层</strong> ：通常处理静态数据，对核心业务一致性要求低，事务性不强，重点在于 <strong>缓存一致性与失效策略</strong> 。</li></ul><h3 id="消息队列中的事务处理"><a href="#消息队列中的事务处理" class="headerlink" title="消息队列中的事务处理"></a>消息队列中的事务处理</h3><ul><li>主要通过<strong>可靠投递机制</strong>保障最终一致性；</li><li>通过 <strong>事务消息机制</strong> （如RocketMQ）支持本地事务与消息状态协调；</li><li>通过<strong>幂等设计、重复消费保护</strong>提升整体稳定性。</li></ul><h3 id="以-RocketMQ-为例的事务消息流程："><a href="#以-RocketMQ-为例的事务消息流程：" class="headerlink" title="以 RocketMQ 为例的事务消息流程："></a>以 RocketMQ 为例的事务消息流程：</h3><ol><li>发送“预处理消息”到MQ。</li><li>执行本地事务（如数据库写入）。</li><li>根据事务执行结果向MQ提交 commit 或 rollback。</li><li>MQ端若长时间未收到确认，将主动发起事务状态回查。</li></ol><h3 id="应用服务器中的事务管理"><a href="#应用服务器中的事务管理" class="headerlink" title="应用服务器中的事务管理"></a>应用服务器中的事务管理</h3><ul><li>通过应用框架提供的事务管理器（如Spring <code>@Transactional</code>）划定事务边界；</li><li>提供事务传播机制（如REQUIRED、REQUIRES_NEW等）管理嵌套事务；</li><li>支持跨资源事务管理（如JTA、XA协议）协调多数据库或外部资源的事务一致性。</li></ul><h3 id="数据库中的事务支持"><a href="#数据库中的事务支持" class="headerlink" title="数据库中的事务支持"></a>数据库中的事务支持</h3><ul><li>通过事务日志（如WAL）、Redo Log、Undo Log保障持久性；</li><li>通过锁机制（行锁、表锁）、隔离级别保障并发控制；</li><li>支持 savepoint、rollback、commit 等事务控制语句。</li></ul><h1 id="业务流程中的事务处理"><a href="#业务流程中的事务处理" class="headerlink" title="业务流程中的事务处理"></a>业务流程中的事务处理</h1><h2 id="使用DataSource-完成与SQL的通信"><a href="#使用DataSource-完成与SQL的通信" class="headerlink" title="使用DataSource 完成与SQL的通信"></a>使用DataSource 完成与SQL的通信</h2><p>在SpringBoot中，定义DataSource 参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=aot<br><span class="hljs-attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/springboot<br><span class="hljs-attr">spring.datasource.username</span>=root<br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-number">123456</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=com.mysql.jdbc.Driver<br></code></pre></td></tr></table></figure><p>直接可以得到数据库连接对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> DataSource datasource)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>    System.out.println(datasource.getConnection());<br>&#125;<br></code></pre></td></tr></table></figure><p>在Spring中需要配置连接类，定义dataSource类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.codfish.aot.spring;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url ;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username ;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password ;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName ;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DriverManagerDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DriverManagerDataSource</span>();<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        dataSource.setDriverClassName(driverClassName);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>  <br>  <br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads2</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> DataSourceConfig datasource)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>    System.out.println(datasource.dataSource());<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建JDBCTemplate-完成数据库命令执行"><a href="#创建JDBCTemplate-完成数据库命令执行" class="headerlink" title="创建JDBCTemplate 完成数据库命令执行"></a>创建JDBCTemplate 完成数据库命令执行</h2><p>SpringBoot :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.codfish.aot.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123; name=&quot;</span> +name+ <span class="hljs-string">&quot; ID=&quot;</span> + id + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 创建一个类完成数据接收</span><br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbctemplate</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> JdbcTemplate jdbcTemplate)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>   <span class="hljs-comment">// jdbcTemplate.update(&quot;insert into student(ID,NAME) values(?,?)&quot;,2,&quot;codfish&quot;);</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from student where id=?&quot;</span>;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class),<span class="hljs-number">2</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>Spring :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建jdbcTemplate bean</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(dataSource);<br>&#125;<br><span class="hljs-comment">// 执行查询</span><br> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbctemplate</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> JdbcTemplate jdbcTemplate)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>   <span class="hljs-comment">// jdbcTemplate.update(&quot;insert into student(ID,NAME) values(?,?)&quot;,2,&quot;codfish&quot;);</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from student where id=?&quot;</span>;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class),<span class="hljs-number">2</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>SpringBoot :  直接向需要使用事务的方法加入@Transactional注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.update(<span class="hljs-string">&quot;insert into student(ID,NAME) values(?,?)&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;godfish&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.update(<span class="hljs-string">&quot;update student set NAME=? where ID=?&quot;</span>, <span class="hljs-string">&quot;codfish&quot;</span>,<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.update(<span class="hljs-string">&quot;delete from student where ID=?&quot;</span>,<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">query</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.queryForObject(<span class="hljs-string">&quot;select * from student where ID=?&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class),<span class="hljs-number">1</span>);<br>    &#125;<br><br>&#125; <span class="hljs-comment">// 数据类 定义 查询命令和方法</span><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserDao userDao;<br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span> <span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> userDao.insert();<br>    &#125;<br>&#125; <span class="hljs-comment">// 服务类进行执行</span><br></code></pre></td></tr></table></figure><p>在Spring中 需要启动EnableTransactionManagement 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableTransactionManagement</span> <br></code></pre></td></tr></table></figure><p>并在业务中定义一个TransactionManager的 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> TransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(dataSource);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>在多线程数据访问过程中，多个查询事务可以会存在相互间的冲突，导致数据存在不一致的情况</p><table><thead><tr><th></th><th>丢失更新</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th></th></tr></thead><tbody><tr><td>Read Uncommit</td><td>x</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Read Commited</td><td>x</td><td>x</td><td>√</td><td>√</td><td>通过行锁在事务期间锁定读操作</td></tr><tr><td>Repeatable Read</td><td>x</td><td>x</td><td>x</td><td>√</td><td>通过行锁在事务期间锁定读写</td></tr><tr><td>Serializable</td><td>x</td><td>x</td><td>x</td><td>x</td><td>通过表锁在事务操作期间锁定</td></tr></tbody></table><h2 id="事务传播"><a href="#事务传播" class="headerlink" title="事务传播"></a>事务传播</h2><p>在业务过程中存在某个方法被定义为事务之后其调用的后续方法也通过事务执行，这时通过设置不同的isolation 来控制 多个事务之间的行为</p><table><thead><tr><th></th><th>外部请求不存在事务</th><th>外部请求存在事务</th><th></th></tr></thead><tbody><tr><td>REQUIRED</td><td>开启新的事务</td><td>融入外部事务</td><td>@Transactional(propagation&#x3D;Progagation.REQUIRED) 增删改查</td></tr><tr><td>SUPPORTS</td><td>不开启新的事务</td><td>融入外部事物</td><td>@Transactional(propagation&#x3D;Progagation.SUPPORT)  适合查询</td></tr><tr><td>REQUIRES_NEW</td><td>开启新的事务</td><td>开启新的事务</td><td>@Transactional(propagation&#x3D;Progagation.REQUIRES_NEW) 适用于与外部事务无关的情况</td></tr><tr><td>NOT_SUPPORT</td><td>不开启新的事务</td><td>不用外部事务</td><td>@Transactional(propagation&#x3D;Progagation.NOT_SUPPORT)</td></tr><tr><td>NEVER</td><td>不开启新的事务</td><td>抛出异常</td><td>@Transactional(propagation&#x3D;Progagation.NEVER)</td></tr><tr><td>MANDATORY</td><td>抛出异常</td><td>融合到外部事务中</td><td>@Transactional(propagation&#x3D;Progagation.MANDATORY)</td></tr><tr><td>NESTED</td><td>开启新的事务</td><td>融合到外部事务中，SAVEPOINT</td><td>@Transactional(propagation&#x3D;Progagation.NESTED)</td></tr></tbody></table><h2 id="readOnly"><a href="#readOnly" class="headerlink" title="readOnly"></a>readOnly</h2><p>只会设置在查询的业务方法中，具体执行效率视数据库类型而定</p><h2 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h2><p>设置事务等待的最长时间</p><h2 id="noRollbackFor-RollbackFor"><a href="#noRollbackFor-RollbackFor" class="headerlink" title="noRollbackFor &#x2F; RollbackFor"></a>noRollbackFor &#x2F; RollbackFor</h2><p>决定哪些 异常会回滚，哪些异常不会回滚</p><p>默认RuntimeException 及其子类异常会回滚</p><h2 id="事务失效"><a href="#事务失效" class="headerlink" title="事务失效"></a>事务失效</h2><ol><li>保证事务的类配置为一个bean</li><li>事务方法不能是一个private</li><li>事务执行期间的异常被自行捕捉</li><li>只有动态代理过的对象才可以正常执行事务</li></ol><p>解决  1. 暴露自身包装为动态代理对象(循环依赖)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">2.</span> AopContext.currentProxy()<br><br><span class="hljs-bullet">3.</span> 创建一个Bean ，执行DAO对象 再将该对象引用进来执行<br></code></pre></td></tr></table></figure><p><strong>本质原因在于 Spring AOP 是基于代理机制实现事务增强的：自调用绕过代理、异常捕获、非 public 方法、未被 Spring 管理的对象均绕过了事务代理逻辑。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 对象组织，代理与AOP</title>
    <link href="/2025/06/24/Spring-%E5%AF%B9%E8%B1%A1%E7%BB%84%E7%BB%87%EF%BC%8C%E4%BB%A3%E7%90%86%E4%B8%8EAOP/"/>
    <url>/2025/06/24/Spring-%E5%AF%B9%E8%B1%A1%E7%BB%84%E7%BB%87%EF%BC%8C%E4%BB%A3%E7%90%86%E4%B8%8EAOP/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象程序设计中的类型组织方式"><a href="#面向对象程序设计中的类型组织方式" class="headerlink" title="面向对象程序设计中的类型组织方式"></a>面向对象程序设计中的类型组织方式</h1><p>在面向对象编程中，合理组织类型之间的关系是构建可维护、可扩展系统的关键。本文将探讨四种主要的类型组织方式：继承、组合、接口和代理，分析它们各自的特点、优势和适用场景。</p><h2 id="1-继承：建立”是什么”的关系"><a href="#1-继承：建立”是什么”的关系" class="headerlink" title="1. 继承：建立”是什么”的关系"></a>1. 继承：建立”是什么”的关系</h2><p>继承通过建立父子类关系来实现代码复用和多态性。子类继承父类的属性和方法，同时可以重写父类方法来实现特定行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">    [Animal]      (父类: 抽象)<br>       |<br>  +----+----+<br>  |         |<br>[Cat]     [Dog]   (子类: 具体实现)<br><br></code></pre></td></tr></table></figure><h3 id="核心特点"><a href="#核心特点" class="headerlink" title="核心特点"></a>核心特点</h3><ul><li>建立”is-a”关系（子类是父类的一种）</li><li>支持多态：通过父类引用调用子类方法</li><li>编译时确定方法签名，运行时动态绑定具体实现</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal is sleeping&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Meow meow&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Woof woof&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritanceDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><br>        cat.makeSound(); <span class="hljs-comment">// 输出: Meow meow</span><br>        dog.makeSound(); <span class="hljs-comment">// 输出: Woof woof</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="优势与局限"><a href="#优势与局限" class="headerlink" title="优势与局限"></a>优势与局限</h3><p><strong>优势：</strong></p><ul><li>代码复用性强</li><li>支持多态，提高代码灵活性</li><li>符合直观的分类思维</li></ul><p><strong>局限：</strong></p><ul><li>单继承限制（Java不支持多重继承）</li><li>强耦合，父类变化影响所有子类</li><li>继承层次过深时难以维护</li></ul><h2 id="2-组合：建立”有什么”的关系"><a href="#2-组合：建立”有什么”的关系" class="headerlink" title="2. 组合：建立”有什么”的关系"></a>2. 组合：建立”有什么”的关系</h2><p>组合通过将其他对象作为成员变量来实现功能复用，建立”has-a”关系。这种方式提供了比继承更大的灵活性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[Cat]        [Dog]<br>  |            |<br>+------+    +------+<br>| Bark |    | Bark |<br>+------+    +------+<br><br></code></pre></td></tr></table></figure><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SoundMaker</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">(String sound)</span> &#123;<br>        System.out.println(sound);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SoundMaker</span> <span class="hljs-variable">soundMaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoundMaker</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        soundMaker.makeSound(<span class="hljs-string">&quot;Meow meow&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SoundMaker</span> <span class="hljs-variable">soundMaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoundMaker</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        soundMaker.makeSound(<span class="hljs-string">&quot;Woof woof&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>避免继承的强耦合问题</li><li>支持多重”拥有”关系</li><li>运行时可以动态改变行为</li><li>更好的封装性</li></ul><h2 id="3-接口：定义”能做什么”的契约"><a href="#3-接口：定义”能做什么”的契约" class="headerlink" title="3. 接口：定义”能做什么”的契约"></a>3. 接口：定义”能做什么”的契约</h2><p>接口定义了一组行为规范，实现类必须提供这些行为的具体实现。接口关注的是对象的能力而非身份。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> [Bark Interface]<br>        |<br>  +-----+-----+<br>  |           |<br>[Cat]       [Dog]<br>(实现接口的具体类)<br></code></pre></td></tr></table></figure><h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SoundMakeable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Moveable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SoundMakeable</span>, Moveable &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Meow meow&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat is walking silently&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SoundMakeable</span>, Moveable &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Woof woof&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog is running&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfaceDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SoundMakeable[] animals = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>()&#125;;<br><br>        <span class="hljs-keyword">for</span> (SoundMakeable animal : animals) &#123;<br>            animal.makeSound();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><ul><li>支持多重实现，解决单继承限制</li><li>降低耦合，面向契约编程</li><li>更好的可测试性和可扩展性</li></ul><h2 id="4-代理：控制对象访问的中介"><a href="#4-代理：控制对象访问的中介" class="headerlink" title="4. 代理：控制对象访问的中介"></a>4. 代理：控制对象访问的中介</h2><p>代理模式通过创建代理对象来控制对原对象的访问，可以在不改变原对象的情况下增加额外功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[Caller]<br>   |<br>[Proxy]<br>   |<br>[Real Object]<br><br></code></pre></td></tr></table></figure><h3 id="静态代理示例"><a href="#静态代理示例" class="headerlink" title="静态代理示例"></a>静态代理示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalKeeper</span> &#123;<br>    <span class="hljs-keyword">private</span> Animal animal;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnimalKeeper</span><span class="hljs-params">(Animal animal)</span> &#123;<br>        <span class="hljs-built_in">this</span>.animal = animal;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Keeper: Animal is about to make sound&quot;</span>);<br>        animal.makeSound();<br>        System.out.println(<span class="hljs-string">&quot;Keeper: Animal finished making sound&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="动态代理示例"><a href="#动态代理示例" class="headerlink" title="动态代理示例"></a>动态代理示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Meow meow&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Animal target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnimalProxy</span><span class="hljs-params">(Animal target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before calling &quot;</span> + method.getName());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>        System.out.println(<span class="hljs-string">&quot;After calling &quot;</span> + method.getName());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Animal <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (Animal) Proxy.newProxyInstance(<br>            target.getClass().getClassLoader(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Animal.class&#125;,<br>            <span class="hljs-built_in">this</span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnimalProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>()).getProxy();<br>        cat.makeSound();<br>        <span class="hljs-comment">// 输出:</span><br>        <span class="hljs-comment">// Before calling makeSound</span><br>        <span class="hljs-comment">// Meow meow</span><br>        <span class="hljs-comment">// After calling makeSound</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="代理的优势"><a href="#代理的优势" class="headerlink" title="代理的优势"></a>代理的优势</h3><ul><li>可以在不修改原对象的情况下增加功能</li><li>支持延迟加载、访问控制、日志记录等横切关注点</li><li>动态代理提供了运行时的灵活性</li></ul><h2 id="5-四种方式的比较与选择"><a href="#5-四种方式的比较与选择" class="headerlink" title="5. 四种方式的比较与选择"></a>5. 四种方式的比较与选择</h2><table><thead><tr><th>方式</th><th>关系类型</th><th>耦合度</th><th>灵活性</th><th>适用场景</th></tr></thead><tbody><tr><td>继承</td><td>is-a</td><td>强</td><td>低</td><td>明确的分类关系，稳定的层次结构</td></tr><tr><td>组合</td><td>has-a</td><td>弱</td><td>高</td><td>功能复用，避免继承限制</td></tr><tr><td>接口</td><td>can-do</td><td>很弱</td><td>很高</td><td>行为规范，多重能力描述</td></tr><tr><td>代理</td><td>控制访问</td><td>中等</td><td>中等</td><td>访问控制，功能增强</td></tr></tbody></table><h2 id="6-最佳实践建议"><a href="#6-最佳实践建议" class="headerlink" title="6. 最佳实践建议"></a>6. 最佳实践建议</h2><ol><li><strong>优先使用组合而非继承</strong> ：遵循”组合优于继承”原则</li><li><strong>多使用接口</strong> ：面向接口编程，提高代码的可扩展性</li><li><strong>合理运用代理</strong> ：在需要控制访问或增强功能时考虑代理模式</li><li><strong>避免深层继承</strong> ：继承层次不宜过深，一般不超过3-4层</li></ol><h1 id="AOP实现"><a href="#AOP实现" class="headerlink" title="AOP实现"></a>AOP实现</h1><h2 id="动态代理的CGLIB实现"><a href="#动态代理的CGLIB实现" class="headerlink" title="动态代理的CGLIB实现"></a>动态代理的CGLIB实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCGLibProxy</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br><span class="hljs-comment">// 设置被代理的类</span><br>enhancer.setSuperclass(UserService.class);<br><span class="hljs-comment">// 设置处理类</span><br>enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>()));<br><span class="hljs-comment">// 生成的代理类，继承自UserService</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> enhancer.create();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span>&#123;<br>Object target ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallback</span><span class="hljs-params">(Object target)</span>&#123;<br><span class="hljs-built_in">this</span>.target = target <br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object obj ,Method method ,Object[] ar,MethodProxy proxy)</span><span class="hljs-keyword">throws</span> Throwable&#123;<br>System.out.println(<span class="hljs-string">&quot;前置&quot;</span>);<br>proxy.invoke(target,args);<br>System.out.println(<span class="hljs-string">&quot;后置&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>与JDK动态代理的区别</p><p>JDK动态代理只能代理实现了接口的类 → 通过接口实现进行代理</p><p>而 CGlib 可以代理未实现任何接口的类 → 通过继承类的方式进行代理（不能将基类声明为final）</p><p>性能对比</p><p>加载阶段 JDK 动态代理只会生成一个代理类， 而GClib会生成多个相关代理类</p><p>调用阶段  method 通过反射调用， proxy 通过调用父类目标对象</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 基础  控制反转与依赖注入</title>
    <link href="/2025/06/22/Spring-%E5%9F%BA%E7%A1%80-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/06/22/Spring-%E5%9F%BA%E7%A1%80-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="IoC与DI"><a href="#IoC与DI" class="headerlink" title="IoC与DI"></a>IoC与DI</h1><p>IoC(控制反转)和di(依赖注入) 。 即通过注解的方式，将业务流程中对对象的创建和管理的 控制权转移给Spring框架来进行控制。Spring框架将对象创建与业务解耦，使编程人员能够更加专注于业务实现，而不再需要着重考虑使用对象的生命周期。</p><h1 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">类扫描（<span class="hljs-meta">@ComponentScan</span>）<br>    ↓<br>BeanDefinition注册<br>    ↓<br>Bean实例化（构造器 or 工厂方法）<br>    ↓<br>依赖注入（<span class="hljs-meta">@Autowired</span>、<span class="hljs-meta">@Value</span>）<br>    ↓<br>初始化（<span class="hljs-meta">@PostConstruct</span>、InitializingBean、initMethod）<br>    ↓<br>AOP代理（若满足切面条件）<br>    ↓<br>应用运行中<br>    ↓<br>销毁（<span class="hljs-meta">@PreDestroy</span>、DisposableBean、destroyMethod）<br></code></pre></td></tr></table></figure><h1 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h1><p>Bean 是 被Spring 管理的对象的 统称</p><h2 id="Bean-配置"><a href="#Bean-配置" class="headerlink" title="Bean 配置"></a>Bean 配置</h2><p>1.@Component - @Autowire( 类注解 + 自动注入)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 数据接入类</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span><span class="hljs-params">(</span><br><span class="hljs-params">System.out.println(<span class="hljs-string">&quot;Hello Spring&quot;</span>)</span><br>)<br>&#125;<br><span class="hljs-comment">// 数据服务类</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>&#123;<br><span class="hljs-meta">@Autowired</span><br>UserDao ud ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>ud.getUserDao();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 测试类</span><br><br><span class="hljs-meta">@SpringBootApplication</span><br>Test01&#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>  &#123;<br>      <span class="hljs-type">AnnotationConfigApplicationContext</span>  <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>      <span class="hljs-type">IUserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,IUserService.class);<br>      userService.getUser();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以及Component 衍生注解</p><p>@Service </p><p>@Repository</p><p>@Configuration</p><p>2 @Bean</p><p>通过方法将对象注册到Spring </p><p>必须放置在配置类里面</p><blockquote><p>@Configuration和@Component 注解下 @bean行为的区别</p><h2 id="Configuration-类下的-Bean-方法调用（代理增强）"><a href="#Configuration-类下的-Bean-方法调用（代理增强）" class="headerlink" title="@Configuration 类下的 @Bean 方法调用（代理增强）"></a><code>@Configuration</code> 类下的 <code>@Bean</code> 方法调用（<strong>代理增强</strong>）</h2><p>当一个类被 <code>@Configuration</code> 注解标记时，Spring 会用 <strong>CGLIB 动态代理</strong> 增强这个类，形成一个代理对象。</p><ul><li>这个代理对象在内部维护了 Spring 容器的上下文；</li><li>当你在 <code>@Configuration</code> 类内部调用 <code>@Bean</code> 方法时，其实是通过代理对象去调用的；</li><li>代理对象会拦截这个调用，先检查 Spring 容器中是否已经存在对应的单例 Bean，如果存在直接返回，否则创建并注册。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>复制编辑<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> A <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>(b());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> B <span class="hljs-title function_">b</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当 <code>a()</code> 方法调用 <code>b()</code> 时，其实走的是 <code>AppConfig</code> 代理对象的 <code>b()</code> 方法，因此它会走 Spring 容器逻辑，而不是直接的方法调用。</p><hr><h2 id="Component-类下的-Bean-方法调用（无代理增强）"><a href="#Component-类下的-Bean-方法调用（无代理增强）" class="headerlink" title="@Component 类下的 @Bean 方法调用（无代理增强）"></a><code>@Component</code> 类下的 <code>@Bean</code> 方法调用（<strong>无代理增强</strong>）</h2><p>当你的类只是用 <code>@Component</code> 标注时，Spring <strong>不会</strong>使用 CGLIB 增强它。</p><p>此时：</p><ul><li>这个类就是一个普通的被 Spring 托管的对象；</li><li>其中的 <code>@Bean</code> 注解方法在容器初始化时仍然会被扫描并注册为 Bean（主要取决于你是不是把 <code>@Component</code> 类纳入了 <code>@ComponentScan</code> 范围）；</li><li>但是：<strong>方法之间的调用是普通的 Java 方法调用，没有代理，没有容器拦截</strong>；</li><li>所以在 <code>@Component</code> 下，如果你自己在一个 <code>@Bean</code> 方法中调用另一个 <code>@Bean</code> 方法，其实就是直接调用普通方法 —— 它不会走 Spring 容器逻辑，也就没有 Bean 生命周期、依赖注入、单例复用等特性。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>复制编辑<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> A <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>(b());  <span class="hljs-comment">// 直接调用 b() 方法，而不是容器中的 B 实例</span><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> B <span class="hljs-title function_">b</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>此时 <code>b()</code> 方法就是普通的对象方法，不经过 Spring 容器，你实际上会创建了两个 B 实例：</p><ul><li>一个被 Spring 容器注册；</li><li>一个直接被 <code>a()</code> 方法内部调用创建。</li></ul></blockquote><p>3 @Import （对类注解）</p><p>在当前配置类中手动导入其他 Bean 定义。</p><p>1 声明导入配置类或普通类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(OtherConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainConfig</span> &#123;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MyBean <span class="hljs-title function_">myBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBean</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>实现ImportSelector接口，传入字符数组导入相关类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;com.example.MyService&quot;</span>, <span class="hljs-string">&quot;com.example.MyRepository&quot;</span>&#125;;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(MyImportSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainConfig</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>实现ImportBeanDefinitionRegistrar接口，进行注册</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRegistrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(</span><br><span class="hljs-params">        AnnotationMetadata importingClassMetadata,</span><br><span class="hljs-params">        BeanDefinitionRegistry registry)</span> &#123;<br>        <br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(MyBean.class);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;myBean&quot;</span>, beanDefinition);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(MyRegistrar.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainConfig</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Bean的实例化"><a href="#Bean的实例化" class="headerlink" title="Bean的实例化"></a>Bean的实例化</h2><p>Bean 实例化时默认选择 无参构造器进行构造</p><p>如果 不存在无参构造器，只存在一个构造器，则使用该构造器构造，并自动注入参数对象</p><p>如果 存在多个构造器， 则会报错</p><blockquote><p>@Component  类注册定义模式 只是把类结构信息注册进去，实例化时反射创建实例，依赖注入走标准构造器或属性。</p></blockquote><blockquote><p>@Bean <strong>工厂方法定义模式 ,</strong> Spring 注册了 “如何执行这个方法去获得实例” 的元数据，不直接关心类信息，而是把方法当成实例来源。</p></blockquote><p>通过可以bean注解 来指定 具体使用的构造方法 </p><p>FactoryBean 接口 </p><p>通过实现FactoryBean 接口 来将一个工厂类注入到Spring中 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br><span class="hljs-comment">// 定义工程实际创建的对象</span><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Class&lt;?&gt;getObjectType()&#123;<br><span class="hljs-keyword">return</span> UserService.class;<br><span class="hljs-comment">// 当使用类型创建bean时指定的类型信息</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// </span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C3IocApplication</span> &#123;<br><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(C3IocApplication.class)<br>System.out.println(iot.getBean(<span class="hljs-string">&quot;&amp;orderService&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h2 id="Autowired-自动装配"><a href="#Autowired-自动装配" class="headerlink" title="@Autowired 自动装配"></a>@Autowired 自动装配</h2><p>作用域 字段，构造方法，参数，函数</p><p>多个类型注入 ，优先按类型，再按名字</p><p>@Primary  同一个类，优先匹配这个注解的实现</p><p>@Qualifier 指定别名匹配</p><p>@Autowired(required&#x3D;false)</p><h3 id="Autowired-的注入位置"><a href="#Autowired-的注入位置" class="headerlink" title="Autowired 的注入位置"></a>Autowired 的注入位置</h3><ol><li>在 对象声明位置进行自动注入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>UserService  userservice;<br></code></pre></td></tr></table></figure><ol start="2"><li>在 构造器处进行自动注入,显式指定创建对象使用的构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoService</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br>AutoService(ProductService productservice)&#123;<br><span class="hljs-built_in">this</span>.productservice = productservice;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在 传入参数时 使用Autowired 进行自动注入，设置required 允许 该参数传入为空</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoService</span> &#123;<br><span class="hljs-meta">@Autowired</span><br>AutoService(<span class="hljs-meta">@Autowired(required=false)</span> ProductService productservice)&#123;<br><span class="hljs-built_in">this</span>.productservice = productservice;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>在函数定义上增加Autowired ， 在 该方法的对象创建后自动执行，Spring不关注方法的返回值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoService</span>&#123;<br><span class="hljs-meta">@Autowired</span><br>AutoService(ProductService productservice)&#123;<br><span class="hljs-built_in">this</span>.productservice = productservice;<br>&#125;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAutoService</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;fetch the AutoService&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他自动注入注解"><a href="#其他自动注入注解" class="headerlink" title="其他自动注入注解"></a>其他自动注入注解</h3><p>@Inject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过包 引用，不能设置required=false</span><br>&lt;dependency&gt;<br>&lt;groupId&gt;jakarta.inject&lt;/groupId&gt;<br>&lt;artifactId&gt;jakarta.inject-api&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">2.0</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>@Resource</p><p>先根据名字查找，再根据类型查找</p><h2 id="值注入"><a href="#值注入" class="headerlink" title="值注入"></a>值注入</h2><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><p>向声明的变量进行赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;18&quot;)</span><br><span class="hljs-keyword">private</span> Integer age ; <br></code></pre></td></tr></table></figure><p>@PropertySource() 指定提取属性的位置 （默认从application.properties中查询）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;person.property&quot;)</span><br><span class="hljs-keyword">private</span> Integer age ;<br></code></pre></td></tr></table></figure><p>spel 向 容器赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;#&#123;&#123;&#x27;语文&#x27;:&#x27;90&#x27;,&#x27;数学&#x27;:&#x27;88&#x27;&#125;&#125;&quot;)</span><br><span class="hljs-keyword">private</span> Map&lt;String,Integer&gt; score ;<br><span class="hljs-meta">@Value(&quot;#&#123;&#123;&#x27;音乐,电影,话剧&#x27;&#125;&#125;&quot;)</span><br><span class="hljs-keyword">private</span> List&lt;String&gt;  habbies ;<br></code></pre></td></tr></table></figure><h3 id="Order"><a href="#Order" class="headerlink" title="@Order"></a>@Order</h3><p>定义注入同一个接口实现下的不同实现类的加载顺序。 值小的先被加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(classes = TestOrder.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOrder</span>&#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> A <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Order(0)</span><br><span class="hljs-keyword">public</span> B <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> List&lt;I&gt; i )</span>&#123;<br>System.out.println(i);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 或实现 Ordered接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">I</span>, Ordered &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>  <span class="hljs-comment">// 获取优先级级别</span><br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Dependson"><a href="#Dependson" class="headerlink" title="@Dependson"></a>@Dependson</h3><p>定义不同类之间的加载先后关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootDependsOnTest(classes = TestDependson.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDependson</span>&#123;<br><span class="hljs-meta">@Bean</span> <br><span class="hljs-meta">@DependsOn(&quot;d&quot;)</span>  <span class="hljs-comment">// d会提前加载</span><br><span class="hljs-keyword">public</span> C <span class="hljs-title function_">c</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> D <span class="hljs-title function_">d</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h3><p>被@Lazy注解的对象直到 被使用时才会被加载</p><h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><p>定义对象的创建（单例或非单例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Scope(&quot;Singleton&quot;)</span><br>UserService userservice<br><span class="hljs-comment">// 对象只会创建一次</span><br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br>UserSercice userservice<br><span class="hljs-comment">// 对象在每次调用后都会创建</span><br></code></pre></td></tr></table></figure><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p>动态决定某个bean 是否生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(classes = TestConditional.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TAestConditional</span>&#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Conditional(MyCondition.class)</span><br><span class="hljs-keyword">public</span> ConditionalService <span class="hljs-title function_">conditionalService</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionalService</span>();<br>&#125;<br><br><br>&#125;<br><br><span class="hljs-comment">// MyCodition.class 实现了Condition 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> boolena <span class="hljs-title function_">matches</span><span class="hljs-params">(CondtionContext context , AnnotatedTypeMetadata metadata)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IDB</span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection</span><span class="hljs-params">()</span>&#123;&#125;;<br>&#125;<br><br><span class="hljs-comment">// 实现类 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySqlDB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IDB</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;连接MySql&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OracleDB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IDB</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;连接Oreacle&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@SpringBootTest(classes = TestDB.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDB</span>&#123;<br><span class="hljs-meta">@Bean</span> <br><span class="hljs-keyword">public</span> IDB <span class="hljs-title function_">mysqlDB</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySqlDB</span>();<br>&#125;<br><br><span class="hljs-meta">@Bean</span> <br><span class="hljs-keyword">public</span> IDB <span class="hljs-title function_">oracleDB</span><span class="hljs-params">()</span>&#123;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MysqlCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context , AnnotatedTypeMetadata metadata)</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>context.getClassLoader().loadClass(<span class="hljs-string">&quot;MySQLDBConnection_class_path&quot;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ; <span class="hljs-comment">// 检查MySQL 核心类是否加载</span><br>&#125;<span class="hljs-keyword">catch</span> &#123;ClassNotFoundException e&#125;&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MysqlCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context , AnnotatedTypeMetadata metadata)</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>context.getClassLoader().loadClass(<span class="hljs-string">&quot;OracleDBConnection_class_path&quot;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ; <span class="hljs-comment">// 检查Oracle 核心类是否加载</span><br>&#125;<span class="hljs-keyword">catch</span> &#123;ClassNotFoundException e&#125;&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><h3 id="配置编码阶段"><a href="#配置编码阶段" class="headerlink" title="配置编码阶段"></a>配置编码阶段</h3><p>对需要注入容器的类进行注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseService</span>&#123;<br><span class="hljs-comment">// Service_function</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> UserService <span class="hljs-title function_">getuserservice</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>在Springboot 应用中注入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span>&#123;<br><span class="hljs-meta">@Autowired</span><br>UserService userservice<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ExecService</span><span class="hljs-params">(UserService userserive)</span>&#123;<br>userservice.getservice();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="启动Spring-程序"><a href="#启动Spring-程序" class="headerlink" title="启动Spring 程序"></a>启动Spring 程序</h3><p>加载Spring 容器</p><p>实例化托管对象</p><p>根据注解注入对象到业务流程中</p><p><strong>初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 基于接口的 初始化定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;初始化&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 基于注解的 初始化定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;初始化afterPropertiesSet&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 基于initMethod属性 初始化定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;init方法初始化&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 服务端指定初始化方法</span><br><span class="hljs-meta">@Bean(initMethod=&quot;init&quot;)</span><br><span class="hljs-keyword">public</span> UserService <span class="hljs-title function_">userServie</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();&#125;<br><span class="hljs-comment">// 执行顺序</span><br><span class="hljs-comment">// 注解</span><br><span class="hljs-comment">// 注入时方法指定 </span><br><span class="hljs-comment">// 实现接口</span><br></code></pre></td></tr></table></figure><p>放入 Map&lt;beanName,bean对象&gt;</p><p>spring容器.getBean(”beanName”) </p><p><strong>spring容器关闭 ， bean 销毁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DisposableBean</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;接口实现销毁&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 基于注解的 初始化定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-meta">@PreDestory</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;PreDestory销毁&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 基于initMethod属性 初始化定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;destory销毁&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 服务端指定初始化方法</span><br><span class="hljs-meta">@Bean(destoryMethod=&quot;destory&quot;)</span><br><span class="hljs-keyword">public</span> UserService <span class="hljs-title function_">userService</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();&#125;<br><span class="hljs-comment">// 执行顺序</span><br><span class="hljs-comment">// 注解</span><br><span class="hljs-comment">// 实现接口</span><br><span class="hljs-comment">// 注入时方法指定 </span><br><br></code></pre></td></tr></table></figure><h2 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h2><p>在Spring中可能存在编码时A和B俩个bean 需要相互调用的问题。而在Springboot中这种循环依赖的对象创建会导致直接报错</p><ol><li>打开允许循环依赖对象创建设置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.main.allow-circular-references=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ol start="2"><li>代码设计上进行控制</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">a. 把依赖的方法写在本类中<br>b. 使用组合，将bean A 和 bean B 都由bean C 进行调用<br></code></pre></td></tr></table></figure><ol start="3"><li>延迟注入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">a. 添加需要依赖的构造函数参数<br>b. 添加lazy注解<br></code></pre></td></tr></table></figure><h1 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h1><p>如果说 AOP 是 数据与业务分离，那么AOP的设计则是”运维代码（日志统计，观测，测试）” 与业务的分离。通过定义AOP类向目标业务类中注入切面类，来完成处理过程中对业务流程执行的拦截，获取想要的数据以及进行请求&#x2F;响应改造过程。</p><h2 id="定义业务类"><a href="#定义业务类" class="headerlink" title="定义业务类"></a>定义业务类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;增加&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;删除&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;修改&quot;</span>)<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;查询&quot;</span>)<br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;execution(* class_path.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">log</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> pjp.proceed();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    System.out.println(<span class="hljs-string">&quot;用时：&quot;</span>+(end-begin)+<span class="hljs-string">&quot;ms&quot;</span>);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>@EnableAspectJAutoProxy  使用SpingBoot 自动添加 使能</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>目标对象 ：要增强的对象</p><p>切面 ：要增强的代码放入那个类叫做切面类 ， @Aspect</p><p>通知 ：用来增强目标对象的函数，叫做通知</p><p>切点 ：通知的目标方法，使用切点表达式指定</p><p>连接点 ：通知和目标方的桥梁</p><p>顾问 ：存储切入类对象的对象</p><p>织入 ： 切入类中的方法 组合到目标对象的过程</p><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><h3 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h3><p>定义在目标方法之前执行的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span>&#123;<br><span class="hljs-meta">@Before(&quot;execution(*.com.example.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinpoint)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br><br>Object[] args = joinPoint.getArgs();<br>System.out.println(<span class="hljs-string">&quot;当前方法是&quot;</span>+methodName+<span class="hljs-string">&quot;参数&quot;</span>+Array.toString(Args));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h3><p>定义在目标方法之后执行的方法</p><h3 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h3><p>定义在目标方法返回前执行的方法</p><h3 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h3><p>定义在目标方法异常时（Catch中）会执行的方法</p><p>前置—执行方法—返回通知—后置通知</p><h2 id="抽取切点表达式"><a href="#抽取切点表达式" class="headerlink" title="抽取切点表达式"></a>抽取切点表达式</h2><p>通过注解 @Pointcut 创建一个函数，后续都可以使用该函数作为切点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution( public int (target_method_path))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myPoint</span><span class="hljs-params">()</span>&#123;&#125;;<br><br>后续 切面方法可以使用<br><span class="hljs-meta">@After(&quot;myPoint&quot;)</span> 进行注解<br></code></pre></td></tr></table></figure><p>通配符规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;execution(* public void target_method_path)&quot;</span><br><br><span class="hljs-string">&quot;within( package_name.class_name&quot;</span>)<br><br><span class="hljs-string">&quot;@annotation(annotation_name)&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是控制反转（IoC）与依赖注入（DI）——从编程范式演进谈起</title>
    <link href="/2025/06/20/%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%EF%BC%88IoC%EF%BC%89%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89%E2%80%94%E2%80%94%E4%BB%8E%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E6%BC%94%E8%BF%9B%E8%B0%88%E8%B5%B7/"/>
    <url>/2025/06/20/%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%EF%BC%88IoC%EF%BC%89%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89%E2%80%94%E2%80%94%E4%BB%8E%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E6%BC%94%E8%BF%9B%E8%B0%88%E8%B5%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是控制反转（IoC）与依赖注入（DI）——从编程范式演进谈起"><a href="#什么是控制反转（IoC）与依赖注入（DI）——从编程范式演进谈起" class="headerlink" title="什么是控制反转（IoC）与依赖注入（DI）——从编程范式演进谈起"></a>什么是控制反转（IoC）与依赖注入（DI）——从编程范式演进谈起</h1><p>在学习 Spring 这类框架时，最先遇到的核心概念便是“控制反转（IoC）”与“依赖注入（DI）”。很多资料简单地解释为：“控制权被移交给了框架”，但这种表述往往让人难以深入理解其内在逻辑。本篇文章试图从软件工程的发展脉络出发，系统性地梳理 IoC 与 DI 背后的编程思想演变过程。</p><hr><h2 id="一、面向过程编程：函数为中心的状态转移"><a href="#一、面向过程编程：函数为中心的状态转移" class="headerlink" title="一、面向过程编程：函数为中心的状态转移"></a>一、面向过程编程：函数为中心的状态转移</h2><p>在面向过程的编程范式中，开发者需要预先规划好整个业务流程，并在每个步骤中明确传入数据、处理逻辑与输出结果。例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">output1 = last_step()<br>output2 = step(output1)<br>output3 = next_step(output2)<br></code></pre></td></tr></table></figure><p>这种设计的优点在于：</p><ul><li>流程清晰可控</li><li>数据传递路径明确</li></ul><p>典型如操作系统内核的网络协议栈（如 TCP&#x2F;IP）：</p><ul><li>包头解析 → 协议识别 → 分发处理 → 结构体转换 → 逐层传递</li></ul><p>但缺点也明显：</p><ul><li>结构体（状态）与函数（状态转移逻辑）高度耦合</li><li>复用性差，扩展困难</li></ul><p>函数掌握着逻辑主导权，结构体只是被动支撑的数据承载体。</p><hr><h2 id="二、面向对象编程：状态内聚与封装"><a href="#二、面向对象编程：状态内聚与封装" class="headerlink" title="二、面向对象编程：状态内聚与封装"></a>二、面向对象编程：状态内聚与封装</h2><p>为缓解过程式编程中函数与数据的高耦合问题，面向对象编程（OOP）提出了新的范式：</p><ul><li>数据与行为内聚在对象中</li><li>状态由对象自身管理</li><li>函数（方法）成为对象内操作自身状态的手段</li></ul><p>示例结构：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Function( ClassA().method( ClassB() ), ClassB().field )<br></code></pre></td></tr></table></figure><p>在 OOP 中：</p><ul><li>对象的状态可以持久存在，形成中间存储</li><li>不同对象间通过方法调用完成状态转移</li><li>降低了函数与状态的耦合，提高了模块复用能力</li></ul><p>但也引入了新的挑战：</p><ul><li>哪些状态应该归属于哪个对象？</li><li>哪些对象能访问或操作哪些状态？</li><li>过高的内聚可能导致复杂度集中在少数大对象中</li></ul><hr><h2 id="三、函数式编程与模板编程：复用与抽象的探索"><a href="#三、函数式编程与模板编程：复用与抽象的探索" class="headerlink" title="三、函数式编程与模板编程：复用与抽象的探索"></a>三、函数式编程与模板编程：复用与抽象的探索</h2><h3 id="1-函数式编程（Functional-Programming）"><a href="#1-函数式编程（Functional-Programming）" class="headerlink" title="1. 函数式编程（Functional Programming）"></a>1. 函数式编程（Functional Programming）</h3><p>函数式编程强调：</p><ul><li>函数是一等公民，可传递、可组合</li><li>避免副作用（Pure Function）</li><li>不可变数据结构</li><li>通过高阶函数与函数组合形成数据流管道</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">result = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x * <span class="hljs-number">2</span>, <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x &gt; <span class="hljs-number">10</span>, pre_list))<br></code></pre></td></tr></table></figure><p>通过函数链式组合，实现灵活的数据流处理。</p><h3 id="2-模板编程（Template-Programming）"><a href="#2-模板编程（Template-Programming）" class="headerlink" title="2. 模板编程（Template Programming）"></a>2. 模板编程（Template Programming）</h3><p>以 C++ 模板、Java 泛型为代表，模板编程通过类型参数化在编译期生成适配不同类型的通用逻辑。</p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T a, T b)</span> </span>&#123; <span class="hljs-keyword">return</span> a + b; &#125;<br></code></pre></td></tr></table></figure><p>模板编程的优势：</p><ul><li>编译期类型安全</li><li>提高通用性与代码复用</li></ul><p>但也存在：</p><ul><li>模板通用性的设计难度</li><li>复杂模板逻辑易增加学习曲线</li></ul><blockquote><p>这两类范式，都在探索 “ <strong>通用能力抽象与复用</strong> “，但对于业务复杂性的动态变化，依然缺乏弹性与运行时可配置性。</p></blockquote><hr><h2 id="四、面向接口编程：松耦合调度的桥梁"><a href="#四、面向接口编程：松耦合调度的桥梁" class="headerlink" title="四、面向接口编程：松耦合调度的桥梁"></a>四、面向接口编程：松耦合调度的桥梁</h2><p>为进一步降低模块耦合度，尤其在 Java 语言中广泛采用了 <strong>面向接口编程</strong> ：</p><ul><li>接口定义了对象应该具备的能力（方法签名）</li><li>业务流程面向接口编写逻辑，具体对象只需实现接口即可被流程调度</li></ul><p>示例结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">()</span> &#123;...&#125;<br>&#125;<br><br><span class="hljs-type">Service</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceA</span>();<br>service.process();<br></code></pre></td></tr></table></figure><p>其核心思想是：</p><ul><li><strong>弱耦合</strong> ：流程与实现解耦</li><li><strong>可替换性</strong> ：实现灵活扩展</li><li><strong>职责单一</strong> ：流程只关注调用接口，而不关心具体实现细节</li></ul><p>面向接口成为 IoC 与 DI 框架设计中的重要桥梁。</p><hr><h2 id="五、元编程与框架设计：控制反转与依赖注入的诞生"><a href="#五、元编程与框架设计：控制反转与依赖注入的诞生" class="headerlink" title="五、元编程与框架设计：控制反转与依赖注入的诞生"></a>五、元编程与框架设计：控制反转与依赖注入的诞生</h2><h3 id="1-元编程的引入"><a href="#1-元编程的引入" class="headerlink" title="1. 元编程的引入"></a>1. 元编程的引入</h3><p>当系统规模庞大、对象数量激增时，仍由开发者手动管理对象创建与依赖绑定会带来严重复杂度。此时，引入元编程思路：</p><ul><li>通过注解、配置、反射等元信息</li><li>在运行前预先扫描与解析</li><li>自动生成依赖图谱</li></ul><h3 id="2-控制反转（IoC）"><a href="#2-控制反转（IoC）" class="headerlink" title="2. 控制反转（IoC）"></a>2. 控制反转（IoC）</h3><p><strong>控制反转</strong>即：</p><ul><li>对象创建权、依赖注入权，从开发者代码转交给框架容器控制</li><li>框架在运行时根据依赖关系，按需创建与装配对象</li></ul><h3 id="3-依赖注入（DI）"><a href="#3-依赖注入（DI）" class="headerlink" title="3. 依赖注入（DI）"></a>3. 依赖注入（DI）</h3><p><strong>依赖注入</strong>是控制反转的一种具体实现方式：</p><ul><li>当对象被框架创建时，所依赖的其他对象会自动注入到其属性或构造方法中</li></ul><h3 id="4-以-Spring-为例"><a href="#4-以-Spring-为例" class="headerlink" title="4. 以 Spring 为例"></a>4. 以 Spring 为例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> B b;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">message</span><span class="hljs-params">()</span> &#123; System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>); &#125;<br>&#125;<br><br><span class="hljs-comment">// 运行时</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> context.getBean(A.class);<br>a.b.message();<br></code></pre></td></tr></table></figure><p>Spring 启动时：</p><ul><li>扫描所有 Bean 注解</li><li>构建完整依赖关系图</li><li>延迟或按需创建对象</li><li>自动注入依赖对象</li></ul><p>形成如下自动化流程：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">[Spring 容器启动]<br> → 解析元信息（注解/配置）<br> → 构建依赖图<br> → 控制对象创建顺序<br> → 依赖注入完成<br> → 业务流程执行<br></code></pre></td></tr></table></figure><p>开发者只需关注：</p><ul><li>业务逻辑编码</li><li>对象职责划分</li><li>依赖声明</li></ul><p>对象的生命周期、依赖装配、运行时调度全部交给框架容器统一管理。</p><hr><h2 id="六、总结：控制反转与依赖注入的工程价值"><a href="#六、总结：控制反转与依赖注入的工程价值" class="headerlink" title="六、总结：控制反转与依赖注入的工程价值"></a>六、总结：控制反转与依赖注入的工程价值</h2><p>从面向过程到元编程范式的演化，可以看到控制反转与依赖注入为软件工程带来的重大收益：</p><ul><li>降低耦合度</li><li>提高模块复用性</li><li>提升系统扩展弹性</li><li>简化对象生命周期管理</li><li>支持更复杂的大型分布式应用架构</li></ul><p>控制反转的核心并非只是“把控制权交出去”，而是：</p><blockquote><p><strong>通过统一的元信息驱动，框架容器全面接管对象管理与依赖装配职责，开发者只需关注业务实现本身。</strong></p></blockquote><p>而这，正是现代框架如 Spring 能够支撑超大规模业务系统快速演进的关键所在。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大模型应用与扩展-Function Calling与MCP</title>
    <link href="/2025/06/17/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%8E%E6%89%A9%E5%B1%95-Function-Calling%E4%B8%8EMCP/"/>
    <url>/2025/06/17/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%8E%E6%89%A9%E5%B1%95-Function-Calling%E4%B8%8EMCP/</url>
    
    <content type="html"><![CDATA[<h1 id="大模型的交互过程"><a href="#大模型的交互过程" class="headerlink" title="大模型的交互过程"></a><strong>大模型的交互过程</strong></h1><p><img src="https://i.111666.best/image/hjqMibXRb6nLoE2xBo8Fl4.png" alt="处理过程.png"></p><p>这是一个简单的提问-响应过程。为了解决模型的“幻觉问题”，可以通过多种方式向模型添加有用的信息来增加模型响应结果的可信度</p><p><img src="https://i.111666.best/image/6VLSvOsKt8bxRff2qJshwn.png" alt="扩展处理.png"></p><p>1 . 多轮对话，通过多次提问过程，更加精确的描述用户的实际需求。如Agent</p><p>2 . 客户端代理对用户请求进行扩展，最终请求 携带 代理描述信息+原用户请求，向大模型发起请求。如RAG，MCP</p><p>3 .  模型端 功能扩展，模型端使用本地工具（一般是一些方法调用）来自行获取扩展信息，增强相应质量。如Function Calling</p><p>综上，在从流程上，大模型的扩展会有本地端的功能增强，服务端功能增强两种方式。从内容上，则分为 调用 &#x2F; 内容 两种。</p><h1 id="Function与MCP"><a href="#Function与MCP" class="headerlink" title="Function与MCP"></a>Function与MCP</h1><p>我们知道 ，只有每一次请求的发起都会被正确转化为对特定功能的调用，这时AI 所能提供的服务才可以作为稳定系统的一部分。在这个角度，大模型能否根据用户请求，进行稳定的参数调用响应。成为大模型能否参与到业务流程中的重要要求。</p><p><img src="https://i.111666.best/image/WBijY3IgkcE7NG9DlwZBCn.png" alt="MCP&amp;FunctionCall.png"></p><h1 id="Function-Calling"><a href="#Function-Calling" class="headerlink" title="Function Calling"></a>Function Calling</h1><p>Function Calling 是 openai提供的一种序列化请求&#x2F;响应的方式。通过向大模型发起结构化的调用请求，模型会分析请求内容，并响应对应的函数以及参数调用。</p><h2 id="MCP"><a href="#MCP" class="headerlink" title="MCP"></a>MCP</h2><p>MCP(Model Context Protocol) 模型上下文协议。它是一种与模型的通信方式。其定义了MCP Client 和MCP Sever 两种角色。也可以将MCP理解为一个位于本地的中间过程代理。通过接收用户向模型发起的请求，之后查询本地支持的API字段，组装后向大模型发起请求，大模型接收后分析用户请求以及其中定义的tools信息。响应一个方法调用请求（function call 在这个步骤被执行）给MCP server. MCP server 接收后。根据调用请求在本地执行对应的方法，获取返回信息，再传递给大模型处理。大模型处理后，整理结果向用户返回。</p><p><img src="https://i.111666.best/image/cn2lJMH4EBYTymbHhAfP0d.png" alt="mcp处理过程.png"></p><h1 id="MCP-实现"><a href="#MCP-实现" class="headerlink" title="MCP 实现"></a>MCP 实现</h1><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>MCP 架构 定义了 3个过程角色 ：</p><ol><li>MCP HOST :  主要负责与用户进行交互。接收用户发出的消息请求</li><li>MCP Client :  组织message，构造发送给模型的请求。一般将MCP HOST 包含在客户端内</li><li>MCP Server :  维护本地的方法调用列表，处理接收到的模型功能调用，将处理后的消息和用户消息再一次发送给大模型</li></ol><p>一个标准的大模型HTTP请求（基于qwen3）类似于：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qwen3-8b&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//  指定模型名称</span><br>    <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>     <span class="hljs-comment">// 传入的消息</span><br>        <span class="hljs-attr">&quot;messages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>   <span class="hljs-comment">// 传入的消息内容</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-comment">// 定义消息的角色，系统prompt</span><br>                <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>   <br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 定义消息类型</span><br>                        <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你是一个助手，你需要根据用户的输入进行回答。用户的输入中包含它所能提供的调用功能，如果你觉得执行某个功能，会帮助得到更 好的结果，请向用户返回对应的json请求&quot;</span>  <span class="hljs-comment">// 具体的文本信息</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-comment">// 消息角色，一般是用户请求</span><br>                <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-comment">// 消息类型 </span><br>                        <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我想执行test&quot;</span>  <span class="hljs-comment">// 用户角色</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;parameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;temperature&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.7</span><span class="hljs-punctuation">,</span>   <span class="hljs-comment">// 温度，-&gt;0 表示生成的内容更发散， -&gt;1 表示生成的内容更稳定</span><br>        <span class="hljs-attr">&quot;top_p&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.8</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 表示相关度 </span><br>        <span class="hljs-attr">&quot;result_format&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;message&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 响应的信息格式</span><br>        <span class="hljs-attr">&quot;enable_thinking&quot;</span><span class="hljs-punctuation">:</span> False  <span class="hljs-comment">// qwen特有参数</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>  <span class="hljs-comment">// 本地的工具声明</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;function&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-comment">// 类型指定为function,声明为一个可执行函数的信息</span><br>            <span class="hljs-attr">&quot;function&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>           <br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-comment">// 函数名</span><br>                <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调用test功能&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 对函数功能的描述</span><br>                <span class="hljs-attr">&quot;parameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>  <span class="hljs-comment">// 参数描述</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;object&quot;</span><span class="hljs-punctuation">,</span>  <br>                    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;name参数&quot;</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;required&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;name&quot;</span>  <span class="hljs-comment">// 要求的参数信息</span><br>                    <span class="hljs-punctuation">]</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tool_choice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>qwen3 支持的 role 角色定义 （经过测试目前 tool_call的Function Calling 机制仍未能正确识别）</p><table><thead><tr><th>role 值</th><th>含义说明</th><th>示例场景</th></tr></thead><tbody><tr><td><code>system</code></td><td>设置系统行为和角色，引导模型回答风格或身份</td><td>“你是一个有耐心的英语老师”</td></tr><tr><td><code>user</code></td><td>用户输入，用于发起请求或提问</td><td>“请告诉我北京今天的天气”</td></tr><tr><td><code>assistant</code></td><td>模型生成的回答内容</td><td>自动由模型生成返回消息</td></tr><tr><td><code>tool_call</code></td><td>（可选）表示模型请求调用某个工具（函数）</td><td>用于 Function Calling 机制</td></tr><tr><td><code>tool_response</code></td><td>（可选）表示工具调用的响应结果，传给模型继续生成</td><td>工具调用返回值的嵌入，例如天气数据</td></tr></tbody></table><p>首先定义了一个MCPmessage的 结构，在后续的传递过程中通过创建MCPmessage对象来完成用户，响应消息的插入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MCPmessage</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,role,<span class="hljs-built_in">type</span>,message</span>):<br>        <span class="hljs-variable language_">self</span>.data = &#123;<br>            <span class="hljs-string">&quot;role&quot;</span>:role,<br>            <span class="hljs-string">&quot;content&quot;</span>:[&#123;<br>                <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-built_in">type</span>,<br>                <span class="hljs-built_in">type</span>:message<br>            &#125;]<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LLMClient</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;大模型客户端&quot;&quot;&quot;</span><br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.api_key = <span class="hljs-string">&quot;your-api-key&quot;</span><br>        <span class="hljs-variable language_">self</span>.base_url = <span class="hljs-string">&quot;&lt;https://dashscope.aliyuncs.com/api/v1&gt;&quot;</span><br>        <span class="hljs-variable language_">self</span>.model = <span class="hljs-string">&quot;qwen-8b&quot;</span><br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">configure</span>(<span class="hljs-params">self, api_key: <span class="hljs-built_in">str</span>, base_url: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span>, model: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;配置大模型参数&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.api_key = api_key<br>        <span class="hljs-keyword">if</span> base_url:<br>            <span class="hljs-variable language_">self</span>.base_url = base_url<br>        <span class="hljs-keyword">if</span> model:<br>            <span class="hljs-variable language_">self</span>.model = model<br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">chat_completion</span>(<span class="hljs-params">self, messages, tools</span>) :<br>        <span class="hljs-string">&quot;&quot;&quot;调用大模型进行对话&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.api_key:<br>            <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;API Key未配置&quot;</span>&#125;<br>        messages.insert(<span class="hljs-number">0</span>,&#123;<br>                        <span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>,<br>                        <span class="hljs-string">&quot;content&quot;</span>: [<br>                            &#123;<br>                                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>                                <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;你是一个助手，你需要根据用户的输入进行回答。用户的输入中包含它所能提供的调用功能，如果你觉得执行某个功能，会帮助得到更好的结果，请向用户返回对应的json请求,你可以调用如下功能，如果发现“执行test”等关键词，请调用 execute_test，并传入 name=\\&quot;</span>test\\<span class="hljs-string">&quot;&quot;</span>,<br>                            &#125;<br>                        ],<br>                    &#125;)<br><br>        headers = &#123;<br>            <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">&#123;self.api_key&#125;</span>&quot;</span>,<br>            <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>        &#125;<br>      <br>        payload = &#123;<br>            <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-variable language_">self</span>.model,<br>            <span class="hljs-string">&quot;input&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;messages&quot;</span>: messages<br>            &#125;,<br>            <span class="hljs-string">&quot;parameters&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;temperature&quot;</span>: <span class="hljs-number">0.7</span>,<br>                <span class="hljs-string">&quot;top_p&quot;</span>: <span class="hljs-number">0.8</span>,<br>                <span class="hljs-string">&quot;result_format&quot;</span>: <span class="hljs-string">&quot;tool_call&quot;</span>,<br>                <span class="hljs-string">&quot;enable_thinking&quot;</span>: <span class="hljs-literal">False</span>,<br>            &#125;,<br>            <span class="hljs-string">&quot;tools&quot;</span>: tools,<br>            <span class="hljs-string">&quot;tool_choice&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> tools:<br>            payload[<span class="hljs-string">&quot;tools&quot;</span>] = tools<br>            payload[<span class="hljs-string">&quot;tool_choice&quot;</span>] = <span class="hljs-string">&quot;auto&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(payload)<br>            response = requests.post(<br>                <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.base_url&#125;</span>/services/aigc/text-generation/generation&quot;</span>,<br>                headers=headers,<br>                json=payload,<br>                timeout=<span class="hljs-number">30</span><br>            )<br>            response.raise_for_status()<br>            <span class="hljs-keyword">return</span> response.json()<br>        <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">f&quot;大模型调用失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="MCP-服务器"><a href="#MCP-服务器" class="headerlink" title="MCP 服务器"></a>MCP 服务器</h2><p>MCP 服务器主要负责 本地的功能管理，以及中间过程方法调用的功能处理。</p><p>即当 用户发起的请求信息 得到模型响应了一个调用传递后，会根据传递的JSON请求，解析识别到对应的函数进行执行，并将结果与用户原请求一起返回给大模型由大模型继续处理。</p><p>从这里我们可以看出来，大模型本身并不保存会话记录。所谓的”会话“ 实际上是每一次请求都携带了之前请求的全部token内容，由大模型依据所有内容再进行生成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">McpServer</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.llmclient = LLMClient()<br>        <span class="hljs-variable language_">self</span>.conversation_history = []<br>        <span class="hljs-variable language_">self</span>.session_id = <span class="hljs-built_in">str</span>(uuid.uuid4())<br>        <span class="hljs-variable language_">self</span>.api_registry = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_functions_to_tools</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;将函数注册表转换为API工具格式&quot;&quot;&quot;</span><br>        tools = []<br>        <span class="hljs-keyword">for</span> name, func_struct <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.api_registry.items():<br>            tool = &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;function&quot;</span>,<br>                <span class="hljs-string">&quot;function&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;name&quot;</span>: name,<br>                    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">f&quot;调用<span class="hljs-subst">&#123;name&#125;</span>功能&quot;</span>,<br>                    <span class="hljs-string">&quot;parameters&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span>,<br>                        <span class="hljs-string">&quot;properties&quot;</span>: &#123;&#125;,<br>                        <span class="hljs-string">&quot;required&quot;</span>: func_struct.parameters_list<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment"># 为每个参数添加属性定义</span><br>            <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> func_struct.parameters_list:<br>                tool[<span class="hljs-string">&quot;function&quot;</span>][<span class="hljs-string">&quot;parameters&quot;</span>][<span class="hljs-string">&quot;properties&quot;</span>][param] = &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>                    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;param&#125;</span>参数&quot;</span><br>                &#125;<br>            tools.append(tool)<br>        <span class="hljs-keyword">return</span> tools<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_message</span>(<span class="hljs-params">self,user_message</span>) :<br>    <span class="hljs-string">&quot;&quot;&quot;对请求预处理，并向大模型发送请求&quot;&quot;&quot;</span><br>        message = MCPmessage(role=<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span>, message=user_message)<br>        <span class="hljs-variable language_">self</span>.conversation_history.append(message.data)<br>        <span class="hljs-variable language_">self</span>.messages = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.conversation_history[-<span class="hljs-number">3</span>:]:<br>            <span class="hljs-variable language_">self</span>.messages.append(i) <br>        tools=<span class="hljs-variable language_">self</span>.convert_functions_to_tools()<br>        response = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">self</span>.llmrequest(<span class="hljs-variable language_">self</span>.messages,tools)  <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search_parameter</span>(<span class="hljs-params">self, message</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;因为目前qwen3 对于function calling 的 tool_call 字段响应不够稳定，</span><br><span class="hljs-string">    通过一个解析方法来获取方法名和参数信息&quot;&quot;&quot;</span><br>        start, end = -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(message):  <span class="hljs-comment"># 修复：正确遍历字符</span><br>            <span class="hljs-keyword">if</span> char == <span class="hljs-string">&quot;\\&quot;</span><span class="hljs-string">&quot;:</span><br><span class="hljs-string">                if start == -1:</span><br><span class="hljs-string">                    start = i + 1  # 跳过引号本身</span><br><span class="hljs-string">                else:</span><br><span class="hljs-string">                    end = i</span><br><span class="hljs-string">                    break</span><br><span class="hljs-string">      </span><br><span class="hljs-string">        if start != -1 and end != -1:</span><br><span class="hljs-string">            return message[start:end]</span><br><span class="hljs-string">        return &quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    async def llmrequest(self,messages,tools):</span><br><span class="hljs-string">    &quot;</span><span class="hljs-string">&quot;&quot;</span>用户请求-&gt;模型调用响应-&gt;本地方法执行-&gt;结果回传-&gt;模型响应处理流程<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        response = await self.llmclient.chat_completion(messages,tools)</span><br><span class="hljs-string">        # 获取用户的请求的响应信息</span><br><span class="hljs-string">        try :</span><br><span class="hljs-string">            FunctionCallMessage = response[&quot;output&quot;][&quot;choices&quot;][0][&quot;message&quot;][&quot;content&quot;]</span><br><span class="hljs-string">            # 检查响应的内容</span><br><span class="hljs-string">            if &quot;action&quot; in FunctionCallMessage:</span><br><span class="hljs-string">            # 当前无法稳定返回 &quot;tool_call&quot;。 先通过 检索实现 方法调用</span><br><span class="hljs-string">                function_name = self.search_parameter(FunctionCallMessage.split(&quot;\\&quot;action\\&quot;&quot;)[1])</span><br><span class="hljs-string">                # 使用检索函数获取待执行函数名</span><br><span class="hljs-string">                if function_name in self.api_registry.keys():</span><br><span class="hljs-string">                # 查询维护的方法列表中是否存在对应的方法</span><br><span class="hljs-string">                    target_function = self.api_registry[function_name]</span><br><span class="hljs-string">                    # 查询到对应的对象</span><br><span class="hljs-string">                    parameters_list = []</span><br><span class="hljs-string">                    for i  in target_function.parameters_list:</span><br><span class="hljs-string">                        if i in FunctionCallMessage: </span><br><span class="hljs-string">                            parameters_list.append(self.search_parameter(FunctionCallMessage.split(i)[-1]))</span><br><span class="hljs-string">                # 从响应结果中提取方法</span><br><span class="hljs-string">                self.api_registry[function_name].function(parameters_list)</span><br><span class="hljs-string">                # 执行函数调用</span><br><span class="hljs-string">                response = requests.post(self.api_registry[function_name].url)</span><br><span class="hljs-string">                # 如果是一个接口请求，则可以使用requests向接口发出请求</span><br><span class="hljs-string">                self.conversation_history.append(MCPmessage(&quot;function&quot;,&quot;text&quot;,&quot;test 功能已经执行完毕，请向客户端返回成功信息&quot;  ).data)</span><br><span class="hljs-string">                # 将响应结果添加到对话历史中</span><br><span class="hljs-string">                response = await self.llmclient.chat_completion([self.conversation_history[-1]],tools)              </span><br><span class="hljs-string">        # 获取响应</span><br><span class="hljs-string">        except KeyError:</span><br><span class="hljs-string">            pass </span><br><span class="hljs-string">        return response</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>定义方法的结构维护，便于查询方法和方法的参数信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FunctionStruct</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,function,parameters_list,url</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.function = function<br>        <span class="hljs-variable language_">self</span>.parameters_list = parameters_list<br>        <span class="hljs-variable language_">self</span>.url = url<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_test</span>(<span class="hljs-params">*args</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;function test&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>(<span class="hljs-params">*args</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;function execute&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    ms = McpServer()<br>    ms.api_registry[<span class="hljs-string">&quot;execute_test&quot;</span>] = FunctionStruct(<span class="hljs-string">&quot;execute_test&quot;</span>, execute_test, [<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-string">&quot;&lt;http://www.baidu.com&gt;&quot;</span>)<br>    ms.api_registry[<span class="hljs-string">&quot;execute&quot;</span>] = FunctionStruct(<span class="hljs-string">&quot;execute&quot;</span>, execute, [<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-string">&quot;&lt;http://www.baidu.com&gt;&quot;</span>)<br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">async_interaction</span>():<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入你的问题：&quot;</span>)<br>            question = <span class="hljs-built_in">input</span>()<br>            <span class="hljs-keyword">await</span> ms.process_message(question)<br>  <br>    asyncio.run(async_interaction())<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>通过打印接口信息可以看到对大模型发起了两次请求，并最终执行了功能，并返回成功的响应</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">请输入你的问题：<br>我想执行test<br>&#123;<span class="hljs-string">&#x27;model&#x27;</span>: <span class="hljs-string">&#x27;qwen3-8b&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>: &#123;<span class="hljs-string">&#x27;messages&#x27;</span>: [&#123;<span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: [&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;你是一个助手，你需要根据用户的输入进行回答。用户的输入中包含它所能提供的调用功能，如果你觉得执行某个功能，会帮助得到更好的结果，请向用 户返回对应的json请求,你可以调用如下功能，如果发现“执行test”等关键词，请调用 execute_test，并传入 name=&quot;test&quot;&#x27;</span>&#125;]&#125;, &#123;<span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: [&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;我想执行test&#x27;</span>&#125;]&#125;, &#123;<span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: [&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;我想执行test&#x27;</span>&#125;]&#125;, &#123;<span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: [&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;我想执行test&#x27;</span>&#125;]&#125;]&#125;, <span class="hljs-string">&#x27;parameters&#x27;</span>: &#123;<span class="hljs-string">&#x27;temperature&#x27;</span>: <span class="hljs-number">0.7</span>, <span class="hljs-string">&#x27;top_p&#x27;</span>: <span class="hljs-number">0.8</span>, <span class="hljs-string">&#x27;result_format&#x27;</span>: <span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-string">&#x27;enable_thinking&#x27;</span>: <span class="hljs-symbol">False</span>&#125;, <span class="hljs-string">&#x27;tools&#x27;</span>: [&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;function&#x27;</span>, <span class="hljs-string">&#x27;function&#x27;</span>: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;execute_test&#x27;</span>, <span class="hljs-string">&#x27;description&#x27;</span>: <span class="hljs-string">&#x27;调用execute_test功能&#x27;</span>, <span class="hljs-string">&#x27;parameters&#x27;</span>: &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;properties&#x27;</span>: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;description&#x27;</span>: <span class="hljs-string">&#x27;name参数&#x27;</span>&#125;&#125;, <span class="hljs-string">&#x27;required&#x27;</span>: [<span class="hljs-string">&#x27;name&#x27;</span>]&#125;&#125;&#125;, &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;function&#x27;</span>, <span class="hljs-string">&#x27;function&#x27;</span>: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;execute&#x27;</span>, <span class="hljs-string">&#x27;description&#x27;</span>: <span class="hljs-string">&#x27;调用execute功能&#x27;</span>, <span class="hljs-string">&#x27;parameters&#x27;</span>: &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;properties&#x27;</span>: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;description&#x27;</span>: <span class="hljs-string">&#x27;name参数&#x27;</span>&#125;&#125;, <span class="hljs-string">&#x27;required&#x27;</span>: [<span class="hljs-string">&#x27;name&#x27;</span>]&#125;&#125;&#125;], <span class="hljs-string">&#x27;tool_choice&#x27;</span>: <span class="hljs-string">&#x27;auto&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;output&#x27;</span>: &#123;<span class="hljs-string">&#x27;choices&#x27;</span>: [&#123;<span class="hljs-string">&#x27;finish_reason&#x27;</span>: <span class="hljs-string">&#x27;stop&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: &#123;<span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;assistant&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&#x27;&#123;&quot;action&quot;: &quot;execute_test&quot;, &quot;name&quot;: &quot;test&quot;&#125;&#x27;</span>&#125;&#125;]&#125;, <span class="hljs-string">&#x27;usage&#x27;</span>: &#123;<span class="hljs-string">&#x27;total_tokens&#x27;</span>: <span class="hljs-number">108</span>, <span class="hljs-string">&#x27;output_tokens&#x27;</span>: <span class="hljs-number">13</span>, <span class="hljs-string">&#x27;input_tokens&#x27;</span>: <span class="hljs-number">95</span>&#125;, <span class="hljs-string">&#x27;request_id&#x27;</span>: <span class="hljs-string">&#x27;09dc09ea-ed80-9632-bd1d-77d05cde942e&#x27;</span>&#125;<br>function test<br>&#123;<span class="hljs-string">&#x27;model&#x27;</span>: <span class="hljs-string">&#x27;qwen3-8b&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>: &#123;<span class="hljs-string">&#x27;messages&#x27;</span>: [&#123;<span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: [&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;你是一个助手，你需要根据用户的输入进行回答。用户的输入中包含它所能提供的调用功能，如果你觉得执行某个功能，会帮助得到更好的结果，请向用 户返回对应的json请求,你可以调用如下功能，如果发现“执行test”等关键词，请调用 execute_test，并传入 name=&quot;test&quot;&#x27;</span>&#125;]&#125;, &#123;<span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;function&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: [&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;test 功能已经执行完毕，请向客户端返回成功信息&#x27;</span>&#125;]&#125;]&#125;, <span class="hljs-string">&#x27;parameters&#x27;</span>: &#123;<span class="hljs-string">&#x27;temperature&#x27;</span>: <span class="hljs-number">0.7</span>, <span class="hljs-string">&#x27;top_p&#x27;</span>: <span class="hljs-number">0.8</span>, <span class="hljs-string">&#x27;result_format&#x27;</span>: <span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-string">&#x27;enable_thinking&#x27;</span>: <span class="hljs-symbol">False</span>&#125;, <span class="hljs-string">&#x27;tools&#x27;</span>: [&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;function&#x27;</span>, <span class="hljs-string">&#x27;function&#x27;</span>: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;execute_test&#x27;</span>, <span class="hljs-string">&#x27;description&#x27;</span>: <span class="hljs-string">&#x27;调用execute_test功能&#x27;</span>, <span class="hljs-string">&#x27;parameters&#x27;</span>: &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;properties&#x27;</span>: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;description&#x27;</span>: <span class="hljs-string">&#x27;name参数&#x27;</span>&#125;&#125;, <span class="hljs-string">&#x27;required&#x27;</span>: [<span class="hljs-string">&#x27;name&#x27;</span>]&#125;&#125;&#125;, &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;function&#x27;</span>, <span class="hljs-string">&#x27;function&#x27;</span>: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;execute&#x27;</span>, <span class="hljs-string">&#x27;description&#x27;</span>: <span class="hljs-string">&#x27;调用execute功能&#x27;</span>, <span class="hljs-string">&#x27;parameters&#x27;</span>: &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;properties&#x27;</span>: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;description&#x27;</span>: <span class="hljs-string">&#x27;name参数&#x27;</span>&#125;&#125;, <span class="hljs-string">&#x27;required&#x27;</span>: [<span class="hljs-string">&#x27;name&#x27;</span>]&#125;&#125;&#125;], <span class="hljs-string">&#x27;tool_choice&#x27;</span>: <span class="hljs-string">&#x27;auto&#x27;</span>&#125;<br><span class="hljs-string">``</span><span class="hljs-string">`json</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="hljs-string">  &quot;message&quot;: &quot;test 功能已经执行完毕&quot;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="方法调用链"><a href="#方法调用链" class="headerlink" title="方法调用链"></a>方法调用链</h2><p><img src="https://i.111666.best/image/Dv1czsRCD9fgyWhAErmFy8.png" alt="方法调用链.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基于以上尝试，我们可以看到MCP 进行了一个中间处理过程，通过LLM 来进行功能与数组的组织最终返回给用户自然语言的结果描述。而不必再关注具体的中间过程。</p><p>与 RAG 技术相比，MCP 提供了另一种大模型能力扩展路径。RAG（Retrieval-Augmented Generation）本质上是一种 <strong>静态的、基于预先构建的向量数据库进行信息增强的机制</strong> ，它能提供相对 <strong>稳定且相关性明确的知识补充</strong> ，适用于对资料完整性要求较高的场景。但其能力受限于数据库的更新频率和覆盖范围。</p><p>而 MCP 更侧重于 <strong>动态信息的实时获取与响应处理</strong> ，通过将本地方法封装为函数工具，模型可以根据语义分析结果主动发起实时调用，从而打破传统问答的静态信息局限。这种机制将对话式交互转化为 <strong>任务式的数据动态组织流程</strong> ，具备更强的灵活性和时效性，尤其适用于实时数据接口、系统调用和复杂业务流程的交互式处理场景。</p><p>因此，两者并非冲突关系，而是互为补充 —— RAG 提供 <strong>知识的可控性与一致性</strong> ，MCP 提供 <strong>执行的实时性与系统集成能力</strong> 。在实际系统中可根据场景组合使用，构建更智能、更可靠的 AI 代理系统。</p>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型</tag>
      
      <tag>AI</tag>
      
      <tag>MCP</tag>
      
      <tag>Function Calling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大模型应用与扩展-RAG</title>
    <link href="/2025/06/12/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%8E%E6%89%A9%E5%B1%95-RAG/"/>
    <url>/2025/06/12/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%8E%E6%89%A9%E5%B1%95-RAG/</url>
    
    <content type="html"><![CDATA[<h1 id="大模型通信过程"><a href="#大模型通信过程" class="headerlink" title="大模型通信过程"></a>大模型通信过程</h1><p><img src="https://i.111666.best/image/wGC49yvpdbb1iFlkc7i0rg.png" alt="image"></p><p>这是一个简单的提问-响应过程。为了解决模型的“幻觉问题”，可以通过多种方式向模型添加有用的信息来增加模型响应结果的可信度</p><p><img src="https://i.111666.best/image/SlTuH1VLmfailYRVjQjL5F.png" alt="image"></p><p>1 . 多轮对话，通过多次提问过程，更加精确的描述用户的实际需求。如Agent</p><p>2 . 客户端代理对用户请求进行扩展，最终请求 携带 代理描述信息+原用户请求，向大模型发起请求。如RAG，MCP</p><p>3 .  模型端 功能扩展，模型端使用本地工具（一般是一些方法调用）来自行获取扩展信息，增强相应质量。如Function Calling</p><p>综上，在从流程上，大模型的扩展会有本地端的功能增强，服务端功能增强两种方式。从内容上，则分为 调用 &#x2F; 内容 两种。</p><h1 id="RAG"><a href="#RAG" class="headerlink" title="RAG"></a>RAG</h1><p>RAG 即 检索（Retrieval），增强（Augmented）， 生成 （Generation） 这一过程。其核心原理如下：</p><ul><li>首先将本地文档进行切分（chunking），并对每个片段进行向量化处理后存入向量数据库；</li><li>当用户提出问题时，系统会将用户请求向量化，与向量库中的内容进行相似度比对；</li><li>检索出与问题最相关的若干文档片段，将它们与原始问题组合成 prompt；</li><li>最终将该增强后的 prompt 提交给大语言模型，由模型基于相关内容生成回答。</li></ul><p><img src="https://i.111666.best/image/O9uItWRvWdLg7sakcFWQ5G.png" alt="image"></p><h2 id="简要过程"><a href="#简要过程" class="headerlink" title="简要过程"></a>简要过程</h2><h3 id="将目标文档进行分割（chunk过程）"><a href="#将目标文档进行分割（chunk过程）" class="headerlink" title="将目标文档进行分割（chunk过程）"></a>将目标文档进行分割（chunk过程）</h3><p>这里对markdown 文件进行简单的处理分割。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_data</span>() -&gt; <span class="hljs-built_in">str</span> :<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    加载目标文件到内存</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.md&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f :<br>        <span class="hljs-keyword">return</span> f.read( )<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_chunks</span>() -&gt; <span class="hljs-built_in">list</span> :<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    以&quot;\n\n&quot;为分割目标，对文件中的内容进行切割存储 </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    content = read_data()<br>    chunks  = content.split(<span class="hljs-string">&quot;\n\n&quot;</span>)<br>    result = []<br>    header = <span class="hljs-string">&quot;  &quot;</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> chunks :<br>        <span class="hljs-keyword">if</span> c==<span class="hljs-string">&quot;\n\n&quot;</span> :<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">elif</span> c.startswith(<span class="hljs-string">&quot;#&quot;</span>) :<br>            header += <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c&#125;</span>\n&quot;</span><br><br>        <span class="hljs-keyword">else</span> :<br>            result.append(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;header&#125;</span><span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br>            header = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> result   <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span> :<br>  <br>    chunks = get_chunks()<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> chunks :<br>        <span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h3 id="向量化文档"><a href="#向量化文档" class="headerlink" title="向量化文档"></a>向量化文档</h3><p>这里使用了通义千问的模型接口，来进行文档的向量化处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> chunks<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Optional</span><br><span class="hljs-keyword">import</span> chromadb<br><br>chromadb_client = chromadb.PersistentClient(<span class="hljs-string">&quot;./chroma.db&quot;</span>)<br>chromadb_collection = chromadb_client.get_or_create_collection(name=<span class="hljs-string">&quot;my_collection&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QwenEmbedding</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, api_key: <span class="hljs-built_in">str</span>, base_url: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;https://dashscope.aliyuncs.com/api/v1&quot;</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化通义千问 Embedding 客户端</span><br><span class="hljs-string">      </span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            api_key: 阿里云 DashScope API Key</span><br><span class="hljs-string">            base_url: API 基础URL</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.api_key = api_key<br>        <span class="hljs-variable language_">self</span>.base_url = base_url<br>        <span class="hljs-variable language_">self</span>.headers = &#123;<br>            <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">&#123;api_key&#125;</span>&quot;</span>,<br>            <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>        &#125;<br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_embeddings</span>(<span class="hljs-params">self, </span><br><span class="hljs-params">                      texts: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], </span><br><span class="hljs-params">                      model: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;text-embedding-v3&quot;</span>,</span><br><span class="hljs-params">                      text_type: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;document&quot;</span></span>) -&gt; <span class="hljs-built_in">dict</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取文本嵌入向量</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            texts: 要嵌入的文本列表</span><br><span class="hljs-string">            model: 模型名称</span><br><span class="hljs-string">            text_type: 文本类型</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            包含嵌入向量的响应字典</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.base_url&#125;</span>/services/embeddings/text-embedding/text-embedding&quot;</span><br>      <br>        payload = &#123;<br>            <span class="hljs-string">&quot;model&quot;</span>: model,<br>            <span class="hljs-string">&quot;input&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;texts&quot;</span>: texts<br>            &#125;,<br>            <span class="hljs-string">&quot;parameters&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;text_type&quot;</span>: text_type<br>            &#125;<br>        &#125; <span class="hljs-comment"># 构造请求体内容</span><br>      <br>        <span class="hljs-keyword">try</span>:<br>            response = requests.post(url, headers=<span class="hljs-variable language_">self</span>.headers, json=payload)<br>            response.raise_for_status()<br>            <span class="hljs-keyword">return</span> response.json()<br>        <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;API 调用失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_single_embedding</span>(<span class="hljs-params">self, </span><br><span class="hljs-params">                           text: <span class="hljs-built_in">str</span>, </span><br><span class="hljs-params">                           model: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;text-embedding-v3&quot;</span>,</span><br><span class="hljs-params">                           text_type: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;document&quot;</span></span>) -&gt; <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>]]:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取单个文本的嵌入向量</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            text: 要嵌入的文本</span><br><span class="hljs-string">            model: 模型名称</span><br><span class="hljs-string">            text_type: 文本类型</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            嵌入向量列表，失败时返回 None</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        result = <span class="hljs-variable language_">self</span>.get_embeddings([text], model, text_type)<br>        <span class="hljs-keyword">if</span> result <span class="hljs-keyword">and</span> result.get(<span class="hljs-string">&quot;output&quot;</span>) <span class="hljs-keyword">and</span> result[<span class="hljs-string">&quot;output&quot;</span>].get(<span class="hljs-string">&quot;embeddings&quot;</span>):<br>            <span class="hljs-keyword">return</span> result[<span class="hljs-string">&quot;output&quot;</span>][<span class="hljs-string">&quot;embeddings&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;embedding&quot;</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_db</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span> :<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将向量化处理后的内容装载到数据库中 </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> idx, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(chunks.get_chunks()) :<br>            embedding = <span class="hljs-variable language_">self</span>.get_single_embedding(c)<br>            <span class="hljs-keyword">if</span> embedding :<br>                <span class="hljs-comment"># print(f&quot;&#123;idx&#125; &#123;c&#125;&quot;)</span><br>                chromadb_collection.upsert(<br>                    ids=[<span class="hljs-built_in">str</span>(idx)], <br>                    metadatas=[&#123;<span class="hljs-string">&quot;text&quot;</span>: c&#125;], <br>                    documents=[c], <br>                    embeddings=[embedding]<br>                )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query_db</span>(<span class="hljs-params">self , query  </span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>        query_embedding = <span class="hljs-variable language_">self</span>.get_single_embedding(query)<br>        results = chromadb_collection.query(query_embeddings=[query_embedding], <br>    n_results=<span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">assert</span> results[<span class="hljs-string">&quot;documents&quot;</span>]<br>        <span class="hljs-keyword">return</span> results<br><br><span class="hljs-comment"># 使用示例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    API_KEY = API_KEY <br>    client = QwenEmbedding(api_key=API_KEY)<br>    client.create_db()<br>    client.query_db(query=<span class="hljs-string">&quot;克莱尔见到了哪些景象？&quot;</span>) <span class="hljs-comment"># 用户请求</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="创建简易客户端。维护会话过程"><a href="#创建简易客户端。维护会话过程" class="headerlink" title="创建简易客户端。维护会话过程"></a>创建简易客户端。维护会话过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json <br><span class="hljs-keyword">import</span> embedding<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> (<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, api_key: <span class="hljs-built_in">str</span>, base_url: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation&quot;</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化请求信息</span><br><span class="hljs-string">        Args :</span><br><span class="hljs-string"> api_key : 千问模型api</span><br><span class="hljs-string"> base_url : 访问的基础接口</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.api_key = api_key<br>        <span class="hljs-variable language_">self</span>.base_url = base_url<br>        <span class="hljs-variable language_">self</span>.headers = &#123;<br>            <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">&#123;api_key&#125;</span>&quot;</span>,<br>            <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>        &#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_message</span>(<span class="hljs-params">self, input_text: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    接收用户请求，进行向量查询，获取近似结果</span><br><span class="hljs-string">    Args :</span><br><span class="hljs-string">    input_text : 用户输入的请求</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>        db = embedding.QwenEmbedding(<span class="hljs-variable language_">self</span>.api_key)<br>        db.create_db()<br>        <span class="hljs-keyword">return</span>  db.query_db(query=input_text)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_message_body</span>(<span class="hljs-params">self, input_text: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">dict</span>:<br>      <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">      构造发送给大模型的消息体</span><br><span class="hljs-string">  Args :</span><br><span class="hljs-string">  input_text : 用户输入请求</span><br><span class="hljs-string">      &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span>  &#123;<br>            <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;qwen3-8b&quot;</span>,<br>            <span class="hljs-string">&quot;input&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;messages&quot;</span>: [<br>                    &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;你一个 helpful 的助手&quot;</span>&#125;,<br>                    &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: input_text&#125;<br>                ]<br>            &#125;,<br>            <span class="hljs-string">&quot;parameters&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;temperature&quot;</span>: <span class="hljs-number">0.8</span>,<br>                <span class="hljs-string">&quot;enable_thinking&quot;</span>: <span class="hljs-literal">False</span><br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>) :<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    执行函数，通过while 持续监听用户对话。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;欢迎，请输入问题：&quot;</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            input_text = <span class="hljs-built_in">input</span>()<br>            <span class="hljs-keyword">if</span> input_text <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;quit&quot;</span>,<span class="hljs-string">&quot;exit&quot;</span>,<span class="hljs-string">&quot;q&quot;</span>]:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Bye&quot;</span>)<br>                <span class="hljs-keyword">break</span><br>            rag_message = <span class="hljs-variable language_">self</span>.create_message(input_text)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> rag_message[<span class="hljs-string">&quot;metadatas&quot;</span>][<span class="hljs-number">0</span>]:<br>                input_text += i[<span class="hljs-string">&quot;text&quot;</span>]+<span class="hljs-string">&quot;\n&quot;</span><br>            message_body=<span class="hljs-variable language_">self</span>.create_message_body(input_text)<br>            resp = requests.post(<span class="hljs-variable language_">self</span>.base_url, headers=<span class="hljs-variable language_">self</span>.headers, json=message_body)<br>            <span class="hljs-built_in">print</span>(resp.json()[<span class="hljs-string">&quot;output&quot;</span>][<span class="hljs-string">&quot;choices&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;message&quot;</span>][<span class="hljs-string">&quot;content&quot;</span>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    client = Client(<span class="hljs-string">&quot;API-KEY&quot;</span>)<br>    client.run()<br><br></code></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>执行程序后，程序会根据用户提问检索本地知识库，并将相关的内容补充到向大模型发送的请求中。大模型依靠这些相关知识可以进行更全面的知识解答。</p><p>由此，我们可以知道，RAG 提供了从客户端到大模型接口间的能力扩展。通过本地向量数据库的数据对比来完成相关信息的检索，帮助大模型完善相关知识来得到更全面的解答</p>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型</tag>
      
      <tag>AI</tag>
      
      <tag>RAG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 功能与特性</title>
    <link href="/2025/06/04/MySQL-%E5%8A%9F%E8%83%BD%E4%B8%8E%E7%89%B9%E6%80%A7/"/>
    <url>/2025/06/04/MySQL-%E5%8A%9F%E8%83%BD%E4%B8%8E%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引是帮助MySQL高效获取数据的数据结构</p><p>通过维护一个树结构，通过检索索引来完成快速的数据区分，</p><p>索引的优势</p><p>1 类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO 成本</p><p>2 通过索引对数据进行排序，降低数据排序的成本，降低CPU的消耗</p><p>索引的劣势</p><p>1 实际上索引也是一张表 ， 该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是需要占用空间的</p><p>2 虽然索引大大提高了查询效率，同时也降低更新表的速度，如对表进行INSERT，UPDATE，DELETE，因为更新表时，MySQL不仅要存储数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息</p><h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><p>索引是在MySQL的数据引擎层中实现的，而不是在服务器层实现的，所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引起用都支持所有的索引类型。MySQL提供了以下4种索引</p><ul><li>BTREE索引 ： 最常见的是索引类型，大部分索引都支持B树索引</li><li>HASH索引 ： 只有Memeory引擎支持，使用场景简单</li><li>R-tree索引 ： 空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</li><li>Full-text 全文索引 ：全文索引页是MyISAM的一个特殊索引类型，用于全文索引</li></ul><h2 id="BTREE"><a href="#BTREE" class="headerlink" title="BTREE"></a>BTREE</h2><p>多路平衡搜索树</p><ul><li>树种每个节点最多包含m个孩子</li><li>除根节点与叶子节点外，每个节点至少有[cell(m.2)]个孩子</li><li>若根节点不是叶子节点，则至少有两个孩子</li><li>所有的叶子节点都在同一层</li><li>每个非叶子节点由n个key与n+1个指针组成，其中[cell(m&#x2F;2)-1] ≤ n ≤ m-1</li></ul><h3 id="B树-插入过程"><a href="#B树-插入过程" class="headerlink" title="B树 插入过程"></a>B树 插入过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">插入 A B G O P M W T Z D K L Q N I 这组数据<br>树阶为<span class="hljs-number">5</span> <br>B 树阶为 <span class="hljs-number">5</span> 的定义：<br>每个节点最多存储 m - <span class="hljs-number">1</span> = <span class="hljs-number">4</span> 个关键字<br>最少存储 ceil(m/<span class="hljs-number">2</span>) - <span class="hljs-number">1</span> = <span class="hljs-number">2</span> 个关键字（非根）<br>每个节点最多 <span class="hljs-number">5</span> 个孩子<br>插入导致关键字超过 <span class="hljs-number">4</span> 个时，取中间值上提，左右分裂为两个新节点<br>初始插入 A ~ G（A B G O P）<br>[A B G O P] ← 插入 P 时触发裂变<br>裂变为<br>        [G]<br>      /     \\<br> [A B]     [O P]<br><br>插入 M → 放入右子树 [O P M]<br>插入 W → [O P M W] → 无需裂变<br>插入 T → [O P M W T] → 裂变<br>        [G]<br>      /     \\<br> [A B]     [M]<br>          /     \\<br>     [O P]     [T W]<br>   <br>插入 Z → 插入到右子树 [T W Z] → 不触发裂变<br>插入 D → 插入 [A B D] → 不裂变<br>插入 K → 插入 [A B D K] → 不裂变<br>插入 L → [A B D K L] → 裂变<br><br>              [D G]<br>            /   |    \\<br>   [A B] [K L]  [M]<br>                     /   \\<br>                  [O P]  [T W Z]<br>插入 Q → 插入 [O P Q]<br>插入 N → 插入 [K L N]<br>插入 I → 插入 [A B I]<br>到目前还未再触发裂变<br>插入导致 [K L N] → [K L N] 满<br>插入 Q → [O P Q] 满 → 裂变<br>          [D G M]<br>      /    |     |    \\<br> [A B I] [K L N] [O P] [T W Z]<br></code></pre></td></tr></table></figure><h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+ Tree"></a>B+ Tree</h2><ol><li>n叉B+Tree 最多含有n个ky</li><li>B+ Tree的叶子节点保存所有的key信息，依key大小顺序排列</li><li>所有的非叶子节点都可以看作是key的索引部分</li></ol><p>叶子节点中保存了所有key的信息，即所有的值都需要遍历到叶子节点才可以被访问到，保证了数据查询的统一性</p><p>MySQL 扩展</p><p>在  叶子节点间添加了链表指针，便于区间访问查询</p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p>单值索引 ： 即一个索引只包含单个列，一个表可以有多个单列索引</p><p>唯一索引 ： 索引列的值必须唯一，但允许有空值</p><p>复合索引 ： 即一个索引包含多个列</p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>CREATE [ UNIQUE | FULLTEXT | SPATIAL ] INDEX index_name;</p><p>[USING index_type]</p><p>ON tbl_name(index_col_name , …)</p><p>index_col_name : column_name[(length)][ASC | DESC]</p><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><p>show index from tbl_name ;  查看索引</p><p>show index from city\G ;  查看详细的索引</p><p>drop index index_name on tbl_name ;   删除索引</p><p>alter table tbl_name add primary key (column_list);</p><p>alter table tb_name add unique index_name (column_list);</p><p>alter table tb_name add index index_name (column_list);</p><p>alter table tb_name add fulltext index_name (column_list);</p><h2 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h2><p>查询频次较高，且数据量比较大的表</p><p>索引字段的选择</p><p>使用唯一索引，区分度越高，使用索引的效率越高</p><p>索引条目不是越多越好 会影响整体的查询性能</p><p>使用短索引，提升整体的查询效率</p><p>利用最左前缀</p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图是一条select语句执行后返回的结果集</p><ul><li>简单 使用视图的用户完全不需要关心后面对应的表的结构，关联条件和筛选条件。</li><li>安全 使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列</li><li>数据独立 一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，</li></ul><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><p>CREATE  view view_name  as select_statement ;</p><h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><p>ALTER  view view_name as select_statement ;</p><h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><p>SHOW CREATE VIEW  view_name ;</p><h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><p>DROP VIEW view_name ;</p><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>存储过程和函数 是事先经过编译并存储在数据库中的一段SQL语句的集合</p><p>存储过程 ： 是一个没有返回值的函数</p><p>函数 ： 是一个有返回值的过程</p><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><p>CREATE PROCEDURE procedure_name</p><p>begin</p><p>end ;</p><p>使用 delimiter  $  来定义分隔符 来便于创建存储过程</p><h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><p>call procedure_name();</p><h2 id="查询存储过程"><a href="#查询存储过程" class="headerlink" title="查询存储过程"></a>查询存储过程</h2><p>select name from mysql.proc where db&#x3D;”” 4；</p><p>show procedure status ;</p><p>show create procedure procedure_name ;</p><h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><p>drop procedure procedure_name ;</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> <span class="hljs-title function_">pro_test1</span><span class="hljs-params">()</span><br><span class="hljs-title function_">begin</span> <br><span class="hljs-title function_">declare</span> <span class="hljs-title function_">num</span> <span class="hljs-title function_">int</span> <span class="hljs-title function_">default</span> 10 ;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">concat</span>(<span class="hljs-string">&#x27;num的值为: &#x27;</span>, num)<span class="hljs-punctuation">;</span><br><span class="hljs-keyword">end</span><span class="hljs-punctuation">;</span> <br></code></pre></td></tr></table></figure><h3 id="set-赋值"><a href="#set-赋值" class="headerlink" title="set 赋值"></a>set 赋值</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs delphi">create <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">pro_test2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">begin</span></span><br><span class="hljs-function"><span class="hljs-title">declare</span> <span class="hljs-title">name</span> <span class="hljs-title">varchar</span><span class="hljs-params">(20)</span>;</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">name</span> = <span class="hljs-string">&#x27;mysql&#x27;</span>;<br>select <span class="hljs-keyword">name</span> ;<br><span class="hljs-keyword">end</span> ;<br>delimiter ;<br></code></pre></td></tr></table></figure><h3 id="select-into-赋值"><a href="#select-into-赋值" class="headerlink" title="select into  赋值"></a>select into  赋值</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> <span class="hljs-title function_">pro_test3</span><span class="hljs-params">()</span><br><span class="hljs-title function_">begin</span> <br><span class="hljs-title function_">declare</span> <span class="hljs-title function_">num</span> <span class="hljs-title function_">int</span> ;<br><span class="hljs-keyword">select</span> count<span class="hljs-comment">(*) into num from city ;</span><br><span class="hljs-comment">select concat(&#x27;记录数&#x27;,num);</span><br><span class="hljs-comment">end ;</span><br><span class="hljs-comment">delimiter ; </span><br></code></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">if</span> search_condition then statment_list <br>[<span class="hljs-keyword">elseif</span> search_condition then statment_list]<br>[<span class="hljs-keyword">else</span> statement_list]<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span> ;<br></code></pre></td></tr></table></figure><h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> <span class="hljs-title function_">procedure_name</span><span class="hljs-params">([<span class="hljs-keyword">in</span>/<span class="hljs-keyword">out</span>/inout] 参数名 参数类型)</span><br>...<br><br></code></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> <span class="hljs-title function_">pro_test</span><span class="hljs-params">(<span class="hljs-keyword">in</span> height int , <span class="hljs-keyword">out</span> description varchar(100)</span>)<br><span class="hljs-title function_">begin</span> <br><span class="hljs-title function_">if</span> <span class="hljs-title function_">height</span> &gt;= 180 <span class="hljs-title function_">then</span> <br><span class="hljs-title function_">set</span> <span class="hljs-title function_">description</span> = &#x27;身材高挑&#x27;;<br>elseif height &gt;=<span class="hljs-number">170</span> <span class="hljs-keyword">and</span> height &lt; <span class="hljs-number">180</span> <span class="hljs-keyword">then</span> <br><span class="hljs-keyword">set</span> description = <span class="hljs-string">&#x27;标准身材&#x27;</span> <span class="hljs-punctuation">;</span><br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">set</span> description = <span class="hljs-string">&#x27;一般身材&#x27;</span> <span class="hljs-punctuation">;</span><br><span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span> <span class="hljs-punctuation">;</span><br><span class="hljs-keyword">end</span><br><br>call pro_test(<span class="hljs-number">168</span> , @description)$<br><span class="hljs-keyword">select</span> @description$<br></code></pre></td></tr></table></figure><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> pro_test(mon <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">result</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">case</span> <br><span class="hljs-keyword">when</span> mon <span class="hljs-operator">&gt;=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> mon <span class="hljs-operator">&lt;=</span> <span class="hljs-number">3</span> ; <span class="hljs-keyword">then</span> <br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;第一季度&#x27;</span>;<br><span class="hljs-keyword">when</span> mon <span class="hljs-operator">&gt;=</span> <span class="hljs-number">4</span> <span class="hljs-keyword">and</span> mon <span class="hljs-operator">&lt;=</span> <span class="hljs-number">6</span> ; <span class="hljs-keyword">then</span> <br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;第二季度&#x27;</span>;<br><span class="hljs-keyword">when</span> mon <span class="hljs-operator">&gt;=</span> <span class="hljs-number">7</span> <span class="hljs-keyword">and</span> mon <span class="hljs-operator">&lt;=</span> <span class="hljs-number">9</span> ; <span class="hljs-keyword">then</span> <br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;第三季度&#x27;</span>;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;第四季度&#x27;</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">case</span> ;<br><span class="hljs-keyword">select</span> concat(&quot;结果为&quot;, <span class="hljs-keyword">result</span>) <span class="hljs-keyword">as</span> content ;<br><span class="hljs-keyword">end</span> ;<br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>WHILE （满足条件继续循环）</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">while</span> sarch_condition <span class="hljs-keyword">do</span><br>statement_list <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">while</span> ;<br></code></pre></td></tr></table></figure><p>REPEAT（满足条件退出循环）</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cal"><span class="hljs-keyword">REPEAT</span><br>statment_list<br><br><span class="hljs-keyword">UNTIL</span> serach_condition<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">REPEAT</span>;<br></code></pre></td></tr></table></figure><p>LOOP</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">LOOP</span><br>statment_list<br><span class="hljs-keyword">if</span> statment <span class="hljs-keyword">then</span> <br>leave <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span> statment;<br></code></pre></td></tr></table></figure><h2 id="游标-光标"><a href="#游标-光标" class="headerlink" title="游标&#x2F;光标"></a>游标&#x2F;光标</h2><p>存储 查询结果 相当于存储结果集变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> cursor_name <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> select_statment ;<br><br><span class="hljs-keyword">OPEN</span> cursor_name ;   <br> <br><span class="hljs-keyword">FETCH</span> curosr_name <span class="hljs-keyword">INTO</span> var_name [, var_name] ...    获取游标<br><br><span class="hljs-keyword">CLOSE</span> ;                关闭游标<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> protest()<br><span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">declare</span> e_id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>);<br><span class="hljs-keyword">declare</span> e_name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>);<br><span class="hljs-keyword">declare</span> e_age <span class="hljs-type">int</span>(<span class="hljs-number">11</span>);<br><span class="hljs-keyword">declare</span> e_salary <span class="hljs-type">int</span>(<span class="hljs-number">11</span>);<br><span class="hljs-keyword">declare</span> has_data <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span> ;<br><br><span class="hljs-keyword">declare</span> emp_result <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp ;<br><span class="hljs-keyword">DECLARE</span> EXIT HANDLER <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">NOT</span> FOUND <span class="hljs-keyword">set</span> has_data <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><br><span class="hljs-keyword">open</span> emp_result ;<br>repeat <br><span class="hljs-keyword">fetch</span> emp_result <span class="hljs-keyword">into</span> e_id , e_name , e_age , e_salary ;<br><span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;id=&#x27;</span>,e_id , <span class="hljs-string">&#x27;, name=&#x27;</span>,e_name ,<span class="hljs-string">&#x27;, age= &#x27;</span>,e.age,<span class="hljs-string">&#x27;,薪资为: &#x27;</span>,e_salary);<br>until has_data <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <br><span class="hljs-keyword">end</span> repeat ;<br><span class="hljs-keyword">close</span> emp_result<br><br><span class="hljs-keyword">end</span> ;<br><br></code></pre></td></tr></table></figure><h1 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> fun1(countryId <span class="hljs-type">int</span>)<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">declare</span> cnum <span class="hljs-type">int</span> <br><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> cnum <span class="hljs-keyword">from</span> city <span class="hljs-keyword">where</span> country_id <span class="hljs-operator">=</span> countryId;<br><br><span class="hljs-keyword">return</span> cnum ;<br><span class="hljs-keyword">end</span> <br><br><span class="hljs-keyword">select</span> fun1();  调用函数<br></code></pre></td></tr></table></figure><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>触发器是与表有关的数据库对象，指在insert&#x2F;update&#x2F;delete 之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用 在数据库端保证数据的完整性，</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INSERT</span> 型触发器    <span class="hljs-built_in">NEW</span> 表示将要或者已经新增的数据<br><span class="hljs-keyword">UPDATE</span> 型触发器    <span class="hljs-built_in">OLD</span> 表示修改之前的数据，<span class="hljs-built_in">NEW</span>表示将要或已经修改的数据<br><span class="hljs-keyword">DELETE</span> 型触发器    <span class="hljs-built_in">OLD</span> 表示将要或者已经修改的数据  <br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> trigger_name <br><br><span class="hljs-keyword">before</span>/<span class="hljs-keyword">after</span> <span class="hljs-keyword">insert</span>/<span class="hljs-keyword">update</span>/<span class="hljs-keyword">delete</span> <br><span class="hljs-keyword">on</span> tbl_name <br><br>[ <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span> ]<br><span class="hljs-keyword">begin</span> <br>trigger_stmt;<br><span class="hljs-keyword">end</span> ;<br><br># 创建表结构<br> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp_logs (<br> id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>)  <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br> operation <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)  <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;操作类型，insert/update/delete&#x27;</span>,<br> operation_time datetime <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;操作时间&#x27;</span>,<br> operate_id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;操作表的ID&#x27;</span>,<br> operate_parames <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;操作参数&#x27;</span>,<br> <span class="hljs-keyword">primary key</span>(<span class="hljs-string">&#x27;id&#x27;</span>)<br> ) engine=innodb <span class="hljs-keyword">default</span> charset=utf8;<br> &#125;<br> <br> # 创建触发器<br> <span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> emp_insert_trigger <br> <span class="hljs-keyword">after</span> <span class="hljs-keyword">insert</span><br> <span class="hljs-keyword">on</span> emp <br> <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span> <br> <span class="hljs-keyword">begin</span><br> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp_logs(id,operation,operation_time,operation_params) <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;insert&#x27;</span>, now(),<br> <span class="hljs-built_in">new</span>.id, concat(<span class="hljs-string">&#x27;插入后(&#x27;</span>id:<span class="hljs-string">&#x27;, new.id ,&#x27;</span>, <span class="hljs-type">name</span>:<span class="hljs-string">&#x27; , new.name,&quot;,salary:&quot;,new salary,&#x27;</span>)<span class="hljs-string">&#x27;));</span><br><span class="hljs-string"> end</span><br></code></pre></td></tr></table></figure><h1 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a>MySQL架构</h1><ol><li>连接器 与MySQL 服务器建立了连接</li><li>服务层，定义命令接口，命令解析器，优化和缓存</li><li>引擎层，接收命令并对命令进行响应的操作处理</li><li>文件系统，对写入的数据进行数据存储</li></ol><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>show engines ;</p><p>InnoDB</p><p>事务安全， 锁机制-行锁，支持外键</p><p>MyISAM</p><p>不支持事务，表锁，不支持外键</p><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span> <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> ;<br><span class="hljs-keyword">commit</span> ;<br></code></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CONSTRAINT</span> `fk_city_country` <span class="hljs-keyword">FOREIGN KEY</span>(country_id) <span class="hljs-keyword">REFERENCES</span> country innodb(country_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">RESTRICT</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CASADE<br></code></pre></td></tr></table></figure><p>ON DELETE RESTRICT  删除主表时，如果有关联记录，则不删除</p><p>ON CASCADE               跟新主表，如果有关联，则更信子表记录</p><h1 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h1><h2 id="查看SQL-执行频率"><a href="#查看SQL-执行频率" class="headerlink" title="查看SQL 执行频率"></a>查看SQL 执行频率</h2><p>show status like ‘Com___________’;        整体的查询次数</p><p>show global status like ‘Innodb_rows_%’;      查看innodb 影响的行数</p><h2 id="定位低效SQL语句"><a href="#定位低效SQL语句" class="headerlink" title="定位低效SQL语句"></a>定位低效SQL语句</h2><p>慢查询日志</p><p>show processlist ;</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+----+-----------------+-----------+------+---------+------+------------------------+------------------+<br>|<span class="hljs-string"> Id </span>|<span class="hljs-string"> User            </span>|<span class="hljs-string"> Host      </span>|<span class="hljs-string"> db   </span>|<span class="hljs-string"> Command </span>|<span class="hljs-string"> Time </span>|<span class="hljs-string"> State                  </span>|<span class="hljs-string"> Info             </span>|<br>+----+-----------------+-----------+------+---------+------+------------------------+------------------+<br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> event_scheduler </span>|<span class="hljs-string"> localhost </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> Daemon  </span>|<span class="hljs-string">  289 </span>|<span class="hljs-string"> Waiting on empty queue </span>|<span class="hljs-string"> NULL             </span>|<br>|<span class="hljs-string">  8 </span>|<span class="hljs-string"> root            </span>|<span class="hljs-string"> localhost </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> Query   </span>|<span class="hljs-string">    0 </span>|<span class="hljs-string"> init                   </span>|<span class="hljs-string"> show processlist </span>|<br>+----+-----------------+-----------+------+---------+------+------------------------+------------------+<br>1 id 系统分配的 connection_id<br>2 user列 显示当前用户<br>3 host列 在哪个IP/端口上工作<br>4 db列 目前进程连接的是哪个数据库<br>5 command 列 显示当前连接执行的命令<br>6 time列 显示这个状态的持续时间<br>7 state列 使用当前连接的sql语句状态<br>8 info列 显示这个sql语句，是判断问题语句的一个重要依据<br></code></pre></td></tr></table></figure><h2 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> student_name <span class="hljs-keyword">from</span> students ;<br>+<span class="hljs-comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br>| id | select_type | <span class="hljs-keyword">table</span>    | partitions | <span class="hljs-keyword">type</span> | possible_keys | key  | key_len | <span class="hljs-keyword">ref</span>  | <span class="hljs-keyword">rows</span> | filtered | Extra |<br>+<span class="hljs-comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br>|  <span class="hljs-number">1</span> | SIMPLE      | students | <span class="hljs-keyword">NULL</span>       | <span class="hljs-keyword">ALL</span>  | <span class="hljs-keyword">NULL</span>          | <span class="hljs-keyword">NULL</span> | <span class="hljs-keyword">NULL</span>    | <span class="hljs-keyword">NULL</span> |   <span class="hljs-number">15</span> |   <span class="hljs-number">100.00</span> | <span class="hljs-keyword">NULL</span>  |<br>+<span class="hljs-comment">----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> <span class="hljs-built_in">warning</span> (<span class="hljs-number">0.00</span> sec)<br><br><span class="hljs-number">1</span> id  <br>- 当所有信息的id 是一样的，则表是顺序加载的<br>- id不同，id值越大，加载优先级越高<br>- id有相同也有不同，则先执行优先级高的，相同id视为同一组<br><br><span class="hljs-number">2</span> select_type<br>- SIMPLE  简单子查询<br>- <span class="hljs-keyword">PRIMARY</span> 包含复杂子查询<br>- SUBQUERY 在<span class="hljs-keyword">SELECT</span>或<span class="hljs-keyword">WHERE</span>列表中包含了子查询<br>- DERIVED 在<span class="hljs-keyword">FROM</span>列表中包含的子查询<br>- <span class="hljs-keyword">UNION</span> 若第二个<span class="hljs-keyword">SELECT</span>出现在<span class="hljs-keyword">UNION</span>之后，则标记为<span class="hljs-keyword">UNION</span><br>- <span class="hljs-keyword">UNION</span> RESULT 从<span class="hljs-keyword">UNION</span>表获取结果的<span class="hljs-keyword">SELECT</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">table</span>输出表信息<br><span class="hljs-number">4</span> <span class="hljs-keyword">type</span><br>- <span class="hljs-keyword">NULL</span> 不访问任何表，索引<br>- <span class="hljs-keyword">system</span> 表只有一行记录<br>- const 通过索引一次查询到<br>- eq_ref 使用主键关联查询 结果<br>- <span class="hljs-keyword">ref</span> 非唯一性索引扫描<br>- range 只检索给定返回的行，<br>- <span class="hljs-keyword">index</span> 只遍历了索引数<br>- 将遍历全表以找到匹配的行<br><span class="hljs-number">5</span> key<br>- possible_keys  显示可能应用在这张表的索引，一个或多个<br>- key 实际使用的索引，如果为<span class="hljs-keyword">NULL</span>，则没有使用索引。<br>- key_len 表示索引中使用的字节数，该值为索引字段最大可能长度，在不损失精度的前提下，越短越好<br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span><br>- 扫描的行数<br><span class="hljs-number">7</span> extra <br>- <span class="hljs-keyword">using</span> filesort  对数据使用了一个外部的索引排序，而不是按照表内的索引进行读取 （效率低<br>- <span class="hljs-keyword">using</span> <span class="hljs-keyword">temporary</span> 使用了临时表保存中间结果 （效率低<br>- <span class="hljs-keyword">using</span> <span class="hljs-keyword">index</span>     使用了覆盖索引，避免访问表的数据行<br> <br></code></pre></td></tr></table></figure><h2 id="show-profiles"><a href="#show-profiles" class="headerlink" title="show profiles"></a>show profiles</h2><p>查询 当前版本是否 支持profile 功能</p><p>select @@have_profiling ;</p><p>set profiling &#x3D; 1;</p><p>select @@profiling</p><p>会对后续的查询命令进行性能统计</p><h2 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h2><p>分析优化器执行计划</p><p>SET optimizer_trace&#x3D; “enabled&#x3D;on”, end_markers_in_json&#x3D;on;</p><p>set optimizer_trace_max_mem_size &#x3D; 100000;</p><p>select * from tb_item where id &lt; 4;</p><p>select * from information_schema.optimizer_trace\G; 查询优化器的执行过程</p><h1 id="索引查询"><a href="#索引查询" class="headerlink" title="索引查询"></a>索引查询</h1><p>避免缓存失效</p><ul><li>使用全值匹配</li><li>最左前缀法则  当表中具有 复合索引时 查询时包含 索引的最左列</li><li>范围查询右边的匹配，不能使用索引。</li><li>不要在 索引列上进行运算操作，索引将失效</li><li>字符串不加单引号，索引将失效</li><li>尽量使用覆盖索引，避免select *   覆盖索引，查询被添加到索引中的字段</li><li>用or 分割的条件，or 前后 没有都使用索引，则索引失效</li><li>以%开头的Like 模糊查询 索引失效</li><li>全表比索引快 则不走索引</li><li>is NULL &#x2F; is not NULL 有时索引失效  会根据性能决定</li><li>in 走 索引  not in 不走索引</li><li>单列索引和复合索引，尽量使用复合索引，而少使用单列索引。<ul><li>当遇到单列索引时，数据库会选择使用最优的索引</li></ul></li></ul><h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1><p>大批量加载数据</p><p>load data local infile  ‘&#x2F;root&#x2F;sql2.log’ into table ‘tb_user_2’ fields terminated by ‘,’ lines terminated by ‘\n’;</p><p>关闭唯一性校验</p><p>SET UNIQUE_CHECKS&#x3D; 0 关闭唯一性校验</p><p>手动 提交事务</p><p>SET AUTOCOMMIT&#x3D;0 关闭自动提交事务</p><h2 id="优化-insert-语句"><a href="#优化-insert-语句" class="headerlink" title="优化 insert 语句"></a>优化 insert 语句</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_test <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_test <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;jerry&#x27;</span>);<br>优化为<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_test valuses(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;tom&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;jerry&#x27;</span>);<br><br>在事务中进行数据插入<br><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span> ;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_test <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_test <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;jerry&#x27;</span>);<br><span class="hljs-keyword">commit</span> ;<br><br>数据有序插入<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_test <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;jerry&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_test <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;tom&#x27;</span>);<br>优化为<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_test <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_test <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;jerry&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="优化order-by-语句"><a href="#优化order-by-语句" class="headerlink" title="优化order by 语句"></a>优化order by 语句</h2><p>尽量减少额外的排序，通过索引直接返回有序数据，where条件和Order by 使用相同的索引，并且Order By的顺序和索引顺序相同，并且Order by的字段都是升序或者都是降序。</p><p>filesort 查询</p><p>1 两次扫描算法  4.1之前 ， 根据条件取出排序字段和行指针信息，在sort buffer中排序，如果sort buffer不够，则在临时表中存储排序结果。完成后再根据行指针取回读取记录</p><p>2 一次扫描算法 一次性取出满足条件的所有字段，然后在排序区中排序后直接取出结果集</p><h2 id="优化group-by-语句"><a href="#优化group-by-语句" class="headerlink" title="优化group by 语句"></a>优化group by 语句</h2><p>设置 不排序 （order by null）</p><p>设置 索引</p><h2 id="优化子查询语句"><a href="#优化子查询语句" class="headerlink" title="优化子查询语句"></a>优化子查询语句</h2><p>使用多表连接查询替换子查询</p><h2 id="优化OR-条件"><a href="#优化OR-条件" class="headerlink" title="优化OR 条件"></a>优化OR 条件</h2><p>保证 查询条件都具备索引</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span> = <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">id</span> = <span class="hljs-number">10</span> ;<br>替换为<br>select * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span> = <span class="hljs-number">1</span> union select * emp <span class="hljs-keyword">where</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">id</span> = <span class="hljs-number">10</span> ;<br></code></pre></td></tr></table></figure><h2 id="优化limit-限制"><a href="#优化limit-限制" class="headerlink" title="优化limit 限制"></a>优化limit 限制</h2><p>直接使用分页查询，会对表中的数据进行排序操作，且越往后代价越高</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_item <span class="hljs-keyword">limit</span> <span class="hljs-number">2000000</span>, <span class="hljs-number">10</span> ;<br><br>1 通过使用索引先查询到对应的信息，再根据索引找到原表中的其他列信息<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_item t <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tb_item <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">limit</span> <span class="hljs-number">2000000</span>,<span class="hljs-number">10</span>) a <span class="hljs-keyword">where</span> t.id = a.id;<br><br>2 将分页转换为对某个位置的查询<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_item t <span class="hljs-keyword">where</span> t.id &gt; <span class="hljs-number">2000000</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span> ;<br></code></pre></td></tr></table></figure><h2 id="优化索引查询"><a href="#优化索引查询" class="headerlink" title="优化索引查询"></a>优化索引查询</h2><p>1 . 指定索引名称</p><p>指定数据库查询所使用的索引</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_seller <span class="hljs-keyword">use</span> <span class="hljs-keyword">index</span>(idx_seller_name) <span class="hljs-keyword">where</span> name = <span class="hljs-string">&quot;&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>2 . 忽略索引名称</p><p>忽略某个索引对数据库的查询</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_seller <span class="hljs-keyword">ignore</span> <span class="hljs-keyword">index</span>(idx_seller_name) <span class="hljs-keyword">where</span> name = <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p>3 . 强制使用索引</p><p>数据库认为全表扫描比索引速度更快</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_seller <span class="hljs-keyword">force</span> <span class="hljs-keyword">index</span>(idx_seller_name) <span class="hljs-keyword">where</span> name = <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="应用侧优化"><a href="#应用侧优化" class="headerlink" title="应用侧优化"></a>应用侧优化</h1><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><h2 id="减少查询频率"><a href="#减少查询频率" class="headerlink" title="减少查询频率"></a>减少查询频率</h2><h2 id="缓存层"><a href="#缓存层" class="headerlink" title="缓存层"></a>缓存层</h2><h3 id="缓存查询过程"><a href="#缓存查询过程" class="headerlink" title="缓存查询过程"></a>缓存查询过程</h3><p>1 . 客户端发送一条查询给服务器</p><p>2 . 服务器先会检查查询语句，命中缓存则立即返回缓存中的结果</p><p>3 . 服务端进行SQL解析，预处理，再由优化器生成对应的执行计划</p><p>4 . MySQL 根据优化器生成的执行计划，调用存储引擎的API来执行查询</p><p>5 . 将结果返回给客户端</p><h3 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;have_query_cache&#x27;</span>;<br><span class="hljs-comment">// 是否支持缓存</span><br>show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;query_cache_type&#x27;</span> ;<br>query_cache_type = <span class="hljs-number">1</span><br><span class="hljs-comment">// 缓存是否开启 </span><br>show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;query_cache_size&#x27;</span> ;<br><span class="hljs-comment">// 缓存大小</span><br>show status like <span class="hljs-string">&#x27;Qcache%&#x27;</span> ;<br><span class="hljs-comment">// 查询缓存碰撞信息</span><br><br>SQL_CACHE  如果结果可缓存，则查询缓存结果<br><span class="hljs-comment">// DEMAND 按序执行查询缓存功能  ， 需指定SQL_CACHE</span><br>SQL_NO_CACHE  不检查查询缓存，也不检查结果是否已缓存，也不缓存结果<br><br></code></pre></td></tr></table></figure><h3 id="查询缓存失效"><a href="#查询缓存失效" class="headerlink" title="查询缓存失效"></a>查询缓存失效</h3><p>当 查询缓存中的 条目发生变化，则会使所有的查询缓存失效，在下一次查询时，需要重新从数据库中获取条目</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>读写分离 &#x2F; 分布式完成负载均衡</p><h1 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h1><p>1 尽可能多的个MySQL分配缓存，但不能影响操作系统和其他应用软件</p><p>2 MyISAM存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存</p><p>3 排序区，连接区等缓存是分配给每个数据库会话专用的，需要进行适当的内存大小分配</p><h2 id="MyISAM内存优化"><a href="#MyISAM内存优化" class="headerlink" title="MyISAM内存优化"></a>MyISAM内存优化</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">key_buffer_size <span class="hljs-comment">;</span><br>决定了MyISAM索引块缓存区的大小，影响存取效率<br>read_buffer_size <span class="hljs-comment">; </span><br>如需要经常顺序扫描表，可以增大这一项来改善性能，但是每个session独占<br>read_rnd_buffer_size <span class="hljs-comment">;</span><br>对于需要做排序的myisam表的查询。<br></code></pre></td></tr></table></figure><h2 id="InnoDB-内存优化"><a href="#InnoDB-内存优化" class="headerlink" title="InnoDB 内存优化"></a>InnoDB 内存优化</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">innodb<span class="hljs-emphasis">_bufffer_pool_size </span><br><span class="hljs-emphasis">设置innodb存储引擎表数据和索引数据的最大缓存区大小，在保证其他程序正常运行的情况下</span><br><span class="hljs-emphasis">innodb_log_buffer_</span>size <br>决定innodb重做日志缓存的大小<br><br></code></pre></td></tr></table></figure><h1 id="并发配置"><a href="#并发配置" class="headerlink" title="并发配置"></a>并发配置</h1><h2 id="max-connections"><a href="#max-connections" class="headerlink" title="max_connections"></a>max_connections</h2><p>max_connections 控制允许连接的最大数量，根据服务器性能进行评估</p><h2 id="back-log"><a href="#back-log" class="headerlink" title="back_log"></a>back_log</h2><p>mysql连接数达到max_connections 存入back_log ，等待释放资源后进行连接</p><h2 id="table-open-cache"><a href="#table-open-cache" class="headerlink" title="table_open_cache"></a>table_open_cache</h2><p>控制所有执行线程可打开表缓存的数量</p><h2 id="thread-cache-size"><a href="#thread-cache-size" class="headerlink" title="thread_cache_size"></a>thread_cache_size</h2><p>线程池大小</p><h2 id="innodb-lock-wait-timeout"><a href="#innodb-lock-wait-timeout" class="headerlink" title="innodb_lock_wait_timeout"></a>innodb_lock_wait_timeout</h2><p>设置innodb事务等待行锁的时间</p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>协调多个进程或线程并发访问某一资源的机制</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">表级锁       偏向MyISAM存储引擎，开销小，加锁快，不会出现死锁，锁定粒度大，发生锁冲突的概率高，并发度小<br>行级锁       偏向InnoDB存储引擎，开销大，加锁慢，会出现死锁，锁定粒度小，发生锁冲突概率低，并发度大    <br>页面锁<br></code></pre></td></tr></table></figure><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">lock</span> <span class="hljs-keyword">table</span> tb_book <span class="hljs-keyword">read</span> ;<br><br><span class="hljs-keyword">lock</span> <span class="hljs-keyword">table</span> tb_book <span class="hljs-keyword">write</span> ;<br></code></pre></td></tr></table></figure><h2 id="锁状态"><a href="#锁状态" class="headerlink" title="锁状态"></a>锁状态</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">open</span> <span class="hljs-keyword">tables</span> ;<br>In_user  表当前被查询使用的次数，如果该数为零，则表是打开的<br>Name_locked  表名称是否被锁定，名称锁定用于取消表或对表进行重命名等操作<br><span class="hljs-keyword">show</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;Table_locks%&#x27;</span> ;<br>Table_locks_immediate  指能够立即获得表级锁的次数，每立即获得锁<span class="hljs-number">1</span>;<br>Table_locks_waited     获取锁的等待次数<br><br></code></pre></td></tr></table></figure><h2 id="并发事务的问题"><a href="#并发事务的问题" class="headerlink" title="并发事务的问题"></a>并发事务的问题</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">丢失更新             当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖<br>脏读                 当一个事务正则访问数据，并且对数据进行了修改，而这个修改还没提交到数据库中，这时另一个事务也访问这个数据，然后使用了这个数据<br>不可重读             一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前读出的数据不一致<br>幻读                 一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据<br></code></pre></td></tr></table></figure><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">隔离级别             丢失更新        脏读       不可重复读         幻读<br><br><span class="hljs-keyword">Read</span> <span class="hljs-keyword">uncommitted</span>        - <br><span class="hljs-keyword">Read</span> <span class="hljs-keyword">committed</span>          -             -<br><span class="hljs-keyword">Repeatable</span> <span class="hljs-keyword">read</span>         -             -             -<br><span class="hljs-keyword">Serializable</span>            -             -             -              -<br></code></pre></td></tr></table></figure><p>设置事务隔离级别</p><p>SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL REPEATABLE READ;</p><h2 id="Innodb-行锁"><a href="#Innodb-行锁" class="headerlink" title="Innodb 行锁"></a>Innodb 行锁</h2><p>innodb的行锁依赖于事务，</p><p>当进入事务后，未commit前，由事务操作的行，无法被其他事务进行操作。</p><p>当索引失效后进行查询时，行锁会升级为表锁</p><p>间隙锁，当进行范围查询时，不存在的中间条目同样也会被进行加锁</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">show </span>status like <span class="hljs-string">&#x27;innodb_row_lock%&#x27;</span>;<br><br>Innodb_row_lock_current_waits <span class="hljs-comment">;   当前正在等待锁定的数量</span><br><br>Innodb_row_lock_time <span class="hljs-comment">;       从系统启动到现在锁定总时间长度</span><br><br>Innodb_row_lock_time_avg <span class="hljs-comment">;   每次等待锁花平均时长</span><br><br>Innodb_row_lock_time_max <span class="hljs-comment">;   从系统启动到现在等待最长的一次所花的时间</span><br><br>Innodb_row_lock_waits <span class="hljs-comment">;      系统启动后到现在总共等待的次数</span><br></code></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>尽可能让所有数据检索都能通过索引完成，避免无索引行锁升级为表锁</p><p>合理设计索引，尽量缩小锁的范围</p><p>尽可能减少索引条件，及索引范围，避免间隙锁</p><p>尽量控制事务大小，减少锁定资源量和时间长度</p><p>尽可能使用低级别事务隔离</p><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="编写顺序"><a href="#编写顺序" class="headerlink" title="编写顺序"></a>编写顺序</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>&lt;<span class="hljs-keyword">select</span> list&gt;<br><span class="hljs-keyword">FROM</span> <br>&lt;left_table&gt; &lt;join_type&gt;<br><span class="hljs-keyword">JOIN</span><br>&lt;right_table&gt; <span class="hljs-keyword">on</span> &lt;join_condition&gt;<br><span class="hljs-keyword">WHERE</span><br>&lt;where_condition&gt;<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>&lt;group_by_list&gt;<br><span class="hljs-keyword">HAVING</span> <br>&lt;having_condition&gt;<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>&lt;order_by_condition&gt;<br><span class="hljs-keyword">LIMIT</span><br>&lt;limit_params&gt;<br></code></pre></td></tr></table></figure><p>执行顺序</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">FROM</span>  &lt;left_table&gt;<br><span class="hljs-keyword">ON</span>    &lt;join_condition&gt;<br>&lt;join_type&gt;  <span class="hljs-keyword">JOIN</span> &lt;right_table&gt;<br><span class="hljs-keyword">WHERE</span> &lt;where_condition&gt;<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> &lt;group_by_list&gt;<br><span class="hljs-keyword">HAVING</span> &lt;having_condition&gt;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> &lt;<span class="hljs-keyword">select</span> list&gt;<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> &lt;order_by_condition&gt;<br><span class="hljs-keyword">LIMIT</span> &lt;limit_params&gt;<br></code></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>where regexp  [regexp format]</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+---------------------+---------------------------------------------+<br>|<span class="hljs-string">       函数名        </span>|<span class="hljs-string">                  功能描述                   </span>|<br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> 字符串函数                                                      </span>|<br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> LENGTH(str)         </span>|<span class="hljs-string"> 返回字符串的字节长度（中文算3，utf8下）     </span>|<br>|<span class="hljs-string"> CHAR_LENGTH(str)    </span>|<span class="hljs-string"> 返回字符串的字符长度（中文算1）             </span>|<br>|<span class="hljs-string"> CONCAT(str1,str2)   </span>|<span class="hljs-string"> 字符串拼接                                   </span>|<br>|<span class="hljs-string"> SUBSTRING(str, m, n)</span>|<span class="hljs-string"> 截取子字符串，从第 m 个字符开始 n 个长度     </span>|<br>|<span class="hljs-string"> LEFT(str, n)        </span>|<span class="hljs-string"> 返回字符串左边的 n 个字符                    </span>|<br>|<span class="hljs-string"> RIGHT(str, n)       </span>|<span class="hljs-string"> 返回字符串右边的 n 个字符                    </span>|<br>|<span class="hljs-string"> LOWER(str)          </span>|<span class="hljs-string"> 转小写                                       </span>|<br>|<span class="hljs-string"> UPPER(str)          </span>|<span class="hljs-string"> 转大写                                       </span>|<br>|<span class="hljs-string"> TRIM(str)           </span>|<span class="hljs-string"> 去除首尾空格                                 </span>|<br>|<span class="hljs-string"> REPLACE(str,a,b)    </span>|<span class="hljs-string"> 将字符串中的 a 替换为 b                      </span>|<br>|<span class="hljs-string"> INSTR(str,substr)   </span>|<span class="hljs-string"> 返回 substr 在 str 中的位置                  </span>|<br>|<span class="hljs-string"> LPAD(str,len,pad)   </span>|<span class="hljs-string"> 左填充到指定长度                             </span>|<br>|<span class="hljs-string"> RPAD(str,len,pad)   </span>|<span class="hljs-string"> 右填充到指定长度                             </span>|<br><br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> 数学函数                                                          </span>|<span class="hljs-string">  </span><br><span class="hljs-string">+---------------------+---------------------------------------------+</span><br><span class="hljs-string"></span>|<span class="hljs-string"> ABS(x)              </span>|<span class="hljs-string"> 返回绝对值                                   </span>|<br>|<span class="hljs-string"> CEIL(x) / CEILING(x)</span>|<span class="hljs-string"> 向上取整                                     </span>|<br>|<span class="hljs-string"> FLOOR(x)            </span>|<span class="hljs-string"> 向下取整                                     </span>|<br>|<span class="hljs-string"> ROUND(x,y)          </span>|<span class="hljs-string"> 四舍五入保留 y 位小数                        </span>|<br>|<span class="hljs-string"> MOD(x,y)            </span>|<span class="hljs-string"> 取模（x % y）                                </span>|<br>|<span class="hljs-string"> RAND()              </span>|<span class="hljs-string"> 返回0~1之间的随机数                          </span>|<br>|<span class="hljs-string"> POW(x,y) / POWER(x,y)</span>|<span class="hljs-string"> x 的 y 次幂                                 </span>|<br>|<span class="hljs-string"> SQRT(x)             </span>|<span class="hljs-string"> 开平方                                      </span>|<br><br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> 日期时间函数                                                    </span>|<br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> NOW()               </span>|<span class="hljs-string"> 当前日期时间                                 </span>|<br>|<span class="hljs-string"> CURDATE()           </span>|<span class="hljs-string"> 当前日期（仅日期）                           </span>|<br>|<span class="hljs-string"> CURTIME()           </span>|<span class="hljs-string"> 当前时间（仅时间）                           </span>|<br>|<span class="hljs-string"> DATE_FORMAT(d,f)    </span>|<span class="hljs-string"> 格式化日期时间                               </span>|<br>|<span class="hljs-string"> DATEDIFF(d1,d2)     </span>|<span class="hljs-string"> 返回两个日期之间相差天数                     </span>|<br>|<span class="hljs-string"> TIMESTAMPDIFF(unit,d1,d2)</span>|<span class="hljs-string"> 按单位返回日期差（年/月/日/小时等）     </span>|<br>|<span class="hljs-string"> DATE_ADD(d, INTERVAL x unit)</span>|<span class="hljs-string"> 日期加法                            </span>|<br>|<span class="hljs-string"> DATE_SUB(d, INTERVAL x unit)</span>|<span class="hljs-string"> 日期减法                            </span>|<br>|<span class="hljs-string"> YEAR(d)             </span>|<span class="hljs-string"> 提取年份                                     </span>|<br>|<span class="hljs-string"> MONTH(d)            </span>|<span class="hljs-string"> 提取月份                                     </span>|<br>|<span class="hljs-string"> DAY(d)              </span>|<span class="hljs-string"> 提取日期中的“日”                             </span>|<br>|<span class="hljs-string"> HOUR(d)             </span>|<span class="hljs-string"> 提取小时                                     </span>|<br>|<span class="hljs-string"> MINUTE(d)           </span>|<span class="hljs-string"> 提取分钟                                     </span>|<br>|<span class="hljs-string"> SECOND(d)           </span>|<span class="hljs-string"> 提取秒                                       </span>|<br><br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> 聚合函数                                                        </span>|<br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> COUNT(col)          </span>|<span class="hljs-string"> 计数                                         </span>|<br>|<span class="hljs-string"> SUM(col)            </span>|<span class="hljs-string"> 求和                                         </span>|<br>|<span class="hljs-string"> AVG(col)            </span>|<span class="hljs-string"> 平均值                                       </span>|<br>|<span class="hljs-string"> MAX(col)            </span>|<span class="hljs-string"> 最大值                                       </span>|<br>|<span class="hljs-string"> MIN(col)            </span>|<span class="hljs-string"> 最小值                                       </span>|<br>|<span class="hljs-string"> GROUP_CONCAT(col)   </span>|<span class="hljs-string"> 将同组内字段拼接成字符串                     </span>|<br><br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> 控制流函数                                                      </span>|<br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> IF(expr, t, f)      </span>|<span class="hljs-string"> 条件判断，expr 为真返回 t 否则返回 f         </span>|<br>|<span class="hljs-string"> IFNULL(expr1, expr2)</span>|<span class="hljs-string"> 如果 expr1 为 NULL 则返回 expr2             </span>|<br>|<span class="hljs-string"> NULLIF(a, b)        </span>|<span class="hljs-string"> 如果 a=b 则返回 NULL 否则返回 a             </span>|<br>|<span class="hljs-string"> CASE ... WHEN ... THEN ... ELSE ... END </span>|<span class="hljs-string"> 多条件判断语句          </span>|<br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> 加密/杂项函数                                                      </span>|<br>+---------------------+---------------------------------------------+<br>|<span class="hljs-string"> MD5(str)            </span>|<span class="hljs-string"> 返回字符串的MD5值                            </span>|<br>|<span class="hljs-string"> SHA1(str)           </span>|<span class="hljs-string"> 返回字符串的SHA-1哈希                        </span>|<br>|<span class="hljs-string"> UUID()              </span>|<span class="hljs-string"> 生成全局唯一标识符（36位）                   </span>|<br>|<span class="hljs-string"> SLEEP(n)            </span>|<span class="hljs-string"> 延迟 n 秒（常用于测试）                      </span>|<br>+---------------------+---------------------------------------------+<br><br></code></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="mysql-客户端工具"><a href="#mysql-客户端工具" class="headerlink" title="mysql 客户端工具"></a>mysql 客户端工具</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-u   用户名</span><br><span class="hljs-deletion">-p   密码</span><br><span class="hljs-deletion">-h   IP</span><br><span class="hljs-deletion">-P   端口</span><br><br><span class="hljs-deletion">-e   命令执行</span><br><br></code></pre></td></tr></table></figure><h2 id="mysqladmin"><a href="#mysqladmin" class="headerlink" title="mysqladmin"></a>mysqladmin</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mysqladmin</span> -uroot -pitcast create <span class="hljs-string">&quot;dbname&quot;</span>;<br><br><span class="hljs-attribute">mysqladmin</span> drop <span class="hljs-string">&quot;dbname&quot;</span>;<br><br><span class="hljs-attribute">mysqladmin</span> version <br></code></pre></td></tr></table></figure><h2 id="mysqlbinlog"><a href="#mysqlbinlog" class="headerlink" title="mysqlbinlog"></a>mysqlbinlog</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mysqlbinlog <br>-d   指定数据库名<br>-o   忽略前n行命令<br>-<span class="hljs-attribute">r</span>   输出<br>-s   简单信息<br><span class="hljs-attr">--start-datetime</span>=   <span class="hljs-attr">--stop-datetime</span>   时间区间查看日志<br><span class="hljs-attr">--start-position</span>=   <span class="hljs-attr">--stop-position</span>   位置间隔内的所有日志<br></code></pre></td></tr></table></figure><h2 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">mysqldump  <br>-u  用户名<br>-<span class="hljs-selector-tag">p</span>  密码<br>-h  IP<br>-<span class="hljs-selector-tag">P</span>  端口<br></code></pre></td></tr></table></figure><h2 id="mysqlimport"><a href="#mysqlimport" class="headerlink" title="mysqlimport"></a>mysqlimport</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mysqlimport  <span class="hljs-selector-attr">[option]</span>  db_name  textfile1 <br><br>mysqlimport -uroot -<span class="hljs-selector-tag">p</span> test /tmp/city<span class="hljs-selector-class">.txt</span> <br><br><span class="hljs-selector-tag">source</span> /root/tb_book<span class="hljs-selector-class">.sql</span> <br></code></pre></td></tr></table></figure><h2 id="mysqlshow"><a href="#mysqlshow" class="headerlink" title="mysqlshow"></a>mysqlshow</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">mysqlshow <span class="hljs-selector-attr">[options]</span> <span class="hljs-selector-attr">[db_name [table_name[col_name]</span>]]<br><br><span class="hljs-attr">--count</span> 显示数据库及表的统计信息<br>-<span class="hljs-selector-tag">i</span>      显示指定数据库或者指定表的状态信息<br> <br></code></pre></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> list <span class="hljs-comment">&#x27;log_error&#x27;</span>;  <span class="hljs-comment">// 查看错误日志位置</span><br><br></code></pre></td></tr></table></figure><h2 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h2><p>慢查询日志默认关闭</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stan">slow_query_log =<span class="hljs-number">1</span>  开启慢查询日志<br><br>slow_query_log_file = slow_query.<span class="hljs-built_in">log</span><br><br>long_query_time = <span class="hljs-number">10</span>  超过这个值则认为本次查询是慢查询 需要日志记录<br><br><span class="hljs-built_in">tail</span> -f slow_query.<span class="hljs-built_in">log</span> 查询日志<br><br>mysqldumpslow slow_query.<span class="hljs-built_in">log</span> <br><br></code></pre></td></tr></table></figure><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>将主数据库中的DDL和DML 操作记录到二进制日志中，传送到从服务器中</p><p>1  master 主库 事务提交时，会把数据变更作为时间events记录在二进制日志文件binlog中</p><p>2 主库推送二进制文件 binlog中的日志事件到从库的中继日志relay log</p><p>3 slave 重做中继日志中的事件，将改变反映它自己的数据</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>1 主库出现问题，可以快速切换到从库</p><p>2 可以从从库中进行查询 减少主库压力</p><p>3 可以在从库进行备份，不影响主库进行服务</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>存储</tag>
      
      <tag>数据库</tag>
      
      <tag>中间件</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ 单机部署</title>
    <link href="/2025/05/24/RocketMQ-%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/05/24/RocketMQ-%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>环境信息：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">OS : <span class="hljs-type">CentOS</span> <span class="hljs-number">10</span> (stream)<br>内存 : 12<span class="hljs-type">G</span><br>网络模式 : <span class="hljs-type">NAT</span><br>JDK版本 : <span class="hljs-type">JDK11</span> <br></code></pre></td></tr></table></figure><p>RocketMQ 官网  <a href="https://rocketmq.apache.org/docs/quickStart/01quickstart#3-start-broker-and-proxy"></a><a href="https://rocketmq.apache.org/">https://rocketmq.apache.org</a></p><p>quickstart 中有安装教程。最重要的问题在于 内存问题。 使用maven安装依赖时，一般需要4G内存</p><p>启动broker（即RocoketMQ），默认会申请8G内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新版本的CentOS 可以在你获取不到软件包时，帮你自动安装</span><br><span class="hljs-comment"># 获取RocketMQ 软件包</span><br>wget &lt;https://dist.apache.org/repos/dist/release/rocketmq/5.3.2/rocketmq-all-5.3.2-source-release.zip&gt;<br><br><span class="hljs-comment"># 解压，使用maven 安装依赖</span><br>$ unzip rocketmq-all-5.3.2-source-release.zip<br>$ <span class="hljs-built_in">cd</span> rocketmq-all-5.3.2-source-release/<br>$ mvn -Prelease-all -DskipTests -Dspotbugs.skip=<span class="hljs-literal">true</span> clean install -U<br>$ <span class="hljs-built_in">cd</span> distribution/target/rocketmq-5.3.2/rocketmq-5.3.2<br><br><span class="hljs-comment"># 启动nameserver</span><br>$ <span class="hljs-built_in">nohup</span> sh bin/mqnamesrv &amp;<br> <br><span class="hljs-comment"># 查看log 观察nameserver 已启动</span><br>$ <span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/namesrv.log<br>The Name Server boot success...<br><br><span class="hljs-comment"># 启动broker</span><br>$ <span class="hljs-built_in">nohup</span> sh bin/mqbroker -n localhost:9876  autoCreateTopicEnable=<span class="hljs-literal">true</span>  --enable-proxy &amp;<br><br><span class="hljs-comment"># 观察log 查看broker已启动，如果没有启动查看nohup.out日志</span><br>$ <span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/proxy.log <br>The broker[broker-a,192.169.1.2:10911] boot success...<br><br><span class="hljs-comment"># 指定NAMESRV_ADDR 信息 , 启动生产者测试</span><br>$ <span class="hljs-built_in">export</span> NAMESRV_ADDR=localhost:9876<br>$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer<br><br><span class="hljs-comment"># 会有类似打印</span><br>SendResult [sendStatus=SEND_OK, msgId=C0A8E5820D65639FEE487113405203D9, offsetMsgId=C0A8E58200002A9F0000000000075396, messageQueue=MessageQueue [topic=TopicTest, brokerName=localhost.localdomain, queueId=2], queueOffset=496, recallHandle=null]<br><br><span class="hljs-comment"># 启动消费者测试，如果另外打开一个终端，需要重新声明NAMESRV_ADDR这个变量 </span><br>$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer<br><br><span class="hljs-comment"># 会有类似打印</span><br>ConsumeMessageThread_please_rename_unique_group_name_4_16 Receive New Messages: [MessageExt [brokerName=localhost.localdomain, queueId=3, storeSize=242, queueOffset=491, sysFlag=0, bornTimestamp=1747925887032, bornHost=/192.168.229.130:45532, storeTimestamp=1747925887033, storeHost=/192.168.229.130:10911, msgId=C0A8E58200002A9F00000000000741A0, commitLogOffset=475552, bodyCRC=825146949, reconsumeTimes=0, preparedTransactionOffset=0, toString()=Message&#123;topic=<span class="hljs-string">&#x27;TopicTest&#x27;</span>, flag=0, properties=&#123;CONSUME_START_TIME=1747926144277, MSG_REGION=DefaultRegion, UNIQ_KEY=C0A8E5820D65639FEE487113403803C6, CLUSTER=DefaultCluster, MIN_OFFSET=0, TAGS=TagA, WAIT=<span class="hljs-literal">true</span>, TRACE_ON=<span class="hljs-literal">true</span>, MAX_OFFSET=500&#125;, body=[72, 101, 108, 108, 111, 32, 82, 111, 99, 107, 101, 116, 77, 81, 32, 57, 54, 54], transactionId=<span class="hljs-string">&#x27;null&#x27;</span>&#125;]]<br><br><span class="hljs-comment"># 关闭broker</span><br>$ sh bin/mqshutdown broker<br><br><span class="hljs-comment"># 关闭 NameServer</span><br>$ sh bin/mqshutdown namesrv<br></code></pre></td></tr></table></figure><h2 id="安装UI管理界面"><a href="#安装UI管理界面" class="headerlink" title="安装UI管理界面"></a>安装UI管理界面</h2><p>RocketMQ的 仪表板 已经从rocketmq-console项目更新为rocketmq-dashboard</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆项目</span><br>git <span class="hljs-built_in">clone</span> &lt;https://github.com/apache/rocketmq-dashboard&gt; <br><br><span class="hljs-comment"># 进入目录，使用mvn编译</span><br>mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 使用java -jar 启动服务</span><br><span class="hljs-built_in">nohup</span> java -jar rocketmq-dashboard-2.0.1-SNAPSHOT.jar &amp;<br><br><span class="hljs-comment"># 注意防火墙设置,通过localhost:8080 端口进行服务访问</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ</title>
    <link href="/2025/05/24/RocketMQ/"/>
    <url>/2025/05/24/RocketMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h1><p>java消息服务（Java Message Service) Java平台中关于面向消息中间件的接口</p><p>JMS 提供者 ： 连接面向消息中间件，JMS接口的一个实现</p><p>JMS 生产者 ：Message Producer 生产消息的服务</p><p>JMS 消费者 ：Message Consumer 消费消息的服务</p><p>JMS 消息  ：  数据对象</p><p>JMS 队列 ： 存储待消费消息的区域</p><p>JMS 主题 ： 一种支持发送消息给多个订阅者的机制</p><p>JMS消息通常由两种类型 ： 点对点 ，发布&#x2F;订阅</p><h2 id="基础编程模型"><a href="#基础编程模型" class="headerlink" title="基础编程模型"></a>基础编程模型</h2><p>MQ中的一些原生类</p><p>ConnectionFactory ： 连接工厂 ， JMS 用它创建链接</p><p>Connection ： JMS 客户端到JMS Provider的连接</p><p>Session ： 一个发送或接收消息的线程</p><p>Destination ： 消息的目的地 </p><p>MessageConsumer  ： MessageProducer 消息消费者，消息生产者</p><h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><ul><li>支持Broker和Consumer端消息过滤</li><li>支持发布&#x2F;订阅模型，和点对点</li><li>支持拉pull和推push两种消息模式</li><li>单一队列百万消息，亿级消息堆积</li><li>支持单master节点，多master节点，多master多slave节点</li><li>任意一点都是高可用，水平拓展，Producer,Consumer, 队列都可以分布式</li><li>消息失败重试机制，支持定义level的定制消息</li><li>底层采用netty</li><li>支持分布式事务</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>Producer 消息生产者</li><li>Producer Group 消息生产者组</li><li>Consumer 消费者</li><li>Consumer Group 消费同类消息的多个示例</li><li>Tag ： 标签，子主题（二级分类）对topic的进一步细化，用于区分同一个主题下的不同业务消息</li><li>Topic主题， 逻辑管理单位 一个topic下可以有多个queue</li><li>Message 消息 每个message 必须指定一个topic</li><li>Broker MQ程序，接收生成的消息，提供给消费者消费的程序</li><li>Name Server 给生成和消费者提供路由信息，提供轻量级的路由发现，路由，元数据信息。可以多个部署，互相独立</li><li>Offset 偏移量</li><li>commit log ：消息存储会写在Commit log文件里</li></ul><h1 id="工程实现"><a href="#工程实现" class="headerlink" title="工程实现"></a>工程实现</h1><h2 id="普通消息发送"><a href="#普通消息发送" class="headerlink" title="普通消息发送"></a>普通消息发送</h2><h3 id="同步发送"><a href="#同步发送" class="headerlink" title="同步发送"></a>同步发送</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncProducer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args )</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQproducer</span>(<span class="hljs-string">&quot;group_test&quot;</span>);<br><br>producer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br><span class="hljs-comment">//producer.setSendLatencyFaultEnable(true);</span><br>producer.start();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;i &lt; <span class="hljs-number">10</span> ; i++)&#123;<br><span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;TopicTest&quot;</span>,<span class="hljs-string">&quot;TagA&quot;</span>,(<span class="hljs-string">&quot;Hello RocketMQ&quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)<br>&#125;;<br><span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(msg);<br>System.out.printf(<span class="hljs-string">&quot;%s%n&quot;</span>,sendResult);<br>&#125;<br>producer.shutdown();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异步发送"><a href="#异步发送" class="headerlink" title="异步发送"></a>异步发送</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncProducer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;group_test&quot;</span>);<br>producer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br>producer.start();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10</span> ; i++)&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> i ;<br><span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;TopicTest&quot;</span>,<span class="hljs-string">&quot;TagA&quot;</span>,<span class="hljs-string">&quot;OrderID888&quot;</span>);<br>producer.send(msg, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendCallback</span>()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(SendResult sendResult)</span>&#123;<br>System.out.printf(<span class="hljs-string">&quot;%s%n&quot;</span>,sendResult);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onException</span><span class="hljs-params">(Throwable e)</span>&#123;<br>System.out.printf(<span class="hljs-string">&quot;%-10d Exception %s %n &quot;</span>,index,e);<br>e.printStackTrace();<br>&#125;<br>&#125;);<br>&#125;<br>Thread.sleep(<span class="hljs-number">10000</span>);<br>producer.shutdown();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单向发送"><a href="#单向发送" class="headerlink" title="单向发送"></a>单向发送</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnewayProducer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;group_test&quot;</span>);<br>producer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br>producer.start();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10</span> ; i++)&#123;<br><span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;TopicTest&quot;</span>,<span class="hljs-string">&quot;TagA&quot;</span>,(<span class="hljs-string">&quot;Hello RocketMQ&quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)<br>);<br>producer.sendOneWay(msg);<br>&#125;<br>producer.shutdown();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="普通消息的消费模式"><a href="#普通消息的消费模式" class="headerlink" title="普通消息的消费模式"></a>普通消息的消费模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">consumer.setMessageModel(MessageModel.CLUSTERING);<br><span class="hljs-comment">// 设置集群消费模式，轮询投递给每个消费者</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">consumer.setMessageModel(MessageModel.Boardcasting);<br><span class="hljs-comment">// 设置广播消费模式, 每个消费者都获取同样的消息</span><br></code></pre></td></tr></table></figure><h2 id="顺序消息"><a href="#顺序消息" class="headerlink" title="顺序消息"></a>顺序消息</h2><h3 id="顺序消息-1"><a href="#顺序消息-1" class="headerlink" title="顺序消息"></a>顺序消息</h3><p>同一个queue中会顺序消费</p><h3 id="部分顺序消息"><a href="#部分顺序消息" class="headerlink" title="部分顺序消息"></a>部分顺序消息</h3><p>向同一个序列中某个流程的执行过程是有序的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 生产方</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerInOrder</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;OrderProducer&quot;</span>);<br>producer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br>producer.start();<br>List&lt;Order&gt; orderList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerInOrder</span>().buildOrders();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; orderList.size();i++)&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> orderList.get(i).toString();<br><span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;PartOrder”,null,&quot;</span>KEY<span class="hljs-string">&quot;+i,body.getBytes());</span><br><span class="hljs-string">SendResult sendResult = producer.send(msg,new MessageQueueSelector()&#123;</span><br><span class="hljs-string">@Override</span><br><span class="hljs-string">public MessageQueue select(List&lt;MessageQueue&gt;mqs, Message msg , Object arg)&#123;</span><br><span class="hljs-string">@Override</span><br><span class="hljs-string">public MessageQueue select(List&lt;MessageQueue&gt;mqs , Message msg , Object arg)&#123;</span><br><span class="hljs-string">Long id = (Long) arg;</span><br><span class="hljs-string">long index = id % mqs.size();</span><br><span class="hljs-string">return mqs.get((int)index);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;, orderList.get(i).getOrderId());</span><br><span class="hljs-string">System.out.println(String.format(&quot;</span>SendResult status %s ,queueId: %d , body: %s<span class="hljs-string">&quot;,</span><br><span class="hljs-string">sendResult.getSendStatus(),</span><br><span class="hljs-string">sendResult.getMessageQueue().getQueueId(),</span><br><span class="hljs-string">body));</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">producer.shutdown();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">// 消费方</span><br><span class="hljs-string">public class ConsumerInOrder &#123;</span><br><span class="hljs-string">public static void main(String[] args ) throws Exception&#123;</span><br><span class="hljs-string">DefaultMQPushConsumer consumer = new DefaultMQPsuhConsumer(&quot;</span>OrderConsumer2<span class="hljs-string">&quot;);</span><br><span class="hljs-string">consumer.setNamesrvAddr(&quot;</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9876</span><span class="hljs-string">&quot;);</span><br><span class="hljs-string">consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUM_FROM_LAST_OFFSET);</span><br><span class="hljs-string">consumer.subscribe(&quot;</span>PartOrder<span class="hljs-string">&quot;,&quot;</span>*<span class="hljs-string">&quot;);</span><br><span class="hljs-string">consumer.registerMessageListener(new MessageListenerOrderly()&#123;</span><br><span class="hljs-string">Random random = new Random();</span><br><span class="hljs-string">@Override</span><br><span class="hljs-string">public ConsumeOrderlyStatus consumeMessage(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)&#123;</span><br><span class="hljs-string">context.setAutoCommit(true);</span><br><span class="hljs-string">for(MessageExt msg : msgs )&#123;</span><br><span class="hljs-string">System.out.println(&quot;</span>consumeThread=<span class="hljs-string">&quot; + Thread.currentThread().getName()</span><br><span class="hljs-string">+&quot;</span>,queueId=<span class="hljs-string">&quot; + msg.getQueueId() + &quot;</span>,content:<span class="hljs-string">&quot; + new String(msg.getbody()));</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">try &#123;</span><br><span class="hljs-string">TimeUnit.MILLISECONDS.sleep(random.nextInt(300));</span><br><span class="hljs-string">&#125; catch (Exception e)&#123;</span><br><span class="hljs-string">e.printStackTrace();</span><br><span class="hljs-string">return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">return ConsumeOrderlyStatus.SUCCESS;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="延迟消息"><a href="#延迟消息" class="headerlink" title="延迟消息"></a>延迟消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 生产者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledMessageProducer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;ScheduledProducer&quot;</span>);<br>producer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br>producer.start();<br><span class="hljs-type">int</span> <span class="hljs-variable">totalMessagesToSend</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> ;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; totalMessagesToSend ; i++)&#123;<br><span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;ScheduledTopic&quot;</span>,(<span class="hljs-string">&quot;Hello scheduled message&quot;</span>+i).getBytes());<br>message.setDelayTimeLevel(<span class="hljs-number">4</span>);<br>producer.send(message);<br>&#125;<br>producer.shutdown();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="批量消息"><a href="#批量消息" class="headerlink" title="批量消息"></a>批量消息</h3><p>一次性发送多条消息，但是注意总大小不能超过4M，否则会阻塞消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchMessageProducer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;BatchProducer&quot;</span>);<br>producer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br>producer.start();<br><span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;BatchTest&quot;</span>;<br>List&lt;Message&gt; messages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(topic, <span class="hljs-string">&quot;Tag&quot;</span>, <span class="hljs-string">&quot;OrderID001&quot;</span>,<span class="hljs-string">&quot;HelloWorld1&quot;</span>.getBytes()));<br>messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(topic, <span class="hljs-string">&quot;Tag&quot;</span>, <span class="hljs-string">&quot;OrderID002&quot;</span>,<span class="hljs-string">&quot;HelloWorld2&quot;</span>.getBytes()));<br>messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(topic, <span class="hljs-string">&quot;Tag&quot;</span>, <span class="hljs-string">&quot;OrderID003&quot;</span>,<span class="hljs-string">&quot;HelloWorld3&quot;</span>.getBytes()));<br>messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(topic, <span class="hljs-string">&quot;Tag&quot;</span>, <span class="hljs-string">&quot;OrderID004&quot;</span>,<span class="hljs-string">&quot;HelloWorld4&quot;</span>.getBytes()));<br>messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(topic, <span class="hljs-string">&quot;Tag&quot;</span>, <span class="hljs-string">&quot;OrderID005&quot;</span>,<span class="hljs-string">&quot;HelloWorld5&quot;</span>.getBytes()));<br>messages.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(topic, <span class="hljs-string">&quot;Tag&quot;</span>, <span class="hljs-string">&quot;OrderID006&quot;</span>,<span class="hljs-string">&quot;HelloWorld6&quot;</span>.getBytes()));<br><span class="hljs-keyword">try</span> &#123;<br>producer.send(messages);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>producer.shutdown();<br>e.printStactkTrace();<br>&#125;<br>producer.shutdown();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="过滤消息"><a href="#过滤消息" class="headerlink" title="过滤消息"></a>过滤消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 生产端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TagFilterProducer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;TagFilterProducer&quot;</span>);<br>producer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br>producer.start();<br>String[] tags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;TagA&quot;</span>,<span class="hljs-string">&quot;TagB&quot;</span>,<span class="hljs-string">&quot;TagC&quot;</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">3</span> ; i++)&#123;<br><span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;TagFilterTest&quot;</span>);<br>tags[i % tags.length],<br><span class="hljs-string">&quot;Hello world&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));<br><span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(msg);<br>System.out.printf(<span class="hljs-string">&quot;%s%n&quot;</span>,sendResult);<br>&#125;<br>producer.shutdown();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 消费端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TagFilterConsumer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;TagFilterConsumer&quot;</span>);<br>consumer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br>consumer.subscribe(<span class="hljs-string">&quot;TagFilterTest&quot;</span>,<span class="hljs-string">&quot;TagA||TagB&quot;</span>);<br>consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumerMessage</span><span class="hljs-params">(List&lt;MessageExt&gt;msgs ,</span><br><span class="hljs-params">ConsumeConcurrentlyContext context)</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">for</span>(MessageExt msg : msgs)&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> msg.getTopic();<br><span class="hljs-type">String</span> <span class="hljs-variable">msgBody</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody(),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">msgPro</span> <span class="hljs-operator">=</span> msg.getProperty(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">tags</span> <span class="hljs-operator">=</span> msg.getTags();<br>System.out.println(<span class="hljs-string">&quot;收到消息&quot;</span>+ topic + <span class="hljs-string">&quot;tags&quot;</span> + tags + <span class="hljs-string">&quot;a:&quot;</span> + msgPro + <span class="hljs-string">&quot;,msg：&quot;</span> +msgBody);<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>  &#125;<br>&#125;<br>&#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 生产</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerDetails</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;producer_details&quot;</span>);<br><span class="hljs-comment">// 生产者所属组</span><br>producer.setDefaultTopicQueuenums(num);<br><span class="hljs-comment">// 默认主题在每一个Brokcer队列数量</span><br>producer.setSendMsgTimeout(<span class="hljs-number">1000</span>*<span class="hljs-number">3</span>);<br><span class="hljs-comment">// 发送消息默认超时时间</span><br>producer.setCompressMsgBodyOverHowmuch(<span class="hljs-number">1024</span>*<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 超过限值启动压缩功能</span><br>producer.setRetryTimesWhenSendFailed(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// 同步方式发送消息重试次数</span><br>producer.setRetryTimesWhenSendAsyncFailed(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// 异步方式发送消息重试次数</span><br>producer.setRetryAnotherBrokerWhenNotStoreOK(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 消息重试时选择另一个Broker</span><br>producer.setMaxMessageSize(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">4</span>);<br><span class="hljs-comment">// 允许发送的最大长度信息</span><br>producer.setNamesrvAddr(<span class="hljs-string">&quot;106.55.246.66.9876&quot;</span>);<br><span class="hljs-comment">// nameserver 地址</span><br>producer.start();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerDetails</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;king&quot;</span>);<br><span class="hljs-comment">// 消费者组</span><br>consumer.setNamesrvAddr(<span class="hljs-string">&quot;106.55.246.66:9876&quot;</span>);<br><span class="hljs-comment">// 设置nameserver</span><br>consumer.setMessageModel(MessageModel.CLUSTERING);<br><span class="hljs-comment">// 设置消费模式</span><br>consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);<br><span class="hljs-comment">// 设置消费开始偏移量</span><br>consumer.setConsumeThreadMin(<span class="hljs-number">20</span>);<br><span class="hljs-comment">// 消费者最小线程数量</span><br>consumer.setConsumeThreadMax(<span class="hljs-number">20</span>);<br><span class="hljs-comment">// 消费者最大线程数量</span><br>consumer.setPullInterval(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 推模式下任务时间间隔</span><br>consumer.setPullBatchSize(<span class="hljs-number">32</span>);<br><span class="hljs-comment">// 推模式下拉去的条数</span><br>consumer.setMaxReconsumeTimes(-<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 消息重试次数</span><br>consumer.setConsumeTimeout(<span class="hljs-number">15</span>);<br><br>Set&lt;MessageQueue&gt; MessageQueueSet = consumer.fetchSubscribeMessageQueues(<span class="hljs-string">&quot;TopicTest&quot;</span>);<br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> MessageQueueSet.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br><span class="hljs-type">MessageQueue</span> <span class="hljs-variable">MessageQueue</span> <span class="hljs-operator">=</span> (MessageQueue)iterator.next();<br>System.out.println(MessageQueue.getQueueId());<br>&#125;<br>consumer.subscribe(<span class="hljs-string">&quot;TopicTest&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>consumer.subscribe(<span class="hljs-string">&quot;TopicTest&quot;</span>,MessageSelector.bySql());<br>consumer.subscribe(<span class="hljs-string">&quot;TopicTest&quot;</span>,MessageSelector.byTag());<br>consumer.unsubscribe(<span class="hljs-string">&quot;TopicTest&quot;</span>);<br><span class="hljs-comment">// 筛选订阅</span><br><br>consumer.registerMessageListner(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs,</span><br><span class="hljs-params">ConsumeConcurrentlyContext Context)</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">for</span>(MessageExt msg : msgs)&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> msg.getTopic();<br><span class="hljs-type">String</span> <span class="hljs-variable">msgBody</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody(),<span class="hljs-string">&quot;utf-8&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">tags</span> <span class="hljs-operator">=</span> msg.getTags();<br>System.out.println(<span class="hljs-string">&quot;收到消息：&quot;</span> + <span class="hljs-string">&quot;topic : &quot;</span> + topic + <span class="hljs-string">&quot;, tags :&quot;</span> + tags + “,msg:” + msgBody );<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br><span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;<br>&#125;<br><span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>&#125;<br>&#125;);<br><span class="hljs-comment">// 并发监听</span><br>consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerOrderly</span>()&#123;<br><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ConsumeOrderlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt;msgs,ConsumeOrderlyContext Context)</span>&#123;<br>context.setAutoCommit(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span>(MessageExt msg : msgs)&#123;<br>System.out.println(<span class="hljs-string">&quot;consumeThread=&quot;</span> + Thread.currentThread().getName()+<span class="hljs-string">&quot;queueId=&quot;</span><br>+ msg.getQueueId() + <span class="hljs-string">&quot;,content&quot;</span>);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.MILLISECONDS.sleep(random.nextInt(<span class="hljs-number">300</span>));<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br><span class="hljs-keyword">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;<br>&#125;<span class="hljs-keyword">return</span> ConsumeOrderlyStatus.SUCCESS;<br>&#125;<br>&#125;);<br><span class="hljs-comment">// 顺序监听</span><br>consumer.start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h1><h2 id="单master-模式"><a href="#单master-模式" class="headerlink" title="单master 模式"></a>单master 模式</h2><h2 id="多master-模式"><a href="#多master-模式" class="headerlink" title="多master 模式"></a>多master 模式</h2><h2 id="多master-多slave模式（同步）"><a href="#多master-多slave模式（同步）" class="headerlink" title="多master 多slave模式（同步）"></a>多master 多slave模式（同步）</h2><h2 id="多master-多slave-模式（异步）"><a href="#多master-多slave-模式（异步）" class="headerlink" title="多master 多slave 模式（异步）"></a>多master 多slave 模式（异步）</h2><h2 id="多master-多slave-持久化（硬盘写入）"><a href="#多master-多slave-持久化（硬盘写入）" class="headerlink" title="多master 多slave + 持久化（硬盘写入）"></a>多master 多slave + 持久化（硬盘写入）</h2><h1 id="存储设计"><a href="#存储设计" class="headerlink" title="存储设计"></a>存储设计</h1><p><img src="https://i.111666.best/image/Pi5eVZIEUL0u25mHhK03aP.png" alt="image"></p><p>可以看到Rocket 分为4个块</p><ol><li>Message 消息生成者，向对应的Topic 发布消息</li><li>Topic 主题，消息携带的标志信息，还可以使用tags做进一步细分</li><li>Queue&#x2F;Offset  Queue实际上的消息分发队列，Offset记录消息的读取位置</li><li>Group  消费者组，同一消费者组共享消费策略</li></ol><h2 id="顺序和重复问题"><a href="#顺序和重复问题" class="headerlink" title="顺序和重复问题"></a>顺序和重复问题</h2><p>RocketMQ 没有提供防止乱序和重复的机制。因为</p><ol><li>乱序应用实际大量存在</li><li>队列无序并不意味着消息无序</li></ol><p>重复问题</p><ol><li>消息端处理消息的业务逻辑保持幂等性</li><li>确保每一条消息都有唯一的编号且保证消息处理成功与去重表的日志同时出现。</li></ol><h1 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h1><p>RocketMQ消息的存储是由ConsumeQueue 和 CommitLog 配合完成的，消息真正的物理存储文件是CommitLog，ConsumeQueue是消息的逻辑队列。类似数据库的索引文件。存储的是指向物理存储的地址。每个Topic下的每个Message Queue都有一个对应的ComsumeQueue文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">Commitlog <br>-------------------------------------------------<br>  消息长度 | 消息其他信息 | 消息长度 | 消息其他信息<br>  <br> <span class="hljs-comment">// 每个CommitLog文件的大小为1G，写完之后记录偏移量为1G的位置继续写入</span><br> <br> ComsumeQueue<br> ------------------------------------------------<br> commitLogOffset  | size        |    tag hashcode <br> <span class="hljs-comment">// ComsumeQueue 是消息的逻辑队列，类似数据库索引，存储的是指向物理存储的地址</span><br> <span class="hljs-comment">// 文件默认存储在 $&#123;ROCKETMQ_HOME&#125;/store/consumequeue/&#123;topic&#125;/&#123;queueId&#125;/</span><br><br>Index <br>index 存储了索引文件，用于加快Key查询时的 查询速度 结构为Hash槽与Hash冲突的链表结构<br><br>Config<br><br>存储Topic 和 Consumer 等相关信息<br>topics.json : topic 配置属性<br>subscriptionGroup.json : 消息消费组配置信息<br>delayOffset.json : 延迟消息队列拉取进度<br>consumerOffset.json :  集群消费模式消息进度<br>consumerFilter.json : 主题消息过滤信息<br><br></code></pre></td></tr></table></figure><h1 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h1><p>如果非当前写文件在一定时间间隔内没有再次被更新，则认为是过期文件。RocketMQ不会关注这个文件中的消息是否全部被消费，默认过期时间为42小时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">fileReservedTime   未更新时间<br>deletePhysicFileInterval  删除物理文件的时间间隔<br>destroyMapedFileIntervalForcibly   删除时发现还有线程在引用，会阻止删除操作<br>deleteWhen         定时删除文件<br>DiskSpcaeCleanForciblyRatio  磁盘控件默认水位<br>diskSpaceWarningLevelRatio   使用率大于这个值，阻止写入<br>diskMaxUsedSpaceRatio        小于这个值，表示使用正常<br></code></pre></td></tr></table></figure><h1 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h1><p>1 可以减少数据拷贝和共享总线操作的次数</p><p>2 减少用户空间到内核空间切换的上下文开销</p><h2 id="传统机制"><a href="#传统机制" class="headerlink" title="传统机制"></a>传统机制</h2><p>1  磁盘 读取到 内核缓冲区</p><p>2 内核缓冲区拷贝到用户空间</p><p>3 用户空间拷贝到socket缓冲区</p><p>4 socket缓冲区拷贝到socket网卡</p><h2 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h2><p>将用户文件直接映射到用户空间内容</p><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><p>事务的执行需要保持ACID 原则  一致性，持久性，隔离性，原子性。</p><p>而当A系统的事务需要B系统参与时，A系统无法完全控制在B系统上的执行过程（比如断网）</p><p>这时就会出现分布式事务问题</p><h2 id="异步化"><a href="#异步化" class="headerlink" title="异步化"></a>异步化</h2><p>通过MQ，可以为事务当前的处理流程标记一个“状态”。这样对于A系统来说，事务的执行过程仍然是可控的。</p><p>但是响应过程会存在如下问题 ： 当A系统生产了信息交给MQ发送给B系统后，何时发出对B给出结果的响应？ </p><ol><li>先执行，后传递消息 ———- 出现通信问题，B系统执行失败。导致两端不一致</li><li>先传递消息，后执行 ———- 出现通信问题，B系统执行。但是消息未发回导致两端不一致。</li></ol><h2 id="半事务消息-事务回查"><a href="#半事务消息-事务回查" class="headerlink" title="半事务消息&#x2F;事务回查"></a>半事务消息&#x2F;事务回查</h2><ol><li>向MQ存储一个commitlog，不创建consumerqueue</li><li>后续MQ 进行事务回查，如果成功了，创建consumerqueue加入队列，如果失败了则回滚。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionProducer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">TransactionListener</span> <span class="hljs-variable">transactionListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionListenerImpl</span>();<br><span class="hljs-type">TranscationMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionMQProducer</span>(<span class="hljs-string">&quot;TransactionProducer&quot;</span>);<br>producer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">100</span>)&#123;;<br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span>&#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>thread.setName(<span class="hljs-string">&quot;client-transcation-msg-check-thread&quot;</span>);<br><span class="hljs-keyword">return</span> thread;<br>&#125;<br>&#125;);<br>producer.setExecutorService(executorService);<br>producer.setTransactionListener(transactionListener);<br>producer.start();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;TransactionTopic&quot;</span>, <span class="hljs-literal">null</span> ,(<span class="hljs-string">&quot;支付&quot;</span>).getBytes(RemotingHelper.DEFAULT_CHARSET);)<br><span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.sendMessageInTransaction(msg,<span class="hljs-literal">null</span>);<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDataFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>System.out.println(sendResult.getSendStatus()+<span class="hljs-string">&quot;-&quot;</span>+df.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>&#125; <span class="hljs-keyword">catch</span> (MQClientException | UnsupportedEncodingException e)&#123;<br>e.printStatckTrace();<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">1000</span> ; i ++)&#123;<br>  Thread.sleep(<span class="hljs-number">1000</span>);<br>  <br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 消费者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionConsumer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;Transaction&quot;</span>);<br>consumer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br>consumer.subscribe(<span class="hljs-string">&quot;Transaction&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>consumer.setMessageModel(<span class="hljs-string">&quot;MessageModel.CLUSTERING&quot;</span>);<br>consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs</span><br><span class="hljs-params">, ConsumeConcurrentlyContext context)</span>;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">for</span>(MessageExt msg : msgs)&#123;<br>System.out.println(<span class="hljs-string">&quot;update B ... where transactionId&quot;</span> + msg.getTransactionId());<br>System.out.println(<span class="hljs-string">&quot;commit :&quot;</span> + msg.getTransactionId());<br>System.out.println(<span class="hljs-string">&quot;执行本地事务成功&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>e.printStackTrace();<br>System.out.println(<span class="hljs-string">&quot;执行本地事务失败,重试消费,尽量确认B处理成功&quot;</span>);<br><span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;<br>&#125;<br><span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>&#125;<br>&#125;);<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="队列选择策略"><a href="#队列选择策略" class="headerlink" title="队列选择策略"></a>队列选择策略</h1><p>Topic 创建在多Broker 中</p><pre><code class="hljs">  选择队列策略      —由nameserver 提供路由信息</code></pre><p>重试                       — 失败后进行重试</p><p>规避策略              — 失败超过最大限值，会规避该broker</p><p>故障延迟</p><p>记录Broker 发送时长，计算规避时间，选择可用broker</p><p>即当 生产者发送时延过久，会设置一个规避时间，规避时间段内不会选择该broker发送消息</p><p>默认消息发送规则</p><p>轮询</p><p>消费者 </p><ol><li>平均消费  6个队列 3个消费者  每个消费者消费2个队列</li><li>轮询 消费者按照顺序获取消息进行消费</li></ol>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ 宿主机安装</title>
    <link href="/2025/05/22/RabbitMQ-%E5%AE%BF%E4%B8%BB%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
    <url>/2025/05/22/RabbitMQ-%E5%AE%BF%E4%B8%BB%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>获取RabbitMQ的Erlang依赖</p><p><a href="https://github.com/rabbitmq/erlang-rpm">https://github.com/rabbitmq/erlang-rpm</a></p><p>获取RabbitMQ的Server安装包</p><p><a href="https://github.com/rabbitmq/rabbitmq-server">https://github.com/rabbitmq/rabbitmq-server</a></p><p>注意 版本要匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># rpm 安装</span><br><span class="hljs-comment"># 较新的centos版本上可能需要安装openssl的链接库</span><br><span class="hljs-comment"># 可以从这个地址https://rpm.pbone.net/ 查询  所需要的链接库</span><br>rpm -ivh openssl11-libs-1.1.1k-7.el7.x86_64.rpm<br><br>rpm -ivh erlang-27.3.4-1.el8.x86_64.rpm<br>rpm -ivh rabbitmq-server-4.1.0-1.el8.noarch.rpm<br></code></pre></td></tr></table></figure><p>安装成功后 注意 关闭防火墙，或者配置对应的转发规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop firewalld.service<br>systemctl <span class="hljs-built_in">disable</span> firewalld.service<br><br><span class="hljs-built_in">sudo</span> rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br></code></pre></td></tr></table></figure><p>可以查询到服务器的15672端口开启监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LISTEN            0                 1024                                 0.0.0.0:15672                              0.0.0.0:*                <span class="hljs-built_in">users</span>:((&quot;beam.smp&quot;,pid=<span class="hljs-number">11133</span>,fd=<span class="hljs-number">43</span>))<br></code></pre></td></tr></table></figure><p>访问15672端口，提示非本地环境无法使用guest用户登录</p><p><img src="attachment:6fced17e-7497-4503-9036-a777e66b5aee:image.png" alt="image.png"></p><p>创建admin用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">rabbitmqctl add_user admin yourpassword<br>rabbitmqctl set_user_tags admin administrator<br>rabbitmqctl set_permissions -p / admin <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列 RabbitMQ</title>
    <link href="/2025/05/22/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-RabbitMQ/"/>
    <url>/2025/05/22/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h1><p>MQ即MessageQueue 消息队列</p><p>最直接的作用 ： 将同步的事件驱动改为异步的消息驱动</p><h2 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h2><p>Producer和Consumer都只跟中间件进行交互，而不需要互相进行交互。这意味着，在Producer发送消息时，不需要考虑有没有Consumer或多个Consumer。</p><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>消息并不是从Producer发送出来后，就立即交由Consumer处理，而是在MQ中间件中暂存下来，等到Consumer启动后。自行去MQ中间件上处理。错开了生产-消费的时间</p><h2 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h2><p>有了MQ做消息暂存，当Producer发送消息的速度和Consumer处理消息的速度不一致时，MQ就可以起到削峰填谷的作用</p><h1 id="主流MQ"><a href="#主流MQ" class="headerlink" title="主流MQ"></a>主流MQ</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Kafka       吞吐量非常大，性能非常好，技术生态完整       功能单一             分布式日志收集<br>RabbitMQ    消息可靠性高，功能全面            吞吐量较低，消息挤压影响性能    企业系统内部调用<br>RocketMQ    高吞吐，高性能，高可用                  技术生态相对不完整          几乎全场景<br></code></pre></td></tr></table></figure><h1 id="处理路径"><a href="#处理路径" class="headerlink" title="处理路径"></a>处理路径</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">┌──────────────┐       AMQP Frame       ┌──────────────┐<br>│ TCP Socket   │  ──────────────────▶  │  Connection  │   <br>└──────────────┘                        └──────────────┘<br>RabbitMQ 的 Socket 资源句柄：用于接收来自 TCP 层的字节流数据，作为 AMQP 协议消息的输入通道<br>                                               |<br>                                               ▼<br>                                         ┌────────────┐<br>                                         │  Channel   │ <br>                                         └────────────┘<br>RabbitMQ 的消息处理通道：将接收到的 AMQP 字节流解析为结构化命令。识别控制字段（如 basic.publish）、<br>参数（如 exchange、routingKey）和消息体，并调用对应的内部方法进行处理。<br>                                               │<br>basic.publish                                  ▼<br>─────────────────────────────────────▶  ┌────────────┐<br>                                         │  Exchange  │ <br>                                         └────────────┘<br>根据 exchange 的类型（fanout、direct、topic、headers）与 routingKey，<br>匹配绑定规则（binding），将消息分发到一个或多个符合条件的队列。<br>                                               │<br>                                               ▼<br>                                         ┌────────────┐<br>                                         │   Queue    │<br>                                         └────────────┘<br>按 FIFO 原则缓存等待消费。支持内存与磁盘混合存储、消息确认机制（ACK/NACK）<br>TTL、死信等处理策略。<br>                                               │<br>                                               ▼<br>                                         消费者收到消息<br></code></pre></td></tr></table></figure><h1 id="常用消息场景"><a href="#常用消息场景" class="headerlink" title="常用消息场景"></a>常用消息场景</h1><h2 id="WrokQueue"><a href="#WrokQueue" class="headerlink" title="WrokQueue"></a>WrokQueue</h2><p>生产者生成的消息分发给多个消费者的消息</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">P</span> <span class="hljs-literal">----</span>&gt;  <span class="hljs-comment">Queue</span>  <span class="hljs-literal">----</span>&gt; <span class="hljs-comment">Consumer1</span><br><span class="hljs-comment"></span><span class="hljs-literal">----</span>&gt; <span class="hljs-comment">Consumer2</span><br></code></pre></td></tr></table></figure><h3 id="Consumer-对每个消息必须应答"><a href="#Consumer-对每个消息必须应答" class="headerlink" title="Consumer 对每个消息必须应答"></a>Consumer 对每个消息必须应答</h3><p>Consumer端每消费完要给消息，需要给服务端一个ack应答，这个应答可以是手动应答，也可以是自动应答。如果Consumer一直没有给服务端应答，那么服务端不断将这条消息进行投递，就会不断地消耗系统资源。</p><h3 id="RabbitMQ并不完全保证消息安全"><a href="#RabbitMQ并不完全保证消息安全" class="headerlink" title="RabbitMQ并不完全保证消息安全"></a>RabbitMQ并不完全保证消息安全</h3><p>关键的message不能因为服务出现问题而被忽略。如果想要保证消息不丢失，在RabbitMQ中，需要同时将队列和消息的durable属性都设置成true。但是durable仍然不能完全保证消息不被丢失。RabbitMQ是定期将缓存写入到磁盘中，所以当出现异常时，缓存中的数据会丢失。</p><h3 id="消息如何在多个Consumer之间分发"><a href="#消息如何在多个Consumer之间分发" class="headerlink" title="消息如何在多个Consumer之间分发"></a>消息如何在多个Consumer之间分发</h3><p>默认采用了fair dispatch 。即消息轮询，向消费者发送。</p><h2 id="Publish-Subscribe-（发布-订阅）"><a href="#Publish-Subscribe-（发布-订阅）" class="headerlink" title="Publish&#x2F;Subscribe （发布&#x2F;订阅）"></a>Publish&#x2F;Subscribe （发布&#x2F;订阅）</h2><p>Producer 向交换器发布消息，交换器向所有消费者发送消息（指定Fanout队列）</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">P ----&gt; X ----&gt; amq.gen-RQ6 -&gt; C1<br>          ----&gt; amq.gen-As8 -&gt; C2<br>        <br></code></pre></td></tr></table></figure><h2 id="Routing-基于内容的路由"><a href="#Routing-基于内容的路由" class="headerlink" title="Routing  基于内容的路由"></a>Routing  基于内容的路由</h2><p>通过 routingKey 来查询特定队列向其中发送消息</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">channel.baseicPublish(EXCHANGE_NAME, routingKey<span class="hljs-string">&quot;debug&quot;</span>, props : <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>, <span class="hljs-type">message.getBytes</span>());<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl">P ----&gt; <span class="hljs-function"><span class="hljs-title">error</span> ----&gt;</span> <span class="hljs-function"><span class="hljs-title">amq</span>.gen-S9b -&gt;</span> C1<br>  ----&gt; <span class="hljs-function"><span class="hljs-title">info</span>  ----&gt;</span> <br>  ----&gt; <span class="hljs-function"><span class="hljs-title">warn</span>  ----&gt;</span> <span class="hljs-function"><span class="hljs-title">amq</span>.gen.Ag1 -&gt;</span> C2<br>  ----&gt; <span class="hljs-function"><span class="hljs-title">error</span> ----&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Topics-基于话题的路由"><a href="#Topics-基于话题的路由" class="headerlink" title="Topics 基于话题的路由"></a>Topics 基于话题的路由</h2><p>routingKey 作为话题进行转发</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">P <span class="hljs-params">----</span>&gt; X <span class="hljs-params">----</span>&gt; *<span class="hljs-string">.orange.</span>* <span class="hljs-params">----</span>&gt; Q1 <span class="hljs-params">----</span>&gt; C1<br>          <span class="hljs-params">----</span>&gt; *.*<span class="hljs-string">.rabbit</span>  <br>                         <span class="hljs-params">----</span>&gt;Q2 <span class="hljs-params">----</span>&gt; C2<br>          <span class="hljs-params">----</span>&gt; lazy.<span class="hljs-comment">#  </span><br></code></pre></td></tr></table></figure><h2 id="Headers-头部路由机制"><a href="#Headers-头部路由机制" class="headerlink" title="Headers 头部路由机制"></a>Headers 头部路由机制</h2><p>定制键值对，指定交换器类型为Headers。设置channel绑定的头部信息，通过匹配头部信息转发</p><h2 id="Publisher-Confirms-发送者消息确认"><a href="#Publisher-Confirms-发送者消息确认" class="headerlink" title="Publisher Confirms 发送者消息确认"></a>Publisher Confirms 发送者消息确认</h2><p>通过阻塞等待接收发布消息的确认</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.confirmSelect();<br><br><span class="hljs-comment">// 单条消息发布</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i&lt; MESSAGE_COUNT;i++)&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> String.value(i);<br>channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,queue,<span class="hljs-literal">null</span>,body.getBytes());<br>channel.waitForConfirmsOrDie(<span class="hljs-number">5_000</span>);<br>&#125;<br><br><span class="hljs-comment">// 批量消息发布</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">batchSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span> ;<br><span class="hljs-type">int</span> <span class="hljs-variable">outstandingMessageCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.nonoTime();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; MESSAGE_COUNT ; i++ )&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> String.valueOf(i);<br>ch.basicPublish(<span class="hljs-string">&quot;&quot;</span>, queue, <span class="hljs-literal">null</span> , body.getBytes());<br>outstandingMessageCount++ ;<br><br><span class="hljs-keyword">if</span>(outstandingMessageCount == batchSize)&#123;<br>ch.waitForConfirmsOrDie(<span class="hljs-number">5_000</span>);<br>outstandingMessageCount = <span class="hljs-number">0</span> ;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(outstandingMessageCount &gt; <span class="hljs-number">0</span>)&#123;<br>ch.waitForConFirmsOrDie(<span class="hljs-number">5_000</span>);<br>&#125;<br><br><span class="hljs-comment">// 异步确认</span><br><br>channel.addConfirmListener(ConfirmCallback var1 , ConfirmCallback var2);<br></code></pre></td></tr></table></figure><h1 id="队列结构"><a href="#队列结构" class="headerlink" title="队列结构"></a>队列结构</h1><h2 id="Classic-结构队列"><a href="#Classic-结构队列" class="headerlink" title="Classic 结构队列"></a>Classic 结构队列</h2><p>FIFO队列的简单实现。如果持久化置位为true，则将消息存储进磁盘，如果持久化置位为false，则将消息加入缓存中</p><h2 id="Quorum-仲裁队列"><a href="#Quorum-仲裁队列" class="headerlink" title="Quorum 仲裁队列"></a>Quorum 仲裁队列</h2><p>数据一定会持久化，不能自动删除，提高数据的安全性</p><p>不适合的场景</p><ol><li>一些临时使用的队列：比如transient临时队列，exclusive独占队列，或者经常会修改和删除的队列</li><li>对消息低延迟要求高，一致性算法会影响消息的延迟</li><li>对数据安全性要求不高: Quorum队列需要消费者手动通知或者生产者手动确认</li><li>队列消息积压严重</li></ol><h2 id="Stream流式队列"><a href="#Stream流式队列" class="headerlink" title="Stream流式队列"></a>Stream流式队列</h2><p>一个基于<strong>日志模型</strong>的新型队列实现，支持 Kafka 式的顺序流、高并发、可回溯消费，同时保留 RabbitMQ 的灵活路由机制。</p><p>类似于 Kafka 的 Topic，每个 Stream 是一个 <strong>可追加的持久化日志序列</strong></p><p>消息写入后按序编号，消费者使用 offset 拉取</p><p>Stream 可以配置为多分区，便于水平扩展和并行消费</p><p>每个分区就是一个<strong>独立的顺序日志</strong></p><p>每条消息有全局唯一的 offset</p><p>消费者可指定 offset（earliest&#x2F;latest&#x2F;指定位置）启动</p><p>支持消费组状态保存（需要启用 Broker-side offset tracking）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">params.put(<span class="hljs-string">&quot;x-queue-type&quot;</span>,<span class="hljs-string">&quot;stream&quot;</span>);<br>params.put(<span class="hljs-string">&quot;x-max-length-bytes&quot;</span>,<span class="hljs-number">20_000_000_000L</span>);<br>params.put(<span class="hljs-string">&quot;x-stream-max-segment-size-bytes&quot;</span>,<span class="hljs-number">100_000_000</span>);<br>channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,params);       <br></code></pre></td></tr></table></figure><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><p>用于接收其他队列中未能正常消费的消息的队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">x-dead-letter-exchange:mirror.dlExchange  对应的死信交换机<br>x-dead-letter-routing-key: mirror.messageExchange1.messageQueue1 死信交换机routing-key<br>x-message-ttl: <span class="hljs-number">3000</span> 消息过期时间<br>durable: <span class="hljs-literal">true</span>  持久化<br></code></pre></td></tr></table></figure><h3 id="何时会产生死信"><a href="#何时会产生死信" class="headerlink" title="何时会产生死信"></a>何时会产生死信</h3><ol><li>消息被消费者确认拒绝，消费者把requeue参数设置为ture,并且在消费后，向RabbitMQ返回拒绝</li><li>消息达到预设的TTL时限还一直没有被消费</li><li>消息由于队列已经达到最长长度限制而被丢掉</li></ol><h2 id="Sharding-插件"><a href="#Sharding-插件" class="headerlink" title="Sharding 插件"></a>Sharding 插件</h2><p>通过分队列的方式提高消息的吞吐量</p><p><img src="https://i.111666.best/image/WH0UYdmbC2BZnLuzLpFNuO.png" alt="image"></p><p>设置sharding 策略</p><p><img src="https://i.111666.best/image/OhOovBumCNnFDQ0J0MzALz.png" alt="image"></p><p>定义交换机</p><p><img src="https://i.111666.best/image/3cq9UlMK7q1GqywMemrAyu.png" alt="image"></p><p>最终会绑定3个虚拟队列</p><p>在消费端绑定虚拟交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShardingConsumer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUENAME= <span class="hljs-string">&quot;sharding_exchange&quot;</span>; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException&#123;<br><span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>factory.setHost(<span class="hljs-string">&quot;192.168.65.193&quot;</span>);<br>factory.setPort(<span class="hljs-number">5672</span>);<br>factory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>factory.setPassword(<span class="hljs-string">&quot;admin&quot;</span>);<br>factory.setVirtualHost(<span class="hljs-string">&quot;/mirror&quot;</span>);<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br><span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>channel.queueDeclare(QUEUENAME,<span class="hljs-literal">false</span> ,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><br><span class="hljs-type">Consumer</span> <span class="hljs-variable">myconsumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope,AMQP.BasicProperties </span><br><span class="hljs-params">                           properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">routingKey</span> <span class="hljs-operator">=</span> envelope.getRoutingKey();<br>System.out.println(<span class="hljs-string">&quot;routingKey &gt;&quot;</span> + routingKey);<br><span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> properties.getContentType();<br>System.out.println(<span class="hljs-string">&quot;contentType &gt;&quot;</span> + contentType);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">deliveryTag</span> <span class="hljs-operator">=</span> envelope.getDeliveryTag();<br>    System.out.println(<span class="hljs-string">&quot;deliveryTag &gt;&quot;</span> + deliveryTag);<br>    System.out.println(<span class="hljs-string">&quot;content:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body,<span class="hljs-string">&quot;UTF-8&quot;</span>));                    <br>&#125;<br>&#125;;<br><span class="hljs-comment">// 需要进行3次接收 队列的分发。</span><br><span class="hljs-type">String</span> <span class="hljs-variable">consumerFlag1</span> <span class="hljs-operator">=</span> channel.basicConsume(QUEUENAME,<span class="hljs-literal">true</span> , myconsumer);<br>System.out.println(<span class="hljs-string">&quot;c1:&quot;</span> + consumerFlag1);<br><span class="hljs-type">String</span> <span class="hljs-variable">consumerFlag2</span> <span class="hljs-operator">=</span> channel.basicConsume(QUEUENAME,<span class="hljs-literal">true</span>, myconsumer);<br>System.out.println(<span class="hljs-string">&quot;c2:&quot;</span> + consumerFlag2);<br><span class="hljs-type">String</span> <span class="hljs-variable">consumerFlag3</span> <span class="hljs-operator">=</span> channel.basicConsume(QUEUENAME,<span class="hljs-literal">true</span>, myconsumer);<br>System.out.println(<span class="hljs-string">&quot;c3:&quot;</span> + consumerFlag3);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用Sharding后，因为只需要指定虚拟的Exchange，并不能确定消息最终会发送到哪条队列。虽然策略是均匀保存测率，但是不能完全保证均匀。</p><p>所以适用于消息延迟要求不严格，以及对消费顺序没有任何要求的场景。</p><p>另外尽量不要使用碎片队列接收，会导致队列的消息分配会受到影响。</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>网络技术</tag>
      
      <tag>RabbitMQ</tag>
      
      <tag>消息队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 应用</title>
    <link href="/2025/05/19/Nginx-%E5%BA%94%E7%94%A8/"/>
    <url>/2025/05/19/Nginx-%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx-作为反向代理"><a href="#Nginx-作为反向代理" class="headerlink" title="Nginx 作为反向代理"></a>Nginx 作为反向代理</h1><p>反向代理服务器介于用户和真实应用服务器之间，提供请求和响应的中转服务</p><p>对于用户而言，访问反向代理服务器就是访问真实服务器</p><p>反向代理可以有效降低服务器的负载消耗，提升效率</p><h2 id="反向代理的作用"><a href="#反向代理的作用" class="headerlink" title="反向代理的作用"></a>反向代理的作用</h2><p>隐藏真实服务器</p><p>便于横向扩展后端动态服务</p><p>动静分离，提高系统健壮性</p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>在web服务器架构中，将静态页面与动态页面或者静态内容接口和动态内容接口分开不同系统访问的架构设计方法，进而提升整个服务访问性能和可维护性。</p><h2 id="upstream-模块"><a href="#upstream-模块" class="headerlink" title="upstream 模块"></a>upstream 模块</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>upstream                     段名，以 { 开始 ，}结束  中间定义上游服务的URL</p><p>server                           定义上游服务地址</p><p>zone                              定义共享内存，用于跨worker子进程</p><p>keepalive                     对上游服务启用长连接</p><p>keepalive_requests   一个长连接最多请求个数</p><p>keepalive_timeout     空闲情况下，一个长连接的超时时长</p><p>hash                              哈希负载均衡算法</p><p>ip_hash                        依据IP进行哈希负载均衡算法</p><p>least_conn                  最少连接数</p><p>least_time                   最短响应时间</p><p>random                       随机负载均衡</p><h3 id="upsteam-设置"><a href="#upsteam-设置" class="headerlink" title="upsteam 设置"></a>upsteam 设置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> name &#123;<br><span class="hljs-attribute">server</span> address [parameters] ;<br><span class="hljs-comment"># parameters 可选值</span><br><span class="hljs-comment"># weight = number         权重值， 默认为1  </span><br><span class="hljs-comment"># max_conns = number      上游服务器的最大并发连接数 </span><br><span class="hljs-comment"># fail_timeout = time     服务器不可用的判定时间</span><br>    <span class="hljs-comment"># max_fails = number      服务器不可用的检查次数</span><br><span class="hljs-comment"># backup                  备份服务器，仅当其他服务器都不可用时</span><br><span class="hljs-comment"># down                    标记服务器长期不可用，离线维护</span><br>&#125;<br></code></pre></td></tr></table></figure><p>配置示例 ：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> &#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8080</span> weight=<span class="hljs-number">3</span> max_conns=<span class="hljs-number">1000</span> fail_timeout=<span class="hljs-number">10s</span> max_fails = <span class="hljs-number">2</span><br>keepalive <span class="hljs-number">32</span>;<br><span class="hljs-attribute">keepalive_request</span> <span class="hljs-number">50</span>;<br><span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">30s</span>;<br><span class="hljs-comment"># 设置了权重为3 ，</span><br>    <span class="hljs-comment"># 与上层应用服务器的最大连接是1000，</span><br>    <span class="hljs-comment"># 失败超时时间为10s</span><br>    <span class="hljs-comment"># 失败尝试为2次</span><br>    <span class="hljs-comment"># 保持长连接的连接数为32</span><br>    <span class="hljs-comment"># 长连接最大请求为50</span><br>    <span class="hljs-comment"># 长连接超时时间为30s</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反向代理设置"><a href="#反向代理设置" class="headerlink" title="反向代理设置"></a>反向代理设置</h2><p>创建子系统配置项</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> back_end &#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.184.20:8080</span> weight = <span class="hljs-number">2</span> max_conns = <span class="hljs-number">1000</span> fail_timeout= <span class="hljs-number">10s</span> max_fails=<span class="hljs-number">3</span>;<br><span class="hljs-attribute">keepalive</span> <span class="hljs-number">32</span> ;<br><span class="hljs-attribute">keepalive_requests</span> <span class="hljs-number">80</span> ;<br><span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">20s</span> ;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> ;<br><span class="hljs-attribute">server_name</span> proxy.codfish.cn ;<br><span class="hljs-section">location</span> /proxy &#123; <br><span class="hljs-attribute">proxy_pass</span> http://back_end/proxy ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h2><p>不带&#x2F;意味着Nginx不会修改用户URL，而是直接透传给上游的应用服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">location /bbs/ &#123;<br>proxy_pass &lt;http://127.0.0.1:8080&gt;;<br>&#125;<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">用户请求URL ：/bbs/abc/test.html</span><br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">请求到达Nginx的URL ：/bbs/abc/test.html</span><br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">请求到达上游应用服务器的URL ：/bbs/abc/test.html</span><br></code></pre></td></tr></table></figure><p>带&#x2F;意味着Nginx会修改用户URL，修改方法：将location后的URL从用户URL中删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">location /bbs/ &#123;<br>proxy_pass &lt;http://127.0.0.1:8080/&gt;;<br>&#125;<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">用户请求URL ：/bbs/abc/test.html</span> <br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">请求到达Nginx的URL ：/bbs/abc/test.html</span><br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">请求到达上游应用服务器的URL ：/abc/test.html</span><br></code></pre></td></tr></table></figure><p>Proxy_request_buffering on | off</p><p>会对请求进行缓存，在请求体数据完整之后再进行数据转发</p><p>适用场景 ：</p><p>吞吐量要求高</p><p>上游服务并发处理能力低</p><p>Proxy_request_buffering off</p><p>适用场景 ：</p><p>更及时的响应</p><p>减少Nginx磁盘IO</p><p>client_max_body_size  size        请求体的最大尺寸  → 返回413错误</p><p>client_body_buff_size size         请求体的尺寸在内存缓存 → 在磁盘开辟空间存储</p><p>client_body_in_single_buffer    请求体尽可能存储到一块连续空间</p><p>client_body_temp_path             指定磁盘目录</p><p>client_body_in_file_only             直接将请求体存入磁盘 on | clean | off  clean会在处理完成后清除请求</p><p>client_body_timeout                   请求不发送的超时时间</p><h3 id="proxy-method-修改请求方法名"><a href="#proxy-method-修改请求方法名" class="headerlink" title="proxy_method  修改请求方法名"></a>proxy_method  修改请求方法名</h3><h3 id="proxy-http-version-修改请求协议声明"><a href="#proxy-http-version-修改请求协议声明" class="headerlink" title="proxy_http_version  修改请求协议声明"></a>proxy_http_version  修改请求协议声明</h3><h3 id="proxy-set-header-设置请求头部"><a href="#proxy-set-header-设置请求头部" class="headerlink" title="proxy_set_header 设置请求头部"></a>proxy_set_header 设置请求头部</h3><h3 id="proxy-pass-request-header-on-off-代理直接转发头部信息到应用服务器"><a href="#proxy-pass-request-header-on-off-代理直接转发头部信息到应用服务器" class="headerlink" title="proxy_pass_request_header on | off 代理直接转发头部信息到应用服务器"></a>proxy_pass_request_header on | off 代理直接转发头部信息到应用服务器</h3><h3 id="proxy-set-body-设置包体"><a href="#proxy-set-body-设置包体" class="headerlink" title="proxy_set_body 设置包体"></a>proxy_set_body 设置包体</h3><h3 id="proxy-pass-request-body-on-off-代理直接转发请求体到应用服务器"><a href="#proxy-pass-request-body-on-off-代理直接转发请求体到应用服务器" class="headerlink" title="proxy_pass_request_body  on | off 代理直接转发请求体到应用服务器"></a>proxy_pass_request_body  on | off 代理直接转发请求体到应用服务器</h3><h3 id="proxy-connect-timeout-time-指定与应用服务器连接超时时间"><a href="#proxy-connect-timeout-time-指定与应用服务器连接超时时间" class="headerlink" title="proxy_connect_timeout time  指定与应用服务器连接超时时间"></a>proxy_connect_timeout time  指定与应用服务器连接超时时间</h3><h3 id="proxy-socket-keepalilve-on-off"><a href="#proxy-socket-keepalilve-on-off" class="headerlink" title="proxy_socket_keepalilve on | off"></a>proxy_socket_keepalilve on | off</h3><h3 id="proxy-send-timeout-time-请求未发送超时时间"><a href="#proxy-send-timeout-time-请求未发送超时时间" class="headerlink" title="proxy_send_timeout time  请求未发送超时时间"></a>proxy_send_timeout time  请求未发送超时时间</h3><h3 id="proxy-ignore-client-bort-on-off-用户断开后，Nginx与后端的连接选项"><a href="#proxy-ignore-client-bort-on-off-用户断开后，Nginx与后端的连接选项" class="headerlink" title="proxy_ignore_client_bort on | off  用户断开后，Nginx与后端的连接选项"></a>proxy_ignore_client_bort on | off  用户断开后，Nginx与后端的连接选项</h3><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>负载均衡配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> demo_server &#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.184.20:8020</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.184.20:8021</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.184.20:8022</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> balance.kutian.edu ;<br><span class="hljs-section">location</span> /balance/ &#123;<br><span class="hljs-attribute">proxy_pass</span> http://demo_server ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">**hash**  key [consistent] <br><br>upstream demo_server &#123;<br><span class="hljs-attribute">hash $request_uri ;</span><br><span class="hljs-attribute">server 192.168.184.20</span>:10020 ;<br><span class="hljs-attribute">server 192.168.184.20</span>:10010 ;<br>&#125;<br><br>server &#123;<br><span class="hljs-attribute">listen 80 ;</span><br><span class="hljs-attribute">server_name balance.codfish.cn ;</span><br><span class="hljs-attribute">locations/ &#123;</span><br><span class="hljs-attribute">proxy_pass http</span>://demo_server_1 ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IP-哈希算法"><a href="#IP-哈希算法" class="headerlink" title="IP_哈希算法"></a>IP_哈希算法</h2><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">upstream demo_server &#123;<br><span class="hljs-attribute">ip_hash ;</span><br><span class="hljs-attribute">server 192.168.184.20</span>:10020 ;<br><span class="hljs-attribute">server 192.168.184.20</span>:10010 ;<br>&#125;<br><br>server &#123;<br><span class="hljs-attribute">listen 80 ;</span><br><span class="hljs-attribute">server_name balance.codfish.cn ;</span><br><span class="hljs-attribute">locations/ &#123;</span><br><span class="hljs-attribute">proxy_pass http</span>://demo_server_1;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最少连接数算法"><a href="#最少连接数算法" class="headerlink" title="最少连接数算法"></a>最少连接数算法</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">upstream demo_server &#123;<br><span class="hljs-type">zone</span> test <span class="hljs-number">10</span>M;<br>least_conn;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.184</span><span class="hljs-number">.20</span>:<span class="hljs-number">10020</span> ;<br><span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.184</span><span class="hljs-number">.20</span>:<span class="hljs-number">10010</span> ;<br>&#125;<br><br><span class="hljs-keyword">server</span> &#123;<br><span class="hljs-keyword">listen</span> <span class="hljs-number">80</span> ;<br>server_name balance.codfish.cn ;<br>locations/ &#123;<br>proxy_pass http://demo_server_1;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h2><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">upstream demo_server &#123;<br><span class="hljs-attribute">server 192.168.184.20</span>:10020 ;<br><span class="hljs-attribute">server 192.168.184.20</span>:10010 ;<br>&#125;<br><br>server &#123;<br><span class="hljs-attribute">listen 80 ;</span><br><span class="hljs-attribute">server_name balance.codfish.cn ;</span><br><span class="hljs-attribute">locations/ &#123;</span><br><span class="hljs-attribute">proxy_pass http</span>://demo_server_1;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="权重轮询"><a href="#权重轮询" class="headerlink" title="权重轮询"></a>权重轮询</h2><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">upstream demo_server &#123;<br><span class="hljs-attribute">server 192.168.184.20</span>:10020 weight=2 ;<br><span class="hljs-attribute">server 192.168.184.20</span>:10010 weight=1 ;<br>&#125;<br><br>server &#123;<br><span class="hljs-attribute">listen 80 ;</span><br><span class="hljs-attribute">server_name balance.codfish.cn ;</span><br><span class="hljs-attribute">locations/ &#123;</span><br><span class="hljs-attribute">proxy_pass http</span>://demo_server_1;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="响应时间-（通过第三方模块加载）"><a href="#响应时间-（通过第三方模块加载）" class="headerlink" title="响应时间 （通过第三方模块加载）"></a>响应时间 （通过第三方模块加载）</h2><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">upstream demo_server &#123;<br><span class="hljs-attribute">fair</span><br><span class="hljs-attribute">server 192.168.184.20</span>:10020 ;<br><span class="hljs-attribute">server 192.168.184.20</span>:10010 ;<br>&#125;<br><br>server &#123;<br><span class="hljs-attribute">listen 80 ;</span><br><span class="hljs-attribute">server_name balance.codfish.cn ;</span><br><span class="hljs-attribute">locations/ &#123;</span><br><span class="hljs-attribute">proxy_pass http</span>://demo_server_1;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="转发容错"><a href="#转发容错" class="headerlink" title="转发容错"></a>转发容错</h2><p>1.通过一些字段控制，当nginx收到服务器的错误响应后，将请求向其他服务器转发</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_next_upstream</span> <span class="hljs-literal">error</span>  <span class="hljs-comment"># 出现异常后，分发请求</span><br>  timeout <span class="hljs-comment"># 后端服务器响应超时后，分发请求</span><br>  invalid_header <span class="hljs-comment"># 后端服务器响应不可用报文头后，分发请求</span><br>  http_xxx <span class="hljs-comment"># 后端响应异常状态码后，分发请求</span><br>  non_idempotent <span class="hljs-comment"># 非幂等请求失败后，是否进行转发</span><br>  <span class="hljs-literal">off</span> <span class="hljs-comment"># 关闭分发</span><br></code></pre></td></tr></table></figure><p>2.服务器响应超时&#x2F;失败多次，调度请求给其他服务器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_next_upstream_timeout</span> times ;  <span class="hljs-comment"># 后端服务器响应超时时间设置</span><br><span class="hljs-attribute">proxy_next_upstream_tries</span> ;        <span class="hljs-comment"># 后端服务器多次尝试请求失败后，默认为0 即允许无数次尝试</span><br></code></pre></td></tr></table></figure><p>3.服务器响应存在错误，直接转发给客户端</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_intercept_errors</span>  <span class="hljs-literal">on</span> | <span class="hljs-literal">off</span><br></code></pre></td></tr></table></figure><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>通过在边缘阶段的Nginx服务器上存储响应资源，可以提高整体的用户访问效率，减少服务端的处理压力</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp">**proxy_cache  zone | off                                     <span class="hljs-meta"># 开启nginx 缓存</span><br><br>proxy_cache_path      path                                  <span class="hljs-meta"># 缓存文件的存放路径</span><br>[<span class="hljs-meta">level=levels</span>]                        <span class="hljs-meta"># 指定目录层级</span><br>                      [<span class="hljs-meta">use_temp_path=on/off</span>]                <span class="hljs-meta"># off直接使用path路径 on是临时路径</span><br>                      keys_zone=name:size                   <span class="hljs-meta"># name是共享内存名称;size是共享内存大小</span><br>                      [<span class="hljs-meta">inactive=time</span>]                       <span class="hljs-meta"># 在指定时间内没有被访问缓存会被清理</span><br>                      [<span class="hljs-meta">max_size=size</span>]                       <span class="hljs-meta"># 设定最大的缓存文件大小</span><br>                      [<span class="hljs-meta">manager_files=number</span>]                <span class="hljs-meta"># CM清理一次缓存文件，最大清理文件数</span><br>                      [<span class="hljs-meta">manager_sleep=time</span>]                  <span class="hljs-meta"># CM清理一次后进程的休眠时间</span><br>                      [<span class="hljs-meta">manager_threshold=time</span>]              <span class="hljs-meta"># CM清理一次的最长耗时，最长50ms</span><br>                      [<span class="hljs-meta">loader_files=number</span>]                 <span class="hljs-meta"># CL载入文件到共享内存，每批最多文件数</span><br>                      [<span class="hljs-meta">loader_sleep=time</span>]                   <span class="hljs-meta"># CL加载缓存文件到内存后，进程休眠时间</span><br>                      [<span class="hljs-meta">loader_threshold=time</span>]               <span class="hljs-meta"># CL加载缓存文件到共享内存的最大耗时</span><br>                      [<span class="hljs-meta">purger=on | off</span>]                       <br>                      [<span class="hljs-meta">purger_files=number</span>]<br>                      [<span class="hljs-meta">purger_sleep=time</span>]<br>                      [<span class="hljs-meta">purger_threshold=time</span>]<br> proxy_cache_key<br> proxy_cache_valid                                          <span class="hljs-meta"># 定义对哪些状态进行响应</span><br> <br> upstream_cache_status                                      <span class="hljs-meta"># 检查缓存是否命中</span><br> <span class="hljs-meta"># MISS                                                     # 未命中</span><br> <span class="hljs-meta"># HIT                                                      # 命中</span><br> <span class="hljs-meta"># EXPIRED                                                  # 缓存过期</span><br> <span class="hljs-meta"># STALE                                                    # 命中了陈旧缓存</span><br> <span class="hljs-meta"># REVALIDDATED                                             # 验证后依然有效</span><br> <span class="hljs-meta"># UPDATING                                                 # 缓存正在更新</span><br> <span class="hljs-meta"># BYPASS                                                   # 响应从原始服务器获取**</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_cache_path</span> /opt/nginx/cache_temp levels=<span class="hljs-number">2</span>:<span class="hljs-number">2</span> keys_zone=cache_zone:<span class="hljs-number">30m</span> max_size=<span class="hljs-number">32g</span> inactive=<span class="hljs-number">60m</span><br>use_temp_path=<span class="hljs-literal">off</span>;<br><br><span class="hljs-section">upstream</span> cache_server&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.184.20:1010</span> ;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.184.20:1011</span> ;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> ;<br><span class="hljs-attribute">server_name</span> cache.codfish.cn ;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_cache</span> cache_zone ;<br><span class="hljs-attribute">proxy_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">5m</span> ;<br><span class="hljs-attribute">add_header</span> Nginx-Cache-Status <span class="hljs-string">&quot;<span class="hljs-variable">$upstream_cache_status</span>&quot;</span>;<br><span class="hljs-attribute">proxy_pass</span> http://cache_server;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="特定内容不适用缓存"><a href="#特定内容不适用缓存" class="headerlink" title="特定内容不适用缓存"></a>特定内容不适用缓存</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">**proxy_no_cache <span class="hljs-built_in">string</span> ;                              <span class="hljs-comment"># 不使用缓存</span><br>proxy_cache_bypass <span class="hljs-built_in">string</span> ;                          <span class="hljs-comment"># 直接交给应用服务器**</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_cache_path</span> /opt/nginx/cache_temp levels=<span class="hljs-number">2</span>:<span class="hljs-number">2</span> keys_zone=cache_zone:<span class="hljs-number">30m</span> max_size=<span class="hljs-number">32g</span> inactive=<span class="hljs-number">60m</span><br>use_temp_path=<span class="hljs-literal">off</span>;<br><br><span class="hljs-section">upstream</span> cache_server&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.184.20:1010</span> ;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.184.20:1011</span> ;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> ;<br><span class="hljs-attribute">server_name</span> cache.codfish.cn ;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~ \\.(txt|text)$)</span>&#123;<br><span class="hljs-attribute">set</span> <span class="hljs-variable">$cookie_name</span> <span class="hljs-string">&quot;no cache&quot;</span>;<br>&#125;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_cache</span> cache_zone ;<br><span class="hljs-attribute">proxy_no_cache</span> <span class="hljs-variable">$cookie_name</span> ;<br><span class="hljs-attribute">proxy_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">5m</span> ;<br><span class="hljs-attribute">add_header</span> Nginx-Cache-Status <span class="hljs-string">&quot;<span class="hljs-variable">$upstream_cache_status</span>&quot;</span>;<br><span class="hljs-attribute">proxy_pass</span> http://cache_server;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="缓存失效降低上游压力"><a href="#缓存失效降低上游压力" class="headerlink" title="缓存失效降低上游压力"></a>缓存失效降低上游压力</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_cache_lock</span>   <span class="hljs-literal">on</span> | <span class="hljs-literal">off</span>                     <span class="hljs-comment"># 阻塞其他相同请求，仅发送一个请求到原始服务器，其他请求使用缓存响应</span><br>proxy_cache_timeout                             <span class="hljs-comment"># 等待第一个请求响应的超时时间</span><br>proxy_cache_lock_age  time                      <span class="hljs-comment"># 等待周期 按序发送请求</span><br></code></pre></td></tr></table></figure><h2 id="启用陈旧缓存"><a href="#启用陈旧缓存" class="headerlink" title="启用陈旧缓存"></a>启用陈旧缓存</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_cache_use_stal</span> <span class="hljs-literal">error</span>                       <span class="hljs-comment"># 异常 </span><br>                     timeout                     <span class="hljs-comment"># 请求超时</span><br>                     invalid_header              <span class="hljs-comment"># 不可用报头</span><br>                     updating                    <span class="hljs-comment"># 正在更新</span><br>                     xx code                     <span class="hljs-comment"># 状态码响应</span><br>                     <span class="hljs-literal">off</span>                         <span class="hljs-comment"># 关闭</span><br>proxy_cache_background_update  <span class="hljs-literal">on</span> | <span class="hljs-literal">off</span>          <span class="hljs-comment"># nginx直接进行缓存更新</span><br></code></pre></td></tr></table></figure><h2 id="第三方缓存清除"><a href="#第三方缓存清除" class="headerlink" title="第三方缓存清除"></a>第三方缓存清除</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">proxy_cache_purge zone_name  key <span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_cache_path</span> /opt/nginx/cache_temp levels=<span class="hljs-number">2</span>:<span class="hljs-number">2</span> keys_zone=cache_zone:<span class="hljs-number">30m</span> max_size=<span class="hljs-number">32g</span> inactive=<span class="hljs-number">60m</span><br>use_temp_path=<span class="hljs-literal">off</span>;<br><br><span class="hljs-section">upstream</span> cache_server&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.184.20:1010</span> ;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.184.20:1011</span> ;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> ;<br><span class="hljs-attribute">server_name</span> cache.codfish.cn ;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~ \\.(txt|text)$)</span>&#123;<br><span class="hljs-attribute">set</span> <span class="hljs-variable">$cookie_name</span> <span class="hljs-string">&quot;no cache&quot;</span>;<br>&#125;<br><span class="hljs-section">location</span> <span class="hljs-regexp">~ /cache_purge(/.*)</span>&#123;<br><span class="hljs-attribute">proxy_cache_purge</span>  cache_zone  <span class="hljs-variable">$host</span><span class="hljs-variable">$1</span>;<br>&#125;<br><br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_cache</span> cache_zone ;<br><span class="hljs-attribute">proxy_no_cache</span> <span class="hljs-variable">$cookie_name</span> ;<br><span class="hljs-attribute">proxy_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">5m</span> ;<br><span class="hljs-attribute">add_header</span> Nginx-Cache-Status <span class="hljs-string">&quot;<span class="hljs-variable">$upstream_cache_status</span>&quot;</span>;<br><span class="hljs-attribute">proxy_pass</span> http://cache_server;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><h2 id="HTTP的局限"><a href="#HTTP的局限" class="headerlink" title="HTTP的局限"></a>HTTP的局限</h2><p>1 数据使用明文传输</p><p>2 报文的完整性无法验证</p><p>3 无法验证通信双方的身份</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>服务端和客户端使用同一把密钥 对数据进行加密&#x2F;解密操作</p><ul><li>优势 协商效率高</li><li>劣势 密钥数量太多难以管理&#x2F;无法进行数据完整性校验&#x2F;无法传输</li></ul><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>服务器和客户端创建一对公钥和私钥。一方使用另一方的公钥对数据进行解密</p><ul><li>优势 只需要一个私钥</li><li>劣势 公钥是公开的，非对称加密算法加解密过程会耗费一些时间</li></ul><h3 id="https加密"><a href="#https加密" class="headerlink" title="https加密"></a>https加密</h3><ul><li>使用非对称加密建立连接</li><li>使用对称加密加密数据传输</li></ul><ol><li>服务端发送公钥证书给客户端</li><li>客户端创建会话密钥，并使用公钥对密钥进行加密发送到服务端</li><li>服务端收到加密后的密钥使用私钥解密。获取客户端的对称加密密钥</li><li>使用会话加密，发送数据到客户端</li><li>客户端和服务端使用创建的会话密钥进行通信</li></ol><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>配置Nginx子进程数与CPU核心数一致 （提高整体的CPU使用率）</p><p>配置Nginx子进程与CPU核心绑定（确保子进程只会在一个CPU上被加载调度，减少缓存反复加载过程）</p><p>提高子进程优先级，提高被调度器执行的概率</p><p>延迟处理新连接         deferred        延迟处理并发连接  直到发起http请求才会触发子进程处理</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>网络技术</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 访问控制与变量</title>
    <link href="/2025/05/18/Nginx-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%8F%98%E9%87%8F/"/>
    <url>/2025/05/18/Nginx-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx-访问控制与内置变量"><a href="#Nginx-访问控制与内置变量" class="headerlink" title="Nginx 访问控制与内置变量"></a>Nginx 访问控制与内置变量</h1><h1 id="limit-conn-并发连接限制"><a href="#limit-conn-并发连接限制" class="headerlink" title="limit_conn  并发连接限制"></a>limit_conn  并发连接限制</h1><p>limit_conn 用于控制并发的连接数量，当并发连接请求超过设置数量会返回响应的状态码和提示信息</p><p>limit_conn_zone key zone&#x3D;name:size</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">limit_conn_zone <span class="hljs-variable">$binary_remote_addr</span> <span class="hljs-attribute">zone</span>=addr:10m <br></code></pre></td></tr></table></figure><p>limit_conn_status <code>&lt;code&gt;</code></p><p>定义限制触发后的状态码响应</p><p>limit_conn_level  info | warn | debug | error</p><p>设置限制发生后的日志记录级别</p><p>limit_conn addr number</p><p>限制并发个数</p><p>limit_rate</p><p>响应数据的传输速率</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">http &#123;<br>...<br>limit_conn_zone $binary_remote_addr zone = addr : <span class="hljs-number">10</span> m<br><span class="hljs-keyword">location</span> <span class="hljs-title">/ &#123;</span><br><span class="hljs-title">root</span> root_path ;<br>index index.html ;<br>limit_conn_status_code <span class="hljs-number">503</span> ;              <span class="hljs-comment"># 限制触发时，返回503状态码</span><br>limit_conn_level warn ;                   <span class="hljs-comment"># 设置log级别为warn</span><br>limit_conn addr <span class="hljs-number">3</span> ;                            <span class="hljs-comment"># 并发连接数为3</span><br>limit_rate <span class="hljs-number">50</span>;                            <span class="hljs-comment"># 每秒传输50字节</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="limit-req-请求速率限制"><a href="#limit-req-请求速率限制" class="headerlink" title="limit_req  请求速率限制"></a>limit_req  请求速率限制</h1><p>limit_req_zone key zone&#x3D;name:size rate&#x3D;rate</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">limit_req_zone <span class="hljs-variable">$binary_remote_addr</span> <span class="hljs-attribute">zone</span>=addr:10m <span class="hljs-attribute">rate</span>=2r/m<br><span class="hljs-comment"># 限制每分钟处理两个请求 (平均处理速率  30s 处理一个)</span><br></code></pre></td></tr></table></figure><p>limit_req_status code</p><p>定义限制触发后的状态码响应</p><p>limit_req_level info | notice | warn | error</p><p>limit_req zone&#x3D;name  [ burst&#x3D;number ] [ nodelay | delay ];</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># burst 表示允许接受突发请求</span><br><span class="hljs-comment"># nodelay 表示收到突发请求后直接返回响应</span><br><span class="hljs-comment"># delay 表示仍严格按照处理速率对请求进行处理</span><br><br>http &#123;<br><span class="hljs-built_in">..</span>.<br>limit_req_zone <span class="hljs-variable">$binary_remote_addr</span> <span class="hljs-attribute">zone</span>=addr:10m <span class="hljs-attribute">rate</span>=12r/m ;<br>location / &#123;<br>root root_path ;<br>index index.html ;                               <br>limit_req_status 503 ;                             # 设置响应码为503<br>limit_req_level <span class="hljs-built_in">error</span> ;                            # 设置日志级别为<span class="hljs-built_in">error</span><br>limit_req <span class="hljs-attribute">zone</span>=addr <span class="hljs-attribute">burst</span>=6 nodelay ;              # 设置最大突发请求为6,不延迟<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="allow-deny-访问控制列表"><a href="#allow-deny-访问控制列表" class="headerlink" title="allow&#x2F;deny  访问控制列表"></a>allow&#x2F;deny  访问控制列表</h1><p>控制接收或者拒绝的ip 地址接入请求</p><p>控制权限由上到下生效</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/ &#123;</span><br><span class="hljs-title">allow</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">0.1</span> ;<br><span class="hljs-keyword">deny</span> all;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="auth-basic"><a href="#auth-basic" class="headerlink" title="auth_basic"></a>auth_basic</h1><p>auth_basic string | off (默认)</p><p>auth_basic_user_file 存储鉴权文件路径</p><p>鉴权文件生成：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">htpasswd<br>httdpd-tools<br>htpasswd -<span class="hljs-keyword">bc </span>encrypt_pass <span class="hljs-keyword">jack </span><span class="hljs-number">123456</span>   <span class="hljs-comment"># 创建鉴权文件</span><br>htpasswd -<span class="hljs-keyword">b </span>encrypt_pass tom <span class="hljs-number">123</span>        <span class="hljs-comment"># 增加鉴权信息</span><br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /auth &#123;<br><span class="hljs-attribute">root</span> html ;<br><span class="hljs-attribute">index</span> index.html ;<br><span class="hljs-attribute">auth_basic</span> <span class="hljs-string">&quot;check passwd&quot;</span>;                             <span class="hljs-comment"># 设置提示信息 </span><br><span class="hljs-attribute">auth_basic_user_file</span> pass_file_path ;                  <span class="hljs-comment"># 设置鉴权文件路径</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="auth-request"><a href="#auth-request" class="headerlink" title="auth_request"></a>auth_request</h1><p>auth_request uri | off  ;</p><p>重定向到别的模块</p><p>auth_request_set  $variable value ;</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /private/ &#123;<br><span class="hljs-attribute">auth_request</span> /auth ;                             <span class="hljs-comment"># 用户访问 /pirvate 后 跳转到/auth路径进行鉴权</span><br>&#125;<br><span class="hljs-section">location</span> /auth &#123;<br><span class="hljs-attribute">proxy_pass</span> &lt;http://127.0.0.1:8080/verify&gt; ;        <span class="hljs-comment"># 鉴权路径再次指向代理服务器验证路径</span><br><span class="hljs-attribute">proxy_pass_request_body</span> <span class="hljs-literal">off</span> ;                    <span class="hljs-comment"># 设置向代理服务器发送的请求体为空</span><br><span class="hljs-attribute">proxy_set_header</span> Content-Length <span class="hljs-string">&quot;&quot;</span>;              <span class="hljs-comment"># 设置向代理服务发送的请求长度为空</span><br><span class="hljs-attribute">proxy_set_header</span> X-Original-URI <span class="hljs-variable">$request_uri</span> ;   <span class="hljs-comment"># 设置原请求原uri信息</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h1><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p>停止处理请求，直接返回响应码 或 重定向到其他URL</p><p>执行return后， location中后续指令将不再被执行</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span>  code [text]  # 响应状态码 和 描述信息<br>...<br>location / &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&quot;return 200 http status code &quot;</span>;<br>&#125;<br>...<br><span class="hljs-keyword">return</span>  code URL     # 响应状态码 重定向到新的URL<br>...<br>location / &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">302</span> /new_page ;<br>&#125;<br>...<br><span class="hljs-keyword">return</span>  URL          # 重定向到新的URL , 必须是一个绝对路径的URL<br>...<br>location / &#123;<br><span class="hljs-keyword">return</span> &lt;http:<span class="hljs-comment">//ip&gt;:port/new_page; </span><br>&#125;<br>...<br></code></pre></td></tr></table></figure><h2 id="Rewrite"><a href="#Rewrite" class="headerlink" title="Rewrite"></a>Rewrite</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rewrite</span> regex replacement<br><br>例如 ： rewrite /images/(.*\\.jpg)$ /pic/<span class="hljs-variable">$1</span> ;<br><br><span class="hljs-attribute">flag</span> :<br><span class="hljs-literal">last</span> : 重写后的URL发起新请求，再次进入server段，重新进行location的匹配<br><span class="hljs-literal">break</span> : 直接使用重写后的URL，不再匹配location中的语句<br><span class="hljs-literal">redirect</span> : 返回<span class="hljs-number">302</span>临时重定向<br><span class="hljs-literal">permanent</span> : 返回<span class="hljs-number">301</span>永久重定向<br><br>server &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> ;<br><span class="hljs-attribute">server_name</span> <span class="hljs-literal">info</span>.codfish.cn ;<br><span class="hljs-attribute">root</span> html ;<br><span class="hljs-section">location</span> /serach &#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)</span>  &lt;http://www.codfish.cn&gt;  <span class="hljs-literal">redirect</span>|<span class="hljs-literal">permanent</span>    <span class="hljs-comment"># 匹配任意地址 重定向到目标地址</span><br>&#125;<br>location  /images&#123;<br><span class="hljs-attribute">rewrite</span> /images/(.*)  /pics/<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;          <span class="hljs-comment"># 匹配/images+ 任意字段 重定向到 /pics/$1 直接使用该URL请求</span><br>&#125;<br><span class="hljs-section">location</span>  /pics&#123;<br><span class="hljs-attribute">rewiret</span> /pics/(.*)  /photos/<span class="hljs-variable">$1</span> <span class="hljs-literal">last</span>;           <span class="hljs-comment"># 替换为/photos/任意字段。再次依照此url发起匹配 </span><br>&#125;<br><span class="hljs-section">location</span>  /photos&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Return-和-Rewrite-的执行顺序"><a href="#Return-和-Rewrite-的执行顺序" class="headerlink" title="Return 和 Rewrite 的执行顺序"></a>Return 和 Rewrite 的执行顺序</h2><p>在server中的location 是一个循环查询过程。</p><p>所以 整个过程为http 处理 连接请求，匹配连接请求中的路径在server中进行查询</p><p>当 碰到 break 后， 中断本次查询拿着最新替换的 url在location 列表中继续匹配 (类似于编程语言中的continue）</p><p>当 碰到 last 后 ， 中断本次查询 进入后续的文件查询步骤 (类似于编程语言中的break)</p><p>当 碰到 return 后 ，中断查询，使用return中提供的响应信息返回。</p><h2 id="If"><a href="#If" class="headerlink" title="If"></a>If</h2><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">if</span> ( condition ) <span class="hljs-meta">&#123;...&#125;</span> ;<br><span class="hljs-comment"># 依照表达式 匹配重定向路径</span><br><br><span class="hljs-keyword">if</span> ($http_user_agent ~ <span class="hljs-type">Chrome</span>)&#123;<br>rewrite /(.*) /browser/$<span class="hljs-number">1</span> <span class="hljs-keyword">break</span> ;<br>&#125;<br><br><span class="hljs-comment"># 判断表达式</span><br><span class="hljs-comment"># $variable            非空为true,空为false</span><br><span class="hljs-comment"># = 或 !=              相等/不等</span><br><span class="hljs-comment"># ~ 或 !~              正则/非正则匹配</span><br><span class="hljs-comment"># ~*                   正则不区分大小写</span><br><span class="hljs-comment"># -f 或 ! -f           文件/非文件</span><br><span class="hljs-comment"># -d 或 ! -d           存在/不存在</span><br><span class="hljs-comment"># -e 或 ! -e           检查文件，目录，链接是否存在</span><br><span class="hljs-comment"># -x 或 ! -x           检查文件可执行/不</span><br><br></code></pre></td></tr></table></figure><h1 id="autoindex"><a href="#autoindex" class="headerlink" title="autoindex"></a>autoindex</h1><p>用户请求以&#x2F;结尾时，列出目录结构</p><p>autoindex</p><p>autoindex_exact_size</p><p>autoindex_format</p><p>autoindex_localtime</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">autoindex</span>  <span class="hljs-literal">on</span> | <span class="hljs-literal">off</span>   列出目录下的所有文件<br>autoindex_exact_size  <span class="hljs-literal">on</span> | <span class="hljs-literal">off</span>  显示文件的精确大小<br>autoindex_format html  指定返回的目录结构<br>autoindex_localtime    文件时间格式 <br></code></pre></td></tr></table></figure><h1 id="Nginx-变量"><a href="#Nginx-变量" class="headerlink" title="Nginx 变量"></a>Nginx 变量</h1><h2 id="TCP连接变量"><a href="#TCP连接变量" class="headerlink" title="TCP连接变量"></a>TCP连接变量</h2><p>remote_addr                 客户端ip地址</p><p>remote_port                 客户端端口</p><p>server_addr                   服务端ip地址</p><p>server_port                   服务端端口</p><p>server_protocol           服务端协议</p><p>binary_remote_addr   二进制格式的客户端ip地址</p><p>connection                    TCP连接序号</p><p>connection_request    TCP连接当前的请求数量</p><p>proxy_protocol_addr  代理的ip地址信息</p><p>proxy_protocol_port   代理的端口信息</p><h2 id="Http请求变量"><a href="#Http请求变量" class="headerlink" title="Http请求变量"></a>Http请求变量</h2><p>uri                                     请求URL， 不包含参数</p><p>request_uri                     请求URL，包含参数</p><p>scheme                           协议名，http或https</p><p>request_method           请求方法</p><p>request_length              全部请求的长度</p><p>args                                  全部参数字符串</p><p>arg_参数名                     特定参数值</p><p>is_args                             URL中有参数，则返回？ 否则返回空</p><p>query_string                  与args相同</p><p>remote_user                  由HTTP Basic Authentication 协议传入的用户名</p><p>host                                  主机名查询，多位置查询</p><p>http_user_agent            用户的浏览器代理</p><p>http_referer                    从哪个链接进行的请求</p><p>http_via                           中间经过的代理服务器路径</p><p>http_x_forwarded_for  经过代理后携带的真实用户ip信息</p><p>http_cookie                    用户cookie</p><h2 id="处理请求时产生的变量"><a href="#处理请求时产生的变量" class="headerlink" title="处理请求时产生的变量"></a>处理请求时产生的变量</h2><p>request_time                 处理请求已耗费的时间</p><p>request_completion    请求处理完成返回OK</p><p>server_name                  匹配请求的server name值</p><p>https                                开启https,则返回on ， 否则返回空</p><p>request_filename          磁盘文件系统待访问路径</p><p>document_root             由URL和root&#x2F;alias规则生成的路径</p><p>realpath_root                 将document_root中的软链接转换为真实路径</p><p>limit_rate                         响应时的速度上限值</p><h2 id="响应变量"><a href="#响应变量" class="headerlink" title="响应变量"></a>响应变量</h2><p>status                                    响应状态码</p><p>sent_http_content_type   响应头中的Content-Type</p><p>sent_http_cache_control  响应头中的Cache-Length</p><p>sent_http_*                           任意发送的响应头字段</p><p>body_bytes_sent                 已发送的响应body字节数</p><p>bytes_sent                             已发送的总字节数</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>网络技术</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 配置</title>
    <link href="/2025/05/18/Nginx-%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/05/18/Nginx-%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>&#x2F;etc&#x2F;nginx                                                                      nginx配置文件目录</p><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf                                                 nginx的主配置文件</p><p>&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;                                                       nginx的子配置文件的目录</p><p>&#x2F;etc&#x2F; logrotate.d&#x2F;nginx                                               日志切割</p><p>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service                  nginx的systemctl配置文件</p><p>&#x2F;usr&#x2F;sbin&#x2F;nginx                                                              nginx管理命令</p><p>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html                                                 nginx默认的站点目录，网站的根目录</p><p>&#x2F;var&#x2F;log&#x2F;nginx                                                                nginx日志文件的目录</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-comment">#================================ 核心配置区 ===============================</span><br>user nginx;                                   <span class="hljs-comment"># 指定nginx所属于用户的通知用户</span><br>worker_processes auto;                        <span class="hljs-comment"># 用于设置进程数量，处理用户请求</span><br>error_log /var/log/nginx/error.log;           <span class="hljs-comment"># Nginx模块日志及位置</span><br>pid /run/nginx.pid;                           <span class="hljs-comment"># pid文件</span><br><span class="hljs-comment"># worker_rlimit_nofile number                 # 子进程可以打开的最大句柄数</span><br><span class="hljs-comment"># worker_rlimit_core size                     # 设置异常文件大小</span><br><span class="hljs-comment"># working_directory                           # 存储core文件的路径</span><br><span class="hljs-comment"># worker_cpu_affinity                         # 将子进程与CPU核心绑定</span><br><span class="hljs-comment"># worker_cpu_affinity  0001 0010 0100 1000    # 将子进程与核心绑定</span><br><span class="hljs-comment"># worker_priority number                      # 调整子进程优先级</span><br><span class="hljs-comment"># worker_shutdown_timeout time                # 调整优雅退出超时时间</span><br><span class="hljs-comment"># timer_resolution interval                   # 调整向内核获取时间戳的</span><br>周期，周期越小，系统调用开销越大，周期越大，日志时间精度越低<br><span class="hljs-comment"># daemon on | off                             # 设置守护进程</span><br><span class="hljs-comment">#===========================================================================</span><br><span class="hljs-comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br>include /usr/share/nginx/modules/*.conf;      <span class="hljs-comment"># 额外的配置文件</span><br><span class="hljs-comment">#================================= EVENTS区 ================================</span><br><span class="hljs-keyword">events</span> &#123;<br>    worker_connections <span class="hljs-number">1024</span>;                  <span class="hljs-comment"># worker进程的最大连接数</span><br>    <span class="hljs-comment"># use                                     # 设置nginx的IO模型</span><br>    <span class="hljs-comment"># accept_mutex                            # 互斥锁，开启后会先尝试请求锁，才能接收请求</span><br>    <span class="hljs-comment"># accept_mutex_delay time                 # 子进程等待时间</span><br>    <span class="hljs-comment"># lock_file file                          # 锁文件存储路径</span><br>    <span class="hljs-comment"># multi_accept on|off                     # 一个子进程可以接收多个请求</span><br>&#125;<br>#===========================================================================<br><span class="hljs-comment">#================================== HTTP 区 ================================</span><br><span class="hljs-keyword">http</span> &#123;<br>    log_format  <span class="hljs-keyword">main</span>  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br><span class="hljs-comment"># 访问日志的格式</span><br>    access_log  /var/log/nginx/access.log  <span class="hljs-keyword">main</span>;<br><span class="hljs-comment"># 使用日志格式及定义日志的位置</span><br>    sendfile            on;                   <span class="hljs-comment"># 直接把文件从磁盘发送到套接字</span><br>    tcp_nopush          on;                   <span class="hljs-comment"># 等待TCP报文到一定大小后发出。</span><br>    tcp_nodelay         on;                   <span class="hljs-comment"># 不等待最大TCP报文长，直接发送</span><br>    keepalive_timeout   <span class="hljs-number">65</span>;                   <span class="hljs-comment"># 长连接超时时间</span><br>    types_hash_max_size <span class="hljs-number">4096</span>;<br><br>    <span class="hljs-literal">include</span>        /etc/nginx/mime.types;     <span class="hljs-comment"># 文件包含,把另一个文件中的内容添加过来 / 媒体类型</span><br>    default_type   application/octet-stream;  <span class="hljs-comment"># </span><br><br>    <span class="hljs-comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span><br>    <span class="hljs-comment"># See &lt;http://nginx.org/en/docs/ngx_core_module.html#include&gt;</span><br>    <span class="hljs-comment"># for more information.</span><br>    <span class="hljs-literal">include</span> /etc/nginx/conf.d/*.conf;         <span class="hljs-comment"># 把conf.d 中的子配置文件包含进来</span><br><br>    server &#123;                                  <span class="hljs-comment"># 网站配置</span><br>        listen       <span class="hljs-number">80</span>;                      <span class="hljs-comment"># 监听端口</span><br>        listen       [::]:<span class="hljs-number">80</span>;                 <span class="hljs-comment"># 监听端口(IPv6)</span><br>        server_name  localhost;               <span class="hljs-comment"># 域名</span><br>        <span class="hljs-comment"># 域名匹配优先级 精确匹配&gt;左侧匹配&gt;右侧匹配&gt;正则匹配</span><br>        client_max_body_size  <span class="hljs-number">1024</span>M;          <span class="hljs-comment"># 限制客户端请求体（request body）最大大小  </span><br><br>        <span class="hljs-literal">root</span>         /usr/share/nginx/html;   <span class="hljs-comment"># 网站根目录</span><br>        index        index.html<br><br>        <span class="hljs-comment"># Load configuration files for the default server block.</span><br>        <span class="hljs-literal">include</span> /etc/nginx/<span class="hljs-keyword">default</span>.d/*.conf;  <span class="hljs-comment"># </span><br>        location  / &#123;<br>        <span class="hljs-comment"># location 匹配规则</span><br>        <span class="hljs-comment"># =  精确匹配，必须和声明路径完全一致</span><br>        <span class="hljs-comment"># ~  区分大小写的正则表达式匹配</span><br>        <span class="hljs-comment"># ~* 不区分大小写的正则表达式匹配</span><br>        <span class="hljs-comment"># ^~ 匹配到即停止搜索</span><br>        <span class="hljs-comment"># 匹配优先级 = &gt; ^~ &gt; ~ &gt; ~* &gt; 未配置</span><br>        <span class="hljs-comment"># 路径声明为 /something 会先查询是否存在something文件,再查询</span><br>        <span class="hljs-comment"># 是否存在/something 目录中存在index.html 作为返回</span><br>        <span class="hljs-comment"># 声明为 /something/ 只会作为目录进行查询是否存在index.html文件</span><br>        index  index.html ;<br>        <span class="hljs-comment"># root 定义了访问的根目录，查询从根目录开始</span><br>        <span class="hljs-comment"># alias 定义为/的别名，即访问的内容都是包含alias的路径</span><br>        <span class="hljs-comment"># 比如 /something  alias /opt/something  请求/something/1.jpg</span><br>        <span class="hljs-comment"># 会直接替换为/opt/something/1.jpg 意思为声明的“/”的别名是alias声明的路径</span><br>        <span class="hljs-comment"># stub_status ; </span><br>        <span class="hljs-comment"># 数据统计</span><br>        <span class="hljs-comment"># Active Connections        活动的连接数 </span><br>        <span class="hljs-comment"># accepts                   接受的客户端总量</span><br>        <span class="hljs-comment"># handled                   处理的客户端总量</span><br>        <span class="hljs-comment"># requests                  客户端的总请求数量</span><br>        <span class="hljs-comment"># Reading                   读取客户端请求的数量</span><br>        <span class="hljs-comment"># Writing                   响应数据到客户端的总数量</span><br>        <span class="hljs-comment"># Waiting                   空闲客户端请求连接数量</span><br>        &#125;<br><br>        <span class="hljs-keyword">error_page</span> 404 /404.html;<br>            location = /40x.<span class="hljs-keyword">html</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">error_page</span> 500 502 503 504 /50x.html;<br>            location = /50x.<span class="hljs-keyword">html</span> &#123;<br>        &#125;<br>    &#125;<br>===============================================================================<br>==================================== HTTPS 区 =================================<br><span class="hljs-comment"># Settings for a TLS enabled server.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    server &#123;</span><br><span class="hljs-comment">#        listen       443 ssl http2;</span><br><span class="hljs-comment">#        listen       [::]:443 ssl http2;</span><br><span class="hljs-comment">#        server_name  _;</span><br><span class="hljs-comment">#        root         /usr/share/nginx/html;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class="hljs-comment">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class="hljs-comment">#        ssl_session_cache shared:SSL:1m;</span><br><span class="hljs-comment">#        ssl_session_timeout  10m;</span><br><span class="hljs-comment">#        ssl_ciphers PROFILE=SYSTEM;</span><br><span class="hljs-comment">#        ssl_prefer_server_ciphers on;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#        # Load configuration files for the default server block.</span><br><span class="hljs-comment">#        include /etc/nginx/default.d/*.conf;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#        error_page 404 /404.html;</span><br><span class="hljs-comment">#            location = /40x.html &#123;</span><br><span class="hljs-comment">#        &#125;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#        error_page 500 502 503 504 /50x.html;</span><br><span class="hljs-comment">#            location = /50x.html &#123;</span><br><span class="hljs-comment">#        &#125;</span><br><span class="hljs-comment">#    &#125;</span><br>=================================================================================<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Nginx-虚拟主机"><a href="#Nginx-虚拟主机" class="headerlink" title="Nginx 虚拟主机"></a>Nginx 虚拟主机</h1><h2 id="虚拟主机类型"><a href="#虚拟主机类型" class="headerlink" title="虚拟主机类型"></a>虚拟主机类型</h2><p>基于域名的虚拟主机                        不同的域名访问不同的虚拟主机                 常用</p><p>基于端口的虚拟主机                       不同端口访问不同的虚拟主机                      给网站增加特殊端口，限制用户访问</p><p>基于ip的虚拟主机                            不同的ip地址访问不同的虚拟主机               用来增强限制，限制用户只能通过内网访问，或vpn访问</p><h2 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h2><p>配置子系统配置 game.codfish.cn.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> ;<br><span class="hljs-attribute">server_name</span>  game.codfish.cn;<br><span class="hljs-attribute">root</span> /app/code/game;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">index</span> index.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /app/code/&#123;game,live,www&#125;<br><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> game live www <br><span class="hljs-keyword">do</span> <br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span>.codfish.cn &gt; /app/code/<span class="hljs-variable">$name</span>/index.html<br><span class="hljs-keyword">done</span> <br><br><span class="hljs-built_in">head</span> /app/code/&#123;game,live,www&#125;/index.html<br></code></pre></td></tr></table></figure><h2 id="基于端口的虚拟主机"><a href="#基于端口的虚拟主机" class="headerlink" title="基于端口的虚拟主机"></a>基于端口的虚拟主机</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">81</span> ;           <span class="hljs-comment"># 定义特殊端口</span><br><span class="hljs-attribute">server_name</span>  game.codfish.cn;<br><span class="hljs-attribute">root</span> /app/code/game;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">index</span> index.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基于IP的虚拟主机"><a href="#基于IP的虚拟主机" class="headerlink" title="基于IP的虚拟主机"></a>基于IP的虚拟主机</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> localhost:<span class="hljs-number">81</span> ;           <span class="hljs-comment"># 定义特殊端口</span><br><span class="hljs-attribute">server_name</span>  game.codfish.cn;<br><span class="hljs-attribute">root</span> /app/code/game;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">index</span> index.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常访问"><a href="#异常访问" class="headerlink" title="异常访问"></a>异常访问</h2><p>当用户访问不存在的域名或者使用IP访问网络时，Nginx 会按字母顺序选择 最匹配的server 进行响应</p><p>所以 当域名不存在&#x2F;或IP访问时 匹配字母靠前的端口一致的 server 进行响应。</p><p>或者可以在server定义中 定义一个 默认的server来进行处理</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>  default_server ;<br><span class="hljs-attribute">server_name</span>  some_url ;<br><span class="hljs-attribute">root</span> /app/code/codfish ;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">index</span>  index.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者定义一个不存在的域名来处于异常访问</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">server &#123;<br>listen <span class="hljs-number">80</span> default_server <span class="hljs-comment">;</span><br>server_name  _ <span class="hljs-comment">;</span><br>charset utf8 <span class="hljs-comment">;</span><br>default_type text/plain<span class="hljs-comment">;</span><br>return <span class="hljs-number">200</span> <span class="hljs-string">&quot;message&quot;</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Nginx-日志"><a href="#Nginx-日志" class="headerlink" title="Nginx 日志"></a>Nginx 日志</h1><p>log_format main “$remote_addr - $remote_user [$time_local] “ $request” ‘</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">‘$status  $body_bytes_sent “$http_referer” ’<br><br>‘”http_user_agent” “$http_x_forwarded_for” ’<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>$remote_addr                                             客户端ip地址</p><p>$remote_user                                             用户名</p><p>$time_local                                                  时间</p><p>$request                                                      请求报文的起始行</p><p>$status                                                         状态码</p><p>$body_bytes_sent                                     响应消息体长度</p><p>$http_referer                                              间接进行本次请求的域名</p><p>$http_user_agent                                      用户使用的访问代理</p><p>$http_x_forwarded_for                             使用代理用于记录用户真实的ip地址</p><h2 id="access-log"><a href="#access-log" class="headerlink" title="access_log"></a>access_log</h2><p>语法      access_log        地址&#x2F;文件名       格式</p><p>access_log  path  [format [buffer&#x3D;”size”]] [gzip[&#x3D;”level”]][flush&#x3D;”time”][if&#x3D;”condition”]】‘</p><p>buffer         缓存用户访问日志</p><p>gzip            日志是否要压缩</p><p>flush           多久向磁盘中写入</p><h2 id="error-log"><a href="#error-log" class="headerlink" title="error_log"></a>error_log</h2><p>语法      error_log         地址&#x2F;文件名       级别</p><p>error_log  path  level</p><h2 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h2><p>1 系统定时任务 + logroate</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># cat /etc/logrotate.d/nginx</span><br><span class="hljs-string">/var/log/nginx/</span>*<span class="hljs-string">.log</span>&#123;<br>create 0640 nginx root  <span class="hljs-comment"># 切割后的文件所有者权限信息</span><br>daily                   <span class="hljs-comment"># 每天切割</span><br>rotate 10               <span class="hljs-comment"># 保留10次</span><br>missingok               <span class="hljs-comment"># 日志不存在不切割</span><br>notifempty              <span class="hljs-comment"># 日志为空 不切割</span><br>compress                <span class="hljs-comment"># 切割后的日志要进行压缩</span><br>delaycompress           <span class="hljs-comment"># 延迟压缩</span><br>sharedscripts           <span class="hljs-comment"># 开启切割后或切割前 执行脚本/命令功能         </span><br>postrotate              <span class="hljs-comment"># 切割后执行的命令            </span><br><span class="hljs-string">/bin/kill</span> -USR1 &#x27;cat <span class="hljs-string">/run/nginx.pid</span> 2&gt;<span class="hljs-string">/dev/null</span>&#x27; 2&gt;<span class="hljs-string">/dev/null</span> || <span class="hljs-literal">true</span><br>endscript<br>&#125;<br></code></pre></td></tr></table></figure><p>2 自己实现日志切割</p><p>实现上述配置文件，使用logratate  (-f)  进行文件切割</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>网络技术</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 架构</title>
    <link href="/2025/05/18/Nginx-%E6%9E%B6%E6%9E%84/"/>
    <url>/2025/05/18/Nginx-%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>Nginx启动后，会创建预定义好的套接字资源。之后根据配置创建多个子进程。多个子进程共享同一个监听 socket，当有新连接到来时，</p><p>Linux 4.5+ 的内核使用 <code>EPOLLEXCLUSIVE</code> 实现仅唤醒一个进程来处理连接，避免惊群效应。旧版本则需通过用户态互斥机制控制，如 <code>accept_mutex</code>。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">master</span> <span class="hljs-title">process</span> <br>- worker process   <span class="hljs-comment">#  多个工作线程</span><br>- worker process<br>- Cache Manager    <span class="hljs-comment">#  缓存管理器</span><br>- Cache Loader     <span class="hljs-comment">#  缓存加载器</span><br></code></pre></td></tr></table></figure><h1 id="Master进程"><a href="#Master进程" class="headerlink" title="Master进程"></a>Master进程</h1><p>当子进程退出（包括异常退出）后，内核会向Master发送SIGCHLD信号，通过子进程退出，在Master内核态切换回用户态时会检查信号位表，查询退出的子进程信息，并创建新的进程。</p><p>master支持的信号 ：</p><table><thead><tr><th>信号</th><th>说明</th><th>等效命令行</th></tr></thead><tbody><tr><td><code>SIGHUP</code></td><td>重新加载配置，<strong>平滑重启服务</strong></td><td><code>nginx -s reload</code></td></tr><tr><td><code>SIGQUIT</code></td><td>优雅退出（处理完当前连接后退出）</td><td><code>nginx -s quit</code></td></tr><tr><td><code>SIGTERM</code></td><td>强制退出（立即关闭）</td><td><code>nginx -s stop</code></td></tr><tr><td><code>SIGINT</code></td><td>强制退出（Ctrl+C 等）</td><td>等同于 <code>SIGTERM</code></td></tr><tr><td><code>SIGUSR1</code></td><td>重新打开日志文件（用于 logrotate）</td><td><code>nginx -s reopen</code></td></tr><tr><td><code>SIGUSR2</code></td><td>启动<strong>二进制热升级</strong> （不中断服务）</td><td>手动 <code>kill -USR2</code></td></tr><tr><td><code>SIGWINCH</code></td><td>停止 worker 进程（仅 master 运行）</td><td>内部调试或模块使用</td></tr></tbody></table><p>worker支持的信号 ： （可以直接向worker进程发送信号，但更推荐向父进程发送信号由父进程统一管理）</p><table><thead><tr><th>信号</th><th>说明</th></tr></thead><tbody><tr><td><code>SIGQUIT</code></td><td>优雅退出，处理完当前连接再关闭</td></tr><tr><td><code>SIGTERM</code></td><td>立即终止，强制退出</td></tr><tr><td><code>SIGINT</code></td><td>立即终止（类似 SIGTERM）</td></tr><tr><td><code>SIGWINCH</code></td><td>停止接收连接并退出（仅特定模块）</td></tr><tr><td><code>SIGUSR1</code></td><td>重新打开日志文件</td></tr><tr><td><code>SIGALRM</code></td><td>用于内部超时控制</td></tr><tr><td><code>SIGIO</code></td><td>高速事件通知（用于 aio 模式）</td></tr><tr><td><code>SIGCHLD</code></td><td>接收子进程退出信号（master 专用）</td></tr></tbody></table><h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><ul><li>替换旧的 nginx 可执行文件为新版</li><li>向旧 master 进程发送 <code>SIGUSR2</code> 信号，触发热升级</li><li>旧 master 写出 <code>.oldbin</code> pid 文件</li><li>新 nginx 可执行文件启动新的 master + worker</li><li>向旧 master 发送 <code>SIGWINCH</code>，优雅退出旧 worker</li><li>若需回滚，向旧 master 发送 <code>HUP</code> 恢复旧 worker，向新 master 发送 <code>QUIT</code> 退出新进程</li></ul><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl">--<span class="hljs-keyword">prefix</span>             指定安装目录<br>--user               指定运行子进程的用户<br>--group              指定运行子进程的用户组<br>--pid-<span class="hljs-built_in">path</span>           存放进程运行pid文件的路径<br>--conf-<span class="hljs-built_in">path</span>          配置文件nginx.conf的存放路径<br>--error-<span class="hljs-built_in">log</span>-<span class="hljs-built_in">path</span>     错误日志error.<span class="hljs-built_in">log</span>的存放路径<br>--http-<span class="hljs-built_in">log</span>-<span class="hljs-built_in">path</span>      访问日志access.<span class="hljs-built_in">log</span>的存放路径<br>--<span class="hljs-keyword">with</span>-pcre          pcre库的存放路径<br>--<span class="hljs-keyword">with</span>-zlib          zlib库的存放路径<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>网络技术</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>状态码速查</title>
    <link href="/2025/05/17/%E7%8A%B6%E6%80%81%E7%A0%81%E9%80%9F%E6%9F%A5/"/>
    <url>/2025/05/17/%E7%8A%B6%E6%80%81%E7%A0%81%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="🔵-1xx-信息性状态码（Informational）"><a href="#🔵-1xx-信息性状态码（Informational）" class="headerlink" title="🔵 1xx - 信息性状态码（Informational）"></a>🔵 <strong>1xx - 信息性状态码（Informational）</strong></h3><table><thead><tr><th>状态码</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>客户端应继续其请求。服务器已收到请求头，正在等待请求体。</td></tr><tr><td>101</td><td>Switching Protocols</td><td>客户端请求切换协议，服务器同意并切换。常见于 WebSocket 握手。</td></tr></tbody></table><hr><h3 id="🟢-2xx-成功状态码（Successful）"><a href="#🟢-2xx-成功状态码（Successful）" class="headerlink" title="🟢 2xx - 成功状态码（Successful）"></a>🟢 <strong>2xx - 成功状态码（Successful）</strong></h3><table><thead><tr><th>状态码</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求成功，服务器已返回请求的数据。</td></tr><tr><td>201</td><td>Created</td><td>请求成功并创建了新的资源。常用于 POST 创建。</td></tr><tr><td>202</td><td>Accepted</td><td>请求已接收，但尚未处理完成。</td></tr><tr><td>204</td><td>No Content</td><td>请求成功，但服务器不返回内容。常用于 DELETE 操作。</td></tr></tbody></table><hr><h3 id="🟡-3xx-重定向状态码（Redirection）"><a href="#🟡-3xx-重定向状态码（Redirection）" class="headerlink" title="🟡 3xx - 重定向状态码（Redirection）"></a>🟡 <strong>3xx - 重定向状态码（Redirection）</strong></h3><table><thead><tr><th>状态码</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>301</td><td>Moved Permanently</td><td>请求的资源已永久移动到新位置，客户端应使用新 URL。</td></tr><tr><td>302</td><td>Found</td><td>请求的资源临时移动，客户端应继续使用原 URL。</td></tr><tr><td>303</td><td>See Other</td><td>请求应使用 GET 方法访问另一个 URL。</td></tr><tr><td>304</td><td>Not Modified</td><td>资源未修改，客户端可使用缓存版本。常用于缓存优化。</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向，请求方法不变（区别于 302）。</td></tr></tbody></table><hr><h3 id="🔴-4xx-客户端错误（Client-Error）"><a href="#🔴-4xx-客户端错误（Client-Error）" class="headerlink" title="🔴 4xx - 客户端错误（Client Error）"></a>🔴 <strong>4xx - 客户端错误（Client Error）</strong></h3><table><thead><tr><th>状态码</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>400</td><td>Bad Request</td><td>请求格式错误，服务器无法理解。</td></tr><tr><td>401</td><td>Unauthorized</td><td>未授权，需身份验证。</td></tr><tr><td>403</td><td>Forbidden</td><td>请求被拒绝，服务器理解请求但拒绝执行。</td></tr><tr><td>404</td><td>Not Found</td><td>请求资源不存在。</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>请求方法不被允许。</td></tr><tr><td>408</td><td>Request Timeout</td><td>请求超时，服务器未收到完整请求。</td></tr><tr><td>409</td><td>Conflict</td><td>请求冲突，通常是资源状态冲突。</td></tr><tr><td>413</td><td>Payload Too Large</td><td>请求体过大，服务器无法处理。</td></tr><tr><td>429</td><td>Too Many Requests</td><td>请求过于频繁，被限流。</td></tr></tbody></table><hr><h3 id="🔴-5xx-服务器错误（Server-Error）"><a href="#🔴-5xx-服务器错误（Server-Error）" class="headerlink" title="🔴 5xx - 服务器错误（Server Error）"></a>🔴 <strong>5xx - 服务器错误（Server Error）</strong></h3><table><thead><tr><th>状态码</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求。</td></tr><tr><td>501</td><td>Not Implemented</td><td>请求方法未实现。</td></tr><tr><td>502</td><td>Bad Gateway</td><td>网关或代理服务器收到无效响应。</td></tr><tr><td>503</td><td>Service Unavailable</td><td>服务器暂时不可用（过载或维护）。</td></tr><tr><td>504</td><td>Gateway Timeout</td><td>网关超时，未及时获得上游响应。</td></tr><tr><td>505</td><td>HTTP Version Not Supported</td><td>服务器不支持请求中的 HTTP 版本。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>速查信息</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RPC框架实现</title>
    <link href="/2025/05/17/RPC%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0/"/>
    <url>/2025/05/17/RPC%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是框架"><a href="#什么是框架" class="headerlink" title="什么是框架"></a>什么是框架</h1><p><strong>框架（Framework）是一种为特定类型的软件系统预定义好整体结构、执行流程和核心功能的开发工具。</strong></p><p>它约定了程序运行的生命周期、模块划分和调用方式，开发者只需遵循其规范，填充业务逻辑代码，利用其提供的功能模块（如路由、控制器、数据库操作、模板渲染等），即可高效构建出符合需求的应用系统。</p><h1 id="如何设计框架"><a href="#如何设计框架" class="headerlink" title="如何设计框架"></a>如何设计框架</h1><h3 id="一、理念层：框架应该实现什么？"><a href="#一、理念层：框架应该实现什么？" class="headerlink" title="一、理念层：框架应该实现什么？"></a><strong>一、理念层：框架应该实现什么？</strong></h3><ol><li><strong>框架的定位与目标业务是什么？我们需要定义哪些核心组件？</strong><br>明确这个框架希望解决的核心问题，是快速构建 API 服务、构建事件驱动系统，还是实现微服务平台？不同的目标决定了组件的数量、功能与复杂度。<br>例如：<ul><li>Flask 目标是 <strong>轻量化 HTTP 服务开发</strong> ，核心组件只有路由、视图函数、请求对象。</li><li>Django 面向 <strong>企业级全栈 Web 构建</strong> ，则需要模型、ORM、模板、路由、中间件等多个子系统。</li></ul></li><li><strong>组件之间如何连接与通信？消息如何传递？</strong><br>模块之间的通信机制决定了耦合程度与性能表现。你需要考虑：<ul><li>是否是函数&#x2F;类级别的直接调用（适合同步逻辑）？</li><li>是否通过事件机制、回调、hook？</li><li>是否通过中间件、队列、网络（如RPC、Socket）传递消息？</li><li>是否要引入消息总线或调度中心？</li></ul></li><li><strong>业务处理模式是什么？IO密集还是CPU密集？</strong><br>处理模式决定框架的执行模型：<ul><li>IO密集适合使用异步（如 <code>asyncio</code> &#x2F; Reactor 模型）或协程（如 gevent）</li><li>CPU密集可能需要线程池、进程池、多核并发、任务队列</li><li>是否需要任务调度器、工作线程、Pipeline？</li></ul></li><li><strong>如何将业务逻辑嵌入框架？</strong><br>业务逻辑是否：<ul><li>以对象方式加载（如类继承 &#x2F; 注册）</li><li>以函数或 handler 方式注入（如 <code>@route(&#39;/hello&#39;)</code> 装饰器）</li><li>以配置文件、动态加载脚本、插件的形式组合？<br>这决定了用户使用框架的便捷性与灵活性。</li></ul></li><li><strong>如何让框架对使用者更加友好？</strong><br>框架应简洁清晰，做到“开箱即用”，建议：<ul><li>暴露清晰的接口定义与使用流程（如生命周期钩子、事件注册）</li><li>屏蔽底层复杂逻辑，让使用者只专注于业务构建</li><li>提供自动注册、默认配置、开发文档与示例模板等</li></ul></li></ol><hr><h3 id="二、实现层：框架如何做好这件事？"><a href="#二、实现层：框架如何做好这件事？" class="headerlink" title="二、实现层：框架如何做好这件事？"></a><strong>二、实现层：框架如何做好这件事？</strong></h3><ol><li><strong>生命周期管理：如何启动、初始化、销毁及异常恢复？</strong><ul><li>是否有清晰的启动流程（如初始化组件、加载配置、注册服务等）？</li><li>异常时如何保证资源释放、服务恢复？</li><li>是否支持热更新、平滑重启？</li></ul></li><li><strong>可扩展性与插件机制：哪些点可以被用户自定义或替换？</strong><ul><li>是否允许中间件注册、事件钩子？</li><li>是否支持插件注册系统？</li><li>是否可以让用户替换核心模块（如认证器、调度器）？</li></ul></li><li><strong>上下文管理机制：如何在框架中保存请求状态、线程变量？</strong><ul><li>是否支持每个请求&#x2F;任务的上下文隔离（如 Flask 的 <code>g</code>, <code>request</code>）？</li><li>是否支持异步场景下的上下文切换？</li><li>是否支持临时变量、元信息（trace id、请求时间等）管理？</li></ul></li><li><strong>错误处理与调试能力：如何统一日志、错误、告警？</strong><ul><li>是否提供统一的异常捕获与响应机制？</li><li>是否支持开发&#x2F;生产环境分离？</li><li>日志是否结构化、支持 traceId、debug 等调试信息？</li></ul></li><li><strong>测试与开发支持：是否易于测试与持续集成？</strong></li></ol><ul><li>是否可插入 mock 流程？</li><li>是否有统一的测试入口、调试 API？</li><li>是否易于自动化测试、接口验证、异常场景模拟？</li></ul><h1 id="RPC框架实现"><a href="#RPC框架实现" class="headerlink" title="RPC框架实现"></a>RPC框架实现</h1><p>RPC协议本身仍然是一段编解码的交互过程，相比HTTP或者WebSocket的文本&#x2F;数据交互。RPC更像是在通过网络通信传递一个函数的“上下文”到远端，远端使用消费端提供的信息，在本地查询函数执行并返回。</p><h2 id="请求接口"><a href="#请求接口" class="headerlink" title="请求接口"></a>请求接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br><span class="hljs-keyword">private</span> String requestId ;<br><span class="hljs-keyword">private</span> String className ;<br><span class="hljs-keyword">private</span> String methodName ;<br><span class="hljs-keyword">private</span> String[] types ;<br><span class="hljs-keyword">private</span> Object[] args ;<br><span class="hljs-keyword">private</span> String clientApplicationName ;<br><span class="hljs-keyword">private</span> String clientIp ;<br><span class="hljs-keyword">private</span> ServiceConfig service ;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="响应接口"><a href="#响应接口" class="headerlink" title="响应接口"></a>响应接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Response</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br><span class="hljs-keyword">private</span> String requestId ;<br><span class="hljs-keyword">private</span> String isSuccess ;<br><span class="hljs-keyword">private</span> Object result ;<br><span class="hljs-keyword">private</span> Throwable error ;<br>/ ** <br>* 省略getter 和 setter 方法<br>** /<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义-序列化-编解码方法"><a href="#定义-序列化-编解码方法" class="headerlink" title="定义 序列化 编解码方法"></a>定义 序列化 编解码方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// encode </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Encoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessageToByteEncoder</span> &#123;<br><span class="hljs-keyword">private</span> Class &lt;?&gt; genericClass ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Encoder</span><span class="hljs-params">(Class&lt;?&gt;genericClass)</span>&#123;<br><span class="hljs-built_in">this</span>.genericClass = genericClass;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(ChannelHandlerContext ctx , Object msg , Bytebuf buf)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-keyword">if</span> (genericClass.isInstance(msg))&#123;<br><span class="hljs-type">byte</span>[] data = ProtostuffSerialization.serialize(msg);<br><span class="hljs-comment">// 序列化消息 </span><br>out.writeInt(data.length);<br><span class="hljs-comment">// 向通道内写入 数据长度</span><br>out.writeBytes(data);<br><span class="hljs-comment">// 向通道内写入 数据</span><br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// decode</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Decoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ByteToMessageDecoder</span> &#123;<br><span class="hljs-keyword">private</span>  Class&lt;?&gt; genericClass ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Decoder</span><span class="hljs-params">(Class&lt;?&gt; genericClass)</span>&#123;<br><span class="hljs-built_in">this</span>.genericClass = genericClass ;<br>&#125; <br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx ,Bytebuf in ,List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-keyword">if</span>(in.readableBytes() &lt; <span class="hljs-number">4</span>)&#123;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-comment">// 判断收到的长度大小，解析数据长度内容</span><br>in.markReaderIndex();<br><span class="hljs-comment">// 如果大于4 够获取到数据长，标记当前位置</span><br><span class="hljs-type">int</span> <span class="hljs-variable">dataLength</span> <span class="hljs-operator">=</span> in.readInt();<br><span class="hljs-comment">// 按整数读 获取数据长</span><br><span class="hljs-keyword">if</span>(dataLength &lt; <span class="hljs-number">0</span>)&#123;<br>ctx.close();<br>&#125;<br><span class="hljs-comment">// 如果长度小于0 结束</span><br><span class="hljs-keyword">if</span>(in.readableBytes()&lt; dataLength)&#123;<br>in.resetReaderIndex();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 如果读到的字节数小于数据长度，重置读取位置。</span><br><span class="hljs-type">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[dataLength];<br>in.readBytes(data);<br><span class="hljs-comment">// 最终等待所有数据被读入后，创建字节数组接收读入的数据</span><br><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ProtostuffSerialization.deserialize(data,genericClass);<br><span class="hljs-comment">// 将字节数组反序列化为protos对象</span><br>out.add(obj);<br><span class="hljs-comment">// 将对象传入流水线执行下一过程</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RFC通信-创建"><a href="#RFC通信-创建" class="headerlink" title="RFC通信 创建"></a>RFC通信 创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><span class="hljs-comment">// 继承多线程方法</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span>  <span class="hljs-operator">=</span> Logger.getLogger(Server.class);<br><span class="hljs-keyword">private</span> Integer port ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Server</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span>&#123;<br><span class="hljs-built_in">this</span>.port =port ;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">// 重新run方法</span><br>logger.info(<span class="hljs-string">&quot;server start ...&quot;</span>);<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-comment">// 创建连接线程组</span><br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-comment">// 创建执行线程组</span><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br><span class="hljs-comment">// 创建通信脚手架</span><br>serverBootstrap.group(bossGroup, workGroup)<br>.channel(NioServerSocketChannel.class)<br>.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;()<br>&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Decoder</span>(Request.class));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Encoder</span>(Response.class));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerHandler</span>());<br>&#125;)<br>.option(ChannelOption.SO_BACKLOG,<span class="hljs-number">128</span>)<br>.childOption(ChannelOption.SO_KEEPALIVE,<span class="hljs-literal">true</span>);<br><span class="hljs-comment">/** 将线程组添加到通信组中，设置通道中使用的数据包装类,创建执行器,将解码器,</span><br><span class="hljs-comment"> *  编码器,RPC执行器 加入到pipeline中，设置TCP连接选项</span><br><span class="hljs-comment">**/</span><br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> serverBootstrap.bind(port).sync();<br><span class="hljs-comment">// 创建一个异步接收对象 绑定端口。</span><br>logger.info(<span class="hljs-string">&quot;server started successfully, listened[&quot;</span> + port + <span class="hljs-string">&quot;]port&quot;</span>);<br>channelFuture.channel().closeFuture().sync();<br><span class="hljs-comment">// 调用结束后关闭通道</span><br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>logger.error(<span class="hljs-string">&quot;server failed to start , listened[&quot;</span>+port+<span class="hljs-string">&quot;]port&quot;</span>);<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>workerGroup.shutdownGracefully();<br>bossGroup.shutdownGracefully();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 处理器实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(ServerHandler.class);<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx , Object msg)</span>&#123;<br><span class="hljs-comment">// 重写channelRead方法。</span><br><span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (Request)msg ;<br>logger.info(<span class="hljs-string">&quot;the server receives the message &quot;</span> + request.getRequestId());<br>Map&lt;String,ServiceConfig&gt;serviceMap = SpringUtil.getApplicationContext().<br>.getBeansOfType(ServiceConfig.class);<br><span class="hljs-comment">//获取本地注册的服务信息</span><br><span class="hljs-type">ServiceConfig</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-keyword">for</span>(String key : serviceMap.keySet())&#123;<br><span class="hljs-keyword">if</span>(serviceMap.get(key).getName().equals(request.getClassName()))&#123;<br>service = serviceMap.get(key);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 查询请求中的目标类。</span><br><span class="hljs-keyword">if</span>(service == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;no service found :&quot;</span> + request.getClassName());<br>&#125;<br><span class="hljs-type">Object</span> <span class="hljs-variable">serviceImpl</span> <span class="hljs-operator">=</span> SpringUtil.getApplication().getBean(service.getRef());<br><span class="hljs-comment">// 获取实现类</span><br><span class="hljs-keyword">if</span>(serviceImpl == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;no avaliable service found: &quot;</span> + request.getClassName());<br>&#125;<br>Map&lt;String, Object&gt;map = TypeParseUtil.parseTypeScript2Class(request.getTypes(),request.getArgs());<br>Class&lt;?&gt;[] classType = (Class&lt;?&gt;[]) map.get(<span class="hljs-string">&quot;classTypes&quot;</span>);<br><span class="hljs-comment">// 获取类名</span><br>Object[] args = (Object[]) map.get(<span class="hljs-string">&quot;args&quot;</span>);<br><span class="hljs-comment">// 获取参数</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> serviceImpl.getClass().getMethod(request.getMethodName(),classTypes).invoke(serviceImpl,args);<br><span class="hljs-comment">// 执行，返回结果。</span><br>response.setResult(result);<br>response.setSuccess(<span class="hljs-literal">true</span>);<br>&#125;<span class="hljs-keyword">catch</span> (Throwable e)&#123;<br>logger.error(<span class="hljs-string">&quot;the server failed to process the request.&quot;</span>, e);<br>response.setSuccess(<span class="hljs-literal">false</span>);<br>response.setError(e);<br>&#125;<br><br>ctx.write(response);<br>ctx.flush();<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(Client.class);<br><span class="hljs-keyword">private</span> ReferenceConfig referenceConfig ;<br><span class="hljs-keyword">private</span> ChannelFuture channelFuture ;<br><span class="hljs-keyword">private</span> ClientHandler clientHandler ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Client</span><span class="hljs-params">(ReferenceConfig referenceConfig)</span>&#123;<br><span class="hljs-built_in">this</span>.referenceConfig = referenceConfig;<br>&#125;<br><br><span class="hljs-keyword">public</span> ServiceConfig <span class="hljs-title function_">connectServer</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">// 执行 服务建立逻辑</span><br>logger.info(<span class="hljs-string">&quot;connecting to the server: &quot;</span>+ referenceConfig.getDirectServerIp() + <span class="hljs-string">&quot;:&quot;</span> + referenceConfig.getDirectServerPort());<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-comment">// 创建业务线程组</span><br><span class="hljs-type">Bootstrap</span> <span class="hljs-variable">Bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br><span class="hljs-comment">// 脚手架</span><br>Bootstrap.group(workerGroup).channel(NioSocketChannel.class)<br>.option(ChannelOption.SO_KEEPALIVE,<span class="hljs-literal">true</span>);<br>.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Encoder</span>(Request.class));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Decoder</span>(Response.class));<br><br>clientHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientHandler</span>();<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcReadTimeoutHandler</span>(clientHandler,referenceConfig.getTimeout(),TimeUnit.MILLISECONDS));<br>ch.pipeline().addLast(clientHandler);<br>&#125;<br>&#125;);<br><span class="hljs-comment">//设置TCP选项，向线程组中pipeline中添加处理器</span><br>  <span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(referenceConfig.getDirectServerIp()))&#123;<br>  channelFuture = Bootstrap.connect(referenceConfig.getDirectServerIp(),<br>  referenceConfig.getDirectServerPort()).sync();<br>  logger.info(<span class="hljs-string">&quot;successfully connected&quot;</span>);<br>  &#125; <br>  &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>  &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> ;<br>&#125;<br><span class="hljs-keyword">public</span> Response <span class="hljs-title function_">remoteCall</span><span class="hljs-params">(Request request)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>channelFuture.channel().writeAndFlush(request).sync();<br><span class="hljs-comment">// 向通道写入request</span><br><span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> clientHandler.getResponse();<br><span class="hljs-comment">// 接受响应信息</span><br>logger.info(<span class="hljs-string">&quot;receive a response from the server :&quot;</span> + response.getRequestId());<br>channelFuture.channel().closeFuture().sync();<br><span class="hljs-keyword">if</span>(response.getSuccess())&#123;<br><span class="hljs-keyword">return</span> response ;<br>&#125;<br><span class="hljs-keyword">throw</span> response.getError();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="本地存根实现"><a href="#本地存根实现" class="headerlink" title="本地存根实现"></a>本地存根实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>&#123;<br><span class="hljs-comment">/* 本地存根是通过创建一个代理，接受目标调用函数的接口，组装一个request对象，发送给服务端</span><br><span class="hljs-comment"> 服务端接收到request对象后从中获取接口信息，类名信息，和方法在服务端执行</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(InvokerInvocationHandler.class);<br><span class="hljs-keyword">private</span> ReferenceConfig referenceConfig ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerInvocationHandler</span><span class="hljs-params">(ReferenceConfig referenceConfig)</span>&#123;<br><span class="hljs-built_in">this</span>.referenceConfig = referenceConfig ;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy , Method method , Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br><span class="hljs-comment">// 重写invoke ,使得本地的invoke 指向远程调用</span><br><span class="hljs-keyword">return</span> invoke(method.getName(),method.getParameterTypes(), args);<br>&#125;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(String methodName , Class[] argTypes , Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-comment">// 将对动态代理的调用改为调用remoteCall</span><br><span class="hljs-keyword">return</span> remoteCall(referenceConfig , methodName , argTypes , args );<br>&#125;<br><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">remoteCall</span><span class="hljs-params">(ReferenceConfig reference , String methodName, Class[] argTypes , Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br><span class="hljs-comment">// 创建remoteCall 方法，组装request对象</span><br><span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>();<br>request.setRequestId(RpcContext.getUUid().get());<br>request.setClientApplicationName(RpcContext.getApplicationName());<br>request.setClientIp(RpcContext.getLocalIp());<br>request.setClassName(referenceConfig.getName());<br>request.setMethodName(methodName);<br>request.setTypes(getTypes(argTypes));<br>request.setArgs(args);<br>Response response ;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Client</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>(reference);<br><span class="hljs-type">ServiceConfig</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> client.connectionServer();<br><span class="hljs-comment">// 连接对端。</span><br>request.setService(service);<br>response = client.remoteCall(request);<br><span class="hljs-comment">// 执行调用 </span><br><span class="hljs-keyword">return</span> response.getResult();<br>&#125; <span class="hljs-keyword">catch</span> (Throwable e)&#123;<br>logger.error(e);<br><span class="hljs-keyword">throw</span> e;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> String[] getTypes(Class&lt;?&gt;[] methodTypes)&#123;<br>String[] types = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[methodTypes.length];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; methodTypes.length ; i++)&#123;<br>types[i] = methodTypes[i].getName();<br>&#125;<br><span class="hljs-keyword">return</span> types ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络技术</category>
      
      <category>RPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络技术</tag>
      
      <tag>RPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RPC协议</title>
    <link href="/2025/05/13/RPC%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/05/13/RPC%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是RPC-？"><a href="#什么是RPC-？" class="headerlink" title="什么是RPC ？"></a>什么是RPC ？</h1><p>RPC（Remote Procedure Call）叫做远程过程调用。它是利用网络从远程计算机上请求服务，可以理解为把程序的一部分放到其他远程计算机上执行。通过网络通信将调用请求发送到远程计算机后，利用远程计算机上的执行这部分程序</p><ul><li>远程过程 ： 远程过程是相对于本地过程而言的，本地过程也可以认为是本地函数调用，发起调用的方法和被调用的方法都在同一个地址空间或者内存空间内。而远程过程是指把进程内的部分程序逻辑放到其他机器上，也就是现在常说的业务拆解，让每个服务仅对单个业务负责，让每个服务具备独立的可扩展性，可升级性，易维护。在每台机器上提供的服务被称为远程过程，这个概念使正确地构建分布式计算更加容易，也为后续的服务化架构风格奠定了基础</li><li>过程调用：这个概念非常通俗易懂，它包含我们平时见到的方法调用，函数调用，并且用于程序的控制和传输。而当“过程调用”遇到“远程过程”时，意味着过程调用可以跨越及其，网络进行程序的控制和数据的传输。</li></ul><h1 id="RPC核心组成部分"><a href="#RPC核心组成部分" class="headerlink" title="RPC核心组成部分"></a>RPC核心组成部分</h1><h2 id="user（服务调用方）"><a href="#user（服务调用方）" class="headerlink" title="user（服务调用方）"></a>user（服务调用方）</h2><p>也叫服务消费者（Consumer）,它的职责之一是提供需要调用的接口的全限定名和方法，调用方法的参数给调用方的本地存根，职责之二是从调用方的本地存根中接收执行结果。</p><h2 id="user-stub-调用方的本地存根"><a href="#user-stub-调用方的本地存根" class="headerlink" title="user-stub (调用方的本地存根)"></a>user-stub (调用方的本地存根)</h2><p>服务调用方的本地存根与服务消费者都属于Consumer端，它们存在于同一台机器上，服务调用方的本地存根会接收Consumer的函数调用，本地存根会解析函数调用的函数名，参数等信息，整理并且组装这些数据，然后将这些数据按照定义好的协议进行序列化，打包成可传输的消息，交给RPCRuntime。服务调用方的本地存根除了会处理服务消费者提供的方法，参数，方法参数类型等数据，还会处理服务提供方返回的结果，它会将RPCRuntime返回的数据包反序列化成服务调用方所需要的数据结果并传递给服务消费方。</p><h2 id="PRC-Runtime-RPC通信者"><a href="#PRC-Runtime-RPC通信者" class="headerlink" title="PRC Runtime (RPC通信者)"></a>PRC Runtime (RPC通信者)</h2><p>RPC依赖于互联网，远程过程调用的本质就是远程通信，所以RPC必不可缺的就是通信者。</p><p>RPC协议用于负责数据包的重传，确认，路由和加密。</p><h2 id="server-stub-服务端的本地存根"><a href="#server-stub-服务端的本地存根" class="headerlink" title="server-stub (服务端的本地存根)"></a>server-stub (服务端的本地存根)</h2><p>服务提供方的本地存根会重新转换客户端传递的数据，以便在Provider端的机器上找到对应的函数，传递正确的参数数据，最终正确地执行真是函数的调用。等函数执行完成后，服务提供方会将执行结果返回给服务提供方的本地存根，由本地存根再将结果数据序列化，打包，最后交给RPCRuntime。</p><h2 id="server-服务端"><a href="#server-服务端" class="headerlink" title="server (服务端)"></a>server (服务端)</h2><p>服务提供方（Provider） 就是上述提到的服务端，它的职责就是提供服务，执行接口实现的方法逻辑，也就是为服务提供方的本地存根提供方法的具体实现。</p><h1 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h1><h2 id="服务暴露"><a href="#服务暴露" class="headerlink" title="服务暴露"></a>服务暴露</h2><p>进程准备好所有服务并完成端口的绑定和监听后，就完成了服务暴露的过程。但是当服务器进行了切换后，调用方的调用就会失败，因为 四元组发生了变化，所以需要将服务暴露到远程。</p><p>远程服务暴露就是用一个统一的管理中心来管理应用服务的地址和服务信息。这个统一的管理中心就是注册中心，，应用服务暴露到远程的第一步也是在本地绑定端口。绑定完成后还要讲Provider端的应用服务信息注册到注册中心。并与注册中心保持心跳保活，当保活失败时，将服务从注册中心移除。</p><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><p>Consumer端开启服务发现过程。需要直到服务提供者的地址和端口</p><h3 id="直连式服务发现"><a href="#直连式服务发现" class="headerlink" title="直连式服务发现"></a>直连式服务发现</h3><p>消费者根据服务暴露的地址和端口直接连接远程服务。</p><h3 id="注册中心式服务发现"><a href="#注册中心式服务发现" class="headerlink" title="注册中心式服务发现"></a>注册中心式服务发现</h3><p>消费者通过注册中心进行服务发现，也就是服务提供者的地址和端口从注册中心获取，当服务提供者变化时，注册中心能够通知服务消费者有关服务提供者的变化。</p><h2 id="服务引用"><a href="#服务引用" class="headerlink" title="服务引用"></a>服务引用</h2><p>服务引用的过程发生在服务发现之后，当消费端通过服务发现获取所有服务提供者的地址后，通过负载均衡策略选择其中一个服务提供者的节点进行服务引用，服务引用的过程就是与某一个服务节点建立连接，以及在消费端创建接口的代理的过程。</p><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>服务引用完成后，消费端和服务端建立了连接，可以进行方法的调用。</p><ol><li>服务消费方以本地调用方式 调用服务，它会将需要调用的方法，参数类型，参数传递给服务消费方的本地存根。</li><li>服务消费方的本地存根收到调用后，负责将方法，参数等数据组装成能够进行网络传输的消息体，并将该消息提传输给RPC通信者。</li><li>消费端的RPC通信者通过sockets将消息发送到服务端，由服务端的RPC通信者接收。</li><li>服务端将收到的信息传输给服务提供方的本地存根。</li><li>服务提供方的本地存根根据反序列化的结果解析出服务调用的方法，参数类型，参数等信息，并调用服务提供方服务。</li><li>服务提供方执行对应的方法后，将执行结果返回给服务提供方的本地存根</li><li>服务提供方的本地存根将返回结果序列化，并打包成可传输的消息体，传递给服务端的RPC通信者</li><li>服务端的PRC通信者通过sockets将消息发送给消费端，由消费端的PRC通信者接收，消费端将收到的消息传递给服务消费方的本地存根。</li><li>服务消费方的本地存根收到消息后将消息对象反序列化，反序列化出来的是方法的执行结果，并将结果传递给服务消费者。</li><li>服务消费者得到最终的执行结果。</li></ol><h1 id="RPC框架"><a href="#RPC框架" class="headerlink" title="RPC框架"></a>RPC框架</h1><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><p>dubbo提供了多种通信方案与编解码方案的组合。</p><p>SPI设计 Service Provider Interface</p><p>服务端 ：</p><p>Maven 中配置 spring 和dubbo</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>double<span class="hljs-tag">&lt;/<span class="hljs-name">artifactied</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.16.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DemoService</span>&#123;<br>String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name )</span>;<br>&#125;<br><br><span class="hljs-comment">// 构建实现类</span><br><span class="hljs-keyword">import</span> dubbo.samples.api.DemoServices;<br><span class="hljs-keyword">import</span> org.apache.dubbo.rpc.RpcContext;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date ;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DemoService</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;[&quot;</span>+ <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) +<span class="hljs-string">&quot;] Hello&quot;</span><br>+ name + <span class="hljs-string">&quot;, request from consumer: &quot;</span> +  RpcContext.getContent().getRemoteAddress());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务暴露</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=“<span class="hljs-number">1.0</span>” encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns:xsi=<span class="hljs-string">&quot;&lt;http://www.w3.org/2001/XMLSchema-instance&gt;&quot;</span><br>   xmlns:dubbo=<span class="hljs-string">&quot;&lt;http://dubbo.apache.org/schema/dubbo&gt;&quot;</span><br>   xmlns=<span class="hljs-string">&quot;&lt;http://www.springframework.rog/schema/beans&gt;&quot;</span><br>   xmlns:context=<span class="hljs-string">&quot;&lt;http://www.springframework.org/schema/context&gt;&quot;</span><br>   xsi:schemaLocation=<span class="hljs-string">&quot;&lt;http://www.springframework.org/schema/beans&gt;</span><br><span class="hljs-string">                       &lt;http://www.springframework.org/schema/beans/spring-beans.xsd&gt; </span><br><span class="hljs-string">                       &lt;http://dubbo.apache.org/schema/dubbo&gt;</span><br><span class="hljs-string">                       &lt;http://dubbo.apache.org/shcema/dubbo.xsd&gt;</span><br><span class="hljs-string">                       &lt;http://www.springframework.org/schema/context&gt;</span><br><span class="hljs-string">                       &lt;http://www.springframework.org/schema/context/spring-context.xsd&gt;</span><br><span class="hljs-string"> &lt;context:property-placeholder/&gt;</span><br><span class="hljs-string"> &lt;dubbo:application name=&quot;</span>provider<span class="hljs-string">&quot;/&gt;</span><br><span class="hljs-string"> &lt;dubbo:registry address=&quot;</span>multicast:<span class="hljs-comment">//224.5.6.7:1234&quot; /&gt;</span><br> &lt;dubbo:protocol name=<span class="hljs-string">&quot;dubbo&quot;</span> port=<span class="hljs-string">&quot;20880&quot;</span> /&gt;<br> &lt;bean id=<span class="hljs-string">&quot;demoService&quot;</span> class=<span class="hljs-string">&quot;dubbo.samples.impl.DemoServiceImpl&quot;</span> /&gt;<br> &lt;dubbo:service interface=<span class="hljs-string">&quot;dubbo.samples.api.DemoService&quot;</span> ref= <span class="hljs-string">&quot;demoService&quot;</span> group=<span class="hljs-string">&quot;test&quot;</span> /&gt;<br>&lt;/beans&gt;<br><br></code></pre></td></tr></table></figure><p>创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext ;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoProvider</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args )</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">ClassPathXmlApplicationContext</span>  <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring/dubbo-provider.xml&quot;</span>);<br>context.start();<br>System.out.println(<span class="hljs-string">&quot;dubbo service started&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>).await();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>消费端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>  encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;beans xmlns:xsi = <span class="hljs-string">&quot;&lt;http://www.w3.org/2001/XMLSchema-instance&gt;&quot;</span><br>xmlns:dubbo=<span class="hljs-string">&quot;&lt;http://dubbo.apache.org/schema/dubbo&gt;&quot;</span><br>xmlns=<span class="hljs-string">&quot;&lt;http://www.springframework.org/schema/beans&gt;&quot;</span><br>  xmlns:context= <span class="hljs-string">&quot;&lt;http://www.springframework.org/schema/context&gt;&quot;</span><br>xsi:schemaLocation=<span class="hljs-string">&quot;&lt;http://www.springframework.org/schema/beans&gt;</span><br><span class="hljs-string">&lt;http://www.springframework.org/schema/beans/spring-beans.xsd&gt;</span><br><span class="hljs-string">&lt;http://dubbo.apache.org/schema/dubbo&gt;</span><br><span class="hljs-string">&lt;http://dubbo.apache.org/schema/dubbo.xsd&gt;</span><br><span class="hljs-string">&lt;http://www.springframework.org/schema/context&gt;</span><br><span class="hljs-string">&lt;http://www.springframework.org/schema/context/spring-context.xsd&gt;&quot;</span>&gt;<br>&lt;context:property-placeholder /&gt;<br>&lt;dubbo:application name=<span class="hljs-string">&quot;consumer&quot;</span> /&gt;<br>&lt;dubbo.reference id=<span class="hljs-string">&quot;demoService&quot;</span> check=<span class="hljs-string">&quot;false&quot;</span> interface=<span class="hljs-string">&quot;dubbo.samples.api.DemoService&quot;</span> <br>url=<span class="hljs-string">&quot;127.0.0.1:20880&quot;</span> group=<span class="hljs-string">&quot;text&quot;</span>/&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p>调用发起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> dubbo.samples.api.DemoService;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoConsumer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring/dubbo-consumer.xml&quot;</span>);<br>context.start();<br><span class="hljs-type">DemoService</span> <span class="hljs-variable">demoService</span> <span class="hljs-operator">=</span> (DemoService) context.getBean(<span class="hljs-string">&quot;demoService&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> demoService.sayHello(<span class="hljs-string">&quot;world&quot;</span>);<br>System.out.println(hello);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h2><p>gRPC是由谷歌开发的一款RPC框架，其有如下特点</p><ol><li>使用Protocol Buffers 作为序列化方案。序列化性能非常高</li><li>协议传输采用的是HTTP&#x2F;2 使用字节码形式的流式传输在服务端与消费端通信</li><li>验证机制丰富</li><li>gRPC中的错误码遵循GoogleAPI中定义的错误码规范</li></ol><h3 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h3><p>编写IDL文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><span class="hljs-type">option</span> <span class="hljs-variable">java_multiple_files</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span> ;<br><span class="hljs-type">option</span> <span class="hljs-variable">java_package</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;greeter&quot;</span>;<br><span class="hljs-type">option</span> <span class="hljs-variable">java_outer_classname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MessageProto&quot;</span>;<br><span class="hljs-keyword">package</span> greeter;<br><br>message Request &#123;<br><span class="hljs-type">string</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br><br>message Response&#123;<br><span class="hljs-type">string</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br><br>greeter.<span class="hljs-type">proto</span><br><span class="hljs-variable">syntax</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-type">option</span> <span class="hljs-variable">java_multiple_files</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span> ;<br><span class="hljs-type">option</span> <span class="hljs-variable">java_package</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;greeter&quot;</span>;<br><span class="hljs-type">option</span> <span class="hljs-variable">java_outer_classname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GreeterProto&quot;</span>;<br><span class="hljs-keyword">package</span> greeter ;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;greeter/message.proto&quot;</span>;<br><br>service Greeter&#123;<br>rpc <span class="hljs-title function_">SayHello</span><span class="hljs-params">( Request )</span> returns (Response) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置 proto依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;io.grpc&lt;/groudId&gt;<br>&lt;artifactId&gt;grpc-all&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">1.32</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;build&gt;<br>&lt;extensions&gt;<br>&lt;extension&gt;<br>&lt;groupId&gt;kr.motd.maven&lt;/groupId&gt;<br>&lt;artifactId&gt;os-maven-plugin&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">1.6</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/extension&gt;<br>&lt;/extensions&gt;<br>&lt;plugins&gt;<br>&lt;plugin&gt;<br>&lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;<br>&lt;artifactId&gt;protobuf-maven-plugin&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">0.6</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;configuration&gt;<br>&lt;protocArtifact&gt;com.google.protobuf:protoc:<span class="hljs-number">3.12</span><span class="hljs-number">.0</span>:exe:<br>$&#123;os.detected.classifier&#125;&lt;/protocArtifact&gt;<br>&lt;pluginId&gt;grpc-java&lt;/pluginId&gt;<br>&lt;pluginArtifact&gt;io.grpc:protoc-gen-grpc-java:<span class="hljs-number">1.32</span><span class="hljs-number">.1</span>:exe:<br>$&#123;os.detected.classifier&#125;&lt;/pluginArtifact&gt;<br>&lt;/configuration&gt;<br>&lt;executions&gt;<br>&lt;execution&gt;<br>&lt;goals&gt;<br>&lt;goal&gt;compile&lt;/goal&gt;<br>&lt;goal&gt;compile-custom&lt;/goal&gt;<br>&lt;/goals&gt;<br>&lt;/execution&gt;<br>&lt;/executions&gt;<br>&lt;/plugin&gt;<br>&lt;/plugins&gt;<br>&lt;/build&gt;<br><br>&lt;properties&gt;<br>&lt;javaOutputDirectory&gt;$&#123;project.basedir&#125;/src/main/java-message&lt;/javaOutputDirectary&gt;<br>&lt;protocPluginOutputDirectory&gt;$&#123;project.basedir&#125;/src/main/java-grpc&lt;/protocPluginOutputDirectory&gt;<br>&lt;/properties&gt;<br></code></pre></td></tr></table></figure><p>编译proto文件</p><p>实现具体服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> grpc ;<br><span class="hljs-keyword">import</span> greeter.GreeterGrpc ;<br><span class="hljs-keyword">import</span> greeter.Request ;<br><span class="hljs-keyword">import</span> greeter.Response;<br><span class="hljs-keyword">import</span> io.grpc.stub.StreamObserver;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreeterRpcService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GreeterGrpc</span>.GreeterImplBase&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Request request, StreamObserver&lt;Response&gt;responseObserver)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getName();<br><span class="hljs-type">Response</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> Response.newBuilder();<br>.setMessage(<span class="hljs-string">&quot;Hello&quot;</span> + name +<span class="hljs-string">&quot;!&quot;</span>)<br>.build();<br>responseObserver.onNext(resp);<br>responseObserver.onCompleted();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//创建 Comsumer 和 Provider 端</span><br><span class="hljs-keyword">package</span> grpc ;<br><span class="hljs-keyword">import</span> io.grpc.ServerBuilder;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GrpcProvider</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Server server ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">GrpcProvider</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span>&#123;<br>server = ServerBuilder.forPort(port)<br>.addService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GreeterRpcService</span>())<br>.build();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>server.start();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span>&#123;<br>server.shutdown(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> grpc ;<br><span class="hljs-keyword">import</span> greeter.GreeterGrpc;<br><span class="hljs-keyword">import</span> greeter.Request;<br><span class="hljs-keyword">import</span> io.grpc.ManagedChannel;<br><span class="hljs-keyword">import</span> io.grpc.ManagedChannelBuilder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GrpcConsumer</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> GreeterGrpc.GreeterBlockingStub blockingStub ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">GrpcConsumer</span><span class="hljs-params">(String host,<span class="hljs-type">int</span> port )</span>&#123;<br><span class="hljs-type">ManagedChannel</span> <span class="hljs-variable">managedChannel</span> <span class="hljs-operator">=</span> ManagedChannelBuilder.forAddress(host,port)<br>.usePlaintext()<br>.bulid();<br><br>blockingStub = GreeterGrpc.newBlockingStub(managedChannel);<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span>&#123;<br>greeter.<span class="hljs-type">Request</span>  <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> Request.newBuilder()<br>.setName(name)<br>.build();<br>greeter.<span class="hljs-type">Response</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> blockingStub.sayHello(greeting);<br><span class="hljs-keyword">return</span> resp.getMessage();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> grpc ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8000</span>;<br><span class="hljs-type">GrpcProvider</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GrpcProvider</span>(port);<br>server.start();<br><span class="hljs-type">GrpcConsumer</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GrpcConsumer</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,port);<br><span class="hljs-type">String</span> <span class="hljs-variable">reply</span> <span class="hljs-operator">=</span> client.sayHello(<span class="hljs-string">&quot;World&quot;</span>);<br>System.out.println(reply);<br>server.shutudown();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>RPC（Remote Procedure Call）协议</strong>是一种通过网络在本地调用远程服务的方法，表现为本地程序发起函数调用请求，由远端服务器执行对应逻辑并返回结果。在整个调用链中，RPC 通常涉及五个关键角色：</p><ul><li>服务调用方（Consumer）</li><li>调用方的本地存根（Client Stub）</li><li>通信模块（RPC Runtime）</li><li>服务端的本地存根（Server Stub）</li><li>服务提供者（Provider）</li></ul><p>其典型流程包括：</p><ol><li><strong>服务暴露</strong> ：服务端将接口实现绑定到端口，或注册到注册中心；</li><li><strong>服务发现</strong> ：客户端获取服务地址，可通过直连或注册中心方式；</li><li><strong>服务引用</strong> ：客户端通过服务名定位目标服务并建立连接；</li><li><strong>方法调用</strong> ：客户端发起远程调用，请求经网络传输、反序列化，在服务端执行后返回结果。</li></ol><p>本篇展示了两种主流的 RPC 框架实现：</p><ul><li><strong>Dubbo</strong><br>Dubbo 采用“连接与业务解耦”的设计，通信细节通过 XML 配置完成，开发者只需专注业务逻辑。服务通过注册中心统一管理，客户端基于服务名发起远程调用，实现了高度抽象与服务治理的灵活性。</li><li><strong>gRPC</strong><br>gRPC 基于 Protocol Buffers 定义接口与消息格式，使用 HTTP&#x2F;2 作为传输协议，具备高效序列化、低延迟通信的优势。与 Dubbo 相比，gRPC 更加轻量，无需注册中心，服务端启动即提供服务，客户端直连发起调用，流程清晰、部署简洁。</li></ul><p>总体而言，Dubbo 更适用于需要注册中心、服务治理、分布式架构管理的企业级应用，而 gRPC 更适合追求高性能、轻量级、云原生部署的微服务场景。</p><h2 id="为什么选择-RPC-而不是-REST？"><a href="#为什么选择-RPC-而不是-REST？" class="headerlink" title="为什么选择 RPC 而不是 REST？"></a>为什么选择 RPC 而不是 REST？</h2><p>相较于 REST 接口，RPC 更适用于 <strong>高性能、强耦合、明确调用语义的场景</strong> 。以下是主要对比与选择理由：</p><h3 id="1-调用语义：函数调用-vs-资源操作"><a href="#1-调用语义：函数调用-vs-资源操作" class="headerlink" title="1. 调用语义：函数调用 vs 资源操作"></a>1. <strong>调用语义：函数调用 vs 资源操作</strong></h3><ul><li>REST 是基于 <strong>HTTP 标准语义</strong>的资源描述模型，强调“动词+资源”，使用如 <code>GET</code>、<code>POST</code>、<code>DELETE</code> 等标准方法对 URI 所代表的资源进行操作， <strong>关注的是状态的变更和资源的表述</strong> ；</li><li>RPC 更像是传统意义上的“函数调用”，客户端直接调用远程函数， <strong>明确指向某个具体服务的某个方法</strong> ，调用粒度更细、控制更强。</li></ul><hr><h3 id="2-传输协议与性能"><a href="#2-传输协议与性能" class="headerlink" title="2. 传输协议与性能"></a>2. <strong>传输协议与性能</strong></h3><ul><li>REST 通常依赖  <strong>HTTP&#x2F;1.1 协议</strong> ，每次请求带有较多的冗余头部信息，如 User-Agent、Cookie、Accept 等，传输体积大，处理开销高。</li><li>RPC 可以基于更加高效的协议（如 gRPC 使用的 HTTP&#x2F;2 + Protobuf），在<strong>序列化、压缩、双向流式通信、连接复用</strong>等方面远优于 REST。</li></ul><hr><h3 id="3-协议灵活性与扩展能力"><a href="#3-协议灵活性与扩展能力" class="headerlink" title="3. 协议灵活性与扩展能力"></a>3. <strong>协议灵活性与扩展能力</strong></h3><ul><li>REST 固定使用 HTTP 语义，语法简单但缺乏灵活性，复杂行为（如事务、回调、流式数据）实现困难。</li><li>RPC 支持自定义协议结构，字段更细粒度控制，支持流式调用、元信息传输、链路追踪等增强能力，且易于加入认证、压缩、加密等机制。</li></ul><hr><h3 id="4-安全性与内聚性"><a href="#4-安全性与内聚性" class="headerlink" title="4. 安全性与内聚性"></a>4. <strong>安全性与内聚性</strong></h3><ul><li>REST 更偏向无状态通信，服务器端对请求行为缺乏强验证能力，且由于请求行为是“声明式”的，缺少对调用链的明确控制。</li><li>RPC 可以集成 TLS、认证签名、身份控制，结合注册中心和服务网格形成闭环的安全控制链路， <strong>安全性和服务边界更强</strong> 。</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络技术</category>
      
      <category>RPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络技术</tag>
      
      <tag>RPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebSocket协议</title>
    <link href="/2025/05/13/WebSocket%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/05/13/WebSocket%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><blockquote><p>Ajax 是通过 JavaScript 在页面内发起异步 HTTP 请求（通常使用 XMLHttpRequest 或 fetch），服务端返回响应数据（现代多为 JSON，早期为 XML），前端根据返回内容更新页面的局部 DOM，从而实现无需整页刷新的动态交互效果。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Ajax JSON 示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>🧾 服务器数据：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span>等待数据中...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/data&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;网络响应失败&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>(); <span class="hljs-comment">// 解析 JSON 数据</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;result&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">`消息：<span class="hljs-subst">$&#123;data.message&#125;</span>`</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;result&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;请求失败：&#x27;</span> + error.<span class="hljs-property">message</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 初次加载 + 定时轮询</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">getData</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-built_in">setInterval</span>(getData, <span class="hljs-number">5000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 简单的 JSON API</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> result = &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好，这是来自服务器的 JSON 数据！时间：&#x27;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toLocaleTimeString</span>()<br>  &#125;;<br>  res.<span class="hljs-title function_">json</span>(result);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务运行在 &lt;http://localhost:3000&gt;&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="Long-Poll"><a href="#Long-Poll" class="headerlink" title="Long Poll"></a>Long Poll</h1><p>Long Poll 是由客户端发起一个请求，当服务端没有信息更新时，会处于阻塞状态，直到有更新后，由服务器响应给客户端</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Long Polling 示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>📡 消息推送：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>等待服务器推送消息...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">startLongPoll</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/longpoll&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>())</span></span><br><span class="language-javascript"><span class="language-xml">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">if</span> (data.<span class="hljs-property">message</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>).<span class="hljs-property">innerText</span> = data.<span class="hljs-property">message</span>;</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 不论有没有消息，立即再次发起请求</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title function_">startLongPoll</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;连接失败，重试中...&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-built_in">setTimeout</span>(startLongPoll, <span class="hljs-number">3000</span>); <span class="hljs-comment">// 等待再重试</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">startLongPoll</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>服务端</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// server.js</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-keyword">let</span> latestMessage = <span class="hljs-string">&#x27;暂无新消息&#x27;</span>;<br><span class="hljs-keyword">let</span> waitClients = []; <span class="hljs-comment">// 挂起请求的客户端列表</span><br><br><span class="hljs-comment">// 模拟服务端推送（每隔 10 秒更新一条消息）</span><br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  latestMessage = <span class="hljs-string">&#x27;新消息时间：&#x27;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toLocaleTimeString</span>();<br><br>  <span class="hljs-comment">// 所有挂起的请求立即响应</span><br>  waitClients.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: latestMessage &#125;));<br>  waitClients = []; <span class="hljs-comment">// 清空</span><br>&#125;, <span class="hljs-number">10000</span>);<br><br><span class="hljs-comment">// Long Poll 接口</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/longpoll&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 将响应挂起，等待服务端有更新后再响应</span><br>  waitClients.<span class="hljs-title function_">push</span>(res);<br><br>  <span class="hljs-comment">// 超时保护：如果30秒后还没有消息，则返回空数据</span><br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> index = waitClients.<span class="hljs-title function_">indexOf</span>(res);<br>    <span class="hljs-keyword">if</span> (index !== -<span class="hljs-number">1</span>) &#123;<br>      waitClients.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>      res.<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-literal">null</span> &#125;); <span class="hljs-comment">// 表示无更新</span><br>    &#125;<br>  &#125;, <span class="hljs-number">30000</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务运行在 &lt;http://localhost:3000&gt;&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>WebSocket 是通过 HTTP 请求建立的连接，在成功升级协议后切换为全双工通信，允许客户端和服务端彼此主动发送消息。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// JS 客户端</span><br>socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://192.168.0.5:18899/ws&quot;</span>,<span class="hljs-string">&quot;echo&quot;</span>);<br><span class="hljs-comment">// 创建websocket</span><br>socket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br><span class="hljs-keyword">var</span> target = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;responseText&quot;</span>);<br>target.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;Web Socket 连接已经开启&quot;</span>;<br>&#125;;<br><span class="hljs-comment">// 监听websocket连接的open事件</span><br><br>socket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br><span class="hljs-keyword">var</span> ta = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;responseText&quot;</span>);<br>ta.<span class="hljs-property">value</span> = ta.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;\\n&#x27;</span> + event.<span class="hljs-property">data</span><br>&#125;;<br><span class="hljs-comment">// 获取服务端数据</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> socket ;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">window</span>.<span class="hljs-property">WebSocket</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">window</span>.<span class="hljs-property">WebSocket</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">MozWebSocket</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> domain = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">host</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">WebSocket</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://&quot;</span> + domain +<span class="hljs-string">&quot;/ws&quot;</span> ,<span class="hljs-string">&quot;echo&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">socket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> ta = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;responseText&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">ta.<span class="hljs-property">value</span> = ta.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;\\n&#x27;</span> + event.<span class="hljs-property">data</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">socket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> target = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;responseText&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">target.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;Web Socket 连接已开启!&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">socket.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> target = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;responseText&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">target.<span class="hljs-property">value</span> = ta.<span class="hljs-property">vale</span> + <span class="hljs-string">&quot;WebSocket 已断开&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;<span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Your browser does not support Web Socket&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">message</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(!windows.<span class="hljs-property">WebSocket</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> ;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span> (socket.<span class="hljs-property">readyState</span> == <span class="hljs-title class_">WebSocket</span>.<span class="hljs-property">OPEN</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">socket.<span class="hljs-title function_">send</span>(message);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;<span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;The Socket is not open&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>服务器端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// WebSocket数据帧类型</span><br>BinaryWebSocketFrame     封装二进制数据的WebSocketFrame数据帧<br>TextWebSocketFrame       封装文本数据的WebSocketFrame数据帧<br>CloseWebSocketFrame      表示一个Close结束请求<br>ContinuationWebSocketFrame 分拆为多个WebSocket数据帧后,用于发送后续内容的数据帧<br>PingWebSocketFrame       心跳帧，一般用于客户端发送<br>PongWebSocketFrame       心跳帧，一般用于服务端发送<br><br><span class="hljs-comment">// Netty 包装类</span><br><br>WebSocketServerProtocolHandler 负责开启处理握手过程，以及保活/关闭处理<br>WebSocketServerProtocolHandshakeHandler  负责进行协议升级握手处理<br>WebSocketSocketFrameEncoder    数据帧编码器，负责WebSocket数据帧编码。<br>WebSocketSocketFrameDecoder    数据帧解码器，负责WebSocket数据帧解码<br><br><span class="hljs-comment">// 服务端</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketEchoServer</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span>&#123;<br><span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> ch.pipeline();<br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpRequestDecoder</span>());<br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpResponseEncoder</span>());<br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpObjectAggregator</span>(<span class="hljs-number">65535</span>));<br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketServerProtocolHandler</span>(<span class="hljs-string">&quot;/ws&quot;</span>,<span class="hljs-string">&quot;echo&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">10</span>*<span class="hljs-number">1024</span>));<br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebPageHandler</span>());<br>pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextWebSocketFrameHandler</span>());<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(String ip )</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>b.group(bossGroup, workerGroup)<br>.channel(NioServerSocketChannel.class)<br>.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG))<br>.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EchoInitializer</span>());<br><span class="hljs-type">Channel</span> <span class="hljs-variable">ch</span>  <span class="hljs-operator">=</span> b.bind(<span class="hljs-number">18899</span>).sync().channel();<br>log.info(<span class="hljs-string">&quot;WebSocket服务已启动http://&#123;&#125;:&#123;&#125;&quot;</span>,ip,<span class="hljs-number">18899</span>);<br>ch.closeFutrue().sync();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>bossGroup.shutdownGracefully();<br>workerGroup.shutdownGracefully();<br>&#125;<br>&#125;<br>&#125;  <br><br><span class="hljs-comment">// 处理器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TextWebSocketFrameHandler</span> <span class="hljs-keyword">extends</span> <br><span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;WebSocketFrame&gt;<br>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx , WebSocketFrame frame)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><span class="hljs-keyword">if</span>(frame <span class="hljs-keyword">instanceof</span> TextWebSocektFrame)&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((TextWebSocketFrame) frame).text();<br>log.debug(<span class="hljs-string">&quot;服务端收到：&quot;</span>+ request);<br><span class="hljs-type">String</span> <span class="hljs-variable">echo</span> <span class="hljs-operator">=</span> Dateutil.getTime() + <span class="hljs-string">&quot;:&quot;</span> + request;<br><span class="hljs-type">TextWebSocketFream</span> <span class="hljs-variable">echoFrame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextWebSocketFrame</span>(echo);<br>ctx.channel().writeAndFlush(echoFrame);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;unsupported frame type:&quot;</span> + frame.getClass().getName();<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(message);<br>&#125;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userEventTriggered</span><span class="hljs-params">(ChannelHandlerContext ctx, Object evt)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><span class="hljs-keyword">if</span>(evt <span class="hljs-keyword">instanceof</span> WebSocketServerProtocolHandler.HandshakeComplete)&#123;<br>ctx.pipeline().remove(WebPageHandler.class);<br>log.debug(<span class="hljs-string">&quot;WebSock HandShakeComplete 握手成功&quot;</span>);<br>log.debug(<span class="hljs-string">&quot;新的WebSocket客户端加入，通道为：&quot;</span>+ ctx.channel());<br>&#125; <span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">super</span>.userEventTriggered(ctx,evt);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WebSocket-升级过程"><a href="#WebSocket-升级过程" class="headerlink" title="WebSocket 升级过程"></a>WebSocket 升级过程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">🧑 Client                   🌐 Network                   🖥️ Server<br><br>    ┌────────────┐                                    ┌─────────────┐<br>    │JS 发起请求  │ ── GET / Upgrade: websocket ──▶   │HTTP Server  │<br>    └────────────┘                                    └─────────────┘<br>                                                      │验证 Sec-Key │<br>                                                      │返回 <span class="hljs-number">101</span> 升级│<br>    ◀────────────── <span class="hljs-number">101</span> Switching Protocols ─────────<br>    ▼ 升级完成<br><br>🚀 WebSocket 建立，双向通信开始<br>    ⇄ socket.send()<br>    ⇄ socket.onmessage()<br><br>    ❌ 发送 Close 帧<br>    ▼ TCP 连接关闭<br><br></code></pre></td></tr></table></figure><p>客户端基于HTTP 发送升级请求，请求首部包含以下内容 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /chat HTTP/<span class="hljs-number">1.1</span><br>Host: example.com            <br>Upgrade: websocket                              <span class="hljs-comment">// 指定升级的目标协议</span><br>Connection: Upgrade                             <span class="hljs-comment">// 发出声明请求</span><br>Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==     ← 客户端随机Base64编码值<br>Sec-WebSocket-Version: <span class="hljs-number">13</span>                         ← 使用的WebSocket协议版本<br>Sec-WebSocket-Protocol: echo\\r\\n                   ← 可以用于描述自定义的子协议<br></code></pre></td></tr></table></figure><p>服务端响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">101</span> Switching Protocols                    ← 响应码为<span class="hljs-number">101</span><br>Upgrade: websocket<br>Connection: Upgrade<br>Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=   ← 服务端计算后的 key 验证结果<br>Sec-WebSocket-Protocol: echo\\r\\n                   ← 用于描述自定义的子协议<br></code></pre></td></tr></table></figure><h3 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span>               <span class="hljs-number">1</span>               <span class="hljs-number">2</span>               <span class="hljs-number">3</span>  <br>+---------------+---------------+---------------+---------------+<br>|FIN| RSV1|RSV2|RSV3|  OPCODE   | MASK | Payload <span class="hljs-title function_">length</span> <span class="hljs-params">(<span class="hljs-number">7</span>)</span>     |<br>+---------------+---------------+-------------------------------+<br>|   Extended payload <span class="hljs-title function_">length</span> <span class="hljs-params">(<span class="hljs-number">16</span>/<span class="hljs-number">64</span> bits, optional)</span>              |<br>+---------------------------------------------------------------+<br>|   Masking <span class="hljs-title function_">key</span> <span class="hljs-params">(<span class="hljs-number">32</span> bits, optional)</span>                             |<br>+---------------------------------------------------------------+<br>|   Payload <span class="hljs-title function_">data</span> <span class="hljs-params">(x bytes)</span>                                      |<br>+---------------------------------------------------------------+<br>FIN            <span class="hljs-number">1</span> bit              是否为消息的最后一帧（<span class="hljs-number">1</span> 表示是）<br>RSV1~<span class="hljs-number">3</span>        <span class="hljs-number">3</span> bit               通常为 <span class="hljs-number">0</span>，保留扩展用<br>OPCODE        <span class="hljs-number">4</span> bit              表示帧类型（见下）<br>MASK          <span class="hljs-number">1</span> bit              表示 Payload 是否被掩码（客户端必须为 <span class="hljs-number">1</span>）<br>Payload length<span class="hljs-number">7</span> bit              表示数据长度（<span class="hljs-number">0</span>~<span class="hljs-number">125</span>）<br>特殊值：<span class="hljs-number">126</span> = 16bit 扩展，<span class="hljs-number">127</span> = 64bit 扩展<br>Extended Payload Length<span class="hljs-number">0</span>/<span class="hljs-number">2</span>/<span class="hljs-number">8</span> 字节当长度为 <span class="hljs-number">126</span> 或 <span class="hljs-number">127</span> 时才出现<br>Masking key    <span class="hljs-number">4</span> 字节            仅客户端发送时存在，用于解码 payload<br>Payload data  任意              真正要传输的数据（文本/二进制）<br><br></code></pre></td></tr></table></figure><p>OPCODE （报文类型）</p><table><thead><tr><th>OPCODE</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td><code>0x0</code></td><td>Continuation</td><td>后续帧（用于分片）</td></tr><tr><td><code>0x1</code></td><td>Text Frame</td><td>文本帧（UTF-8 编码）</td></tr><tr><td><code>0x2</code></td><td>Binary Frame</td><td>二进制帧</td></tr><tr><td><code>0x8</code></td><td>Connection Close</td><td>关闭连接</td></tr><tr><td><code>0x9</code></td><td>Ping</td><td>心跳探测（客户端发送）</td></tr><tr><td><code>0xA</code></td><td>Pong</td><td>心跳回应</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>网络技术</category>
      
      <category>WebSocket</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络技术</tag>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议 IV 识别，连接，认证与安全</title>
    <link href="/2025/05/13/HTTP%E5%8D%8F%E8%AE%AE-IV-%E8%AF%86%E5%88%AB%EF%BC%8C%E8%BF%9E%E6%8E%A5%EF%BC%8C%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    <url>/2025/05/13/HTTP%E5%8D%8F%E8%AE%AE-IV-%E8%AF%86%E5%88%AB%EF%BC%8C%E8%BF%9E%E6%8E%A5%EF%BC%8C%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="声明的，无状态的"><a href="#声明的，无状态的" class="headerlink" title="声明的，无状态的"></a>声明的，无状态的</h1><p>HTTP 本身是一种声明式的，不负责状态存储的协议。</p><p>其构造本身只提供了简单的控制&#x2F;访问流程 （方法，路径，协议号，以及首部的控制字段 → 状态码，响应首部，以及可能存在的响应内容）。 这个过程中的所有内容都是描述性的，需要外部的介质（一般是一些中间设备如客户端代理，网关，防火墙，服务端等）根据其描述来完成保活，存储，状态保存等一系列扩展功能。</p><h1 id="状态存储"><a href="#状态存储" class="headerlink" title="状态存储"></a>状态存储</h1><p>在面向应用的协议中，状态存储是一个很重要的属性。通过对状态的存储，可以为用户和服务端提供许多有用的扩展，如用户的个性化定制，会话的管理等。</p><h2 id="HTTP首部"><a href="#HTTP首部" class="headerlink" title="HTTP首部"></a>HTTP首部</h2><p>From   一般会用来承载一个邮箱地址</p><p>User-Agent 告知用户浏览器的相关信息</p><p>IP 地址</p><p>Authenticate 传输认证相关信息</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>cookie是服务器端在客户端安置的小型存储</p><p>cookie描述了一些键值信息，可以供服务器进行访问查询确认用户的信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">NAME</span>=<span class="hljs-keyword">VALUE</span>   键值描述<br>Expire       过期日期<br><span class="hljs-keyword">Domain</span>       定义Cookie生效的作用域<br><span class="hljs-type">Path</span>         定义在某个路径下Cookie会生效<br>Secure       定义后，只有在TLS/SSL生效后才会发送cookie<br></code></pre></td></tr></table></figure><h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><p>Web应用程序收到一条HTTP请求报文时，服务器没有按照请求执行动作，而是以一个“认证质询”进行响应，要求用户提供一些保密信息来说明他是谁，从而对其进行质询。</p><p>用户再次发起请求时，要附上保密证书（用户名和密码）。如果证书不匹配，服务器可以再次质询客户端，或产生一条错误信息。如果证书匹配，就可以正常完成请求了。</p><h2 id="基本认证"><a href="#基本认证" class="headerlink" title="基本认证"></a>基本认证</h2><ol><li>客户端发送访问请求</li><li>服务端返回未授权，说明客户需求提供对应的用户名和密码</li><li>客户端重新发送带有认证信息的请求</li><li>服务端验证后正确则回复认证成功的响应</li></ol><h2 id="Base-64"><a href="#Base-64" class="headerlink" title="Base-64"></a>Base-64</h2><p>将 8位数据转换为6位编码，用64个字符重新表示</p><p>基本认证存在很多缺陷，明文传输，以及在过于复杂的网络环境中有被监听和篡改报文的风险</p><h2 id="摘要认证"><a href="#摘要认证" class="headerlink" title="摘要认证"></a>摘要认证</h2><p>客户端发送请求信息</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/protected/resource</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>example.com<br></code></pre></td></tr></table></figure><p>服务器响应请求，请求进行授权认证</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">HTTP/1.1 401 Unauthorized<br>WWW-Authenticate: Digest<br>  <span class="hljs-attribute">realm</span>=<span class="hljs-string">&quot;example.com&quot;</span>,<br>  <span class="hljs-attribute">nonce</span>=<span class="hljs-string">&quot;abc123&quot;</span>,             ← 服务端生成的随机数，防止重放攻击<br>  <span class="hljs-attribute">qop</span>=<span class="hljs-string">&quot;auth&quot;</span>,<br>  <span class="hljs-attribute">algorithm</span>=MD5<br><br></code></pre></td></tr></table></figure><p>客户端对收到的随机数 和本地密码进行MD5计算，响应</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Authorization: Digest<br>  <span class="hljs-attribute">username</span>=<span class="hljs-string">&quot;alice&quot;</span>,<br>  <span class="hljs-attribute">realm</span>=<span class="hljs-string">&quot;example.com&quot;</span>,<br>  <span class="hljs-attribute">nonce</span>=<span class="hljs-string">&quot;abc123&quot;</span>,<br>  <span class="hljs-attribute">uri</span>=<span class="hljs-string">&quot;/protected/resource&quot;</span>,<br>  <span class="hljs-attribute">response</span>=<span class="hljs-string">&quot;dcd98b7102dd2f0e8b11...&quot;</span>,  ← 由客户端计算出的摘要<br>  <span class="hljs-attribute">qop</span>=auth,<br>  <span class="hljs-attribute">nc</span>=00000001,<br>  <span class="hljs-attribute">cnonce</span>=<span class="hljs-string">&quot;xyz789&quot;</span><br><br></code></pre></td></tr></table></figure><h1 id="字段与功能点"><a href="#字段与功能点" class="headerlink" title="字段与功能点"></a>字段与功能点</h1><table><thead><tr><th>字段名</th><th>所在报文</th><th>典型组合</th><th>对应功能</th></tr></thead><tbody><tr><td><code>Connection</code>+<code>Upgrade</code></td><td>请求 &amp; 响应</td><td><code>Connection: Upgrade</code>,<code>Upgrade: websocket</code></td><td>协议升级机制（如 HTTP → WebSocket）</td></tr><tr><td><code>Host</code></td><td>请求头</td><td>-</td><td>虚拟主机路由（同 IP 多域名支持）</td></tr><tr><td><code>Content-Type</code>+<code>Content-Length</code></td><td>请求&#x2F;响应</td><td><code>Content-Type: application/json</code></td><td>请求体格式标识与数据边界控制</td></tr><tr><td><code>Transfer-Encoding</code></td><td>响应头</td><td><code>Transfer-Encoding: chunked</code></td><td>分块传输机制（适合大文件&#x2F;流式内容）</td></tr><tr><td><code>Cookie</code>+<code>Set-Cookie</code></td><td>请求 + 响应</td><td><code>Set-Cookie: sessionId=abc123</code></td><td>客户端会话状态管理</td></tr><tr><td><code>Authorization</code>+<code>WWW-Authenticate</code></td><td>请求 + 响应</td><td><code>Authorization: Bearer &lt;token&gt;</code></td><td>身份验证机制（如 OAuth、Basic）</td></tr><tr><td><code>ETag</code>+<code>If-None-Match</code></td><td>响应 + 请求</td><td><code>ETag: &quot;123abc&quot;</code></td><td>协商缓存：基于内容校验</td></tr><tr><td><code>Last-Modified</code>+<code>If-Modified-Since</code></td><td>响应 + 请求</td><td><code>Last-Modified: Tue, 12 May 2025 10:00:00 GMT</code></td><td>协商缓存：基于时间戳</td></tr><tr><td><code>Cache-Control</code></td><td>请求&#x2F;响应</td><td><code>Cache-Control: no-cache</code></td><td>缓存行为控制（是否缓存、最大时长）</td></tr><tr><td><code>Accept</code>+<code>Content-Type</code></td><td>请求 + 响应</td><td><code>Accept: application/json</code></td><td>内容协商机制</td></tr><tr><td><code>Accept-Encoding</code>+<code>Content-Encoding</code></td><td>请求 + 响应</td><td><code>Content-Encoding: gzip</code></td><td>压缩格式协商</td></tr><tr><td><code>Accept-Language</code></td><td>请求头</td><td>-</td><td>响应语言偏好协商</td></tr><tr><td><code>Origin</code>+<code>Access-Control-*</code></td><td>请求 + 响应</td><td><code>Access-Control-Allow-Origin: *</code></td><td>CORS 跨域访问控制</td></tr><tr><td><code>Referer</code></td><td>请求头</td><td>-</td><td>来源追踪、防盗链、分析跳转</td></tr><tr><td><code>Location</code>+<code>3xx</code>状态码</td><td>响应头</td><td><code>Location: &lt;https://new.url</code>&gt;</td><td>重定向机制</td></tr><tr><td><code>X-Forwarded-For</code></td><td>请求头</td><td>-</td><td>获取客户端真实 IP（经代理）</td></tr><tr><td><code>X-Requested-With</code></td><td>请求头</td><td><code>X-Requested-With: XMLHttpRequest</code></td><td>AJAX 请求标识</td></tr></tbody></table><h2 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h2><p>将HTTP 会话变为维持TCP连接，从请求-响应-关闭 变为 请求-响应-等待超时-关闭</p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><h1 id="重定向与负载均衡"><a href="#重定向与负载均衡" class="headerlink" title="重定向与负载均衡"></a>重定向与负载均衡</h1><h2 id="HTTP重定向"><a href="#HTTP重定向" class="headerlink" title="HTTP重定向"></a>HTTP重定向</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">实现 ：服务器接收HTTP请求，服务器返回重定向消息，客户端将请求重新发送到选中服务器<br>局限 ：服务器需要可以对请求进行处理，且重定向步骤较多<br></code></pre></td></tr></table></figure><p>客户端 发送请求报文 ：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/hammers.html</span> <span class="hljs-meta">HTTP/1.0</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>www.joes-hardware.com<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/4.51 [en] (X11; U; IRIX 6.2 IP22)<br></code></pre></td></tr></table></figure><p>服务端响应一个重定向报文</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">0302</span> Redirect<br><span class="hljs-attribute">Server</span>: Stronghold/<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">2</span> Apache/<span class="hljs-number">1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">Location</span>: &lt;http://<span class="hljs-number">161.58.228.45</span>/hammers.html&gt;<br></code></pre></td></tr></table></figure><p>客户端向服务端提供的重定向地址重新发送请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/hammers.html</span> <span class="hljs-meta">HTTP/1.0</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>161.58.228.45<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/4.51 [en] (X11; U; IRIX 6.2 IP22)<br></code></pre></td></tr></table></figure><h2 id="DNS重定向"><a href="#DNS重定向" class="headerlink" title="DNS重定向"></a>DNS重定向</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">实现 ：DNS服务器决定URL的主机名中返回<span class="hljs-built_in">IP</span>地址中的哪一个<br>局限 ：需要配置DNS服务器<br></code></pre></td></tr></table></figure><h2 id="IP-MAC转发"><a href="#IP-MAC转发" class="headerlink" title="IP MAC转发"></a>IP MAC转发</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">实现 ：通过绑定目的<span class="hljs-built_in">IP</span>到对应的MAC地址<br>局限 ：同一广播域内<br></code></pre></td></tr></table></figure><h2 id="IP-地址转发"><a href="#IP-地址转发" class="headerlink" title="IP 地址转发"></a>IP 地址转发</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">实现 ：通过识别目的端口，重定向<span class="hljs-built_in">IP</span>地址到代理或镜像服务器<br>局限 ：服务器或代理看不到真正的客户端<span class="hljs-built_in">IP</span>地址<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议 III 服务类型</title>
    <link href="/2025/05/12/HTTP%E5%8D%8F%E8%AE%AE-III-%E6%9C%8D%E5%8A%A1%E7%B1%BB%E5%9E%8B/"/>
    <url>/2025/05/12/HTTP%E5%8D%8F%E8%AE%AE-III-%E6%9C%8D%E5%8A%A1%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>基于HTTP协议，技术上进行了多种技术实现</p><h1 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h1><p>web服务器是基于Http协议的最基础实现：用户通过浏览器代理 发送HTTP请求，服务端解析请求提供对应服务。</p><p>一个基础的web服务器具备以下流程 ：</p><p>(1) 建立连接——接受一个客户端连接，或者如果不希望与这个客户端建立连接，就将其关闭。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">服务器使用 <span class="hljs-keyword">socket</span> 创建监听端口（如 TCP <span class="hljs-number">80</span>/<span class="hljs-number">443</span>），并通过 <span class="hljs-keyword">accept</span> 接收客户端连接请求。<br>客户端发起 TCP 三次握手，连接成功后，服务器进入请求处理阶段。<br>连接建立后，可以根据客户端 IP 或报文字段判断是否拒绝继续服务（例如黑名单、Header 校验）。<br></code></pre></td></tr></table></figure><p>(2)接收请求——从网络中读取一条HTTP请求报文。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">从 Socket 中读取 HTTP 请求报文，HTTP 是基于文本协议，使用 CRLF（<span class="hljs-symbol">\\</span>r<span class="hljs-symbol">\\</span>n）标志字段和请求结束。<br>请求报文包括请求行、头部字段、空行和可选的消息体。<br>Web 服务器需按 HTTP 语法解析这些字段，并生成一个结构化的请求对象供业务逻辑处理。<br></code></pre></td></tr></table></figure><p>(3)处理请求——对请求报文进行解释，并采取行动。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">现代 Web 框架会基于请求路径、方法、参数等信息进行路由匹配，将请求分发给对应的控制器函数进行业务逻辑处理。<br></code></pre></td></tr></table></figure><p>(4)访问资源——访问报文中指定的资源。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">资源访问可以是静态资源（如 HTML、CSS、图片文件）或动态处理（如数据库操作、业务逻辑执行）。<br>根据请求方法（<span class="hljs-meta">GET</span>/POST）和 URI 路径，决定资源类型与访问方式。<br></code></pre></td></tr></table></figure><p>(5)构建响应——创建带有正确首部的HTTP响应报文。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">修改或者其他响应办法确定后，构造序列化对象（如<span class="hljs-type">Json</span>），以及响应头信息。对客户端进行响应。<br></code></pre></td></tr></table></figure><p>(6)发送响应——将响应回送给客户端。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">底层 将 状态码 响应头 消息体 编码为字节数组 以<span class="hljs-keyword">CRLF</span>作为结尾，由Socket发送给客户端<br></code></pre></td></tr></table></figure><p>(7)记录事务处理过程——将与已完成事务有关的内容记录在一个日志文件中。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">服务器会将每次请求的处理过程记录到访问日志中，包括客户端 <span class="hljs-built_in">IP</span>、请求路径、方法、状态码、响应时间等。<br>日志有助于问题追踪、性能分析与安全监控。<br></code></pre></td></tr></table></figure><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>Web代理（proxy）服务器是网络的中间实体。代理位于客户端和服务器之间，扮演“中间人”的角色，在各端点之间来回传送HTTP报文</p><p><strong>代理 ： 客户端向代理服务器发送请求，代理服务器转发给后端的引用服务器</strong></p><p><strong>反向代理：客户端不感知代理存在，请求发向代理，由其代表后端服务器处理请求（如 Nginx、API 网关）</strong></p><h3 id="为什么需要代理"><a href="#为什么需要代理" class="headerlink" title="为什么需要代理"></a>为什么需要代理</h3><ul><li>消息过滤，代理可以作为中间过程为最终客户进行内容筛选。通过检查请求&#x2F;响应内容对用户的访问进行控制</li><li>访问策略，代理通过解析中间消息，可以对不同的用户实施不同的访问策略</li><li>防火墙，通过检查传输的Http消息，来监控网络中是否存在恶意信息</li><li>web缓存，代理缓存维护了常用文档的本地副本，并将它们按需提供，以减少缓慢且昂贵的因特网通信。</li><li>反向代理，代理可以假扮Web服务器。这些被称为替代物（surrogate）或反向代理（re-verse proxy）的代理接收发给Web服务器的真实请求，但与Web服务器不同的是，它们可以发起与其他服务器的通信，以便按需定位所请求的内容。</li></ul><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>缓存服务器，用于分摊对web服务器的访问压力，其核心逻辑是收到请求后</p><p>(1) 接收——缓存从网络中读取抵达的请求报文。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">缓存检测到一条网络连接上的活动，读取输入数据。高性能的缓存会同时从多条输入连接上读取数据，在整条报文抵达之前开始对事务进行处理<br></code></pre></td></tr></table></figure><p>(2) 解析——缓存对报文进行解析，提取出URL和各种首部。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">缓存将请求报文解析为片断，将首部的各个部分放入易于操作的数据结构中。<br></code></pre></td></tr></table></figure><p>(3) 查询——缓存查看是否有本地副本可用，如果没有，就获取一份副本（并将其保存在本地）。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">本地副本可能存储在内存、本地磁盘，甚至附近的另一台计算机中。<br>专业级的缓存会使用快速算法来确定本地缓存中是否有某个对象。<br>如果本地没有这个文档，它可以根据情形和配置，到原始服务器或父代理中去取，或者返回一条错误信息。<br></code></pre></td></tr></table></figure><p>(4) 新鲜度检测——缓存查看已缓存副本是否足够新鲜，如果不是，就询问服务器是否有任何更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">HTTP通过缓存将服务器文档的副本保留一段时间。<br>在这段时间里，都认为文档是“新鲜的”，缓存可以在不联系服务器的情况下，直接提供该文档。<br>但一旦已缓存副本停留的时间太长，超过了文档的新鲜度限值（freshness <span class="hljs-built_in">limit</span>），<br>就认为对象“过时”了，在提供该文档之前，缓存要再次与服务器进行确认，<br>以查看文档是否发生了变化。客户端发送给缓存的所有请求首部自身都可以强制缓存进行再验证，<br>或者完全避免验证，这使得事情变得更加复杂了。<br></code></pre></td></tr></table></figure><p>(5) 创建响应——缓存会用新的首部和已缓存的主体来构建一条响应报文。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">我们希望缓存的响应看起来就像来自原始服务器的一样，缓存将已缓存的服务器响应首部作为响应首部的起点。<br>然后缓存对这些基础首部进行了修改和扩充。<br>缓存负责对这些首部进行改造，以便与客户端的要求相匹配。<br></code></pre></td></tr></table></figure><p>(6) 发送——缓存通过网络将响应发回给客户端。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">一旦响应首部准备好了，缓存就将响应回送给客户端。<br>和所有代理服务器一样，代理缓存要管理与客户端之间的连接。<br></code></pre></td></tr></table></figure><p>(7) 日志——缓存可选地创建一个日志文件条目来描述这个事务。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">大多数缓存都会保存日志文件以及与缓存的使用有关的一些统计数据。<br>每个缓存事务结束之后，缓存都会更新缓存命中和未命中数目的统计数据（以及其他相关的度量值），<br>并将条目插入一个用来显示请求类型、<span class="hljs-built_in">URL</span>和所发生事件的日志文件。<br></code></pre></td></tr></table></figure><h1 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h1><p>网关可以作为某种翻译器使用，它抽象出了一种能够到达资源的方法。网关是资源和应用程序之间的粘合剂。应用程序可以（通过HTTP或其他已定义的接口）请求网关来处理某条请求，网关可以提供一条响应。</p><p>应用程序网关API就是通用网关接口（Common Gateway Interface,CGI）。CGI是一个标准接口集，Web服务器可以用它来装载程序以响应对特定URL的HTTP请求，并收集程序的输出数据，将其放在HTTP响应中回送。在过去的几年中，商业Web服务器提供了一些更复杂的接口，以便将Web服务器连接到应用程序上去。</p><h1 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h1><p>Web隧道允许用户通过HTTP连接发送非HTTP流量，这样就可以在HTTP上捎带其他协议数据了。使用Web隧道最常见的原因就是要在HTTP连接中嵌入非HTTP流量，这样，这类流量就可以穿过只允许Web流量通过的防火墙了。</p><p>隧道连接请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">CONNECT</span> <span class="hljs-string">home.netscape.com:443</span> <span class="hljs-meta">HTTP/1.0</span><br><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>Mozilla/4.0<br></code></pre></td></tr></table></figure><p>隧道连接响应</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">0200</span> Connection Established<br><span class="hljs-attribute">Proxy</span>-agent: Netscape-Proxy/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>隧道在发出连接请求后，不必等待响应，就会以隧道形式发送数据到对端。如果收到认证响应或其他非成功响应，请求端需要做好重新准备数据的准备。</p>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议 II 连接</title>
    <link href="/2025/05/11/HTTP%E5%8D%8F%E8%AE%AE-II-%E8%BF%9E%E6%8E%A5/"/>
    <url>/2025/05/11/HTTP%E5%8D%8F%E8%AE%AE-II-%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="基于TCP协议的“可靠”连接"><a href="#基于TCP协议的“可靠”连接" class="headerlink" title="基于TCP协议的“可靠”连接"></a>基于TCP协议的“可靠”连接</h1><p>HTTP 是基于传输层的TCP协议而构建。</p><p>TCP的待发送数据会被放入SOCKET的缓冲区，并且通过一些标记位和指针字段来控制所有缓冲区中的数据有序可靠的被发送到对端。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs coq">┌──────────────────────────── IP 报文头（IPv4） ─────────────────────────────┐<br>│ 版本 (<span class="hljs-number">4</span>b) | <span class="hljs-type">首部长度 (4b</span>) | <span class="hljs-type">区分服务(8b</span>) | <span class="hljs-type">总长度(16b</span>)                   <br>│ 标识 (<span class="hljs-number">16</span>b)                | <span class="hljs-type">标志(3b</span>) | <span class="hljs-type">片偏移(13b</span>)                       <br>│ 生存时间 TTL(<span class="hljs-number">8</span>b)         | <span class="hljs-type">协议 (8b</span>: <span class="hljs-number">0x06</span> 表示 TCP)                      <br>│ 首部校验和 (<span class="hljs-number">16</span>b)                                                         <br>│ 源 IP 地址 (<span class="hljs-number">32</span>b)                                                         <br>│ 目的 IP 地址 (<span class="hljs-number">32</span>b)                                                       <br>│ （+ 可选项）                                                             <br>└────────────────────────────────────────────────────────────────────────────┘<br>                                ↓<br>┌──────────────────────────── TCP 段头 ──────────────────────────────────────┐<br>│ 源端口 (<span class="hljs-number">16</span>b)                | <span class="hljs-type">目标端口 (16b</span>)                    <br>│ 序列号 (<span class="hljs-number">32</span>b)                                                  <br>│ 确认号 (<span class="hljs-number">32</span>b)                                                  <br>│ 数据偏移(<span class="hljs-number">4</span>b) | <span class="hljs-type">保留(3b</span>) | <span class="hljs-type">标志位(9b</span>: SYN, ACK, etc.)          <br>│ 窗口大小 (<span class="hljs-number">16</span>b)                                               <br>│ 校验和 (<span class="hljs-number">16</span>b)                                                 <br>│ 紧急指针 (<span class="hljs-number">16</span>b)                                               <br>│ （+ 可选项，如MSS、窗口缩放、SACK等）                        <br>└────────────────────────────────────────────────────────────────────────────┘<br>                                ↓<br>┌────────────────────── HTTP 请求报文（以 GET 为例） ─────────────────────────┐<br>│ 起始行（Request Line）                                              <br>│   GET /index.html HTTP/<span class="hljs-number">1.1</span>   ← 方法(变量长) 路径(变量长) 协议版本   <br>│                                                                  <br>│ 首部字段（Headers）                                              <br>│   Host: www.example.com             ← Key:Value，每行为一字段       <br>│   User-Agent: curl/<span class="hljs-number">7.64</span><span class="hljs-number">.1</span>                                         <br>│   Accept: */*                                                     <br>│   ...                                                             <br>│                                                                  <br>│ 空行（\\r\\n）表示首部结束                                          <br>│                                                                  <br>│ 实体主体（Body，可选）                                           <br>│   （如POST中的表单数据，如 x-www-form-urlencoded 格式）          <br>└─────────────────────────────────────────────────────────────────────────────┘<br><br></code></pre></td></tr></table></figure><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>socket是协议栈在操作系统上的具体实现。设计为一种通用网络接口，通过定义具体的协议和响应的地址，端口信息来实现服务端与客户端的连接。</p><h2 id="传输性能"><a href="#传输性能" class="headerlink" title="传输性能"></a>传输性能</h2><h3 id="DNS-到-IP-的地址转换"><a href="#DNS-到-IP-的地址转换" class="headerlink" title="DNS 到 IP 的地址转换"></a>DNS 到 IP 的地址转换</h3><p>DNS解析时间</p><h3 id="TCP-连接时延"><a href="#TCP-连接时延" class="headerlink" title="TCP 连接时延"></a>TCP 连接时延</h3><h3 id="请求报文处理"><a href="#请求报文处理" class="headerlink" title="请求报文处理"></a>请求报文处理</h3><h3 id="构造响应报文"><a href="#构造响应报文" class="headerlink" title="构造响应报文"></a>构造响应报文</h3><h3 id="网络扰动"><a href="#网络扰动" class="headerlink" title="网络扰动"></a>网络扰动</h3>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议 I 定义</title>
    <link href="/2025/05/11/HTTP%E5%8D%8F%E8%AE%AE-I-%E5%AE%9A%E4%B9%89/"/>
    <url>/2025/05/11/HTTP%E5%8D%8F%E8%AE%AE-I-%E5%AE%9A%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>HTTP（超文本传输协议）是 Web 应用最基础的应用层通信协议，用于客户端与服务器之间传输文本、图像、视频等信息。</p><h2 id="HTTP协议内容与字段定义"><a href="#HTTP协议内容与字段定义" class="headerlink" title="HTTP协议内容与字段定义"></a>HTTP协议内容与字段定义</h2><ul><li>资源 ： Web服务器是Web资源（Web resource）的宿主。Web资源是Web内容的源头。最简单的Web资源就是Web服务器文件系统中的静态文件。</li><li>媒体类型 ：当Web浏览器从服务器中取回一个对象时，会去查看相关的MIME类型，看看它是否知道应该如何处理这个对象</li><li>URI ： 服务器资源名被称为统一资源标识符（Uniform Resource Identifier, URI）。URI就像因特网上的邮政地址一样，在世界范围内唯一标识并定位信息资源。</li><li>URL :  URL描述了一台特定服务器上某资源的特定位置，一般包含三部分 ： 1.协议类型 2.网络地址 3.资源地址</li><li>事务 ： 一个HTTP事务由一条（从客户端发往服务器的）请求命令和一个（从服务器发回客户端的）响应结果组成</li><li>方法 ：HTTP支持几种不同的请求命令，这些命令被称为HTTP方法（HTTP method）。</li><li>状态码 ：每条HTTP响应报文返回时都会携带一个状态码。状态码是一个三位数字的代码，告知客户端请求是否成功，或者是否需要采取其他动作。</li></ul><h3 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h3><ul><li>起始行 ： 起始行报文的第一行就是起始行，在请求报文中用来说明要做些什么，在响应报文中说明出现了什么情况。</li><li>首部字段 ：起始行后面有零个或多个首部字段。每个首部字段都包含一个名字和一个值，为了便于解析，两者之间用冒号（:）来分隔。首部以一个空行结束。添加一个首部字段和添加新行一样简单。</li><li>主题 ： 空行之后就是可选的报文主体了，其中包含了所有类型的数据。请求主体中包括了要发送给Web服务器的数据；响应主体中装载了要返回给客户端的数据。起始行和首部都是文本形式且都是结构化的，而主体则不同，主体中可以包含任意的二进制数据（比如图片、视频、音轨、软件程序）。当然，主体中也可以包含文本。</li></ul><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>HTTP是定义在TCP&#x2F;IP 协议栈之上的。</p><p>在TCP层 ，TCP协议提供了</p><ul><li>无差错的数据传输</li><li>按序传输（数据总是会按照发送的顺序到达）</li><li>未分段的数据流（可以在任意时刻以任意尺寸将数据发送出去）</li></ul><p>再从网络协议栈层面考虑</p><p>IP （网络层） ： 提供了服务端和客户端的路由寻址（如何对服务器进行访问）</p><p>TCP （传输层） ： 提供了服务端和客户端之间的可靠通信</p><p>HTTP （应用层） ： 提供了内容传递的路径和方法</p><h3 id="HTTP-寻址访问传输的过程"><a href="#HTTP-寻址访问传输的过程" class="headerlink" title="HTTP 寻址访问传输的过程"></a>HTTP 寻址访问传输的过程</h3><ol><li>客户端输入待访问的URL地址</li><li>浏览器发出DNS请求，解释URL地址为IP地址</li><li>得到IP地址后与服务器建立TCP连接</li><li>客户端浏览器发送HTTP请求报文</li><li>服务端响应HTTP响应报文</li><li>关闭链接，浏览器渲染HTTP响应报文</li></ol><h3 id="协议版本"><a href="#协议版本" class="headerlink" title="协议版本"></a>协议版本</h3><p>0.9  协议只支持get方法</p><p>1.0  添加了额外的请求方法</p><p>1.1</p><h3 id="结构组件"><a href="#结构组件" class="headerlink" title="结构组件"></a>结构组件</h3><ul><li>代理</li></ul><p>代理位于客户端和服务器之间，接收所有客户端的HTTP请求，并将这些请求转发给服务器（可能会对请求进行修改之后转发）。</p><ul><li>缓存</li></ul><p>Web缓存（Web cache）或代理缓存（proxy cache）是一种特殊的HTTP代理服务器，可以将经过代理传送的常用文档复制保存起来</p><ul><li>网关</li></ul><p>网关（gateway）是一种特殊的服务器，作为其他服务器的中间实体使用。通常用于将HTTP流量转换成其他的协议</p><ul><li>隧道</li></ul><p>隧道（tunnel）是建立起来之后，就会在两条连接之间对原始数据进行盲转发的HTTP应用程序。HTTP隧道通常用来在一条或多条HTTP连接上转发非HTTP数据，转发时不会窥探数据。</p><ul><li>Agent代理</li></ul><p>用户Agent代理（或者简称为Agent代理）是代表用户发起HTTP请求的客户端程序。所有发布Web请求的应用程序都是HTTP Agent代理。到目前为止，我们只提到过一种HTTP Agent代理：Web浏览器，但用户Agent代理还有很多其他类型。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>所有的URL 访问方式均符合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;scheme&gt;:<span class="hljs-comment">//&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;; &lt;params&gt;? &lt;query&gt;#&lt;frag&gt;</span><br></code></pre></td></tr></table></figure><p>请求报文：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;<br>&lt;headers&gt;<br><br>&lt;entity-body&gt;<br></code></pre></td></tr></table></figure><p>响应报文：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;version&gt; &lt;status&gt; &lt;reason-phrase&gt;<br>&lt;headers&gt;<br><br>&lt;entity-body&gt;<br></code></pre></td></tr></table></figure><ul><li>方法（method）客户端希望服务器对资源执行的动作。是一个单独的词，比如GET、HEAD或POST。本章稍后将详细介绍方法。·</li><li>请求URL（request-URL）命名了所请求资源，或者URL路径组件的完整URL。如果直接与服务器进行对话，只要URL的路径组件是资源的绝对路径，通常就不会有什么问题——服务器可以假定自己是URL的主机&#x2F;端口。第2章详细地介绍了URL的语法。·</li><li>版本（version）报文所使用的HTTP版本，其格式看起来是这样的：<br>HTTP&#x2F;<code>&lt;major&gt;</code>.<code>&lt;minor&gt;</code></li><li>状态码（status-code）这三位数字描述了请求过程中所发生的情况。每个状态码的第一位数字都用于描述状态的一般类别（“成功”、“出错”等）。</li><li>首部（header）可以有零个或多个首部，每个首部都包含一个名字，后面跟着一个冒号（:），然后是一个可选的空格，接着是一个值，最后是一个CRLF。首部是由一个空行（CRLF）结束的，表示了首部列表的结束和实体主体部分的开始。有些HTTP版本，比如HTTP&#x2F;1.1，要求有效的请求或响应报文中必须包含特定的首部。</li><li>实体的主体部分（entity-body）实体的主体部分包含一个由任意数据组成的数据块</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>GET是最常用的方法。通常用于请求服务器发送某个资源。</p><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>HEAD方法与GET方法的行为很类似，但服务器在响应中只返回首部。不会返回实体的主体部分。</p><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>与GET从服务器读取文档相反，PUT方法会向服务器写入文档。有些发布系统允许用户创建Web页面，并用PUT直接将其安装到Web服务器上去</p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>表单中填好的数据通常会被送给服务器，然后由服务器将其发送到它要去的地方</p><h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><p>TRACE方法允许客户端在最终将请求发送给服务器时，看看它变成了什么样子。</p><h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><p>OPTIONS方法请求Web服务器告知其支持的各种功能。可以询问服务器通常支持哪些方法，或者对某些特殊资源支持哪些方法</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>请服务器删除请求URL所指定的资源</p><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>状态码用来标记 响应报文对请求结果的处理方式</p><p>100 -  199 继续传输，表示客户端需要分段发送一段较长的消息数据。</p><p>200 - 299 成功，表示服务器成功接收到客户端的请求。</p><p>300 - 399 重定向，通常是资源变更后通知客户端访问另一个URL地址。</p><p>400 - 499 客户端异常，通常是由来自客户端的请求消息不符合服务端的要求所导致。</p><p>500 - 599 服务端异常。</p><h2 id="头部字段"><a href="#头部字段" class="headerlink" title="头部字段"></a>头部字段</h2><p>头部字段用于描述 请求端的资源请求信息和服务端所能提供的应用服务信息，分为5种类型</p><p>通用首部 ：服务端和客户端都可以携带，描述一些通用的功能信息</p><p>请求首部 ：请求端特有的，一般是一些基于自身请求的描述信息</p><p>响应首部 ：相应端特有的，一般是描述服务端的状态信息和功能信息</p><p>实体首部 ：用于描述消息体的一些字段，用于描述消息体的文件类型，读取编码格式等</p><p>扩展首部 ：作用于HTTP协议之上的一些协议自定义字段，用于为功能开发者提供更上层的应用构建</p><h3 id="通用首部"><a href="#通用首部" class="headerlink" title="通用首部"></a>通用首部</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Connection</span>        允许客户端与服务器指定与请求/响应有关的选项<br><span class="hljs-type">Date</span>              时间/日期标志<br>MIME-<span class="hljs-keyword">Version</span>      MIME版本信息<br></code></pre></td></tr></table></figure><h3 id="请求首部"><a href="#请求首部" class="headerlink" title="请求首部"></a>请求首部</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Host              给出接收的服务器的主机名和端口号<br>Referer           描述当前请求的URL<br><span class="hljs-keyword">User</span>-Agent        发起请求的应用程序<br><br>Accept            告知服务器能够发送哪种媒体类型<br>Accept-Charset    告知服务器能够发送哪种字符集<br>Accept-<span class="hljs-keyword">Encoding</span>   告知服务器能够发送哪种字符编码方式<br>Accept-<span class="hljs-keyword">Language</span>   告知服务器能够发送哪种语言<br><br><span class="hljs-keyword">Authorization</span>     描述一些授权信息<br>Cookie            描述一些本地存储信息<br><br>Proxy-<span class="hljs-keyword">Authorization</span> 与代理进行认证时使用<br>Proxy-<span class="hljs-keyword">Connection</span>    与代理进行连接时使用<br></code></pre></td></tr></table></figure><h3 id="响应首部"><a href="#响应首部" class="headerlink" title="响应首部"></a>响应首部</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams">Age              响应持续时间<br>Server           响应程序的软件名称和版本信息<br>Accept-Ranges    服务端可接收的范围类型<br>Proxy-Authenticate  代理对客户端的质询列表<br><span class="hljs-keyword">Set</span>-Cookie          向客户端设置本地存储<br>WWW-Authenticate    服务端对客户端的质询列表<br></code></pre></td></tr></table></figure><h3 id="实体首部"><a href="#实体首部" class="headerlink" title="实体首部"></a>实体首部</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">Allow            列出了可以对此实体执行的方法<br>Location         列出资源的实际位置<br><br><span class="hljs-attribute">Content</span>-Base     相对URL使用的基础URL<br><span class="hljs-attribute">Content</span>-Encoding 对主体执行的编码方式<br><span class="hljs-attribute">Content</span>-Language 理解主体时最适宜使用的自然语言<br><span class="hljs-attribute">Content</span>-Length   主体的长度或尺寸<br><span class="hljs-attribute">Content</span>-Location 资源所处的位置<br><span class="hljs-attribute">Content</span>-MD5      校验和<br><span class="hljs-attribute">Content</span>-Range    在整个资源中此实体表示的字节范围<br><span class="hljs-attribute">Content</span>-Type     这个主体的对象类型<br><br>Expires          实体的过期时间<br>Last-Modified    最后一次被修改的日期和时间<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 VIIII 读取与序列化</title>
    <link href="/2025/05/10/Java%E7%BC%96%E7%A8%8B-VIIII-%E8%AF%BB%E5%8F%96%E4%B8%8E%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/05/10/Java%E7%BC%96%E7%A8%8B-VIIII-%E8%AF%BB%E5%8F%96%E4%B8%8E%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h1><p>Netty中 提供了 编解码 工具</p><p>基本实现</p><p>通过继承ByteToMessageDecoder 可以改写对数据的处理流程。</p><p>当执行out.add() 时，解码器会直接将添加的对象交给后续的handler 进行执行，这就意味着。每解码出一个对象，后续都会为其使用handler进行一次处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Byte2IntegerDecoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ByteToMessageDecoder</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx , ByteBuf in, List&lt;Object&gt; out)</span>&#123;<br><span class="hljs-keyword">while</span> (in.readableBytes()&gt;=<span class="hljs-number">4</span>)&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> in.readInt();<br>Logger.info(<span class="hljs-string">&quot;解码出一个整数:&quot;</span> + i);<br>out.add(i);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerProcessHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx,Object msg)</span>... &#123;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> (Integer) msg ;<br>Logger.info(<span class="hljs-string">&quot;打印出一个整数: &quot;</span> + integer);<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Byte2IntegerDecoderTester</span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testByteToIntegerDecoder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ChannelInitializer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;EmbeddedChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(EmbeddedChannel ch)</span>&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Byte2IntegerDecoder</span>());<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntegerProcessHandler</span>());<br>&#125;<br>&#125;;<br><span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>(i);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; j&lt; <span class="hljs-number">100</span> ; j++)&#123;<br><span class="hljs-type">Bytebuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> Unpooled.buffer();<br>buf.writeInt(j);<br>channel.writeInbound(buf);<br>&#125;<br>...<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ReplayingDecoder解码器"><a href="#ReplayingDecoder解码器" class="headerlink" title="ReplayingDecoder解码器"></a>ReplayingDecoder解码器</h2><p>通过继承ReplayingDecoder , 传入的对象不再需要判断整个对象的长度。</p><p>而当长度不足时，会抛出异常被ReplayingDecoder接收，等待后续的数据传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Byte2IntegerReplayDecoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReplayingDecoder</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx, Bytebuf in , List&lt;Object&gt; out)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> in.readInt();<br>Logger.info(<span class="hljs-string">&quot;解码出一个整数&quot;</span> + i);<br>out.add(i) ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="整数的分包解码"><a href="#整数的分包解码" class="headerlink" title="整数的分包解码"></a>整数的分包解码</h2><p>通过使用枚举类定义状态信息，将handler 状态初始化为PHASE_1</p><p>后续流程执行 ：</p><p>1.当第一次处理时 状态为PHASE_1 ，读取并将第一个整数存储在handler , 并将状态置为PHASE_2</p><p>2.当后续读取就绪时，状态为PHASE_2，执行PHASE_2逻辑，进行求和运算。向后续handler中发送最终结果。并将状态置为PHASE_1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerAddDecoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Replaying</span>&lt;IntegerAddDecoder.PHASE&gt;&#123;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">PHASE</span> &#123;<br>PHASE_1,<br>PHASE_2<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> first ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> second ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">IntegerAddDecoder</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">super</span>(PHASE.PHASE_1);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx , Bytebuf in ,List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-keyword">switch</span> (state())<br>&#123;<br><span class="hljs-keyword">case</span> PHASE_1 :<br>first = in.readInt();<br>checkpoint(PHASE.PHASE_2);<br><span class="hljs-keyword">break</span> ;<br><br><span class="hljs-keyword">case</span> PHASE_2 :<br>second = in.readInt();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> first + second ;<br>out.add(sum);<br>checkpoint(PHASE.PHASE_1);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span> :<br><span class="hljs-keyword">break</span> ;<br>&#125; <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符的分包解码"><a href="#字符的分包解码" class="headerlink" title="字符的分包解码"></a>字符的分包解码</h2><p>和 对数值计算时的处理类似，在第一阶段先接收了一个整型 用于描述后续传入的字符串长度，在第二阶段则从传入数据中读取对应的长度解码为字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringReplayDecoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReplayingDecoder</span>&lt;StringReplayDecoder.PHASE&gt;&#123;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">PHASE</span> &#123;<br>PHASE_1 ,<br>PHASE_2 <br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> length ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] inBytes ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">StringReplayDecoder</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">super</span>(PHASE.PHASE_1)<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx , Bytebuf in , List&lt;Object&gt; out )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">switch</span>(state())&#123;<br><span class="hljs-keyword">case</span> PHASE_1 :<br>length = in.readInt();<br>inBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[length];<br>checkpoint(PHASE.PHASE_2);<br><span class="hljs-keyword">break</span> ;<br><span class="hljs-keyword">case</span> PHASE_2 :<br>in.readBytes(inBytes , <span class="hljs-number">0</span> ,length);<br>out.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(inBytes, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>checkpoint(PHASE.PHASE_1);<br><span class="hljs-keyword">break</span> ;<br><span class="hljs-keyword">default</span> :<br><span class="hljs-keyword">break</span> ;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者使用 ByteToMessageDecoder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringIntegerHeaderDecoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ByteToMessageDecoder</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext , Bytebuf buf , List&lt;Object&gt; out)</span>...&#123;<br><span class="hljs-keyword">if</span>(buf.readableBytes()&lt;<span class="hljs-number">4</span>)&#123;<br><span class="hljs-keyword">return</span>; <br>&#125;<br>buf.markReaderIndex();<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> buf.readInt();<br><span class="hljs-keyword">if</span>(buf.readableBytes() &lt; length)&#123;<br>buf.resetReaderIndex();<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">byte</span>[] inBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[length];<br>buf.readBytes(inBytes , <span class="hljs-number">0</span> , length);<br>out.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(inBytes , <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MessageToMessageDecoder"><a href="#MessageToMessageDecoder" class="headerlink" title="MessageToMessageDecoder"></a>MessageToMessageDecoder</h2><p>通过继承MessageToMessageDecoder 可以完成POJO对象间的 解码转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer2StringDecoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessageToMessageDecoder</span>&lt;Integer&gt; &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx , Integer msg , List&lt;Object&gt; out)</span>...&#123;<br>out.add(String.valueOf(msg));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内置解码器"><a href="#内置解码器" class="headerlink" title="内置解码器"></a>内置解码器</h2><p>FixedLengthFrameDecoder  固定长度数据解码器  对固定长度的数据进行解码</p><p>LineBasedFrameDecoder      行分割数据包解码器  将换行符作为边界分隔符</p><p>DelimiterBasedFrameDecoder  可以自定义分隔符 用于作为边界</p><p>LengthFieldBasedFrameDecoder 自定义长度数据包解码器 根据原数据包中的数据长度进行解码提取</p><h3 id="行分割数据包解码器"><a href="#行分割数据包解码器" class="headerlink" title="行分割数据包解码器"></a>行分割数据包解码器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyOpenBoxDecoder</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">spliter</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\r\\n&quot;</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;string&quot;</span>;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLineBasedFrameDecoder</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ChannelInitializer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;EmbeddedChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(EmbeddedChannel ch)</span>&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LineBasedFrameDecoder</span>(<span class="hljs-number">1024</span>));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>());<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringProcessHandler</span>());<br>&#125;<br>&#125;;<br><span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>(i);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; j &lt; <span class="hljs-number">100</span> ; j++)&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> RandomUtil.randInMod(<span class="hljs-number">3</span>);<br> <span class="hljs-type">Bytebuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> Unpooled.buffer();<br> <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; k &lt; random ; k++)&#123;<br> buf.writeBytes(content.getBytes(<span class="hljs-string">&quot;UTF=8&quot;</span>));<br> &#125;<br>buf.writeBytes(spliter.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>channel.writeInbound(buf);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DelimiterBasedFrameDecoder"><a href="#DelimiterBasedFrameDecoder" class="headerlink" title="DelimiterBasedFrameDecoder"></a>DelimiterBasedFrameDecoder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyOpenBoxDecoder</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">spliter</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\t&quot;</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;string&quot;</span>;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelimiterBasedFrameDecoder</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">Bytebuf</span> <span class="hljs-variable">delimiter</span> <span class="hljs-operator">=</span> Unpooled.copiedBuffer(spliter.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br><span class="hljs-type">ChannelInitializer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;EmbeddedChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(EmbeddedChannel ch)</span>&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelimiterBasedFrameDecoder</span>(<span class="hljs-number">1024</span>,<span class="hljs-literal">true</span>,delimiter));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>());<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringProcessHandler</span>());<br>&#125;<br>&#125;;<br>...<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LengthFieldBasedFrameDecoder"><a href="#LengthFieldBasedFrameDecoder" class="headerlink" title="LengthFieldBasedFrameDecoder"></a>LengthFieldBasedFrameDecoder</h3><p>LengthFieldBasedFrameDecoder 需要初始化的值</p><ol><li>maxFrameLength 发送的数据包最大长度</li><li>lengFieldOffset 长度字段偏移量</li><li>lengthFieldLength 长度字段所占字节数</li><li>lengthAdjustment 长度的调整值 即在长度 和 实际消息体中间定义的字段长度</li><li>initialBytesToStrip 丢弃的初始字节数</li></ol><p>通过上述初始化字段的声明</p><p>我们得到了 1.包的最大长度 2.长度字段在协议中定义的位置 3.长度字段的长度 4.长度字段后其余字段所占用的长度  5.读取消息体的实际位置。</p><p>于是我们可以发现LengthFieldBasedFrameDecoder  最终得到的是一个 长度信息的位置和消息体的实际长度信息。这样便于更好的用于接收和处理实际的消息体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyOpenBoxDecoder</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">VERSION</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;String&quot;</span>;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLengthFieldBasedFrameDecoder</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">LengthFieldBasedFrameDecoder</span> <span class="hljs-variable">spliter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldBasedFrameDecoder</span>(<span class="hljs-number">1024</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br><span class="hljs-type">ChannelInitializer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;EmbeddedChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(EmbeddedChannel ch)</span>&#123;<br>ch.pipeline().addLast(spliter);<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>(Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>)));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringProcessHandler</span>());<br>&#125;<br>&#125;;<br><span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">Channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ; j &lt;= <span class="hljs-number">100</span> ; j++)&#123;<br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> Unpooled.buffer();<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> j + <span class="hljs-string">&quot;次发送-&gt;&quot;</span> + content;<br><span class="hljs-type">byte</span>[] bytes = s.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>buf.writeInt(Bytes.length);<br>buf.writeBytes(bytes);<br>channel.writeInbound(buf);<br>&#125;<br>Thread.sleep(Integer.MAX_VALUE);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h1><h3 id="MessageToByteEncoder"><a href="#MessageToByteEncoder" class="headerlink" title="MessageToByteEncoder"></a>MessageToByteEncoder</h3><p>将类型对象转换为字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer2ByteEncoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessageToByteEncoder</span>&lt;Integer&gt;&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(ChannelHandlerContext ctx , Integer msg , ByteBuf out)</span> ... &#123;<br>out.writeInt(msg);<br>Logger.info(<span class="hljs-string">&quot;encoder Integer = &quot;</span> + msg);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MessageToMessageEncoder"><a href="#MessageToMessageEncoder" class="headerlink" title="MessageToMessageEncoder"></a>MessageToMessageEncoder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String2IntergerEncoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessageToMessageEncoder</span>&lt;String&gt; &#123;<br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(ChannelHandlerContext c ,String s , List&lt;Object&gt; list)</span>...&#123;<br><span class="hljs-type">char</span>[] array = s.toCharArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> a : array)&#123;<br><span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">48</span> &amp;&amp; a &lt;= <span class="hljs-number">57</span>)&#123;<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(a));<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编解码结合"><a href="#编解码结合" class="headerlink" title="编解码结合"></a>编解码结合</h2><p>通过继承ByteToMessageCodec 重写 encode 和decode 方法完成对编解码的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Byte2IntegerCodec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ByteToMessageCodec</span>&lt;Integer&gt;&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(ChannelHandlerContext ctx , Integer msg , ByteBuf out)</span>... &#123;<br>out.writeInt(msg);<br>System.out.println(<span class="hljs-string">&quot;write Integer = &quot;</span> + msg);<br><br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx , ByteBuf in , List&lt;Object&gt; out)</span>&#123;<br><span class="hljs-keyword">if</span>(in.readableBytes() &gt;= <span class="hljs-number">4</span>)&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> in.readInt();<br>System.out.println(<span class="hljs-string">&quot;Decoder i = &quot;</span>+i);<br>out.add(i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用组合其基类 组合定义好的 编码器和解码器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerDuplexHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CombinedChannelDuplexHandler</span>&lt;Byte2IntegerDecoder,Integer2ByteEncoder&gt;&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">IntegerDuplexHandler</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">super</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Byte2IntegerDecoder</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer2ByteEncoder</span>());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h1><h2 id="包处理"><a href="#包处理" class="headerlink" title="包处理"></a>包处理</h2><p>因为TCP被设计为面向连接的流式传输。通过缓冲区来进行包的数据接收和发送。所以在传输过程中，无法通过类似UDP的包收发过程来确定包的完整型。而需要应用层的实现来保证包的完整性。</p><h2 id="粘包和半包"><a href="#粘包和半包" class="headerlink" title="粘包和半包"></a>粘包和半包</h2><p>粘包 ： 接收端接收了一个Bytebuf，包含了发送端的多个ByteBuf,发送端的多个Bytebuf在接收端粘在了一起</p><p>半包 ： Recevier将Sender的一个Bytebuf拆开了收，收到多个破碎的包，Receiver收到了Sender的一个Bytebuf的一小部分</p><p>所以要保证包的完整性，需要用到序列化传输。即通过一些格式化的标记来确定包中字段的范围，逻辑，引用关系。这样在收到包后可以根据已经定义好的规则，将字节数据转换为格式化数据进行处理</p><p>常用到的方法包括</p><p>自定义的解码器</p><p>通过在收发两端定义确定的包长字段和消息体信息，在解码端通过读取包长字段，接受对应长度的消息体。</p><p>序列化结构</p><p>Json</p><p>Protobuf</p><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonMsg</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id ;<br><span class="hljs-keyword">private</span> String content ;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">convertToJson</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> JsonUtil.PojoToJson(<span class="hljs-built_in">this</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JsonMsg <span class="hljs-title function_">parseFromJson</span><span class="hljs-params">(String json)</span>&#123;<br><span class="hljs-keyword">return</span> JsonUtil.jsonToPoJo(json,JsonMsg.class);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构建json对象，编解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonMsgDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonMsgDemo</span>&#123;<br><span class="hljs-type">JsonMsg</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonMsg</span>();<br>user.setId(<span class="hljs-number">1000</span>);<br>user.setContent(<span class="hljs-string">&quot;Something&quot;</span>);<br><span class="hljs-keyword">return</span> user ;<br>&#125;<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAndDesr</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">JsonMsg</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> buildMsg();<br><span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> message.convertToJson();<br>Logger.info(<span class="hljs-string">&quot;json:=&quot;</span> + json);<br><span class="hljs-type">JsonMsg</span> <span class="hljs-variable">inMsg</span> <span class="hljs-operator">=</span> JsonMsg.parseFromJson(json);<br>Logger.info(<span class="hljs-string">&quot;id=&quot;</span> + inMsg.getId());<br>Logger.info(<span class="hljs-string">&quot;content:=&quot;</span> + inMsg.getContent());<br>&#125;<br></code></pre></td></tr></table></figure><p>json的解析步骤仍然是 Head-Content → 将字节码转换为字符串 → 将字符串转换为序列化对象 → 提取对应的值。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonServer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runServer</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-keyword">try</span> &#123;<br>...<br>b.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;Socket Channel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span>&#123;<br>  ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldBasedFrameDecoder</span>(<span class="hljs-number">1024</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>(CharsetUtil.UTF_8));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonMsgDecoder</span>());<br>&#125;<br>&#125;);<br>&#125;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageDecodeer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span>...&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span>(String)msg;<br><span class="hljs-type">JsonMsg</span> <span class="hljs-variable">jsonMsg</span> <span class="hljs-operator">=</span> JsonMsg.parseFromJson(json);<br>Logger.info(<span class="hljs-string">&quot;收到一个数据包&quot;</span> + jsonMsg);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> NettyDemoConfig.SOCKET_SERVER_PORT ;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonServer</span>(port).runServer();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonSendClient</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Something&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runClient</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-keyword">try</span> &#123;<br>...<br>b.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span>... &#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldPrepender</span>(<span class="hljs-number">4</span>));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>(CharsetUtil.UTF_8));<br>&#125;<br>&#125;);<br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> b.connect();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">1000</span> ; i++)&#123;<br><span class="hljs-type">JsonMsg</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> build(i, i+ <span class="hljs-string">&quot;-&gt;&quot;</span> + content);<br>channel.writeAndFlush(user.convertToJson());<br>Logger.info(<span class="hljs-string">&quot;发送报文： &quot;</span>+ user.convertToJson());<br>&#125;<br>channel.flush();<br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">closeFuture</span> <span class="hljs-operator">=</span> channel.closeFuture();<br>closeFuture.sync();<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br> ...<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> JsonMsg <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String content)</span>&#123;<br><span class="hljs-type">JsonMsg</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonMsg</span>();<br>user.setId(id);<br>user.setContent(content);<br><span class="hljs-keyword">return</span> user ;<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h1><p>格式定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 格式定义</span><br><span class="hljs-comment">// [开始头部声明]</span><br>syntax = <span class="hljs-string">&quot;proto3&quot;</span>,<br><span class="hljs-comment">// [头部声明结束]</span><br><br><span class="hljs-comment">// [开始Java选项配置]</span><br><span class="hljs-type">option</span> <span class="hljs-variable">java_package</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.codfish.netty.protocol&quot;</span>;<br><span class="hljs-type">option</span> <span class="hljs-variable">java_outer_classname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MsgProtos&quot;</span>;<br><span class="hljs-comment">// [Java选项配置结束]</span><br><br><span class="hljs-comment">// [开始消息定义]</span><br>message Msg &#123;<br><span class="hljs-type">uint32</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;<br><span class="hljs-type">string</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ;<br>&#125;<br><span class="hljs-comment">// [消息定义结束]</span><br></code></pre></td></tr></table></figure><p>通过上述定义格式 定义出对应的.protobuf文件，再通过向maven中安装插件，在执行过程中将所有的protobuf文件，作为POJO类加载到虚拟机中，允许对其调用。</p><h2 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h2><p>1 .使用toByteArray() 方法将对象转换为字节码数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProtobufDemo</span> &#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serAndDesr1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>MsgProtos.<span class="hljs-type">Msg</span> <span class="hljs-variable">messages</span> <span class="hljs-operator">=</span> buildMsg();<br><span class="hljs-type">byte</span>[] data = message.toByteArray();<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>outputStream.write(data);<br>data = outputStream.toByteArray();<br>MsgProtos.<span class="hljs-type">Msg</span> <span class="hljs-variable">inMsg</span> <span class="hljs-operator">=</span> MsgProtos.Msg.parseFrom(data);<br>Logger.info(<span class="hljs-string">&quot;id:= &quot;</span> + inMsg.getId());<br>Logger.info(<span class="hljs-string">&quot;content:= &quot;</span> + inMsg.getContent());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>使用方法将POJO对象读出&#x2F;写入 IO流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProtobufDemo</span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serAndDesr2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>MsgProtos.<span class="hljs-type">Msg</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> buildMsg();<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>message.writeTo(outputStream);<br><span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(outputStream.toByteArray());<br>MsgProtos.<span class="hljs-type">Msg</span> <span class="hljs-variable">inMsg</span> <span class="hljs-operator">=</span> MsgProtos.Msg.parseFrom(inputStream);<br>Logger.info(<span class="hljs-string">&quot;id:= &quot;</span> + inMsg.getId());<br>Logger.info(<span class="hljs-string">&quot;content:=&quot;</span> + inMsg.getContent());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>使用writeDelimitedTo(OutputStream) 向输出种加入 字节数组长度字段</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProtobufDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serAndDesr3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>MsgProtos.<span class="hljs-type">Msg</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> buildMsg();<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>message.writeDelimitedTo(outputStream) ;<br><span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(outputStream.toByteArray());<br>MsgProtos.<span class="hljs-type">Msg</span> <span class="hljs-variable">inMsg</span> <span class="hljs-operator">=</span> MsgProtos.Msg.parseDelimited(inputStream);<br>Logger.info(<span class="hljs-string">&quot;id:=&quot;</span> + inMsg.getId());<br>Logger.info(<span class="hljs-string">&quot;content:=&quot;</span> + inMsg.getContent());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Protobuf-解码器"><a href="#Protobuf-解码器" class="headerlink" title="Protobuf 解码器"></a>Protobuf 解码器</h2><ol><li>ProtobufDecoder 和 ProtobufEncoder 编解码器 提供 字节数组到字符数组的转换过程</li><li>ProtobufVarint32LengthFieldPrepender 长度编码器 ，前置一个数组长度值，在编码完成后填充</li><li>ProtobufVarint32FrameDecoder 长度解码器</li></ol><h2 id="基于protobuf的-C-S-架构案例"><a href="#基于protobuf的-C-S-架构案例" class="headerlink" title="基于protobuf的 C-S 架构案例"></a>基于protobuf的 C-S 架构案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProtoBufserver</span>&#123;<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>() ;<br><span class="hljs-keyword">try</span> &#123;<br>b.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span>&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtobufVarint32FrameDecoder</span>());<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtobufDecoder</span>(MsgProtos.Msg.getDefaultInstance()));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtobufBussinessDecoder</span>());<br>&#125;<br>&#125;);<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProtobufBussinessDecoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx , Object msg )</span>...&#123;<br>MsgProtos.<span class="hljs-type">Msg</span> <span class="hljs-variable">protoMsg</span> <span class="hljs-operator">=</span> (MsgProtos.Msg)msg ;<br>Logger.info(<span class="hljs-string">&quot;收到一个protobuf&quot;</span>) ;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProtoBufSendClient</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Something&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runClient</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">// ..</span><br>b.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span>...&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtobufVarint32LengthFieldPrepender</span>());<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtobufEncoder</span>());<br>&#125;);<br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> b.connect();<br>f.sync();<br><span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> f.channel();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">1000</span> ; i ++ )&#123;<br>MsgProtos.<span class="hljs-type">Msg</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> build(i, i + <span class="hljs-string">&quot;-&gt;&quot;</span> + content);<br>channel.writeAndFlush(user);<br>Logger.info(<span class="hljs-string">&quot;发送报文数：&quot;</span> + i);<br>&#125;<br>channel.flush();<br>&#125;<br><span class="hljs-keyword">public</span> MsgProtos.Msg <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> id ,String content )</span>&#123;<br>MsgProtos.Msg.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> MsgProtos.Msg.newBuilder();<br>builder.setId(id);<br>builder.setContent(content);<br><span class="hljs-keyword">return</span> builder.build();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> NettyDemoConfig.SOCKET_SERVER_PORT;<br><span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> NettyDemoConfig.SOCKET_SERVER_IP;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtoBufSendClient</span>(ip,port).runClient();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 VIII Netty</title>
    <link href="/2025/05/08/Java%E7%BC%96%E7%A8%8B-VIII-Netty/"/>
    <url>/2025/05/08/Java%E7%BC%96%E7%A8%8B-VIII-Netty/</url>
    
    <content type="html"><![CDATA[<h1 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h1><p>Reactor 线程 ： 负责响应IO 事件，并分发到Handlers处理器</p><p>Handlers 处理器 ： 非阻塞的执行业务处理逻辑</p><h2 id="Connection-Per-Thread-模式"><a href="#Connection-Per-Thread-模式" class="headerlink" title="Connection Per Thread 模式"></a>Connection Per Thread 模式</h2><p>每当收到一个socket请求。为对应请求单独创建一个线程来进行 数据的收发处理。</p><p>在高并发场景下，会创造出大量的线程， 线程的创建，销毁，切换会消耗大量资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionPerThread</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(NioDemoConfig.SOCKET_SERVER_PORT);<br><span class="hljs-keyword">while</span>(!Thread.interrupted())&#123;<br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(socket);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(handler).start();<br>&#125;<br><br>&#125;<span class="hljs-keyword">catch</span>(IOException ex) &#123;<br>   ...<br>&#125;<br>  <br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">final</span> Socket socket ;<br>Handler(Socket s )&#123;<br>socket = s ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">byte</span>[]  input = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>socket.getInputStream().read(input);<br> <span class="hljs-type">byte</span>[]  output = <span class="hljs-literal">null</span>;<br> socket.getOutputStream().write(output)<br>&#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>...<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单线程Reactor"><a href="#单线程Reactor" class="headerlink" title="单线程Reactor"></a>单线程Reactor</h2><p>将Reactor 与 Handlers 放入同一个线程中</p><p>void attach(Object o)</p><p>将对象附加到选择键</p><p>Object attachment()</p><p>从选择键中取出对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoServerReactor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>Selector selector ;<br>ServerSocketChannel serverSocket ;<br>EchoServerReactor() <span class="hljs-keyword">throws</span> IOException&#123;<br><span class="hljs-comment">// ... 打开选择器，serverSocket 连接监听通道</span><br><span class="hljs-comment">// 注册serverSocket的accept 监听事件</span><br><span class="hljs-type">SelectionKey</span> <span class="hljs-variable">sk</span> <span class="hljs-operator">=</span> serverSocket.register(selector,SelectionKey.OP_ACCEPT);<br>sk.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AcceptorHandler</span>());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 选择器轮询</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">while</span>(!Thread.interrupted())&#123;<br>selector.select();<br><span class="hljs-type">Set</span> <span class="hljs-variable">selected</span> <span class="hljs-operator">=</span> selector.selectedKeys();<br><span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> selected.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><span class="hljs-type">SelectionKey</span> <span class="hljs-variable">sk</span> <span class="hljs-operator">=</span> it.next();<br>dispatch(sk);<br>&#125;<br>selected.clear();<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(IOException ex) &#123; ex.printStackTrace();&#125;<br>&#125;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatch</span><span class="hljs-params">(SelectionKey k)</span>&#123;<br><span class="hljs-type">Runnable</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (Runnable)(k.attachment());<br><span class="hljs-keyword">if</span>(handler != <span class="hljs-literal">null</span>)&#123;<br>handler.run()<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AcceptorHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><span class="hljs-keyword">if</span> (channel != <span class="hljs-literal">null</span>) <span class="hljs-keyword">new</span> <span class="hljs-title class_">EchoHandler</span>(selector,channel);<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>单线程Reactor 的实现逻辑是， 定义了监听器selector 和通道，先注册一个ACCEPT事件放入Selector中，当监听到有socket连接请求后，触发其所附带的程序来创建新的channel 用于处理新的连接请求，并将该通道同样加入到selector中，这样在后续的select() 阻塞中 即可以继续监听OP_ACCEPT请求创建新的读取通道，也可以监听读取通道的就绪状态，来读取数据</p><p>Reactor :   监听ACCEPT事件的处理程序</p><p>Handlers :   触发ACCEPT事件后新创建的用于处理OP_READ的处理程序</p><p>缺点 ： 当某个Handlers阻塞后，会导致的所有的Handler都被阻塞，甚至影响OP_ACCEPT的监听</p><h2 id="多线程Reactor"><a href="#多线程Reactor" class="headerlink" title="多线程Reactor"></a>多线程Reactor</h2><p>将 Handlers 与Reactor 线程隔离， 减少Handlers阻塞时，对OP_ACCEPT处理的影响</p><p>创建子反应器充分利用多核心资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiThreadEchoServerReactor</span>&#123;<br>ServerSocketChannel serverSocket ;<br><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br>Selector[] selectors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Selector</span>[<span class="hljs-number">2</span>];<br>SubReactor[] subReactors = <span class="hljs-literal">null</span> ;<br>MultiThreadEchoServerReactor() <span class="hljs-keyword">throws</span> IOException &#123;<br>selectors[<span class="hljs-number">0</span>] = Selector.open();<br>selectors[<span class="hljs-number">1</span>] = Selector.open();<br>serverSocket = ServerSocketChannel.open();<br><span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">18899</span>);<br>serverSocket.socket().bind(address);<br>serverSocket.configureBlocking(<span class="hljs-literal">false</span>);<br><span class="hljs-type">SelectionKey</span> <span class="hljs-variable">sk</span> <span class="hljs-operator">=</span> serverSocket.register(selectors[<span class="hljs-number">0</span>],OP_ACCEPT);<br>sk.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AcceptorHandler</span>());<br><span class="hljs-type">SubReactor</span> <span class="hljs-variable">subReactor1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubReactor</span>(selectors[<span class="hljs-number">0</span>]);<br><span class="hljs-type">SubReactor</span> <span class="hljs-variable">subReactor2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubReactor</span>(selectors[<span class="hljs-number">1</span>]);<br>subReactors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubReactor</span>[]&#123;subReactor1,subReactor2&#125;;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startService</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(subReactors[<span class="hljs-number">0</span>].start());<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(subReactors[<span class="hljs-number">1</span>].start());<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubReactor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">final</span> Selector selector ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SubReactor</span><span class="hljs-params">(Selector selector)</span>&#123;<br><span class="hljs-built_in">this</span>.selector  = selector ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">while</span> (! Thread.interrupted())&#123;<br>selector.select();<br>Set&lt;SelectionKey&gt; keySet = selector.selectedKeys();<br>Iterator&lt;SelectionKey&gt; it = keySet.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><span class="hljs-type">SelectionKey</span> <span class="hljs-variable">sk</span> <span class="hljs-operator">=</span> it.next();<br>dispatch(sk);<br>&#125; <br>keySet.clear();<br>&#125;<br>            &#125;<span class="hljs-keyword">catch</span>(IOException e)&#123;<br>ex.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-keyword">void</span>  <span class="hljs-title function_">dispatch</span><span class="hljs-params">(SelectionKey sk)</span>&#123;<br><span class="hljs-type">Runnable</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (Runnable)sk.attachment();<br><span class="hljs-keyword">if</span>(handler != <span class="hljs-literal">null</span>)&#123;<br>handler.run();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AcceptorHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">SocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><span class="hljs-keyword">if</span> (channel != <span class="hljs-literal">null</span>) <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultiThreadEchoHandler</span>(selectors[<span class="hljs-number">1</span>],channel);<br>&#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args )</span> <span class="hljs-keyword">throws</span> IOException&#123;<br><span class="hljs-type">MultiThreadEchoServerReactor</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultiThreadEchoServerReactor</span>();<br>server.startService();<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><p>Netty 是一个基于Java NIO库的高性能网络框架</p><p>Netty中提供了一个 集成器 ServerBootstrap 用于对整个执行过程进行配置。</p><p>通过创建EventLoopGroup 组 来创建不同的reactor 和 handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyDiscardServer</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> serverPort ;<br><span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">NettyDiscardServer</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> &#123;<br><span class="hljs-built_in">this</span>.serverPort = port ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runServer</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-keyword">try</span> &#123;<br>b.group(bossLoopGroup , workerLoopGroup);<br>b.channel(NioServerSocketChannel.class);<br>b.localAddress(serverPort);<br>b.option(ChannelOption.SO_KEEPALIVE, <span class="hljs-literal">true</span>);<br>b.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span> <span class="hljs-params">(SocketChannel ch)</span>&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyDiscardHandler</span>());<br>&#125;<br>&#125;);<br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> b.bind().sync();<br>Logger.info(<span class="hljs-string">&quot;服务器启动&quot;</span>);<br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">closeFuture</span> <span class="hljs-operator">=</span> channelFuture.channel().closeFuture();<br>closeFuture.sync();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>workerLoopGroup.shutdownGracefully();<br>bossLoopGroup.shutdownGracefully();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span>NettyDemoConfig.SOCKET_SERVER_PORT;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyDiscardServer</span>(port).runServer();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Netty中根据不同的协议定义了不同协议类型channel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">NioSocketChannel  异步非阻塞TCP Socket 通道<br>NioServerSocketChannel  异步非阻塞TCP Socket 服务端监听通道<br>NioDatagramChannel  异步非阻塞 UDP 传输通道<br>NioSctpChannel 异步非阻塞 Sctp 传输通道<br>NioSctpServerChannel 异步非阻塞 Sctp 服务端监听通道<br>OioSocketChannel  同步非阻塞TCP Socket 通道<br>OioServerSocketChannel  同步非阻塞TCP Socket 服务端监听通道<br>OioDatagramChannel  同步非阻塞 UDP 传输通道<br>OioSctpChannel 同步非阻塞 Sctp 传输通道<br>OioSctpServerChannel 同步非阻塞 Sctp 服务端监听通道<br></code></pre></td></tr></table></figure><h2 id="Netty中的-Reactor"><a href="#Netty中的-Reactor" class="headerlink" title="Netty中的 Reactor"></a>Netty中的 Reactor</h2><p>Netty 反应器中装载了两个属性</p><p>SingleThreadEventExecutor (Thread) 用于 具体的 通道处理</p><p>NioEventLoop (Selector) 用于监听注册到该选择器中的 通道就绪状态</p><p>一个EventLoop 可以注册多个通道</p><h2 id="Netty中的-Handler"><a href="#Netty中的-Handler" class="headerlink" title="Netty中的 Handler"></a>Netty中的 Handler</h2><p>Netty中的Handler 包含 ChannelInboundHandler 和 ChannelOutboundHandler</p><p>ChannelInboundHandler   通过 实现 ChannelInboundHandlerAdapter 来完成，用于处理接收到OP_READ 事件</p><p>ChannelOutboundHandler   通过 实现 ChannelOutboundHandlerAdapter 来完成，用于处理接收到OP_WRITE 事件</p><h2 id="Netty中的pipeline"><a href="#Netty中的pipeline" class="headerlink" title="Netty中的pipeline"></a>Netty中的pipeline</h2><p>Netty 的每个通道都配有一个 ChannelPipeline，可以串联多个 Handler，形成链式处理结构。</p><p>其定义了一个ChannelPipeLine 类，其是一个双向链表，支持 ：</p><ol><li>在执行完某个handler 后，后续仍存在其他处理器，交由后续处理器继续执行</li><li>当后续没有其他处理器后，IO事件处理完成</li><li>当需要在某个处理器中中止处理，可以将流水线终止执行</li></ol><p>入站 IO 事件只能交由Inbound 处理器处理 （由前往后）</p><p>出站 IO 事件只能交由Outbound 处理器处理 （由后往前）</p><h2 id="引导类-Bootstrap"><a href="#引导类-Bootstrap" class="headerlink" title="引导类 Bootstrap"></a>引导类 Bootstrap</h2><p>Netty提供了引导类 来帮助完成 client 和server 端的连接配置</p><h2 id="父子通道"><a href="#父子通道" class="headerlink" title="父子通道"></a>父子通道</h2><p>NioServerSocketChannel 用于进行 连接监听</p><p>NioSocketChannel 用于进行 数据处理</p><p>对于Netty来说 负责连接监听的叫做父通道，而在连接建立后进行数据处理的通道被称为子通道</p><h2 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h2><p>Netty 中的Selector 实现是多线程版本的</p><p>每一个EventLoop 相当于一个子反应器</p><p>而 通过EventLoopGroup 可以创建一个 子反应器组，创建多个线程和多个反应器（一 一对应）来进行IO事件的查询，处理，分发。</p><h2 id="Bootstrap启动与配置"><a href="#Bootstrap启动与配置" class="headerlink" title="Bootstrap启动与配置"></a>Bootstrap启动与配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();  <span class="hljs-comment">// 创建引导类</span><br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>) ; <span class="hljs-comment">// boss 轮询组 监听连接请求</span><br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(); <span class="hljs-comment">// worker 轮询组 处理具体业务</span><br>b.group(bossLoopGroup,workLoopGroup);  <span class="hljs-comment">// 将 组加入引导类配置</span><br>b.channel(NioServerSocketChannel.class);  <span class="hljs-comment">// 设置通道IO类型</span><br>b.localAddress(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(port)); <span class="hljs-comment">// 设置监听端口</span><br>b.option(ChannelOption.SO_KEEPALIVE, <span class="hljs-literal">true</span>);  <span class="hljs-comment">// 配置通道选项， 这里设置保活为true</span><br>b.option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);  <span class="hljs-comment">//</span><br>b.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> &#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyDiscardHandler</span>());  <br>&#125;<br>&#125;)<br><br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> b.bind().sync();  <span class="hljs-comment">// 绑定到异步任务</span><br>Loggger.info(<span class="hljs-string">&quot;服务器启动成功&quot;</span>);   <br><br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">closeFuture</span> <span class="hljs-operator">=</span> ChannelFuture.channel().closeFuture();<br>closeFuture.sync();          <span class="hljs-comment">// 自我阻塞</span><br><br>workLoopGroup.shutdownGracefully();<br>bossLoopGroup.shutdownGracefully();<br><br></code></pre></td></tr></table></figure><h2 id="ChannelOption"><a href="#ChannelOption" class="headerlink" title="ChannelOption"></a>ChannelOption</h2><h3 id="SO-RCVBUF-SO-SNDBUF"><a href="#SO-RCVBUF-SO-SNDBUF" class="headerlink" title="SO_RCVBUF &#x2F; SO_SNDBUF"></a>SO_RCVBUF &#x2F; SO_SNDBUF</h3><p>设置收发缓冲区大小</p><h3 id="TCP-NODELAY"><a href="#TCP-NODELAY" class="headerlink" title="TCP_NODELAY"></a>TCP_NODELAY</h3><p>即时发送数据</p><h3 id="SO-KEEPALIVE"><a href="#SO-KEEPALIVE" class="headerlink" title="SO_KEEPALIVE"></a>SO_KEEPALIVE</h3><p>保活</p><h3 id="SO-REUSEADDR"><a href="#SO-REUSEADDR" class="headerlink" title="SO_REUSEADDR"></a>SO_REUSEADDR</h3><p>复用地址</p><h3 id="SO-LINGER"><a href="#SO-LINGER" class="headerlink" title="SO_LINGER"></a>SO_LINGER</h3><h3 id="SO-BACKLOG"><a href="#SO-BACKLOG" class="headerlink" title="SO_BACKLOG"></a>SO_BACKLOG</h3><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">ChannelFuture <span class="hljs-title function_">connect</span><span class="hljs-params">(SocketAddress address)</span><br><span class="hljs-comment">// 连接远程服务器</span><br>ChannelFuture <span class="hljs-title function_">bind</span><span class="hljs-params">(SocketAddress address)</span><br><span class="hljs-comment">// 绑定监听地址</span><br>ChannelFuture <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <br><span class="hljs-comment">// 关闭通道</span><br>Channel <span class="hljs-title function_">read</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 读取通道数据</span><br>Channel <span class="hljs-title function_">write</span><span class="hljs-params">(Object o)</span><br><span class="hljs-comment">// 写入通道数据</span><br>Channel <span class="hljs-title function_">flush</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 立即将数据写入对端 </span><br></code></pre></td></tr></table></figure><h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">ChannelInboundHandler  <span class="hljs-comment">// 入站处理器</span><br>channelRegistered()<br><span class="hljs-comment">// 将通道注册到通道流水线中</span><br>channelActive()<br><span class="hljs-comment">// 激活通道</span><br>channelRead();<br><span class="hljs-comment">// 回调进行数据读取</span><br>channelReadComplete()<br><span class="hljs-comment">// 通知缓冲区读取完成</span><br>channelInactive()<br><span class="hljs-comment">// 连接断开或不可用</span><br>exceptionCaught()<br><span class="hljs-comment">// 异常捕获</span><br><br>ChannelOutboundHandler<br><span class="hljs-title function_">bind</span><span class="hljs-params">()</span> <span class="hljs-comment">// 监听地址绑定</span><br>connect() <span class="hljs-comment">// 连接服务端</span><br>write() <span class="hljs-comment">// 通知底层IO写入</span><br>flush() <span class="hljs-comment">// 清空底层缓存区，立即写出到对端</span><br>disConnect() <span class="hljs-comment">// 断开连接</span><br>close() <span class="hljs-comment">// 关闭底层通道</span><br><br></code></pre></td></tr></table></figure><h2 id="ChannelInitializer"><a href="#ChannelInitializer" class="headerlink" title="ChannelInitializer"></a>ChannelInitializer</h2><p>通过抽象接口完成 将 新的handler插入的 pipeline 的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">b.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span>&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyDiscardHandler</span>())<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p>pipeline的入栈处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InPipeline</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleInHandlerA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span>... &#123;<br>Logger.info(<span class="hljs-string">&quot;入站处理A,被回调&quot;</span>);<br><span class="hljs-built_in">super</span>.channelRead(ctx,msg);<br>&#125;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleInHandlerB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span>... &#123;<br>Logger.info(<span class="hljs-string">&quot;入站处理B,被回调&quot;</span>);<br><span class="hljs-built_in">super</span>.channelRead(ctx,msg);<br>&#125;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleInHandlerC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span>... &#123;<br>Logger.info(<span class="hljs-string">&quot;入站处理C,被回调&quot;</span>);<br><span class="hljs-built_in">super</span>.channelRead(ctx,msg);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPipelineInBound</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ChannelInitializer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;EmbeddedChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(EmbeddedChannel ch)</span>&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleInHandlerA</span>() );<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleInHandlerB</span>() );<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleInHandlerC</span>() );<br>&#125;<br>&#125;;<br><span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>(i);<br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> Unpooled.buffer();<br>buf.writeInt(<span class="hljs-number">1</span>);<br>channel.writeInbound(buf);<br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出</span><br><span class="hljs-comment">入站处理器A : 被回调</span><br><span class="hljs-comment">入站处理器B : 被回调</span><br><span class="hljs-comment">入站处理器C : 被回调</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><p>pipeline 出站处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InPipeline</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleOuthandlerA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelOutboundHandlerAdapter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelWrite</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span>... &#123;<br>Logger.info(<span class="hljs-string">&quot;出站处理A,被回调&quot;</span>);<br><span class="hljs-built_in">super</span>.channelWrite(ctx,msg,promise);<br>&#125;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleOutHandlerB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelOutboundHandlerAdapter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelWrite</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span>... &#123;<br>Logger.info(<span class="hljs-string">&quot;出站处理B,被回调&quot;</span>);<br><span class="hljs-built_in">super</span>.channelWrite(ctx,msg,promise);<br>&#125;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleOutHandlerC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelOutboundHandlerAdapter</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelWrite</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span>... &#123;<br>Logger.info(<span class="hljs-string">&quot;出站处理C,被回调&quot;</span>);<br><span class="hljs-built_in">super</span>.channelWrite(ctx,msg,promise);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPipelineInBound</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ChannelInitializer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;EmbeddedChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(EmbeddedChannel ch)</span>&#123;<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleInHandlerA</span>() );<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleInHandlerB</span>() );<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleInHandlerC</span>() );<br>&#125;<br>&#125;;<br><span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>(i);<br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> Unpooled.buffer();<br>buf.writeInt(<span class="hljs-number">1</span>);<br>channel.writeOutbound(buf);<br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出</span><br><span class="hljs-comment">入站处理器C : 被回调</span><br><span class="hljs-comment">入站处理器B : 被回调</span><br><span class="hljs-comment">入站处理器A : 被回调</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h3 id="上下文-ChannelHandlerContext"><a href="#上下文-ChannelHandlerContext" class="headerlink" title="上下文 ChannelHandlerContext"></a>上下文 ChannelHandlerContext</h3><p>Netty中的Handler 是无状态的，通过上下文来维护</p><p>Channel  Channelpipeline 和 ChannelHandlerContext 的关系</p><p>Channel   - &gt;  通道 标识某一个socket连接</p><p>Channelpipeline - &gt;  一条流水线 用于对channel中的数据进行处理</p><p>ChannelHandlerContext - &gt; 流水线的节点，用于维护状态信息和Handler</p><h3 id="HeadContext-与-TailContext"><a href="#HeadContext-与-TailContext" class="headerlink" title="HeadContext 与 TailContext"></a>HeadContext 与 TailContext</h3><p>TailContext  既作为一个上下文存储对象，也是一个入站处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultChannelPipeline</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ChannelPipeline</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TailContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractChannelHandlerContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ChannelInboundHandler</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx , Object msg)</span>&#123;<br>...<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HeadContext 即需要实现 ChannelInboudHandler 又需要实现ChannellnboundHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultChannelPipeline</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ChannelPipeline</span>&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeadContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractChannelHandlerContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ChannelInboundHandler</span><br>, ChannelOutBoundHandler &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Unsafe unsafe ; <br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx , Object msg)</span>&#123;<br>ctx.fireChannelRead(msg);<br><br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(ChannelHandlerContext ctx)</span>&#123;<br>unsafe.beginRead();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg , ChannelPromise promise)</span>&#123;<br>unsafe.write(msg , promise);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Pipeline的传递"><a href="#Pipeline的传递" class="headerlink" title="Pipeline的传递"></a>Pipeline的传递</h3><p>每一个上下文对象通过findContextInbound() 来获取 链表中的下一个上下文对象，之后通过调用next.invokeChannelRead(msg) 进行调用，在调用的invokeChannel方法中，再次查询下一个链表对象并执行</p><h3 id="Pipeline的截断"><a href="#Pipeline的截断" class="headerlink" title="Pipeline的截断"></a>Pipeline的截断</h3><p>如果想对Pipeline进行截断 则可以</p><ol><li>不调用基类的channelRead 终止流水线</li><li>或者不调用ctx.fireChannelRead 中断查询后续上下文的过程，直接返回。</li></ol><h3 id="流水线热插拔"><a href="#流水线热插拔" class="headerlink" title="流水线热插拔"></a>流水线热插拔</h3><p>ChannelPipeline 提供了一些方法来对流水线中的上下文进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ChannelPipeline</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Iterable</span> &lt;Entry&lt;String,ChannelHandler&gt;&gt;&#123;<br>ChannelPipeline <span class="hljs-title function_">addFirst</span><span class="hljs-params">(String name , ChannelHandler handler )</span>;<br><br>ChannelPipeline <span class="hljs-title function_">addLast</span><span class="hljs-params">(String name , ChannelHandler handler )</span>;<br><br>ChannelPipeline <span class="hljs-title function_">addBefore</span><span class="hljs-params">(String baseName , String name , ChannelHandler handler )</span>;<br><br>ChannelPipeline <span class="hljs-title function_">addAfter</span><span class="hljs-params">(String baseName , String name , ChannelHandler handler )</span>;<br><br>ChannelPipeline <span class="hljs-title function_">remove</span><span class="hljs-params">(ChannelHandler handler )</span>;<br><br>ChannelPipeline <span class="hljs-title function_">remove</span><span class="hljs-params">(String handler )</span>;<br><br>ChannelPipeline <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span>;<br><br>ChannelPipeline <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h2><p>ByteBuf 是一个字节容器，定义了一个字节数组，并在容器内分为4个区域</p><ol><li>废弃 ： 已经被使用过的字节内容</li><li>可读 ： 待被读取的字节内容</li><li>可写 ：可以向其中写入的区域</li><li>扩容 ：剩余待使用的区域</li></ol><p>ByteBuf 通过3个定义指针来 界定这四个区域</p><p>readerIndex 读指针 所处位置 开始可以读取字节</p><p>writerIndex 写指针 所处位置  开始可以写入字节</p><p>maxCapacity 最大容量 当前ByteBuf 支持的最大容量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法 </span><br><span class="hljs-comment">// 容量 ：</span><br>capacity() <span class="hljs-comment">// Bytebuf的容量</span><br>maxCapacity() <span class="hljs-comment">// Bytebuf支持的最大容量</span><br><br><span class="hljs-comment">// 写入</span><br>isWritable()  <span class="hljs-comment">// 是否可写</span><br>writableBytes()  <span class="hljs-comment">//可写入的字节数</span><br>maxWritable()  <span class="hljs-comment">// 最大可写入的字节数</span><br>writeBytes(<span class="hljs-type">byte</span>[] src) <span class="hljs-comment">// 把入参src字节数组中的数据写入Bytebuf </span><br>writeType()  <span class="hljs-comment">// 写入数据类型的数据</span><br>setType()  <span class="hljs-comment">// 设置基础数据类型</span><br>markWriterIndex()<br>resetWriterIndex() <span class="hljs-comment">// 存储写入位置指针 / 恢复写指针</span><br><br><span class="hljs-comment">// 读取</span><br>isReadable() <span class="hljs-comment">// 是否可读</span><br>readableBytes() <span class="hljs-comment">// 可读的字节数</span><br>readBytes(<span class="hljs-type">byte</span>[] dst) <span class="hljs-comment">// 将ByteBuf中的数据读到 数组dst中</span><br>readType() <span class="hljs-comment">// 以某种数据类型读取</span><br>getType()  <span class="hljs-comment">// 获取当前的数据类型</span><br>markReaderIndex()<br>resetReaderIndex()  <span class="hljs-comment">// 存储当前的读指针 / 恢复读指针</span><br></code></pre></td></tr></table></figure><h3 id="池化与非池化"><a href="#池化与非池化" class="headerlink" title="池化与非池化"></a>池化与非池化</h3><p>池化和非池化的区别在于内存的分配与回收策略不同。池化是在初始化时预先分配一块固定大小的内存区域，后续的 <code>ByteBuf</code> 实例均通过在这块内存中进行切片和复用来完成分配与释放。相比之下，非池化则在每次创建 <code>ByteBuf</code> 时都直接申请新的内存，使用完毕后再交由系统释放。</p><p>池化的优势在于显著减少了内存分配和回收的开销，降低了内存碎片化风险，提升了性能，适合高并发、高频率的场景；但其缺点是初始内存占用较高。非池化虽然按需分配，初始内存占用小，但在频繁创建和销毁时会带来较大性能负担，容易产生内存碎片，更适用于低频访问或短生命周期的缓存场景。</p><h3 id="堆内存和直接内存（系统）"><a href="#堆内存和直接内存（系统）" class="headerlink" title="堆内存和直接内存（系统）"></a>堆内存和直接内存（系统）</h3><p>在缓冲区管理中，除了池化与非池化的分配策略，底层还涉及具体内存类型的选择，主要分为：<strong>Java 堆内存（heap buffer）</strong> 和  <strong>系统直接内存（direct buffer &#x2F; off-heap）</strong> 。二者在使用中各有优势与限制。</p><p>使用堆内存（Heap Buffer）</p><p>堆内存是 JVM 管理的内存，<code>ByteBuf</code> 实例实际分配在 Java 堆上，其生命周期由 GC 控制。</p><p> <strong>优点</strong> ：</p><ul><li>分配开销小，分配快（使用 JVM 自带的堆内存分配器）</li><li>与 JVM 数据结构兼容性好，读取数据不需要额外复制</li><li>GC 可自动回收，适合生命周期不确定的缓存</li></ul><p> <strong>缺点</strong> ：</p><ul><li><strong>需要将数据从堆复制到内核空间</strong> ，才能通过 <code>SocketChannel.write()</code> 等发送数据（即涉及一次内存复制）</li><li>在高频 IO 场景中可能增加 CPU 使用率和 GC 压力</li><li>长期运行中容易造成 GC pause，影响实时性</li></ul><p>使用系统直接内存（Direct Buffer）</p><p>直接内存位于 JVM 堆外，由操作系统管理，通过 <code>sun.misc.Unsafe</code> 或 <code>ByteBuffer.allocateDirect()</code> 分配。Netty 封装后用于实现零拷贝（zero-copy）传输。</p><p> <strong>优点</strong> ：</p><ul><li>避免堆与内核缓冲区之间的复制，提高 IO 性能</li><li>支持 DMA（Direct Memory Access）等底层优化机制</li><li>避免 GC 管理，减少长时间运行系统的 GC 压力</li></ul><p> <strong>缺点</strong> ：</p><ul><li>分配成本高（系统调用开销），释放慢（不是 GC 自动管理）</li><li>容易内存泄漏：若不主动释放或池化，堆外内存不可回收</li><li>对调试和监控不友好：GC 日志和内存分析工具无法追踪</li></ul><h3 id="Bytebuf-浅拷贝"><a href="#Bytebuf-浅拷贝" class="headerlink" title="Bytebuf 浅拷贝"></a>Bytebuf 浅拷贝</h3><p>ByteBuf slice()</p><p>ByteBuf slice(int index,int length)</p><p>使用上述方法对对象进行浅拷贝</p><p>拷贝后的切片 是当前已被读取Bytebuf的长度大小。</p><p>读指针 被设置为 0 ， 写指针和最大容量都为切片的读位置</p><p>使用duplicate() 来进行对原对象的整体复制。</p><p>上述方法都是对原数据的浅层复制，即是对某段存储的引用。当原对象被释放后就不再能被使用了。可以通过增加引用计数的方式来保持对象的可用状态。</p><h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h2><p>Netty 提供了多种方法 帮助程序减少内存复制</p><ol><li>CompositeByteBuf组合缓冲区类。将多个ByteBuf合并为一个逻辑上的Bytebuf</li><li>Netty提供了 浅层复制操作，可以将ByteBuff分解为多个共享同一存储区域的ByteBuf</li><li>可以直接将文件缓冲区的数据发送到目标通道，避免通道和缓冲之间的多次复制</li><li>提供了一系列包装类，避免转换过程中的内存拷贝。</li><li>通过使用直接内存进行socket读写，减少了从JVM到直接内存的拷贝过程</li></ol><h3 id="CompositeByteBuf"><a href="#CompositeByteBuf" class="headerlink" title="CompositeByteBuf"></a>CompositeByteBuf</h3><p>通过合并多个Bytebuf队形，重新组织他们的关系，增加了查询过程，但是减少了创建新的调用对象的复制过程</p><h3 id="WrappedBuffer"><a href="#WrappedBuffer" class="headerlink" title="WrappedBuffer()"></a>WrappedBuffer()</h3><p>通过将原始类型数组包装为对象，减少对象创建过程</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyEchoServer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runServer</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-comment">// 省略 1.反应器轮询组 2.通道类型 4.通道选项</span><br>b.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> ... &#123;<br>ch.pipeline().addLast(NettyEchoServerHandler.INSTANCE);<br>&#125;<br>&#125;);<br><span class="hljs-comment">// 省略启动，等待，关闭</span><br>&#125;<br><span class="hljs-comment">// main方法调用</span><br>&#125;<br><br><span class="hljs-comment">// ServerHandler 实现</span><br><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyEchoServerHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">NettyEchoServerHandler</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyEchoServerHandler</span>();<br><br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx , Object msg)</span>...&#123;<br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>Logger.info(<span class="hljs-string">&quot;msg type : &quot;</span> +(in.hasArray() ? <span class="hljs-string">&quot;堆内存&quot;</span>:<span class="hljs-string">&quot;直接内存&quot;</span>));<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> in.readableBytes();<br><span class="hljs-type">byte</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len];<br>in.getBytes(<span class="hljs-number">0</span>,arr);<br>Logger.info(<span class="hljs-string">&quot;Server received:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr,<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>Logger.info(<span class="hljs-string">&quot;写回前，msg.refCnt:&quot;</span> +((ByteBuf) msg).refCnt());<br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ctx.writeAndFlush(msg);<br>f.addListener((ChannelFuture futureListener)-&gt;&#123;<br>Logger.info(<span class="hljs-string">&quot;写回后，msg.refCnt:&quot;</span> + ((ByteBuf) msg).refCnt());<br>&#125;);<br>&#125; <br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyEchoClient</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> serverPort ;<br><span class="hljs-keyword">private</span> String serverIp ;<br><span class="hljs-type">Bootstrap</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">NettyEchoClient</span><span class="hljs-params">(String ip , <span class="hljs-type">int</span> port)</span>&#123;<br><span class="hljs-built_in">this</span>.serverPort = port ;<br><span class="hljs-built_in">this</span>.serverIp = ip ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runClient</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-keyword">try</span>&#123;<br>b.group(workerLoopGroup);<br>b.channel(NioSocketChannel.class);<br>b.remoteAddress(serverIp,serverPort);<br>b.option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);<br>b.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;()&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel  ch)</span>...&#123;<br>ch.pipeline().addLast(NettyEchoClientHandler.INSTANCE);<br>&#125;<br>&#125;);<br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> b.connect();<br>f.addListener((ChannelFuture futureListener)-&gt;<br>&#123;<br><span class="hljs-keyword">if</span>(futureListener.isSuccess())&#123;<br>Logger.info(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>Logger.info(<span class="hljs-string">&quot;连接失败&quot;</span>);<br>&#125;<br>&#125;);<br>f.sync();<br><span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> f.channel();<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>Print.tcfo(<span class="hljs-string">&quot;请输入发送内容:&quot;</span>);<br><span class="hljs-keyword">while</span> (scanner.hasNext())&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scanner.next();<br><span class="hljs-type">byte</span>[] bytes = (Dateutil.getNow() + <span class="hljs-string">&quot;&gt;&gt;&quot;</span> + next).getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> channel.alloc().buffer();<br>buffer.writeBytes(bytes);<br>channel.writeAndFlush(buffer); <br>Print.tcfo(<span class="hljs-string">&quot;请输入发送内容&quot;</span>)；<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span>&#123;<br>workerLoopGroup.shutdownGracefully();<br>&#125;<br>&#125;<br><span class="hljs-comment">// main方法</span><br><br>&#125;<br><br><span class="hljs-comment">// 客户端handler</span><br><br><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyEchoClientHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">NettyEchoClientHandler</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyEchoClientHandler</span>();<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx , Object msg)</span>...&#123;<br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> (ByteBuf)msg;<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span>  <span class="hljs-operator">=</span>  byteBuf.readableBytes();<br><span class="hljs-type">byte</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len];<br>byteBuf.getBytes(<span class="hljs-number">0</span>,arr);<br>Logger.info(<span class="hljs-string">&quot;client received :&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr,<span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>byteBuf.release();  <br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 VII IO</title>
    <link href="/2025/05/07/Java%E7%BC%96%E7%A8%8B-VII-IO/"/>
    <url>/2025/05/07/Java%E7%BC%96%E7%A8%8B-VII-IO/</url>
    
    <content type="html"><![CDATA[<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><p>IO 是系统中“输入&#x2F;输出”（Input&#x2F;Output）的简称，通常指代操作系统执行读写操作的整个过程。在操作系统中，用户程序和内核程序之间存在严格的权限隔离，分别处于“用户态”和“内核态”。</p><ul><li><strong>用户态</strong>主要用于运行用户加载到内存中的应用程序，包括数据处理和逻辑执行。</li><li><strong>内核态</strong>则负责管理系统资源，其核心是以 <code>task_struct</code> 为代表的数据结构，用于描述进程信息，并与内核各个子系统（如文件系统、内存管理、设备驱动等）交互，同时记录用户进程与内核资源之间的绑定关系。</li></ul><p>当用户程序需要执行读写等 IO 操作时，会通过系统调用接口发起请求。这一请求会引发权限切换，即从用户态“陷入”（trap）到内核态，由内核代表应用程序操作底层资源（如文件、硬盘、内存），以保障系统安全性和稳定性，防止用户程序直接访问或破坏关键内存区域。</p><h3 id="一个典型的文件写入流程如下："><a href="#一个典型的文件写入流程如下：" class="headerlink" title="一个典型的文件写入流程如下："></a>一个典型的文件写入流程如下：</h3><ol><li>用户程序创建文件抽象对象，内核创建底层文件资源；</li><li>通过系统调用进入内核态，由内核创建相应的底层文件结构，并返回一个 <strong>文件描述符</strong> （file descriptor）；</li><li>用户程序使用该描述符，在用户态创建流对象用于数据写入；</li><li>当写入发生时，再次触发系统调用，要求内核将数据写入对应的文件或设备；</li><li>数据从用户态复制到内核态缓冲区，再由内核完成实际的写入；</li><li>如果是读取操作，则由内核将文件内容从磁盘加载到内核缓冲区，再复制回用户态内存；</li><li>用户态程序随后可以对这些数据进行字节流或字符流的处理。</li></ol><p>由上述流程我们可以看到 I&#x2F;O 流程存在以下性能瓶颈 ：</p><ol><li>阻塞 阻塞是指应用程序在执行 I&#x2F;O 操作时，如果数据还未准备好（如文件未读完、磁盘还在寻址、网络数据还未到达），进程会进入 <strong>等待状态</strong> ，无法继续执行，直到 I&#x2F;O 操作完成为止。</li><li>用户态与内核态的切换属于一种“上下文切换”，指操作系统在执行系统调用时，需要保存当前用户态的执行环境（寄存器、程序计数器、栈指针等），切换到内核态并加载内核的运行环境。</li><li>在用户态和内核态之间的数据交互并不是“共享内存”，而是通过 显式复制（copy）实现。通常发生在读写文件或网络数据时。</li></ol><h1 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h1><h2 id="同步阻塞IO"><a href="#同步阻塞IO" class="headerlink" title="同步阻塞IO"></a>同步阻塞IO</h2><p>用户空间 主动发起，需要等待内核IO 操作彻底完成才返回到用户空间的IO</p><p>流程</p><ol><li>发起启动调用read,用户态线程阻塞</li><li>内核收到read系统调用，进行数据准备。</li><li>内核等到完整数据到达，将数据从内核缓冲区拷贝到用户缓冲区</li><li>内核返回后用户线程解除阻塞状态，重新运行</li></ol><p>优点 ： 实现简单</p><p>缺点 ：每个连接都使用自己的线程进行IO 操作，高并发场景下  切换开销和阻塞会导致性能很低</p><p>内核态准备数据和复制数据是同步进行的，直到数据可读后才返回</p><h2 id="同步非阻塞IO"><a href="#同步非阻塞IO" class="headerlink" title="同步非阻塞IO"></a>同步非阻塞IO</h2><p>用户空间程序不需要等待内核IO操作彻底完成，可以立即返回用户空间执行后续命令。</p><p>流程</p><ol><li>用户线程 向 内核发起查询请求，查询内核缓冲区是否存在数据</li><li>发起系统调用，查询内核缓冲区是否存在数据，如果不存在，返回一个调用失败信息</li><li>如果存在数据，将内核缓冲区中的数据复制到用户缓冲区，这时阻塞用户态线程，直到复制完成返回系统调用成功</li></ol><p>优点 ： 通过不断查询检查缓存状态，不需要阻塞线程</p><p>缺点 ：不断的向内核请求查询会增加上下文切换开销</p><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>通过select&#x2F;epoll 使得一个线程可以同时监听多个资源描述符，一旦某个就绪后就可以将对应的资源描述符返回，供用户空间程序使用</p><p>流程</p><ol><li>选择器注册。将需要read操作的 目标文件描述符提前注册到Linux的select&#x2F;epoll选择器中，</li><li>就绪状态的轮询。通过选择器的查询方法，查询所有提前注册过的目标文件描述符I&#x2F;O就绪状态。返回一个就绪的socket列表和就绪事件，提示用户线程I&#x2F;O就绪</li><li>用户线程得到了就绪的socket列表，向对应的连接发起系统调用，阻塞线程，从内核复制数据，将数据从内核缓冲区复制到用户缓冲区</li><li>复制完成后，内核返回结果，用户线程解除阻塞状态，用户线程读取到了数据继续执行。</li></ol><p>优点 ：一个线程可以同时处理许多读写连接，使得用户不必维护大量的线程</p><p>缺点 ：select 在监听事件时 仍然是阻塞的。但 epoll 支持边缘触发，可结合非阻塞通道实现高性能 IO</p><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><p>内核空间成为主动调用者，当资源准备就绪时向用户线程通知 资源就绪</p><p>流程</p><ol><li>用户发起read系统调用，不阻塞后续逻辑</li><li>内核开始I&#x2F;O 第一个阶段，准备数据，内核将数据从内核复制到用户缓冲区</li><li>内核向用户线程发送信号，通知用户线程数据已经复制到缓冲区</li><li>用户线程读取缓冲区数据，继续后续任务</li></ol><p>优点 ： IO过程非阻塞，真正的异步调用</p><p>缺点 ： 需要进行事务的注册与接收，需要操作系统支持</p><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><p>java 提供了非阻塞IO 库   NIO</p><p>核心组件</p><p>Channel  通道</p><p>Buffer  缓冲区</p><p>Selector 选择器</p><h2 id="缓冲区（Buffer）"><a href="#缓冲区（Buffer）" class="headerlink" title="缓冲区（Buffer）"></a>缓冲区（Buffer）</h2><p>Buffer 是一个非线程安全类</p><p>capacity  读写容量                     设置buffer 创建的类型数组的最大容量</p><p>position  记录读写位置             在读写过程中记录当前写入&#x2F;读出的位置</p><p>limit         读写的最大上限         记录实际写入的容量&#x2F;实际读取的最大内容</p><p>mark        读写位置记录缓存    暂时存储position的位置</p><p>allocate()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBuffer</span><br>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">IntBuffer</span> <span class="hljs-variable">intBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">allocateTest</span><span class="hljs-params">()</span>&#123;<br>intBuffer = IntBuffer.allocate(<span class="hljs-number">20</span>);<br>    ...<br>&#125;<br>&#125;<br><span class="hljs-comment">// 创建后会定义好 .capacity = 20 , .position = 0 , .limit = 20</span><br></code></pre></td></tr></table></figure><p>put()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBuffer</span><br>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">IntBuffer</span> <span class="hljs-variable">intBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putTest</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">5</span> ; i++)<br>&#123;<br>intBuffer.put(i);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 向buffer中写入5个数据 .capacity = 20 , .position = 5 , .limit = 20</span><br></code></pre></td></tr></table></figure><p>flip()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBuffer</span><br>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">IntBuffer</span> <span class="hljs-variable">intBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flipTest</span><span class="hljs-params">()</span><br>&#123;<br>intBuffer.flip();<br>&#125;<br>&#125;<br><span class="hljs-comment">// 反转buffer .capacity = 20 , .position = 0 , .limit = 5</span><br></code></pre></td></tr></table></figure><p>get()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBuffer</span><br>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">IntBuffer</span> <span class="hljs-variable">intBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTest</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">2</span> ; i++)&#123;<br>intBuffer.get();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 从buffer中取数据 .capacity = 20 , .position = 2 , .limit = 5</span><br></code></pre></td></tr></table></figure><p>rewind()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBuffer</span><br>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">IntBuffer</span> <span class="hljs-variable">intBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rewindTest</span><span class="hljs-params">()</span><br>&#123;<br>intBuffer.rewind();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 从buffer中重置定位 .capacity = 20 , .position = 0 , .limit = 5</span><br></code></pre></td></tr></table></figure><p>mark()和 reset()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBuffer</span><br>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">IntBuffer</span> <span class="hljs-variable">intBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reRead</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">5</span> ; i++)&#123;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>)&#123;<br>intBuffer.mark();<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> intBuffer.get();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReset</span><span class="hljs-params">()</span>&#123;<br> intBuffer.reset();<br> <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ; i&lt; <span class="hljs-number">5</span> ; i++)&#123;<br> <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> intBuffer.get();<br> &#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 使用mark标记 position位置，使用reset 恢复position位置，打印。</span><br></code></pre></td></tr></table></figure><p>clear()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBuffer</span><br>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">IntBuffer</span> <span class="hljs-variable">intBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearDemo</span><span class="hljs-params">()</span>&#123;<br>intBuffer.clear();<br>&#125;<br>&#125;   <br></code></pre></td></tr></table></figure><h2 id="通道-（Channel-）"><a href="#通道-（Channel-）" class="headerlink" title="通道 （Channel ）"></a>通道 （Channel ）</h2><p>FileChannel 文件通道</p><p>SocketChannel 套接字通道</p><p>ServerSocketChannel 服务器套接字通道</p><p>DatagramChannel 数据报通道</p><h3 id="FileChannel-文件通道"><a href="#FileChannel-文件通道" class="headerlink" title="FileChannel 文件通道"></a>FileChannel 文件通道</h3><p>创建通道对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile);<br><span class="hljs-type">FileChannel</span> <span class="hljs-variable">inChannel</span> <span class="hljs-operator">=</span> fis.getChannel();<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(destFile);<br><span class="hljs-type">FileChannel</span> <span class="hljs-variable">outChannel</span> <span class="hljs-operator">=</span> fos.getChannel();<br><br><span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">rFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;filename.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br><span class="hljs-type">FileChannel</span> <span class="hljs-variable">channel</span>  <span class="hljs-operator">=</span> rFile.getChannel();<br></code></pre></td></tr></table></figure><p>读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">aFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(fileName,<span class="hljs-string">&quot;rw&quot;</span>);<br><span class="hljs-type">FileChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> aFile.getChannel();<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(CAPACITY);<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span> <br><span class="hljs-keyword">while</span>((length = channel.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>... <br>&#125;<br></code></pre></td></tr></table></figure><p>写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">buf.flip();<br><span class="hljs-type">int</span> <span class="hljs-variable">outlength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((outlength = outChannel.write(buf)) != <span class="hljs-number">0</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;写入字节数：&quot;</span> + outlength);<br>&#125;<br></code></pre></td></tr></table></figure><p>关闭通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.close();<br><br>channel.force(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 强制刷新</span><br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileNIOCopyDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br> nioCopyResourceFile();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nioCopyResouceFile</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">sourcePath</span> <span class="hljs-operator">=</span> NioDemoConfig.FILE_RESOUCE_SRC_PATH;<br><span class="hljs-type">String</span> <span class="hljs-variable">srcPath</span> <span class="hljs-operator">=</span> IOUtil.getResoucePath(sourcePath);<br>Logger.info(<span class="hljs-string">&quot;srcPath = &quot;</span> + srcPath);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">destPath</span> <span class="hljs-operator">=</span> NioDemoConfig.FILE_RESOURCE_DEST_PATH;<br><span class="hljs-type">String</span> <span class="hljs-variable">destDecodePath</span> <span class="hljs-operator">=</span> IOUtil.builderResourcePath(destPath);<br>Logger.info(<span class="hljs-string">&quot;destDecodePath=&quot;</span> + destDecodePath);<br>nioCopyFile(srcDecodePath , destDecodePath);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nioCopyFile</span><span class="hljs-params">(String srcPath , String destPath)</span>&#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(srcPath);<br><span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(destPath);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span>(!destFile.exists())&#123;<br>destFile.createNewFile();<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-type">FileChannel</span> <span class="hljs-variable">inChannel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-type">FileChannel</span> <span class="hljs-variable">outChannel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br><span class="hljs-keyword">try</span> &#123;<br>fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile);<br>fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(destFile);<br>inChannel = fis.getChannel();<br>outChannel = fos.getChannel();<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br><span class="hljs-keyword">while</span>((length = inChannel.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>buf.flip();<br><span class="hljs-type">int</span> <span class="hljs-variable">outlength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (( outlength = outChannel.write(buf))!=<span class="hljs-number">0</span> )&#123;<br>buf.clear();<br>&#125;<br>outChannel.force(<span class="hljs-literal">true</span>);<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>IOUtil.closeQuietly(outChannel);<br>IOUtil.closeQuietly(fos);<br>IOUtil.closeQuietly(inchannel);<br>IOUtil.closeQuietly(fis);<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>Logger.info(<span class="hljs-string">&quot;base复制毫秒数：&quot;</span> + (endTime - startTime));<br><br>&#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SocketChannel"><a href="#SocketChannel" class="headerlink" title="SocketChannel"></a>SocketChannel</h3><p>创建隧道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> SocketChannel.open();<br>socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>socketChannel.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">80</span>));<br><span class="hljs-keyword">while</span>(! socketChannel.finishConnect())&#123;<br>&#125;<br><span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> (ServerSocketChannel) key.channel());<br><span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> server.accept();<br>socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>读取通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">bytesRead</span> <span class="hljs-operator">=</span> socketChannel.read(buf);<br></code></pre></td></tr></table></figure><p>写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">buffer.flip();<br>socketChannel.write(buffer);<br></code></pre></td></tr></table></figure><p>关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">socketChannel.shutdownOutput();<br>IOUtil.closeQuietly(socketChannel);<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NioSendClient</span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendFile</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">try</span><br>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">sourcePath</span> <span class="hljs-operator">=</span> NioDemoConfig.SOCKET_SEND_FILE;<br><span class="hljs-type">String</span> <span class="hljs-variable">srcPath</span> <span class="hljs-operator">=</span> IOUtil.getResourcePath(sourcePath);<br>Logger.debug(<span class="hljs-string">&quot;srcPath=&quot;</span> + srcPath);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> NioDemoConfig.SOCKET_RECEIVE_FILE;<br>Logger.debug(<span class="hljs-string">&quot;destFile=&quot;</span> + destFile);<br><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(srcPath);<br><span class="hljs-keyword">if</span> (!file.exists())&#123;<br>Logger.debug(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">FileChannel</span> <span class="hljs-variable">fileChannel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file).getChannel();<br><span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> SocketChannel.open();<br>socketChannel.socket().connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">18899</span>));<br>socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>Logger.debug(<span class="hljs-string">&quot;Client 已连接&quot;</span>);<br><span class="hljs-keyword">while</span> (!socketChannel.finishConnect())&#123;<br>...<br>&#125;<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> sendFileNameAndLength(destFile, file,socketChannel);<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> sendContent(file,fileChannel,socketChannel,buffer);<br><span class="hljs-keyword">if</span> (length == -<span class="hljs-number">1</span>)&#123;<br>IOUtil.closeQuietly(fileChannel);<br>socketChannel.shutdownOutput();<br>IOUtil.closeQuietly(socketChannel);<br>&#125;<br>Logger.debug(<span class="hljs-string">&quot; 文件传输成功 &quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sendContent</span><span class="hljs-params">(File file , FileChannel fileChannel, SocketChannel socketChannel,</span><br><span class="hljs-params">ByteBuffer buffer)</span>  <span class="hljs-keyword">throws</span> IOException&#123;<br>Logger.debug(<span class="hljs-string">&quot;开始传输文件&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">progess</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><span class="hljs-keyword">while</span> ((length = fileChannel.read(buffer)) &gt;<span class="hljs-number">0</span> )<br>&#123;<br>buffer.flip();<br>socketChannel.write(buffer);<br>buffer.clear();<br>progess += length ;<br>Logger.debug(<span class="hljs-string">&quot;| + &quot;</span> (<span class="hljs-number">100</span> * progress/ file.length()) + <span class="hljs-string">&quot;%|&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> length;<br>&#125;<br><br> <span class="hljs-keyword">public</span> ByteBuffer <span class="hljs-title function_">sendFileNameAndLength</span><span class="hljs-params">(String destFile, File file , SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br> <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">fileNameByteBuffer</span> <span class="hljs-operator">=</span> charset.encode(destFile);<br> <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(NioDemoConfig.SEND_BUFFER_SIZE);<br> <span class="hljs-type">int</span> <span class="hljs-variable">fileNameLen</span> <span class="hljs-operator">=</span> fileNameByteBuffer.capacity();<br> buffer.putInt(fileNameLen);<br> buffer.flip();<br> socketChannel.write(buffer);<br> buffer.clear();<br> Logger.info(<span class="hljs-string">&quot;发送完成&quot;</span> , fileNameLen);<br> socketChannel.write(fileNameByteBuffer);<br> Logger.info(<span class="hljs-string">&quot;Client 文件名称发送完成&quot;</span>, destFile);<br> buffer.putLong(file.length());<br> buffer.flip();<br> socketChannel.write(buffer);<br> buffer.clear();<br> Logger.info(<span class="hljs-string">&quot;Client 文件长度发送完成:&quot;</span> , file.length());<br> <span class="hljs-keyword">return</span> buffer ; <br> &#125; <br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DatagramChannel"><a href="#DatagramChannel" class="headerlink" title="DatagramChannel"></a>DatagramChannel</h3><p>获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DatagramChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> DatagramChannel.open();<br>datagramChannel.configureBlocking(<span class="hljs-literal">false</span>);<br><br>channel.socket().bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">18080</span>));<br></code></pre></td></tr></table></figure><p>读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br><span class="hljs-type">SocketAddress</span> <span class="hljs-variable">clientAddr</span> <span class="hljs-operator">=</span> datagramChannel.receive(buf);<br></code></pre></td></tr></table></figure><p>写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">buffer.flip();<br>dChannel.send(buffer,<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">18899</span>));<br>buffer.clear();<br></code></pre></td></tr></table></figure><p>关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dChannel.close();<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 客户端 :</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPClient</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br><span class="hljs-type">DatagramChannel</span> <span class="hljs-variable">dChannel</span> <span class="hljs-operator">=</span> DatagramChannel.open();<br>dChannel.configureBlocking(<span class="hljs-literal">false</span>);<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(NioDemoConfig.SEND_BUFFER_SIZE);<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>Print.tcfo(<span class="hljs-string">&quot;请输入发送内容&quot;</span>);<br><span class="hljs-keyword">while</span>(scanner.hasNext())&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scanner.next();<br>buffer.put((Dateutil.getNow() + <span class="hljs-string">&quot;&gt;&gt;&quot;</span> + next).getBytes();<br>buffer.flip();<br>dChannel.send(buffer,<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">18899</span>));<br>buffer.clear();<br>&#125;<br>dChannel.close();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">UDPClient</span>().send();<br>&#125;<br>&#125;<br><span class="hljs-comment">// 客户端 :</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPServer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br><span class="hljs-type">DatagramChannel</span> <span class="hljs-variable">datagramChannel</span> <span class="hljs-operator">=</span> DatagramChannel.open();<br>datagramChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>datagramChannel.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">18899</span>));<br>Print.tcfo(<span class="hljs-string">&quot;UDP 服务器启动成功&quot;</span>);<br><span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>datagramChannel.register(selector, SelectionKey.OP_READ);<br><span class="hljs-keyword">while</span>(selector.select()&gt;<span class="hljs-number">0</span>)&#123;<br>Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(NioDemoConfig.SEND_BUFFER_SIZE);<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br><span class="hljs-type">SelectionKey</span> <span class="hljs-variable">selectionKey</span> <span class="hljs-operator">=</span> iterator.next();<br><span class="hljs-keyword">if</span>(selectionKey.isReadable())&#123;<br><span class="hljs-type">SocketAddress</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> datagramChannel.receive(buffer);<br>buffer.flip();<br>Print.tcfo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer.array(),<span class="hljs-number">0</span>,buffer.limit));<br>buffer.clear();<br>&#125;<br>&#125;<br>iterator.remove();<br>&#125;<br>selector.close();<br>datagramChannel.close();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">UDPServer</span>().receive();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="选择器-Selector"><a href="#选择器-Selector" class="headerlink" title="选择器  (Selector)"></a>选择器  (Selector)</h2><p>将通道注册到选择器，通过选择器监听IO事件</p><p>1  可读 SelectionKey.OP_READ (  通道有数据可读 )</p><p>2 可写 SelectionKey.OP_WRITE ( 通道有数据可写 )</p><p>3 连接 SelectionKey.OP_CONNECT ( 连接建立 )</p><p>4 接收 SelectionKey.OP_ACCEPT ( 有新的连接到来 )</p><p>创建 selector</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br><br><span class="hljs-comment">//获取通道</span><br><span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">serverSocketChannel</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br><span class="hljs-comment">//设置非阻塞</span><br>serverSocketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">//绑定连接</span><br>serverSocketChannel.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">18899</span>));<br><span class="hljs-comment">//将通道注册到选择器，设置监听事件</span><br>serverSocketChannel.register(selector,SelectionKey.OP_ACCEPT);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (selector.select() &gt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-type">Set</span> <span class="hljs-variable">selectedKeys</span> <span class="hljs-operator">=</span> selector.selectedKeys();<br><span class="hljs-type">Iterator</span> <span class="hljs-variable">keyIterator</span> <span class="hljs-operator">=</span> selectedKeys.iterator();<br><span class="hljs-keyword">while</span>(keyIterator.hasNext())&#123;<br><span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyIterator.next();<br><span class="hljs-keyword">if</span>(key.isAcceptable())&#123;<br><span class="hljs-comment">//</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isConnectable())&#123;<br><span class="hljs-comment">//</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isReadable())&#123;<br><span class="hljs-comment">//</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isWritable())&#123;<br>  <span class="hljs-comment">//</span><br>&#125; <br>keyIterator.remove();<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>实现discard服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NioDiscardClient</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startServer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br><span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br><span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">serverSocketChannel</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br>serverSocketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>serverSocketChannel.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">18899</span>));<br>Logger.info(<span class="hljs-string">&quot;服务器启动&quot;</span>);<br>serverSocketChannel.register(selector,selectionKey.OP_ACCEPT);<br><span class="hljs-keyword">while</span>(selector.select()&gt;<span class="hljs-number">0</span>)&#123;<br>Iterator&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys().iterator();<br><span class="hljs-keyword">while</span> (selectedKeys.hasNext())&#123;<br><span class="hljs-type">SelectionKey</span> <span class="hljs-variable">selectedKey</span> <span class="hljs-operator">=</span> selectedKeys.next();<br><span class="hljs-keyword">if</span>(selectedKey.isAcceptable())&#123;<br><span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> serverSocketChannel.accept();<br>socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>socketChannel.register(selector, SelectionKey.OP_READ);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (selectedKey.isReadable())&#123;<br><span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> (SocketChannel) selectedKey.channel();<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">byteBuffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><span class="hljs-keyword">while</span>((length = socketChannel.read(byteBuffer))&gt;<span class="hljs-number">0</span>)&#123;<br>byteBuffer.flip();<br>Logger.info(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(byteBuffer.array(),<span class="hljs-number">0</span>,length));<br>byteBuffer.clear();<br>&#125;<br>socketChannel.close();<br>&#125;<br>selectedKeys.remove();<br>&#125;<br>&#125;<br>serverSocketChannel.close();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>startServer();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NioReceiveServer</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">RECEIVE_PATH</span> <span class="hljs-operator">=</span> NioDemoConfig.SOCKET_RECEIVE_PATH;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span><br>&#123;<br>    String fileName ;<br>    <span class="hljs-type">long</span> fileLength ;<br>    <span class="hljs-type">long</span> startTime  ;<br>    InetSocketAddress remoteAddress ;<br>    FileChannel outChannel ;<br>    <span class="hljs-type">long</span> receiveLength ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFinished</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> receiveLength &gt;= fileLength ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(NioDemoConfig.SERVER_BUFFER_SIZE);<br>Map&lt;SelectableChannel , Client&gt; clientMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;SelectableChannel , Client&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startServer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<br>&#123;<br>    <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>    <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">serverChannel</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br>    <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> serverChannel.socket();<br>    serverSocket.configureBlocking(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">18899</span>);<br>    serverSocket.bind(address);<br>    serverChannel.register(selector , SelectionKey.OP_ACCEPT);<br>    Print.tcfo(<span class="hljs-string">&quot;server is listening ...&quot;</span>);<br>    <span class="hljs-keyword">while</span>(selector.select() &gt;<span class="hljs-number">0</span> )&#123;<br>        Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>                <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> it.next();<br>                <span class="hljs-keyword">if</span>(key.isAcceptable())&#123;<br>                    <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> (ServerSocketChannel)key.channel();<br>                    <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> server.accept();<br>                    <span class="hljs-keyword">if</span> (socketChannel == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span> ;<br>                    socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">selectionKey</span> <span class="hljs-operator">=</span> socketChannel.register(selector,SelectionKey.OP_READ);<br>                    <span class="hljs-type">Client</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();<br>                    client.remoteAddress = (InetSocketAddress)socketChannel.getRemoteAddress();<br>                    clientMap.put(socketChannel,client);<br>                    Logger.debug(socketChannel.getRemoteAddress()+<span class="hljs-string">&quot;连接成功 ...&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isReadable())&#123;<br>                            processData(key);<br>                    &#125; <br>                    it.remove();<br>                &#125;<br>        &#125;  <br>    &#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processData</span> <span class="hljs-params">(SelectionKey key)</span> <span class="hljs-keyword">throws</span> IOException <br>&#123;<br>    <span class="hljs-type">Client</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> clientMap.get(key.channel());<br>    <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> (SocketChannel)key.channel();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        buffer.clear();<br>        <span class="hljs-keyword">while</span>((num = socketChannel.read(buffer)) &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == client.fileName)&#123; <br>                <span class="hljs-keyword">if</span>(buffer.capacity() &lt; <span class="hljs-number">4</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">fileNameLen</span> <span class="hljs-operator">=</span> buffer.getInt();<br>            <span class="hljs-type">byte</span>[] fileNameBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[fileNameLen];<br>            buffer.get(fileNameBytes);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(fileNameBytes,charset);<br>            <span class="hljs-type">File</span> <span class="hljs-variable">dirctory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(RECEIVE_PATH);<br>            <span class="hljs-keyword">if</span> (!dirctory.exists())&#123; <br>                dirctory.mkdirs();<br>            &#125;<br>            Logger.info(<span class="hljs-string">&quot;NIO 传输目标dir ： &quot;</span>+ dirctory);<br>            client.fileName = fileName;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fullName</span> <span class="hljs-operator">=</span> dirctory.getAbsolutePath() + File.separator + fileName;<br>            Logger.info(<span class="hljs-string">&quot;NIO 传输目标文件：&quot;</span> + fullName);<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fullName.trim());<br>            <span class="hljs-keyword">if</span> (!file.exists())&#123;<br>                file.createNewFile();<br>            &#125;<br>            <span class="hljs-type">FileChannel</span> <span class="hljs-variable">fileChannel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file).getChannel();<br>            client.outChannel = fileChannel;<br>            <span class="hljs-keyword">if</span>(buffer.capacity() &lt; <span class="hljs-number">8</span>)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">fileLength</span> <span class="hljs-operator">=</span> buffer.getLong();<br>            client.fileLength = fileLength;<br>            client.startTime = System.currentTimeMillis();<br>            Logger.info(<span class="hljs-string">&quot;传输开始&quot;</span>);<br>            client.receiveLength += buffer.capacity();<br>            <span class="hljs-keyword">if</span>(buffer.capacity() &gt; <span class="hljs-number">0</span>)&#123;<br>                client.outChannel.write(buffer);<br>            &#125;<span class="hljs-keyword">if</span> (client.isFinished())&#123;<br>                finished(key,client);<br>            &#125;<br>            buffer.clear();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            client.receiveLength += buffer.capacity();<br>            client.outChannel.write(buffer);<br>            <span class="hljs-keyword">if</span> (client.isFinished())&#123;<br>                finished(key,client);<br>            &#125;<br>            buffer.clear();<br>        &#125;<br>    &#125;key.cancel();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        key.cancel();<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span> )&#123;<br>        finished(key,client);<br>        buffer.clear();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finished</span><span class="hljs-params">(SelectionKey key,Client client)</span>&#123;<br>    ImageOutputStreamImpl.closeQuietly(client.outChannel);<br>    Logger.info(<span class="hljs-string">&quot;传输结束&quot;</span>);<br>    key.cancel();<br>    Logger.debug(<span class="hljs-string">&quot;文件传输成功,File Name : &quot;</span>+ client.fileName);<br>    Logger.debug(<span class="hljs-string">&quot;文件传输成功,File Length : &quot;</span>+ client.fileLength);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <br>    Logger.debug(<span class="hljs-string">&quot;文件传输成功,File Speed : &quot;</span>+ client.fileLength/(endTime - client.startTime));<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>    <span class="hljs-type">NioReceiveServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioReceiveServer</span>();<br>    server.startServer();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 VI 网络编程</title>
    <link href="/2025/04/29/Java%E7%BC%96%E7%A8%8B-VI-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/04/29/Java%E7%BC%96%E7%A8%8B-VI-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>socket提供了与外部网络通信的网络接口</p><h2 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h2><p>InetAddress 提供了一些获取ip地址信息的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> InetAddress <span class="hljs-title function_">getByName</span><span class="hljs-params">(String host)</span>     <br><span class="hljs-keyword">static</span> InetAddress[] getAllByName(String host)  <span class="hljs-comment">// 为给定主机名创建一个InetAddress对象</span><br><span class="hljs-keyword">static</span> InetAddress <span class="hljs-title function_">getLocalHost</span><span class="hljs-params">()</span>  <span class="hljs-comment">// 为本地主机创建一个InetAddress对象</span><br><span class="hljs-type">byte</span>[] getAddress()         <span class="hljs-comment">// 获取数字型地址的字节数组</span><br>String <span class="hljs-title function_">getHostAddress</span><span class="hljs-params">()</span>     <span class="hljs-comment">// 以字符串返回主机地址</span><br>String <span class="hljs-title function_">getHostName</span><span class="hljs-params">()</span>        <span class="hljs-comment">// 返回主机名</span><br></code></pre></td></tr></table></figure><h2 id="创建一个Socket-Server"><a href="#创建一个Socket-Server" class="headerlink" title="创建一个Socket Server"></a>创建一个Socket Server</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.* ;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Echoserver</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123; <br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">var</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8189</span>))&#123;<br>            <span class="hljs-keyword">try</span>(<span class="hljs-type">Socket</span> <span class="hljs-variable">incoming</span> <span class="hljs-operator">=</span> s.accept())&#123;<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">inStream</span> <span class="hljs-operator">=</span> incoming.getInputStream();<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outStream</span> <span class="hljs-operator">=</span> incoming.getOutputStream();<br>                <span class="hljs-keyword">try</span>(<span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(inStream, StandardCharsets.UTF_8))&#123;<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outStream,StandardCharsets.UTF_8),<span class="hljs-literal">true</span>);<br>                    out.println(<span class="hljs-string">&quot;Hello! Enter BYE to exit.&quot;</span>);<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">done</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">while</span>(!done&amp;&amp;in.hasNextLine())&#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> in.nextLine();<br>                        out.println(<span class="hljs-string">&quot;Echo:&quot;</span>+line);<br>                        <span class="hljs-keyword">if</span>(line.trim().equals(<span class="hljs-string">&quot;BYE&quot;</span>))<br>                            done = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>      <br>        &#125;;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当前的服务器 只能接受一个用户请求，使用 多线程将它改造为接受多个用户请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.* ;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Echoserver</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123; <br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">var</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8189</span>))&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">incoming</span> <span class="hljs-operator">=</span> s.accept();<br>                <span class="hljs-type">Runnable</span> <span class="hljs-variable">thread_mission</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadedHandler</span>(incoming);<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(thread_mission);<br>                t.start();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket incoming;<br>    ThreadedHandler(Socket incoming)&#123;<br>        <span class="hljs-built_in">this</span>.incoming = incoming;<br>    &#125;<br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inStream</span> <span class="hljs-operator">=</span> incoming.getInputStream();<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outStream</span> <span class="hljs-operator">=</span> incoming.getOutputStream();<br>            <span class="hljs-keyword">try</span>(<span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(inStream, StandardCharsets.UTF_8))&#123;<br>                <span class="hljs-type">var</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outStream,StandardCharsets.UTF_8),<span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">//flush 强制将缓存区数据发送出去。</span><br>                out.println(<span class="hljs-string">&quot;Hello! Enter BYE to exit.&quot;</span>);<br>                <span class="hljs-type">var</span> <span class="hljs-variable">done</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">while</span>(!done&amp;&amp;in.hasNextLine())&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> in.nextLine();<br>                    out.println(<span class="hljs-string">&quot;Echo:&quot;</span>+line);<br>                    <span class="hljs-keyword">if</span>(line.trim().equals(<span class="hljs-string">&quot;BYE&quot;</span>))<br>                        done = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从这里可以看出TCP端口虽然是固定的，但操作系统通过为每个连接分配唯一的 socket（基于四元组标识）来实现多个连接共用一个监听端口。应用程序通常为每个 socket 启动一个线程或事件循环进行数据处理，从而实现高并发连接的处理。</p><h2 id="半关闭"><a href="#半关闭" class="headerlink" title="半关闭"></a>半关闭</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">tar (<span class="hljs-type">var</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(host,port))&#123;<br><span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(socket.getInputStream(),StandardCharsets.UTF_8);<br><span class="hljs-type">var</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(socket.getOutputStream());<br>writer.print(...);<br>writer.flush();<br>socket.shutdownOutput();<br><span class="hljs-keyword">while</span>(in.hasNextLine() !=<span class="hljs-literal">null</span> )<br>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> in.next.line;<br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>java提供了url 对象来对web 数据的访问地址进行封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InputStream</span> <span class="hljs-variable">inStream</span> <span class="hljs-operator">=</span> url.OpenStream();<br><span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(inStream,StandardCharsets.UTF-<span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure><p>urlconnection</p><p>从url中获取更多的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> url.openConnecton();<br></code></pre></td></tr></table></figure><p>URL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">InputStream <span class="hljs-title function_">openStream</span><span class="hljs-params">()</span><br>URLConnection <span class="hljs-title function_">openConnection</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p>URLConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setDoInput</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 设置接收数据状态</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">getDoInput</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取接收护数据的状态</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setDoOutput</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 设置创建发送流</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">getDoOutput</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取发送流的状态</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setIfModifiedSince</span><span class="hljs-params">(<span class="hljs-type">long</span> time)</span><br><span class="hljs-comment">// 获取某个时间点依赖修改的数据</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getIfModifiedSince</span><span class="hljs-params">()</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setConnectTimeout</span><span class="hljs-params">()</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getConnectTimeout</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 设置连接的超时时间</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getReadTimeout</span><span class="hljs-params">()</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setReadTimeout</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 设置读取数据的超时时间</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setRequestProperty</span><span class="hljs-params">(String key ,String value)</span><br>Map&lt;String,List&lt;String&gt;&gt; <span class="hljs-title function_">getRequestProperties</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 设置 /读取 请求头中的属性</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 连接远程资源并获取头部信息</span><br>Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">getHeaderFields</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取响应头映射表</span><br>String <span class="hljs-title function_">getHeaderFileKey</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>String <span class="hljs-title function_">getHeaderField</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br><span class="hljs-comment">// 获取第n个响应头的键/值信息</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getContentLength</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取内容长度</span><br>String <span class="hljs-title function_">getConnentType</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取内容的类型</span><br>String <span class="hljs-title function_">getContentEncoding</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取编码信息</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getDate</span><span class="hljs-params">()</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getExpiration</span><span class="hljs-params">()</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getLastModifed</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取创建日期，超时日期和最后一次修改的日期</span><br>InputStream <span class="hljs-title function_">getInputStream</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取一个输入流</span><br>OutputStream <span class="hljs-title function_">getOutputStream</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 获取一个输出流</span><br>Object <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><h2 id="HTTP-客户端"><a href="#HTTP-客户端" class="headerlink" title="HTTP 客户端"></a>HTTP 客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newHttpClient()<br><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newBuilder().followRedirects(HttpClient.Redirect.ALWAYS).build()<br><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newBuilder().uri(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;&lt;http://horstmann.com&gt;&quot;</span>)).GET().build()<br><span class="hljs-comment">// 创建 get请求</span><br><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newBuilder().uri(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url)).POST(HttpRequest.BodyPublishers.ofString(jsonString)).build())<br><span class="hljs-comment">// 创建 post请求</span><br></code></pre></td></tr></table></figure><p>通过 HttpResponse 接收客户端响应</p><p>HttpResponse<code>&lt;T&gt;</code> 类 接收一个 经过响应处理器（HttpResponse.BodyHandlers.ofString()）处理的响应对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpResponse&lt;String&gt; response = client.send(request,HttpResponse.BodyHandlers.ofString());<br></code></pre></td></tr></table></figure><p>通过HttpResponses 还可以获取头信息和状态码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> response.statusCode();       <span class="hljs-comment">// 获取状态码信息</span><br><span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">responseHeaders</span> <span class="hljs-operator">=</span> response.headers();   <span class="hljs-comment">// 获取响应头</span><br>Map&lt;String,List&lt;String&gt;&gt; headerMap = responseHeaders.map();  <span class="hljs-comment">// 获取响应头的映射信息</span><br>Optional&lt;String&gt; lastModified = responseHeaders.firstValue(<span class="hljs-string">&quot;Last-Modified&quot;</span>); <span class="hljs-comment">// 获取具体的字段</span><br><br><span class="hljs-type">ExecutorSevice</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executor.newCachedThreadPool();  <span class="hljs-comment">//创建线程池</span><br><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newBuilder().executor(executor).build();  <span class="hljs-comment">// 创建client放入线程池</span><br><br><span class="hljs-type">HttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> HttpRequest.newBuilder().uri(uri).GET().build();<br>client.sendAsync(request, HttpResponse.BodyHandlers.ofString())  <br>.thenAccept(response-&gt;);  <span class="hljs-comment">// 创建异步响应，创建请求，使用client 发送该请求，并通过thenAccept</span><br><span class="hljs-comment">//  来处理得到响应后的任务</span><br></code></pre></td></tr></table></figure><p>方法签名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpClient <br><span class="hljs-keyword">static</span> HttpClient <span class="hljs-title function_">newHttpClient</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 创建一个默认的HttpClient对象</span><br><span class="hljs-keyword">static</span> HttpClient.Builder <span class="hljs-title function_">newBuilder</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 在流中创建一个HttpClient 对象</span><br>&lt;T&gt; HttpResponse&lt;T&gt; <span class="hljs-title function_">send</span><span class="hljs-params">(HttpRequest request , HttpResponse.BodyHandler&lt;T&gt; responseBodyHandler)</span><br><span class="hljs-comment">// client 发送一个请求，返回一个HttpResponse对象</span><br>&lt;T&gt; CompletableFuture&lt;HttpResponse&lt;T&gt;&gt; <span class="hljs-title function_">sendAsync</span><span class="hljs-params">(HttpRequest request, HttpResponse.BodyHandler </span><br><span class="hljs-params">// 使用sendAsync 发送一个异步请求， 后续使用thenAccept接收异步响应的处理</span><br><span class="hljs-params">&lt;T&gt; responseBodyHandler )</span><br><br>HttpClient.Builder<br>HttpClient <span class="hljs-title function_">build</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 创建一个HttpClient 实例（终结方法）</span><br>HttpClient.Builder <span class="hljs-title function_">followRedirects</span><span class="hljs-params">(HttpClient.Redirect policy(ALWAYS, NEVR,NORMAL)</span>)<br><span class="hljs-comment">// 设置客户端接收重定向的策略</span><br>HttpClient.Builder <span class="hljs-title function_">executor</span><span class="hljs-params">(Executor executor)</span><br><span class="hljs-comment">// 将客户端加入指定的执行器</span><br><br>HttpRequest<br>HttpRequest.Builder <span class="hljs-title function_">newBuilder</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 流式调用创建一个request请求</span><br>HttpRequest.Builder<br>HttpRequest <span class="hljs-title function_">build</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 创建一个HttpRequest 实例 （终结方法）</span><br>HttpRequest.Builder <span class="hljs-title function_">uri</span><span class="hljs-params">(URI uri)</span><br><span class="hljs-comment">// 流式调用中指定uri</span><br>HttpRequest.Builder <span class="hljs-title function_">GET</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 指定http get方法</span><br>HttpRequest.Builder <span class="hljs-title function_">DELETE</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 指定 http delete 方法</span><br>HttpRequest.Builder <span class="hljs-title function_">POST</span><span class="hljs-params">(HttpRequest.BodyPublisher bodyPublisher)</span><br><span class="hljs-comment">// 指定 http post 方法 接收一个请求体</span><br>HttpRequest.Builder <span class="hljs-title function_">PUT</span><span class="hljs-params">(HttpRequest.BodyPublisher bodyPublisher)</span><br><span class="hljs-comment">// 指定 http put 方法 接收一个请求头</span><br>HttpResponse<br>T <span class="hljs-title function_">body</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 产生响应体</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">statusCode</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 状态码</span><br>HttpHeaders <span class="hljs-title function_">headers</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 响应头</span><br><br>HttpHeaders<br>Map&lt;String , List&lt;String&gt;&gt; <span class="hljs-title function_">map</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 通过map 获取 httpheaders 的映射</span><br>Optional&lt;String&gt; <span class="hljs-title function_">firstValue</span><span class="hljs-params">(String name)</span><br><span class="hljs-comment">// 获取 头中属性的第一个值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 V 并发</title>
    <link href="/2025/04/29/Java%E7%BC%96%E7%A8%8B-V-%E5%B9%B6%E5%8F%91/"/>
    <url>/2025/04/29/Java%E7%BC%96%E7%A8%8B-V-%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>在java中，通过实现Runnable接口，可以实现多线程的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> ()-&gt;&#123;System.out.println(Thread.currentThread().getName());&#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> ()-&gt;&#123;System.out.println(Thread.currentThread().getName());&#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t2);<br>        m.start();<br>        s.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * Thread-1</span><br><span class="hljs-comment"> * Thread-0</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h2><p>当有多个线程需要共享对同一数据的存取，并且都调用了要对对象进行修改的方法，就会发生竞态条件。因为这些方法是非原子的 ，即 读-处理-存储 并非是同一个操作，这时就会导致读取的数据可能在多个线程间被处理，导致最终的结果不稳定。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>通过定义锁结构，将一系列操作变为原子化操作，即在这一些列操作被完全执行前，其他线程无法对这个共享资源进行操作。</p><p>未加锁，非原子操作导致数据异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_Test</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">100</span>)&#123;<br>                        count++;<br>                        i++;<br>                        System.out.println(<span class="hljs-string">&quot;thread_name: &quot;</span>+ Thread.currentThread().getName() +<span class="hljs-string">&quot;count : &quot;</span> + count);<br>                        Thread.sleep(<span class="hljs-number">10</span>);   <br>                    &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">while</span> ( i &lt; <span class="hljs-number">100</span>)&#123;<br>                        count++;<br>                        i++;<br>                        System.out.println(<span class="hljs-string">&quot;thread_name: &quot;</span>+ Thread.currentThread().getName() +<span class="hljs-string">&quot;count : &quot;</span> + count);<br>                        Thread.sleep(<span class="hljs-number">10</span>);   <br>                    &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t2);<br>        m.start();<br>        s.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对共享变量 count 加锁，程序正常运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_Test</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">100</span>)&#123;<br>                        lock.lock();<br>                        count++;<br>                        lock.unlock(); <br>                        i++;<br>                        System.out.println(<span class="hljs-string">&quot;thread_name: &quot;</span>+ Thread.currentThread().getName() +<span class="hljs-string">&quot;count : &quot;</span> + count);<br>                        Thread.sleep(<span class="hljs-number">10</span>);   <br><br>                    &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">while</span> ( i &lt; <span class="hljs-number">100</span>)&#123;<br>                        lock.lock();<br>                        count++;<br>                        lock.unlock(); <br>                        i++;<br>                        System.out.println(<span class="hljs-string">&quot;thread_name: &quot;</span>+ Thread.currentThread().getName() +<span class="hljs-string">&quot;count : &quot;</span> + count);<br>                        Thread.sleep(<span class="hljs-number">10</span>);   <br><br>                    &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t2);<br>        m.start();<br>        s.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a>synchronized 关键字</h2><p>synchronized 关键字本身是用来声明一个对象作为整体是只可以被某个线程所“独占”的。</p><p>所以通过以下几种方法可以定义不同的控制块</p><table><thead><tr><th>类型</th><th>加锁对象</th><th>影响范围</th></tr></thead><tbody><tr><td><code>synchronized</code>实例方法</td><td>当前实例 (<code>this</code>)</td><td>同一个对象的同步方法互斥</td></tr><tr><td><code>synchronized</code>静态方法</td><td>当前类的 <code>Class</code>对象</td><td>所有实例共享一把锁，互斥</td></tr><tr><td><code>synchronized (obj)</code></td><td>自定义锁对象 (<code>obj</code>)</td><td>只在使用这把锁的代码块互斥</td></tr></tbody></table><p>通过synchronized 来声明一个方法是一个线程安全的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_Test</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;          <br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">storer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>                        operation(-<span class="hljs-number">5</span>);<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">getter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>                        operation(<span class="hljs-number">5</span>);<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                &#125;<br><br>            &#125;;<br>;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(storer);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(getter);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>    <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span>&#123;<br>        count = count + money;<br>      <br>        System.out.println(<span class="hljs-string">&quot;current thread : &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot; , current count : &quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Object-的通知-等待"><a href="#Object-的通知-等待" class="headerlink" title="Object 的通知-等待"></a>Object 的通知-等待</h2><p>通过创建一个对象来，进行数据块的控制，<br>每个对象在JVM中有一个 <strong>监视器锁（Monitor）</strong> ，这是实现synchronized关键字背后的基础。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_Test</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(); <span class="hljs-comment">// 统一监视器锁</span><br>    <span class="hljs-keyword">static</span> List&lt;Integer&gt; array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                            <span class="hljs-keyword">while</span> (array.size() == <span class="hljs-number">10</span>) &#123; <br>                                lock.wait(); <span class="hljs-comment">// 如果满了，等待</span><br>                            &#125;<br>                            array.add(<span class="hljs-number">1</span>); <span class="hljs-comment">// 添加元素</span><br>                            array.add(<span class="hljs-number">1</span>); <span class="hljs-comment">// 添加元素</span><br>                            System.out.println(<span class="hljs-string">&quot;Producer added, size: &quot;</span> + array.size());<br>                            lock.notifyAll(); <span class="hljs-comment">// 唤醒等待的线程</span><br>                        &#125;<br>                        Thread.sleep(<span class="hljs-number">100</span>); <span class="hljs-comment">// 让出CPU</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                            <span class="hljs-keyword">while</span> (array.size() &lt;= <span class="hljs-number">0</span>) &#123; <br>                                lock.wait(); <span class="hljs-comment">// 如果空了，等待</span><br>                            &#125;<br>                            array.remove(<span class="hljs-number">0</span>); <span class="hljs-comment">// 移除元素</span><br>                            System.out.println(<span class="hljs-string">&quot;Consumer removed, size: &quot;</span> + array.size());<br>                            lock.notifyAll(); <span class="hljs-comment">// 唤醒等待的线程</span><br>                        &#125;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(producer);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(consumer);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>所以 控制竞态条件的操作有两种</p><p>1.lock + condition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(); <span class="hljs-comment">// 创建一把锁</span><br><span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition(); <span class="hljs-comment">// 创建一把条件（跟这把锁绑定）</span><br>lock.lock(); <span class="hljs-comment">// 加锁</span><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">while</span> (不满足条件) &#123;<br>        condition.await(); <span class="hljs-comment">// 等待，并释放锁</span><br>    &#125;<br>    <span class="hljs-comment">// 满足条件后继续执行</span><br>    <span class="hljs-comment">// 处理逻辑...</span><br>    condition.signalAll(); <span class="hljs-comment">// 唤醒其他等待线程</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    lock.unlock(); <span class="hljs-comment">// 释放锁</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.synchronized + 对象块控制的等待，通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread_Test</span><span class="hljs-params">()</span> &#123;<br>    array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br>&#125;<br><br><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">store</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span>  InterruptedException&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">this</span>.array.size() &gt;= <span class="hljs-number">10</span>)&#123;<br>        wait();<br>    &#125;<br>    array.add(<span class="hljs-number">1</span>);<br>    System.out.println(array.size());<br>    notifyAll();<br>&#125;<br><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> InterruptedException&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.array.size() &lt;= <span class="hljs-number">0</span>)&#123;<br>        wait();<br>    &#125;<br>    array.remove(<span class="hljs-number">0</span>);<br>    System.out.println(array.size());<br>    notifyAll();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">callable_test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        Callable&lt;Integer&gt; callable = () -&gt; &#123;            <span class="hljs-comment">//实现Callable接口</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>  ;i &lt; <span class="hljs-number">100</span> ; i++)&#123;<br>                a.num++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> a.num;<br>        &#125;;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">futuretask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;Integer&gt;(callable);  <span class="hljs-comment">//将Callable传入 futuretask</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futuretask).start();                      <span class="hljs-comment">// 传入线程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> futuretask.get();                  <span class="hljs-comment">// 从futuretask获取返回值</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();  <br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(a.num);<br>        &#125;<br>      <br><br>    &#125;  <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用执行器"><a href="#使用执行器" class="headerlink" title="使用执行器"></a>使用执行器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// newCachedThreadPool               创建一个线程池</span><br><span class="hljs-comment">// newFixedThreadPool                创建一个固定线程数的线程池</span><br><span class="hljs-comment">// newWorkStealingPool               fork-join 任务的线程池</span><br><span class="hljs-comment">// newSingleThreadPool               只有一个线程的“池”，会顺序地执行提交的任务</span><br><span class="hljs-comment">// newScheduledThreadPool            用于调度执行的固定线程池</span><br><span class="hljs-comment">// newSingleThreadScheduledExecutor  用于调度执行的单线程“池”</span><br></code></pre></td></tr></table></figure><h3 id="向线程池提交线程"><a href="#向线程池提交线程" class="headerlink" title="向线程池提交线程"></a>向线程池提交线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Callable&lt;T&gt; task)</span><br>Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Runable task)</span><br>Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Runable task ,T task)</span><br><br><span class="hljs-type">var</span> <span class="hljs-variable">futuretask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;Integer&gt;(callable);<br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>executor.submit(futuretask);<br>executor.shutdown();<br></code></pre></td></tr></table></figure><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><p>异步本身是为了解决线程执行过程中 线程阻塞导致整体执行效率降低的问题。</p><p>在所有流程被串行执行时，流程中的任务等待响应阻塞后续任务的执行。</p><h2 id="ComplateFuture"><a href="#ComplateFuture" class="headerlink" title="ComplateFuture"></a>ComplateFuture</h2><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>java中创建进程</p><p>通过ProcessBuilder来进行进程创建。</p><p>java中的进程创建是向操作系统申请创建一个全新的进程，并不与</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;gcc&quot;</span>,<span class="hljs-string">&quot;myapp.c&quot;</span>)<br><br>builder = builder.directory(path.toFile());<br><span class="hljs-comment">// 改变工作目录</span><br><span class="hljs-type">OutStream</span> <span class="hljs-variable">processln</span> <span class="hljs-operator">=</span> p.getOutputStream();        <span class="hljs-comment">// 接收标准输出</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">processOut</span> <span class="hljs-operator">=</span> p.getInputStream();      <span class="hljs-comment">// 接收标准输入</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">processError</span> <span class="hljs-operator">=</span> p.getErrorStream();    <span class="hljs-comment">// 接收标准错误</span><br><br><span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;/bin/s&quot;</span>,<span class="hljs-string">&quot;-l&quot;</span>);<br>.directory(Path.of(<span class="hljs-string">&quot;/tmp&quot;</span>).toFile())<br>.start();<br><br><span class="hljs-keyword">try</span> (<span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(process.getInputStream()))&#123;<br><span class="hljs-keyword">while</span> (in.hasNextLine())<br>System.out.println(in.nextLine());<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> process.waitFor();     <span class="hljs-comment">// 等待进程执行结果</span><br><span class="hljs-comment">//或者</span><br><span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> ... ;<br><span class="hljs-keyword">if</span> (process.waitfor(delay,TimeUnit.SECONDS))&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> process.exitValue();<br>...<br>&#125;<span class="hljs-keyword">else</span> &#123; <br>process.destroyForcibly();<br>&#125;<br><br>process.onExit().thenAccept( <br> p-&gt;System.out.println(<span class="hljs-string">&quot;Exit value : &quot;</span>+ p.exitValue()));<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 IV 扩展功能</title>
    <link href="/2025/04/29/Java%E7%BC%96%E7%A8%8B-IV-%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/"/>
    <url>/2025/04/29/Java%E7%BC%96%E7%A8%8B-IV-%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>在java 8 中 ，通过加入默认方法，向java的接口中加入了流处理的功能</p><p>流处理分为3种：</p><p>创建流</p><p>修改流元素</p><p>消费流元素</p><h2 id="流的创建"><a href="#流的创建" class="headerlink" title="流的创建"></a>流的创建</h2><p>使用 Stream.of 创建流对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionToStream</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Stream.of(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bubble</span>(<span class="hljs-number">1</span>),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bubble</span>(<span class="hljs-number">2</span>),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bubble</span>(<span class="hljs-number">3</span>)<br>        ).forEach(System.out::println);<br>        Stream.of(<br>            <span class="hljs-string">&quot;It&#x27;s&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;wonderful&quot;</span>,<span class="hljs-string">&quot;day&quot;</span>,<span class="hljs-string">&quot;for&quot;</span>,<span class="hljs-string">&quot;pie&quot;</span><br>        );<br>        System.out.println();<br>      <br>    &#125;<br>  <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bubble</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Bubble</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = size;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Stream.of 会将 传入的 序列对象转换为 Spliterator 对象来处理这些对象</p><h3 id="使用random创建流"><a href="#使用random创建流" class="headerlink" title="使用random创建流"></a>使用random创建流</h3><p>random 会随机生成 特定类型的对象，作为返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.* ;<br><span class="hljs-keyword">import</span> java.util.stream.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomGenerators</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span> <span class="hljs-params">(Stream&lt;T&gt; stream )</span>&#123;<br>        stream<br>        .limit(<span class="hljs-number">4</span>)<br>        .forEach(System.out::println);<br>        System.out.println(<span class="hljs-string">&quot;++++++++++&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">47</span>);<br>        show(rand.ints().boxed());           <span class="hljs-comment">// 随机产生整数</span><br>        show(rand.longs().boxed());           <span class="hljs-comment">// 随机产生长整型</span><br>        show(rand.doubles().boxed());         <span class="hljs-comment">// 随机产生双精度浮点数</span><br>        show(rand.ints(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>).boxed());       <span class="hljs-comment">// 随机产生10到20之间的整数</span><br>        show(rand.longs(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>).boxed());      <span class="hljs-comment">// 随机产生10到20之间的长整型</span><br>        show(rand.doubles(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>).boxed());    <span class="hljs-comment">// 随机产生10到20之间的双精度浮点数</span><br>        show(rand.ints(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>).boxed());         <span class="hljs-comment">// 随机产生3到9之间的整数,长度为3</span><br>        show(rand.longs(<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">22</span>).boxed());      <span class="hljs-comment">// 随机产生12到22之间的长整型,长度为3</span><br>        show(rand.doubles(<span class="hljs-number">3</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12.3</span>).boxed());  <span class="hljs-comment">// 随机产生11到12.3之间的双精度浮点数,长度为3</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用range构造流"><a href="#使用range构造流" class="headerlink" title="使用range构造流"></a>使用range构造流</h3><p>range 是将某个范围内的值作为返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.util.stream.IntStream.range;<br><br><span class="hljs-comment">//import static java.util.stream.IntStream</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ranges</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> ; i &lt; <span class="hljs-number">20</span> ; i++)&#123;result+=i ;&#125;<br>        System.out.println(result);<br>        result = <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : range(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>).toArray())&#123;<br>            result+=i ;<br>        &#125;<br>        System.out.println(result);<br>        System.out.println(range(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>).sum());<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="generate"><a href="#generate" class="headerlink" title="generate()"></a>generate()</h3><p>generate 接收一个实现了supplier类的实现类，类中定义 了一个获取方法来每次获取目标对象中的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.* ;<br><span class="hljs-keyword">import</span> java.util.function.*;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Supplier</span>&lt;String&gt;&#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">35</span>);<br>    <span class="hljs-type">char</span>[] letter = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>.toCharArray();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> + letter[rand.nextInt(letter.length)];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> Stream.generate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Generator</span>())<br>        .limit(<span class="hljs-number">30</span>)<br>        .collect(Collectors.joining());<br>        System.out.println(word);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="iterate"><a href="#iterate" class="headerlink" title="iterate()"></a>iterate()</h3><p>iterate 则是作为一个接口 ，每次通过调用函数来创建值作为其流的返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.stream.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fibonacci</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;<br>    Stream &lt;Integer&gt; numbers()&#123;<br>        <span class="hljs-keyword">return</span> Stream.iterate(<span class="hljs-number">0</span>,i-&gt;&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> x+i;<br>            x = i;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fibonacci</span>().numbers()<br>        .limit(<span class="hljs-number">10</span>)<br>        .forEach(System.out::println);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p>通过Arrays中的stream方法可以将数组转换为流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.utils.*;<br><span class="hljs-keyword">import</span> java.util.stream.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStreams</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>Arrays.stream(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">3.14159</span>,<span class="hljs-number">2.718</span>,<span class="hljs-number">1.618</span>&#125;)<br>.forEach(n-&gt;System.out.format(<span class="hljs-string">&quot;%f&quot;</span>,n));<br>)<br>System.out.println();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="修改流"><a href="#修改流" class="headerlink" title="修改流"></a>修改流</h2><p>peek() 用于查看流而非修改</p><p>sorted() 对数据进行排序</p><p>distinct() 移除重复元素</p><p>map() 将函数应用于流中的对象</p><p>option() 查询对象中是否存在请求端值</p><h2 id="终结流"><a href="#终结流" class="headerlink" title="终结流"></a>终结流</h2><p>toArray() 将流转换为一个数组</p><p>foreach() 对流中的每个元素进行执行</p><p>collect() 将元素收集到一个结果集合中</p><p>reduce() 组合所有元素</p><p>allMatch() 匹配元素</p><p>findFirst() 选择一个元素</p><p>findAny() 返回一个包含某个元素的Optional</p><p>count() 统计流中元素的数量</p><p>min()</p><p>max()</p><h1 id="文件的流式读取"><a href="#文件的流式读取" class="headerlink" title="文件的流式读取"></a>文件的流式读取</h1><h3 id="InputStream（抽象类）"><a href="#InputStream（抽象类）" class="headerlink" title="InputStream（抽象类）"></a>InputStream（抽象类）</h3><ul><li><code>FileInputStream</code> - 从文件读取字节</li><li><code>ByteArrayInputStream</code> - 从字节数组读取字节</li><li><code>FilterInputStream</code> - 装饰器的基类<ul><li><code>BufferedInputStream</code> - 使用缓冲区提高读取效率</li><li><code>DataInputStream</code> - 读取基本数据类型</li><li><code>ObjectInputStream</code> - 读取对象</li></ul></li><li><code>PipedInputStream</code> - 与PipedOutputStream配对，用于线程间通信</li><li><code>SequenceInputStream</code> - 将多个InputStream合并成一个</li></ul><h3 id="OutputStream（抽象类）"><a href="#OutputStream（抽象类）" class="headerlink" title="OutputStream（抽象类）"></a>OutputStream（抽象类）</h3><ul><li><code>FileOutputStream</code> - 向文件写入字节</li><li><code>ByteArrayOutputStream</code> - 向字节数组写入字节</li><li><code>FilterOutputStream</code> - 装饰器的基类<ul><li><code>BufferedOutputStream</code> - 使用缓冲区提高写入效率</li><li><code>DataOutputStream</code> - 写入基本数据类型</li><li><code>ObjectOutputStream</code> - 写入对象</li><li><code>PrintStream</code> - 打印各种数据值的便捷方式（例如System.out）</li></ul></li><li><code>PipedOutputStream</code> - 与PipedInputStream配对，用于线程间通信</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Java I/O流示例代码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaIOExamples</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            byteStreamExample();<br>            characterStreamExample();<br>            bufferedStreamExample();<br>            dataStreamExample();<br>            objectStreamExample();<br>          <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">byteStreamExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建输入输出流</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;source.txt&quot;</span>);<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;destination.txt&quot;</span>);<br>          <br>            <span class="hljs-comment">// 读取和写入</span><br>            <span class="hljs-type">int</span> byteData;<br>            <span class="hljs-keyword">while</span> ((byteData = fis.read()) != -<span class="hljs-number">1</span>) &#123;<br>                fos.write(byteData);<br>            &#125;<br>          <br>            System.out.println(<span class="hljs-string">&quot;文件复制完成（使用字节流）&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭资源（始终在finally块中进行）</span><br>            <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) fis.close();<br>            <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>) fos.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">characterStreamExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建输入输出流</span><br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;source.txt&quot;</span>);<br>            fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;destination.txt&quot;</span>);<br>          <br>            <span class="hljs-comment">// 读取和写入</span><br>            <span class="hljs-type">int</span> charData;<br>            <span class="hljs-keyword">while</span> ((charData = fr.read()) != -<span class="hljs-number">1</span>) &#123;<br>                fw.write(charData);<br>            &#125;<br>          <br>            System.out.println(<span class="hljs-string">&quot;文件复制完成（使用字符流）&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭资源</span><br>            <span class="hljs-keyword">if</span> (fr != <span class="hljs-literal">null</span>) fr.close();<br>            <span class="hljs-keyword">if</span> (fw != <span class="hljs-literal">null</span>) fw.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bufferedStreamExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建输入输出流</span><br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;source.txt&quot;</span>));<br>            bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;destination.txt&quot;</span>));<br>          <br>            <span class="hljs-comment">// 按行读取和写入</span><br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                bw.write(line);<br>                bw.newLine(); <span class="hljs-comment">// 写入一个换行符</span><br>            &#125;<br>          <br>            System.out.println(<span class="hljs-string">&quot;文件复制完成（使用缓冲流）&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭资源</span><br>            <span class="hljs-keyword">if</span> (br != <span class="hljs-literal">null</span>) br.close();<br>            <span class="hljs-keyword">if</span> (bw != <span class="hljs-literal">null</span>) bw.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataStreamExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 写入基本数据类型</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data.bin&quot;</span>))) &#123;<br>            dos.writeInt(<span class="hljs-number">100</span>);<br>            dos.writeFloat(<span class="hljs-number">123.45f</span>);<br>            dos.writeBoolean(<span class="hljs-literal">true</span>);<br>            dos.writeUTF(<span class="hljs-string">&quot;Hello, Java I/O!&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 读取基本数据类型</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data.bin&quot;</span>))) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> dis.readInt();<br>            <span class="hljs-type">float</span> <span class="hljs-variable">floatValue</span> <span class="hljs-operator">=</span> dis.readFloat();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">boolValue</span> <span class="hljs-operator">=</span> dis.readBoolean();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> dis.readUTF();<br>          <br>            System.out.println(<span class="hljs-string">&quot;读取的数据：&quot;</span> + intValue + <span class="hljs-string">&quot;, &quot;</span> + floatValue + <span class="hljs-string">&quot;, &quot;</span> + <br>                               boolValue + <span class="hljs-string">&quot;, &quot;</span> + strValue);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">objectStreamExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 创建一个可序列化的类的实例</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">30</span>);<br>      <br>        <span class="hljs-comment">// 写入对象</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;person.obj&quot;</span>))) &#123;<br>            oos.writeObject(person);<br>            System.out.println(<span class="hljs-string">&quot;对象已写入文件&quot;</span>);<br>        &#125;<br>      <br>        <span class="hljs-comment">// 读取对象</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;person.obj&quot;</span>))) &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">readPerson</span> <span class="hljs-operator">=</span> (Person) ois.readObject();<br>            System.out.println(<span class="hljs-string">&quot;读取的对象：&quot;</span> + readPerson);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>  <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testa</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>  <span class="hljs-number">1</span>/<span class="hljs-number">0</span>; <br>           System.out.println(<span class="hljs-string">&quot;try&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;catch a error&quot;</span>);  <br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;finally&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Java 中，运行时异常对象通常由 JVM 在执行某些操作时（如除以零、空指针访问、数组越界）主动创建。一旦创建，异常对象会通过 JVM 的异常分发机制沿着调用栈向上传播。当遇到匹配的 <code>catch</code> 块时，该块中的异常变量引用（如 <code>catch (IOException e)</code> 中的 <code>e</code>）将自动与该异常对象绑定，从而允许程序员访问异常的详细信息并决定如何处理。</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerException</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SimpleException&#123;<br>        System.out.println(<span class="hljs-string">&quot;Throw SimpleException from f()&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleException</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">InnerException</span> <span class="hljs-variable">ie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerException</span>();<br>        <span class="hljs-keyword">try</span>&#123;<br>            ie.f();<br>        &#125;<span class="hljs-keyword">catch</span>(SimpleException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Caught it!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Exception 是所有异常类的基类</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.net.URI;<br><span class="hljs-keyword">import</span> java.nio.file.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PathInfo</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String id ,Object p)</span>&#123;<br>        System.out.println(id+p);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">(  Path p )</span>&#123;<br>        show(<span class="hljs-string">&quot;toString:\\n &quot;</span>, pbr>        show(<span class="hljs-string">&quot;Exists: &quot;</span>,Files.exists(p));<br>        show(<span class="hljs-string">&quot;RegularFile: &quot;</span>, Files.isRegularFile(p));<br>        show(<span class="hljs-string">&quot;Absolute: &quot;</span>, Files.isDirectory(p));<br>        show(<span class="hljs-string">&quot;FileName: &quot;</span>, p.getFileName());<br>        show(<span class="hljs-string">&quot;Filename : &quot;</span>,p.isAbsolute());<br>        show(<span class="hljs-string">&quot;Parent: &quot;</span>, p.getParent());<br>        show(<span class="hljs-string">&quot;Root: &quot;</span>, p.getRoot());<br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>));<br>        info(Paths.get(<span class="hljs-string">&quot;C:&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>,<span class="hljs-string">&quot;to&quot;</span>,<span class="hljs-string">&quot;nowhere&quot;</span>,<span class="hljs-string">&quot;NoFile.txt&quot;</span>));<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;PathInfo.java&quot;</span>);<br>        info(p);<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">ap</span> <span class="hljs-operator">=</span> p.toAbsolutePath();<br>        info(ap);<br>        info(ap.getParent());<br>        <span class="hljs-keyword">try</span> &#123;<br>            info(p.getParent());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e);<br>        &#125;<br>        <span class="hljs-type">URI</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> p.toUri();<br>        System.out.println(<span class="hljs-string">&quot;URI: &quot;</span> + u);<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">puri</span> <span class="hljs-operator">=</span> Paths.get(u);<br>        System.out.println(Files.exists(puri));<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> puri.toFile();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 Path对象来管理 路径对象。通过File对象来管理文件对象。通过Files来判断路径指向的文件类型</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2><p>字符串本身是储存在堆中的，当进行字符串对象的传递，本质是传递了该字符串的引用</p><p>而当对字符串进行拼接操作时，其流程是 ：</p><p>通过引用 查询到堆中的字符串，计算待拼接字符串的大小，申请对应大小电脑内存，将每个字符串存入新的字符数组中，返回新的对该字符数组的引用。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法名</th><th>说明</th><th>示例</th><th>返回值</th></tr></thead><tbody><tr><td><code>length()</code></td><td>获取字符串长度</td><td><code>&quot;hello&quot;.length()</code></td><td><code>5</code></td></tr><tr><td><code>isEmpty()</code></td><td>是否为空字符串</td><td><code>&quot;&quot;.isEmpty()</code></td><td><code>true</code></td></tr><tr><td><code>isBlank()</code></td><td>是否全为空白字符（Java 11+）</td><td><code>&quot;  &quot;.isBlank()</code></td><td><code>true</code></td></tr><tr><td><code>charAt(int index)</code></td><td>获取指定位置字符</td><td><code>&quot;abc&quot;.charAt(1)</code></td><td><code>&#39;b&#39;</code></td></tr><tr><td><code>equals(String s)</code></td><td>内容相等（区分大小写）</td><td><code>&quot;Hi&quot;.equals(&quot;hi&quot;)</code></td><td><code>false</code></td></tr><tr><td><code>equalsIgnoreCase(String s)</code></td><td>内容相等（忽略大小写）</td><td><code>&quot;Hi&quot;.equalsIgnoreCase(&quot;hi&quot;)</code></td><td><code>true</code></td></tr><tr><td><code>compareTo(String s)</code></td><td>字典序比较</td><td><code>&quot;abc&quot;.compareTo(&quot;bcd&quot;)</code></td><td><code>-1</code></td></tr><tr><td><code>contains(CharSequence s)</code></td><td>是否包含子串</td><td><code>&quot;hello&quot;.contains(&quot;ell&quot;)</code></td><td><code>true</code></td></tr><tr><td><code>startsWith(String s)</code></td><td>是否以 s 开头</td><td><code>&quot;java&quot;.startsWith(&quot;ja&quot;)</code></td><td><code>true</code></td></tr><tr><td><code>endsWith(String s)</code></td><td>是否以 s 结尾</td><td><code>&quot;java&quot;.endsWith(&quot;va&quot;)</code></td><td><code>true</code></td></tr><tr><td><code>indexOf(String s)</code></td><td>第一次出现位置</td><td><code>&quot;hello&quot;.indexOf(&quot;l&quot;)</code></td><td><code>2</code></td></tr><tr><td><code>lastIndexOf(String s)</code></td><td>最后一次出现位置</td><td><code>&quot;hello&quot;.lastIndexOf(&quot;l&quot;)</code></td><td><code>3</code></td></tr><tr><td><code>substring(int begin)</code></td><td>从索引开始截取</td><td><code>&quot;hello&quot;.substring(2)</code></td><td><code>&quot;llo&quot;</code></td></tr><tr><td><code>substring(int begin, int end)</code></td><td>截取区间 [begin, end)</td><td><code>&quot;hello&quot;.substring(1, 4)</code></td><td><code>&quot;ell&quot;</code></td></tr><tr><td><code>trim()</code></td><td>去除首尾空格</td><td><code>&quot;  hi  &quot;.trim()</code></td><td><code>&quot;hi&quot;</code></td></tr><tr><td><code>strip()</code></td><td>去除首尾 Unicode 空白（Java 11+）</td><td><code>&quot;　hi　&quot;.strip()</code></td><td><code>&quot;hi&quot;</code></td></tr><tr><td><code>replace(old, new)</code></td><td>替换所有子串</td><td><code>&quot;a-b&quot;.replace(&quot;-&quot;, &quot;:&quot;)</code></td><td><code>&quot;a:b&quot;</code></td></tr><tr><td><code>replaceFirst(regex, new)</code></td><td>替换第一个匹配项</td><td><code>&quot;abc123&quot;.replaceFirst(&quot;\\\\d&quot;, &quot;X&quot;)</code></td><td><code>&quot;abcX23&quot;</code></td></tr><tr><td><code>replaceAll(regex, new)</code></td><td>替换所有匹配项</td><td><code>&quot;abc123&quot;.replaceAll(&quot;\\\\d&quot;, &quot;&quot;)</code></td><td><code>&quot;abc&quot;</code></td></tr><tr><td><code>toUpperCase()</code></td><td>转大写</td><td><code>&quot;java&quot;.toUpperCase()</code></td><td><code>&quot;JAVA&quot;</code></td></tr><tr><td><code>toLowerCase()</code></td><td>转小写</td><td><code>&quot;JAVA&quot;.toLowerCase()</code></td><td><code>&quot;java&quot;</code></td></tr><tr><td><code>split(String regex)</code></td><td>按正则分割成数组</td><td><code>&quot;a,b,c&quot;.split(&quot;,&quot;)</code></td><td><code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></td></tr><tr><td><code>join(delimiter, ...)</code></td><td>静态方法，连接字符串</td><td><code>String.join(&quot;-&quot;, &quot;a&quot;, &quot;b&quot;)</code></td><td><code>&quot;a-b&quot;</code></td></tr><tr><td><code>toCharArray()</code></td><td>转为字符数组</td><td><code>&quot;abc&quot;.toCharArray()</code></td><td><code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code></td></tr><tr><td><code>valueOf(Object o)</code></td><td>任意对象转字符串</td><td><code>String.valueOf(123)</code></td><td><code>&quot;123&quot;</code></td></tr><tr><td><code>matches(regex)</code></td><td>是否整体匹配正则</td><td><code>&quot;123&quot;.matches(&quot;\\\\d+&quot;)</code></td><td><code>true</code></td></tr><tr><td><code>repeat(int n)</code></td><td>重复字符串 n 次（Java 11+）</td><td><code>&quot;a&quot;.repeat(3)</code></td><td><code>&quot;aaa&quot;</code></td></tr><tr><td><code>stripLeading()</code></td><td>去除前导空白（Java 11+）</td><td><code>&quot;  hi&quot;.stripLeading()</code></td><td><code>&quot;hi&quot;</code></td></tr><tr><td><code>stripTrailing()</code></td><td>去除后导空白（Java 11+）</td><td><code>&quot;hi  &quot;.stripTrailing()</code></td><td><code>&quot;hi&quot;</code></td></tr><tr><td><code>lines()</code></td><td>拆分为行的 Stream（Java 11+）</td><td><code>&quot;a\\nb\\nc&quot;.lines()</code></td><td><code>Stream&lt;String&gt;</code></td></tr></tbody></table><h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><p>用于接收 用户输入</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>next()</code></td><td>读取一个单词（遇到空格&#x2F;换行停止）</td></tr><tr><td><code>nextLine()</code></td><td>读取一整行（直到回车）</td></tr><tr><td><code>nextInt()</code>&#x2F;<code>nextDouble()</code>&#x2F;<code>nextBoolean()</code></td><td>读取整数&#x2F;浮点数&#x2F;布尔值</td></tr><tr><td><code>hasNextInt()</code></td><td>检查下一个是否是整数</td></tr><tr><td><code>close()</code></td><td>关闭输入流（最佳实践）</td></tr></tbody></table><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射是一种可以帮我们获取到对象实际实现类的方法</p><p>当我们进行了向上转型之后，在引用声明侧。我们只能使用引用调用基类的属性和方法。而当我们希望执行 其实际具有的方法时 就无法查看到其方法，所以可以通过反射来查询其本身所具备的方法和属性，再通过向下转型调用对应的方法</p><p>可以通过</p><p>type.getclass() 获取到类信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Anmial</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal is eating&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Anmial</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        System.out.println(Cat.class);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a.getClass();<br>        System.out.println(c.getName());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Anmial</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat is eating&quot;</span>);<br>        System.out.println(Cat.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建的 实例a通过getClass() 获取到的类信息为 Cat</p><p>也可以通过 类字面量查询类的类名 比如 Cat.class 输出 class Cat</p><p>可以通过泛型 来限定 class引用接收的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericClassReferences</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">intClass</span> <span class="hljs-operator">=</span> <span class="hljs-type">int</span>.class;<br>        intClass = <span class="hljs-type">double</span>.class;<br>        Class&lt;Integer&gt; genericIntClass = <span class="hljs-type">int</span>.class;<br>        genericIntClass = Integer.class;<br>        <span class="hljs-comment">// genericIntClass = double.class; //不可用</span><br>        System.out.println(intClass);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对反射的引用声明要求其是某个类的基类，所引用的对象仍然是具体的某个子类。</p><p>因为对于编译器来说，它只记录了已声明对象的类型信息，当你获取它的基类时，并不清楚基类的内容，而清楚所获得的类范围是大于子类的，所以需要使用&lt;? super FancyToy&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericToyTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class&lt;FancyToy&gt; ftc = FancyToy.class;                      <span class="hljs-comment">// 获取类的类对象</span><br>        <span class="hljs-type">FancyToy</span> <span class="hljs-variable">fancyToy</span> <span class="hljs-operator">=</span> ftc.getConstructor().newInstance();    <span class="hljs-comment">// 创建实例</span><br>        Class &lt;? <span class="hljs-built_in">super</span>  FancyToy&gt; up = ftc.getSuperclass();        <span class="hljs-comment">// 获取类对象的基类</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> up.getConstructor().newInstance();            <span class="hljs-comment">// 创建实例</span><br>      <br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ftc.getMethod(<span class="hljs-string">&quot;f&quot;</span>);     <span class="hljs-comment">// 查询子类中的方法 f</span><br>        method.invoke(fancyToy);                <span class="hljs-comment">// 执行 输出fancy</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> up.getMethod(<span class="hljs-string">&quot;f&quot;</span>);     <span class="hljs-comment">// 查询基类中的方法  f</span><br>        method1.invoke(obj);                    <span class="hljs-comment">// 执行 输出 f</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> up.getMethod(<span class="hljs-string">&quot;f&quot;</span>);     <span class="hljs-comment">// 查询基类中的方法  f</span><br>        method1.invoke(fancyToy);               <span class="hljs-comment">// 执行 输出fancy</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Toy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Toy</span><span class="hljs-params">()</span>&#123;    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;f&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FancyToy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Toy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FancyToy</span><span class="hljs-params">()</span>&#123; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;fancy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么使用基类中的方法调用子类对象 仍然会执行子类中的函数？</p><p>因为 在类加载过程中，实例方法被维护在vtable中，对于具体的方法实现是动态绑定的。</p><p>而在反射中使用getMethod 接收到的也是一个记录有函数偏移信息的结构体。</p><p>当开始执行时，会在子类对象中根据这个偏移查询函数进行执行。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">InvocationHandlerhanlder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>(proxy,method,args)&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable)&#123;<br><span class="hljs-keyword">return</span> method.invoke(target,args);<br>&#125;;<br><br>&#125;<br><br><span class="hljs-comment">// 通过匿名类重写了InvocationHandler 接口。</span><br><br><span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(target.getclass().getClassLoader(),target.getclass().getInterfaces(),handler);<br><span class="hljs-comment">// 将被代理类的加载器信息和接口信息传入。</span><br><span class="hljs-comment">// 后续通过proxy 代理执行原类型的方法</span><br><br></code></pre></td></tr></table></figure><p>类实现 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    Object proxied;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicProxy</span><span class="hljs-params">(Object proxied)</span> &#123;<br>        <span class="hljs-built_in">this</span>.proxied = proxied;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;**** proxy: &quot;</span> + proxy.getClass() + <span class="hljs-string">&quot;, method: &quot;</span> + method + <span class="hljs-string">&quot;, args: &quot;</span> + args);<br>        <span class="hljs-keyword">if</span>(args != <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">for</span>(Object arg : args) <br>                System.out.println(<span class="hljs-string">&quot;&quot;</span>+ arg);<br>        <span class="hljs-keyword">return</span> method.invoke(proxied, args);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleDynamicProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">(Interface iface)</span> &#123;<br>        iface.doSomething();<br>        iface.somethingElse(<span class="hljs-string">&quot;bonobo&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RealObject</span> <span class="hljs-variable">real</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealObject</span>();<br>        consumer(real);<br>        <span class="hljs-type">Interface</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Interface) Proxy.newProxyInstance(<br>            Interface.class.getClassLoader(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Interface.class&#125;,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicProxy</span>(real));<br>        consumer(proxy);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>反射提供了一种在对象之外构建业务流程的过程。</p><p>通过“反射”和“接口” 我们可以达成业务和数据的分离。在框架设计过程中只需要关注于具体的功能实现，而对象则更像是一种数据供应商。在每个阶段只需要关注具体需要的字段和功能，而不在需要去关注对象。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型是一种用于声明通用类&#x2F;通用函数的手段，当希望向类中（通常是容器）中添加不定类型的对象时，可以先通过泛型进行类设计，再后续的对象创建过程中再通过声明传入的类型进行使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedStack</span>&lt;E&gt;&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt;&#123;<br>        E item;<br>        Node&lt;E&gt; next;<br>        Node()&#123;item=<span class="hljs-literal">null</span>;next=<span class="hljs-literal">null</span>;&#125;<br>        Node(E item , Node&lt;E&gt; next)&#123;<br>            <span class="hljs-built_in">this</span>.item=item;<br>            <span class="hljs-built_in">this</span>.next=next;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-title function_">end</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> item==<span class="hljs-literal">null</span> &amp;&amp; next==<span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; top = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E item)</span>&#123;<br>        top = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(item,top);<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> top.item;<br>        <span class="hljs-keyword">if</span>(!top.end())<br>            top = top.next;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>泛型本质上是对编译器类型检查能力的一种扩展。通过在代码中引入类型参数，开发者可以为类和方法引入灵活的类型约束，使得在实例化时由具体类型替代这些通用类型，从而实现编译期的类型安全检查。这为容器类等通用结构提供了一种统一而安全的类型解决方案。</p><p>需要强调的是，Java 泛型的实现机制基于 <strong>类型擦除</strong> ，即在编译阶段，所有泛型类型参数会被替换为其限定的上界类型（默认为 <code>Object</code>），在生成的字节码中不再保留泛型类型信息。因此，泛型是一种 <strong>编译期语法机制</strong> ，并不属于 JVM 的运行时功能扩展，JVM 在加载和执行阶段对泛型完全无感。</p><p>泛型所带来的最大价值之一，是提升了类与方法的复用性。通过引入类型参数，开发者可以在不牺牲类型安全的前提下复用逻辑代码。与此同时，JVM 通过放弃对泛型参数的运行时类型保留，避免了类型膨胀带来的性能与兼容性问题，从而在设计上取得了 <strong>类型安全性与运行效率之间的平衡</strong> 。</p><p>它会在编译阶段 对泛型内部的声明进行擦除，但是如果从内部元素获取类信息仍然可以正常获取 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Frob</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fnorkle</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Quark</span>&lt;Q&gt;&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Particle</span>&lt;POSITION,MOMENTUM&gt;&#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LostInfomation</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Frob&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frob</span>());<br>        Map&lt;Frob,Fnorkle&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Quark&lt;Fnorkle&gt; quark = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Quark</span>&lt;Fnorkle&gt;();<br>        Particle&lt;Long,Double&gt; p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Particle</span>&lt;&gt;();<br>        System.out.println(list.get(<span class="hljs-number">0</span>).getClass());<br>        System.out.println(Arrays.toString(quark.getClass().getTypeParameters()));<br>        System.out.println(Arrays.toString(p.getClass().getTypeParameters()));<br>        System.out.println(Arrays.toString(list.getClass().getTypeParameters()));<br>        System.out.println(Arrays.toString(map.getClass().getTypeParameters()));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Frob</span>  <span class="hljs-comment">// 仍然可以获取类中的元素信息</span><br>[Q]<br>[POSITION, MOMENTUM]<br>[E]<br>[K, V]<br></code></pre></td></tr></table></figure><p>可以为泛型设置边界</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hasf</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="再谈对象"><a href="#再谈对象" class="headerlink" title="再谈对象"></a>再谈对象</h1><p>在我们最初对java的内存模型讨论中，已经知道java中所有进行的声明本质上都是对堆上创建的对象的应用。这种引用可以理解为是一种可以进行安全访问的指针。</p><p>当使用多个声明指向同一个对象时，多个声明都是对同一个对象的引用别名，这意味着当通过某个别名获取目标对象并进行修改时，其他的别名对对象的属性读取也会发生修改。这是因为任何一个引用进行的修改都是对引用对象本体进行的修改</p><h2 id="引用与值"><a href="#引用与值" class="headerlink" title="引用与值"></a>引用与值</h2><p>在讨论“引用传递”和“值传递”时，本质上需要回答一个核心问题：<strong>函数调用时，到底传入了什么？</strong></p><p>回到 C 语言的设计，所有变量在传入函数时，都会在新的栈帧中创建一个局部副本。</p><ul><li>如果传入的是普通值（如 <code>int</code>），则创建的是值的副本；</li><li>如果传入的是指针，则创建的是指针值（地址）的副本。</li></ul><p>从严格意义上讲， <strong>C语言中所有的传递都是值传递</strong> ；只是当传递的是指针时，可以通过指针副本间接修改原始内存，从而表现出“引用效果”。</p><p>在更现代的语言（如 Java 和 Python）中，所有对象在传递时，传入的是 <strong>对象引用的副本</strong> 。变量本身持有的是一个指向对象的引用，而不是对象本体。</p><p>因此：</p><ul><li>如果在函数中修改引用指向的对象内容，外部对象也会被改变；</li><li>如果在函数中重新赋值给引用（让引用指向新的对象），则不会影响外部原引用。</li></ul><p>来看下面两个例子：</p><ol><li><code>test_plus(a,b)</code><br>传入的是整数 <code>a</code>、<code>b</code> 的值副本。函数内部修改 <code>a</code>，但不会影响外部 <code>a</code>，因为它们是不同的局部变量。</li><li><code>test_plus1(n)</code><br>传入的是对象 <code>n</code> 的引用副本。函数内部通过 <code>n</code> 访问并修改了 <code>n.a</code>。由于副本和原引用指向同一块对象，因此外部的 <code>n.a</code> 也发生了变化。</li></ol><p>因此，在引用与实际对象分离的语言中，我们应更多关注 <strong>对引用指向对象的操作</strong> ，而不是单纯地纠结于传递机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span> ;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>  ;<br>        test_plus(a,b);<br>        <span class="hljs-type">Number</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">8</span>,<span class="hljs-number">10</span>);<br>        System.out.println(a);<br>        test_plus1(n);<br>        System.out.println(n.a);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">test_plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        a = a+b;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">test_plus1</span><span class="hljs-params">(Number n)</span>&#123;<br>        n.a = n.a+n.b;<br>        <span class="hljs-keyword">return</span> n.a;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span>&#123;<br>    <span class="hljs-type">int</span> a ;<br>    <span class="hljs-type">int</span> b ;<br>    Number(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)&#123;<br>        <span class="hljs-built_in">this</span>.a = a;<br>        <span class="hljs-built_in">this</span>.b = b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="克隆对象"><a href="#克隆对象" class="headerlink" title="克隆对象"></a>克隆对象</h2><p>我们知道了所有的函数本质的上都是在传递引用的“值” 那么在某些对象不想被修改时，就需要对对象进行复制：在堆上重新创建一个相同的对象并将引用指向它。</p><p>Java中提供了 clone方法来创建对象，但是clone 只会对目标对象进行浅层克隆。如果对象中存在对其他对象的引用仍然指向得是同一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Duplo</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n ;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Duplo</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<span class="hljs-built_in">this</span>.n = n;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Duplo <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (Duplo) <span class="hljs-built_in">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> n; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> n )</span>&#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span>&#123; <span class="hljs-built_in">this</span>.n++;&#125;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Integer.toString(n);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalCopy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Duplo <span class="hljs-title function_">g</span><span class="hljs-params">(Duplo v)</span>&#123;<br>        v.increment();<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Duplo <span class="hljs-title function_">f</span><span class="hljs-params">(Duplo v)</span>&#123;<br>        v = v.clone();<br>        v.increment();<br>        <span class="hljs-keyword">return</span>  v;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Duplo</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Duplo</span>(<span class="hljs-number">11</span>);<br>        <span class="hljs-type">Duplo</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> g(a);<br>        System.out.println(<span class="hljs-string">&quot;a == b:&quot;</span> + (a==b)+<span class="hljs-string">&quot;\\na=&quot;</span> +a +<span class="hljs-string">&quot;\\nb=&quot;</span> +b+<span class="hljs-string">&quot;\\n&quot;</span>);<br>        <span class="hljs-type">Duplo</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Duplo</span>(<span class="hljs-number">47</span>);<br>        <span class="hljs-type">Duplo</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> f(c);<br>        System.out.println(<span class="hljs-string">&quot;c == d:&quot;</span> + (c==d)+<span class="hljs-string">&quot;\\nc=&quot;</span> +c +<span class="hljs-string">&quot;\\nd=&quot;</span> +d+<span class="hljs-string">&quot;\\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test&#123;&#125;<br><br><span class="hljs-comment">// @Target指定注解应用的位置</span><br><span class="hljs-comment">// @Retention 指定注解可用的阶段  源代码，类文件，运行时</span><br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 III 集合</title>
    <link href="/2025/04/22/Java%E7%BC%96%E7%A8%8B-III-%E9%9B%86%E5%90%88/"/>
    <url>/2025/04/22/Java%E7%BC%96%E7%A8%8B-III-%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>集合是java中用来持有对象的一种”容器“。它具体表现为实现了两个基本接口</p><p><img src="blob:https://111666.best/d4ac7bc3-8f43-4d93-897e-d2595072cb67" alt="image"></p><h2 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h2><p>一个由单独元素组成的序列，而这些元素需要符合一条或多条规则</p><p>List : 必须按照元素的插入顺序来进行保存</p><p>Set : 中不能存在重复元素</p><p>Queue : 按照排队顺序输出元素</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>一组键值对象，通过键来查找值。map通过一个对象来查找另一个对象</p><h2 id="向集合中添加元素"><a href="#向集合中添加元素" class="headerlink" title="向集合中添加元素"></a>向集合中添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddingGroups</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Collection&lt;Integer&gt; collection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>));<br>        Integer[] moreInts = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>        collection.addAll(Arrays.asList(moreInts));<br>        <span class="hljs-keyword">for</span>(Integer i : collection)&#123;<br>            System.out.println(i);<br>        &#125;<br>        <span class="hljs-comment">// Ragged array</span><br>        List&lt;Integer&gt; list = Arrays.asList(moreInts);<br>        list.set(<span class="hljs-number">0</span>, <span class="hljs-number">99</span>);<br>        System.out.println(list.get(<span class="hljs-number">0</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="打印集合"><a href="#打印集合" class="headerlink" title="打印集合"></a>打印集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.* <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintingCollections</span>&#123;<br><span class="hljs-keyword">static</span> Collection <span class="hljs-title function_">fill</span><span class="hljs-params">(Collection&lt; String &gt; collection)</span>&#123;<br>collection.add(<span class="hljs-string">&quot;rat&quot;</span>);<br>collection.add(<span class="hljs-string">&quot;cat&quot;</span>);<br>collection.add(<span class="hljs-string">&quot;dog&quot;</span>);<br>collection.add(<span class="hljs-string">&quot;dog&quot;</span>);<br><span class="hljs-keyword">return</span> collection;<br>&#125;<br><br> <span class="hljs-keyword">static</span>  Map <span class="hljs-title function_">fill</span><span class="hljs-params">(Map&lt;String&gt; map)</span>&#123;<br> map.put(<span class="hljs-string">&quot;rat&quot;</span>,<span class="hljs-string">&quot;Fuzzy&quot;</span>);<br> map.put(<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;Rats&quot;</span>);<br> map.put(<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;Bosco&quot;</span>);<br> map.put(<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;Spot&quot;</span>);<br> <span class="hljs-keyword">return</span> map ;<br>  &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashset</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;()));<br>System.out.println(fill(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>()));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>list的创建和常用函数 （以arraylist为例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListExample</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 创建一个 List，使用 ArrayList 实现类</span><br>List&lt;String&gt; fruits = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 1. add() 添加元素</span><br>    fruits.add(<span class="hljs-string">&quot;Apple&quot;</span>);<br>    fruits.add(<span class="hljs-string">&quot;Banana&quot;</span>);<br>    fruits.add(<span class="hljs-string">&quot;Orange&quot;</span>);<br>    fruits.add(<span class="hljs-string">&quot;Grapes&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;原始列表：&quot;</span> + fruits); <span class="hljs-comment">// [Apple, Banana, Orange, Grapes]</span><br><br>    <span class="hljs-comment">// 2. get(int index) 获取指定位置的元素</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> fruits.get(<span class="hljs-number">0</span>);<br>    System.out.println(<span class="hljs-string">&quot;第一个水果是：&quot;</span> + first); <span class="hljs-comment">// Apple</span><br><br>    <span class="hljs-comment">// 3. set(int index, E element) 替换指定位置的元素</span><br>    fruits.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Blueberry&quot;</span>); <span class="hljs-comment">// 替换 Banana</span><br>    System.out.println(<span class="hljs-string">&quot;修改后的列表：&quot;</span> + fruits); <span class="hljs-comment">// [Apple, Blueberry, Orange, Grapes]</span><br><br>    <span class="hljs-comment">// 4. remove(int index) 根据下标删除</span><br>    fruits.remove(<span class="hljs-number">2</span>); <span class="hljs-comment">// 删除 Orange</span><br>    System.out.println(<span class="hljs-string">&quot;删除后的列表：&quot;</span> + fruits); <span class="hljs-comment">// [Apple, Blueberry, Grapes]</span><br><br>    <span class="hljs-comment">// 5. remove(Object o) 根据对象删除</span><br>    fruits.remove(<span class="hljs-string">&quot;Apple&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;删除 Apple 后：&quot;</span> + fruits); <span class="hljs-comment">// [Blueberry, Grapes]</span><br><br>    <span class="hljs-comment">// 6. contains(Object o) 判断是否包含某个元素</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">hasGrapes</span> <span class="hljs-operator">=</span> fruits.contains(<span class="hljs-string">&quot;Grapes&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;包含 Grapes？&quot;</span> + hasGrapes); <span class="hljs-comment">// true</span><br><br>    <span class="hljs-comment">// 7. size() 返回元素个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> fruits.size();<br>    System.out.println(<span class="hljs-string">&quot;列表长度：&quot;</span> + size); <span class="hljs-comment">// 2</span><br><br>    <span class="hljs-comment">// 8. isEmpty() 判断是否为空</span><br>    System.out.println(<span class="hljs-string">&quot;列表是否为空？&quot;</span> + fruits.isEmpty()); <span class="hljs-comment">// false</span><br><br>    <span class="hljs-comment">// 9. clear() 清空列表</span><br>    fruits.clear();<br>    System.out.println(<span class="hljs-string">&quot;清空后的列表：&quot;</span> + fruits); <span class="hljs-comment">// []</span><br><br>    <span class="hljs-comment">// 10. addAll(Collection&lt;? extends E&gt; c) 添加一整个集合</span><br>    List&lt;String&gt; newFruits = List.of(<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Peach&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>);<br>    fruits.addAll(newFruits);<br>    System.out.println(<span class="hljs-string">&quot;添加多个水果：&quot;</span> + fruits); <span class="hljs-comment">// [Mango, Peach, Cherry]</span><br><br>    <span class="hljs-comment">// 11. indexOf(Object o) 获取元素第一次出现的位置</span><br>    System.out.println(<span class="hljs-string">&quot;Peach 的位置：&quot;</span> + fruits.indexOf(<span class="hljs-string">&quot;Peach&quot;</span>)); <span class="hljs-comment">// 1</span><br><br>    <span class="hljs-comment">// 12. for-each 遍历</span><br>    <span class="hljs-keyword">for</span> (String fruit : fruits) &#123;<br>        System.out.println(<span class="hljs-string">&quot;水果：&quot;</span> + fruit);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>set 中不允许出现重复的对象值，</p><p>常用方法示例（以hashset为例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个 HashSet（最常用的 Set 实现）</span><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 1. add(E e) 添加元素（不会添加重复元素）</span><br>        set.add(<span class="hljs-string">&quot;Apple&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;Banana&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;Orange&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;Apple&quot;</span>); <span class="hljs-comment">// 重复添加无效</span><br><br>        System.out.println(<span class="hljs-string">&quot;集合内容：&quot;</span> + set); <span class="hljs-comment">// [Banana, Apple, Orange]（无序且不重复）</span><br><br>        <span class="hljs-comment">// 2. contains(Object o) 判断是否包含某个元素</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasApple</span> <span class="hljs-operator">=</span> set.contains(<span class="hljs-string">&quot;Apple&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;包含 Apple？&quot;</span> + hasApple); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 3. remove(Object o) 删除元素</span><br>        set.remove(<span class="hljs-string">&quot;Orange&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除 Orange 后：&quot;</span> + set); <span class="hljs-comment">// [Banana, Apple]</span><br><br>        <span class="hljs-comment">// 4. size() 获取集合中元素个数</span><br>        System.out.println(<span class="hljs-string">&quot;集合大小：&quot;</span> + set.size()); <span class="hljs-comment">// 2</span><br><br>        <span class="hljs-comment">// 5. isEmpty() 判断集合是否为空</span><br>        System.out.println(<span class="hljs-string">&quot;集合是否为空？&quot;</span> + set.isEmpty()); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 6. clear() 清空集合</span><br>        set.clear();<br>        System.out.println(<span class="hljs-string">&quot;清空后：&quot;</span> + set); <span class="hljs-comment">// []</span><br><br>        <span class="hljs-comment">// 7. addAll(Collection&lt;? extends E&gt; c) 添加一整个集合</span><br>        Set&lt;String&gt; newSet = Set.of(<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Peach&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>);<br>        set.addAll(newSet);<br>        System.out.println(<span class="hljs-string">&quot;添加多个元素：&quot;</span> + set); <span class="hljs-comment">// [Mango, Peach, Cherry]</span><br><br>        <span class="hljs-comment">// 8. 遍历 Set（使用增强 for 循环）</span><br>        <span class="hljs-keyword">for</span> (String fruit : set) &#123;<br>            System.out.println(<span class="hljs-string">&quot;遍历元素：&quot;</span> + fruit);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>常用的map 方法（以hashmap为例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个 HashMap（最常用的 Map 实现）</span><br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 1. put(K key, V value) 添加键值对</span><br>        map.put(<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-number">3</span>);<br>        map.put(<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-number">5</span>);<br>        map.put(<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 重复 key，会覆盖旧值</span><br>        System.out.println(<span class="hljs-string">&quot;原始 Map：&quot;</span> + map); <span class="hljs-comment">// &#123;Banana=2, Apple=4, Orange=5&#125;</span><br><br>        <span class="hljs-comment">// 2. get(Object key) 根据 key 获取 value</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">appleCount</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;Apple&quot;</span>); <br>        System.out.println(<span class="hljs-string">&quot;Apple 数量：&quot;</span> + appleCount); <span class="hljs-comment">// 4</span><br><br>        <span class="hljs-comment">// 3. containsKey(Object key) 是否包含某个 key</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasBanana</span> <span class="hljs-operator">=</span> map.containsKey(<span class="hljs-string">&quot;Banana&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;包含 Banana？&quot;</span> + hasBanana); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 4. containsValue(Object value) 是否包含某个 value</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasValue5</span> <span class="hljs-operator">=</span> map.containsValue(<span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">&quot;包含值 5？&quot;</span> + hasValue5); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 5. remove(Object key) 移除指定 key 对应的映射</span><br>        map.remove(<span class="hljs-string">&quot;Banana&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;移除 Banana 后：&quot;</span> + map); <span class="hljs-comment">// &#123;Apple=4, Orange=5&#125;</span><br><br>        <span class="hljs-comment">// 6. size() 返回映射关系数量</span><br>        System.out.println(<span class="hljs-string">&quot;Map 大小：&quot;</span> + map.size()); <span class="hljs-comment">// 2</span><br><br>        <span class="hljs-comment">// 7. isEmpty() 是否为空</span><br>        System.out.println(<span class="hljs-string">&quot;Map 是否为空？&quot;</span> + map.isEmpty()); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 8. keySet() 获取所有 key 组成的 Set</span><br>        System.out.println(<span class="hljs-string">&quot;所有 key：&quot;</span> + map.keySet()); <span class="hljs-comment">// [Apple, Orange]</span><br><br>        <span class="hljs-comment">// 9. values() 获取所有 value 组成的 Collection</span><br>        System.out.println(<span class="hljs-string">&quot;所有 value：&quot;</span> + map.values()); <span class="hljs-comment">// [4,</span><br><br></code></pre></td></tr></table></figure><h2 id="Collection类的作用"><a href="#Collection类的作用" class="headerlink" title="Collection类的作用"></a>Collection类的作用</h2><p>在 C&#x2F;C++ 语言中，程序员常常需要手动管理内存，并通过指针操作实现数据结构（如数组、链表、哈希表等）的动态存储与访问。<strong>Java 中的 Collection 框架正是对这些底层容器机制的抽象与封装</strong>，提供了更安全、可扩展、面向对象的容器解决方案。</p><h3 id="Collection-的本质与作用"><a href="#Collection-的本质与作用" class="headerlink" title="Collection 的本质与作用"></a>Collection 的本质与作用</h3><p>在面向对象编程中，虽然一切皆对象，但对象之间的组织、管理与批量操作仍需借助容器结构。Java 使用 <code>Collection</code> 接口抽象了这类 <strong>“容器型对象”</strong> 的基本行为规范，定义了数据的<strong>添加、删除、遍历、查询</strong>等操作方式，类似于标准容器库（STL）在 C++ 中的角色。</p><h3 id="底层结构与三大经典实现"><a href="#底层结构与三大经典实现" class="headerlink" title="底层结构与三大经典实现"></a>底层结构与三大经典实现</h3><p>Java 中常见的容器实现，底层源于三种经典数据结构，每种都针对特定的操作场景做出了效率取舍：</p><table><thead><tr><th>实现方式</th><th>底层结构</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td><code>Array</code></td><td>数组</td><td>随机访问快（O(1)）</td><td>插入&#x2F;删除效率低，扩容成本高</td></tr><tr><td><code>Linked</code></td><td>链表</td><td>插入&#x2F;删除快（O(1)）</td><td>查询慢（O(n)）</td></tr><tr><td><code>Hash</code></td><td>哈希表</td><td>快速定位（O(1) 近似）</td><td>不支持顺序，可能存在哈希冲突</td></tr></tbody></table><ul><li><strong>数组（Array）</strong>：通过“地址 + 偏移”的方式实现快速定位，适用于频繁查询但不常变动的场景。</li><li><strong>链表（Linked List）</strong>：适合频繁插入&#x2F;删除，但不适用于大规模随机访问。</li><li><strong>哈希表（Hash Table）</strong>：通过哈希函数定位存储位置，实现高效的键值映射查询。</li></ul><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>一种函数式的执行方式，在java中 因为java定义的接口是要求执行一个方法，所以可以通过这种方式，直接定义符合该接口目的的方法作为一个待执行的“类”交给应用去调用执行。本质是<strong>编译器帮你自动创建了一个实现了某个函数式接口的匿名对象，并将其赋值给一个接口类型的引用变量</strong>，你再通过这个引用去调用它的方法</p><p>使用方法 ： 定义一个只有一个函数签名的接口，在调用时直接声明基于该接口的引用 然后</p><p>() → 重写接口定义的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaFeastures</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">sayHi</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;hi&quot;</span>);<br>        hi.hi();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">sayHi</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的 匿名类实现 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaFeastures</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">sayHi</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sayHi</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hi&quot;</span>);<br>    &#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">sayHi</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 II 面向对象</title>
    <link href="/2025/04/22/Java%E7%BC%96%E7%A8%8B-II-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2025/04/22/Java%E7%BC%96%E7%A8%8B-II-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="初始化和清理"><a href="#初始化和清理" class="headerlink" title="初始化和清理"></a>初始化和清理</h1><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>构造器是在创建对象时，将类的成员属性进行初始化过程的一种函数</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rock</span> &#123;<br>Rock()&#123;<br>System.out.print(<span class="hljs-string">&quot;Rock&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当需要进行实例化创建时，类会根据传入的参数列表选择构造器进行对象的初始化。</p><p>这个叫做 构造器重载。 通过不同的函数列表来决定 调用哪个构造器。</p><p>当未定义构造器时，实际上是执行了一个无参的构造器。</p><p><strong>构造方法并不负责“创建对象”本身，它负责的是“初始化已经分配好的对象”</strong></p><p>也就是说：”new” 才是真正负责对象创建和内存分配的关键，构造方法是“后处理器”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rock</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rock</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rock</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rock</span>(<span class="hljs-number">1.0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rock</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rock without parameter&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rock</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rock with int parameter&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rock</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rock with double parameter&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>在构造方法或者实例方法中，如果需要调用同一个类定义下的结构（属性&#x2F;方法）</p><p>可以使用this关键字进行调用，this作为创建后的实例对象的引用</p><h2 id="构造器中调用构造器"><a href="#构造器中调用构造器" class="headerlink" title="构造器中调用构造器"></a>构造器中调用构造器</h2><p>必须在构造器的第一行中调用另一个构造器</p><p>其实很类似于python中的默认参数的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Flower</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">petalCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;initial value&quot;</span>;<br>    Flower(<span class="hljs-type">int</span> petals) &#123;<br>        petalCount = petals;<br>        System.out.println(<span class="hljs-string">&quot;Constructor w/ int arg only, petalCount = &quot;</span> + petalCount);<br>    &#125;<br>    Flower(String ss)&#123;<br>        System.out.println(<span class="hljs-string">&quot;Constructor w/ String arg only, s = &quot;</span> + ss);<br>    &#125;<br>    Flower(String s, <span class="hljs-type">int</span> petals) &#123;<br>        <span class="hljs-built_in">this</span>(petals);<br>        <span class="hljs-built_in">this</span>.s = s;<br>        System.out.println(<span class="hljs-string">&quot;String &amp; int args&quot;</span>);<br>    &#125;<br>    Flower() &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;hi&quot;</span>, <span class="hljs-number">47</span>);<br>        System.out.println(<span class="hljs-string">&quot;default constructor&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printPetalCount</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;petalCount = &quot;</span> + petalCount + <span class="hljs-string">&quot; s = &quot;</span> + s);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Flower</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flower</span>();<br>        x.printPetalCount();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在Java中 </p><p>类成员变量，静态成员变量。都会在其具体的被执行过程中被JVM默认初始化</p><p>值类型 被初始化为0 ， 引用类型被初始化为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Flower</span> &#123;<br>    <span class="hljs-type">int</span> petalCount ;<br>    <span class="hljs-keyword">static</span> Piece p ;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Flower</span> <span class="hljs-variable">flower</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flower</span>();<br>        System.out.println(flower.petalCount);<br>        System.out.println(p);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Piece</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">90</span>  ;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>而对于局部变量 （即参与函数执行的变量）必须在java文件中就进行相应的变量定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Flower</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> i  ;<br>        System.out.println(i);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/* PS D:\Flask_Project&gt; java Flower.java</span><br><span class="hljs-comment"> *Flower.java:9: 错误: 可能尚未初始化变量i</span><br><span class="hljs-comment"> *       System.out.println(i);</span><br><span class="hljs-comment"> *                          ^</span><br><span class="hljs-comment"> * 1 个错误</span><br><span class="hljs-comment"> * 错误: 编译失败</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>因为在编译时 </p><p>对于类的行为 ：编译器确认类的结构，对类中的成员变量进行初始化</p><p>对于方法的行为 ： 先构建局部变量表，再对方法中定义的代码进行执行，强制局部变量必须手动初始化</p><h2 id="初始化与初始化顺序"><a href="#初始化与初始化顺序" class="headerlink" title="初始化与初始化顺序"></a>初始化与初始化顺序</h2><p>对于 变量 通过赋值操作符来进行变量的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitMethod</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span>&#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInstance</span>&#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者在外部进行声明，在构造方法或者初始化代码块中进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitMethod</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> value1 ;<br>    <span class="hljs-type">int</span> value2 ;<br>    <span class="hljs-keyword">static</span> &#123;<br>        value1 = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    &#123;<br>        value2 = <span class="hljs-number">2</span>; <br>    &#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span>&#123;<br>        System.out.println(value1);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InitMethod</span>().value2);<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitMethod</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> value1;<br><span class="hljs-type">int</span> value2;  <br>InitMethod()&#123;<br>value1 = <span class="hljs-number">1</span>;<br>value2 = <span class="hljs-number">2</span>; <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span>&#123;<br>&#125;<br><br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInstance</span>&#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>java中的 引用声明 虽然是自由的，但是必须要保证 声明发生在调用前</p><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><p>java中接受两种数组的声明 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a1;<br><span class="hljs-type">int</span> a1[];<br></code></pre></td></tr></table></figure><p>数组声明是一种引用类型，所以初始化会被初始化为null。并且a2&#x3D;a1 意味着a2和a1指向同一个对象</p><p>数组的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><span class="hljs-type">int</span>[] a2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h1><p>通过 type … object_name 来接收多个相同类型的对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">OptionalTrailingArguments</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> <span class="hljs-keyword">required</span>,String... trailing</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;required:&quot;</span>+<span class="hljs-keyword">required</span>+<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">for</span>(String s:trailing)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(s+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        f(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;one&quot;</span>);<br>        f(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-string">&quot;three&quot;</span>);<br>        f(<span class="hljs-number">0</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><p>定义了一个枚举。</p><p>枚举中的内容可以用于switch分支判断</p><p>.values() 遍历枚举类中的值</p><p>.ordinal() 返回值的顺序 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Select</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span>(Option asd : Option.values())&#123;<br>            <span class="hljs-keyword">switch</span> (asd)&#123;<br>                <span class="hljs-keyword">case</span> A:<br>                    System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> B:<br>                    System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> C:<br>                    System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> D:<br>                    System.out.println(<span class="hljs-string">&quot;D&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> E:<br>                    System.out.println(<span class="hljs-string">&quot;E&quot;</span>);<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(asd.ordinal());<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">enum</span>  <span class="hljs-title class_">Option</span>&#123;<br>    A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h1><p>在方法中可以使用”var”来进行自动的类型推断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Plumbus</span>&#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeInference</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hello1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        <span class="hljs-type">Plumbus</span> <span class="hljs-variable">plumbus</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plumbus</span>();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">plumbus1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plumbus</span>();<br><br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticMethod</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">plumbus1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plumbus</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>类中的字段类型必须在类加载时静态确定，以保证类的内存布局可被 JVM 构建。而 <code>var</code> 依赖编译器对赋值表达式进行类型推导，适用于方法体内的局部变量，不适合用于类字段这种结构性定义。</p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>java中的引用管理路径是通过包声明来实现。</p><p>通过 反转的URL 来定义某个文件的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span>  com.codfish.java.Localclass <br><span class="hljs-comment">// 意味着从java class path中查询到 com 文件夹下的</span><br>📁 [classpath]/<br>└── 📁 com/<br>    └── 📁 codfish/<br>        └── 📁 java/<br>            └── Localclass.java<br><span class="hljs-comment">//最终查询到Localclass.java这个文件</span><br><span class="hljs-comment">// 所以在环境变量中添加classpath 是用于查询 java工程的根路径</span><br></code></pre></td></tr></table></figure><h1 id="实现隐藏"><a href="#实现隐藏" class="headerlink" title="实现隐藏"></a>实现隐藏</h1><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><h3 id="public-声明本类-方法-是一个可以被任意调用的组件"><a href="#public-声明本类-方法-是一个可以被任意调用的组件" class="headerlink" title="public 声明本类&#x2F;方法 是一个可以被任意调用的组件"></a>public 声明本类&#x2F;方法 是一个可以被任意调用的组件</h3><h3 id="private-声明-方法-在本类之外是不可见的，不可以被调用"><a href="#private-声明-方法-在本类之外是不可见的，不可以被调用" class="headerlink" title="private 声明 方法 在本类之外是不可见的，不可以被调用"></a>private 声明 方法 在本类之外是不可见的，不可以被调用</h3><h3 id="protect-允许子类调用继承的父类中声明的protect方法"><a href="#protect-允许子类调用继承的父类中声明的protect方法" class="headerlink" title="protect 允许子类调用继承的父类中声明的protect方法"></a>protect 允许子类调用继承的父类中声明的protect方法</h3><h3 id="default（无声明）-类-方法-本文件中可以任意调用"><a href="#default（无声明）-类-方法-本文件中可以任意调用" class="headerlink" title="default（无声明） 类&#x2F;方法 本文件中可以任意调用"></a>default（无声明） 类&#x2F;方法 本文件中可以任意调用</h3><p>类只有两种访问权限（public和 default ）</p><p>通过访问控制，实现了一种功能和实现的解耦，调用者只需要关注声明为public的方法，因为他们只需要关注对象所提供的功能，而实现者更加关注于private方法 来更好的优化功能的实现。</p><h1 id="对象设计"><a href="#对象设计" class="headerlink" title="对象设计"></a>对象设计</h1><p>在面向对象编程中通常有这样几种 对象的关联关系</p><h3 id="组合（has-a）"><a href="#组合（has-a）" class="headerlink" title="组合（has a）"></a>组合（has a）</h3><p>多个对象作为另一个对象共同完成功能。通过组织这些对象的功能和执行流程来完成自身的功能</p><h3 id="继承-（is-a"><a href="#继承-（is-a" class="headerlink" title="继承 （is a)"></a>继承 （is a)</h3><p>一个对象是另一个对象的实现，具备原对象的全部功能和属性。只是会根据不同的因素具体实现不同</p><h3 id="委托-（delegates-to）"><a href="#委托-（delegates-to）" class="headerlink" title="委托 （delegates to）"></a>委托 （delegates to）</h3><p>一个对象作为中间代理人，将某个功能指定给另一个对象去完成。</p><h1 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h1><p>final关键字用于将 引用 和 目标进行绑定</p><p>final 修饰类 该类不能被继承</p><p>final 修饰方法 则 该方法不能被重写</p><p>final 修饰变量  只能在声明处或者构造器中初始化 基础变量的值不能被更改，引用类型的 final 变量不能再指向其他对象，但原对象的内部状态仍可变化。</p><p>final 让“名字与所指对象”之间的绑定<strong>在编译期或类加载期就确定下来</strong>，不能再动态更换，<strong>失去了 Java 中多态或延迟绑定的一部分可能性</strong>。</p><h1 id="对象创建过程中的加载"><a href="#对象创建过程中的加载" class="headerlink" title="对象创建过程中的加载"></a>对象创建过程中的加载</h1><p>当创建对象时</p><p>如果类未被加载到jvm中，则需要从类初始化开始</p><p>查询父类是否进行加载</p><p>执行父类静态代码块，静态变量（按序加载）<br>执行子类静态代码块，静态变量（按序加载）</p><p>执行父类代码块，构造方法（按序加载）</p><p>执行子类代码块，构造方法（按序加载）</p><p>返回指向新创建的引用。结束创建过程</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态提供了另一个维度的接口与实现分离</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>在java中 允许将一个对象声明为其父类。而当调用时调用的则是子类中实现的对应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Polymorphism</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>        animal.makeSound();<br><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        dog.makeSound();<br><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat.makeSound();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The animal makes a sound&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The dog barks&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The cat meows&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="构造过程中的函数调用"><a href="#构造过程中的函数调用" class="headerlink" title="构造过程中的函数调用"></a>构造过程中的函数调用</h2><p>在父类构造器中调用被子类重写的函数，依然调用的是子类重写的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyConstructors</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoundGlyph</span>(<span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Glyph</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Glyph.draw()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Glyph</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Glyph() before draw()&quot;</span>);<br>        draw();<br>        System.out.println(<span class="hljs-string">&quot;Glyph() after draw()&quot;</span>);<br><br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoundGlyph</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Glyph</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">radius</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    RoundGlyph(<span class="hljs-type">int</span> r) &#123;<br>        radius = r;<br>        System.out.println(<span class="hljs-string">&quot;RoundGlyph.RoundGlyph(), radius = &quot;</span> + radius);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RoundGlyph.draw(), radius = &quot;</span> + radius);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="抽象方法与抽象类"><a href="#抽象方法与抽象类" class="headerlink" title="抽象方法与抽象类"></a>抽象方法与抽象类</h2><p>一些类的设计是为了定义共同的标准和形式，其本身以及定义的方法并不是用来进行实例化或者方法调用的。这样的类被称为抽象类。</p><p>java中也提供了抽象方法的声明</p><p>存在抽象方法的类被称为抽象类</p><p>当有类想继承抽象类时，作为一个实现类必须重写抽象类中的抽象方法，作为抽象类则可以直接继承</p><h2 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h2><p>接口是面向设计的一种完全抽象，通过定义一系列的函数签名，使得符合该规则的类能够完成接口所描述的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AnInterface</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">firstMethod</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">secondMetho</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在后续的java版本中 又允许向接口中添加 默认方法。这样可以在不改变接口设计的同时，向接口中扩充方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">interfaceIneterfaceWithDefault&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">firstMethod</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">secondMethod</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">newMethod</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;new Method&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以向接口添加静态方法，意味着接口内可以包含供它使用的工具集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Operation</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runOps</span><span class="hljs-params">(Operation ... ops)</span>&#123;<br><span class="hljs-keyword">for</span>(Operatoin op : ops)<br>op.execute();<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String msg)</span>&#123;<br>System.out.println(msg)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><table><thead><tr><th>特性</th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td>组合</td><td>可以在新类中组合多个接口</td><td>只能继承一个抽象类</td></tr><tr><td>状态</td><td>不能包含字段</td><td>可以包含字段</td></tr><tr><td>默认方法与抽象方法</td><td>默认方法不需要在子类中实现</td><td>抽象方法必须在子类里实现</td></tr><tr><td>构造器</td><td>不能有构造器</td><td>可以有构造器</td></tr><tr><td>访问权限</td><td>隐式的public</td><td>可以为protoct</td></tr></tbody></table><h2 id="回到面向对象"><a href="#回到面向对象" class="headerlink" title="回到面向对象"></a>回到面向对象</h2><p>在应用开发中，从表面上看，<strong>继承&#x2F;多态、抽象类&#x2F;方法以及接口</strong>似乎都能实现类似的功能。这不禁让我们思考：为何 Java 语言还要提供这些彼此相近的机制？</p><p>此时，我们不妨回到“面向对象”的核心理念来思考这个问题。在前文的讨论中我们提到，对象设计的关键在于：<strong>对象的行为是服务于特定功能的</strong>。换言之，对象所拥有的方法和属性，其本质目的是为了在业务系统中承载功能逻辑与状态维护。</p><p>在实际的业务场景中，一个对象往往具备多重功能。在某些特定流程中，对象自身的整体结构并不是最关键的，<strong>而是其中某个特定的行为或能力构成了流程的核心。</strong>当我们只关心这个特定行为时，我们实际上是在“抽象地使用这个对象的某个切面”。此时，对象的这个方法就成为了我们所关注的抽象能力——<strong>只要实现了这个方法，流程就能正常运行。</strong></p><p>从这个角度出发，我们可以重新理解三种语言机制的区别：</p><ul><li><strong>继承与多态</strong>：通过继承机制，子类可以基于父类实现不同的行为，从而在不修改接口的前提下，通过多态支持多种功能实现。这强调的是<strong>“共性基础上的差异表达”</strong>。</li><li><strong>抽象类与抽象方法</strong>：定义了某类对象在行为和状态上应具备的“模板”，为子类提供统一的结构约束与默认实现，强调的是<strong>“部分实现 + 行为约束”</strong>的组合设计。</li><li><strong>接口（Interface）</strong>：接口更专注于定义<strong>一组与业务流程相关的能力</strong>，它关注的是“对象能做什么”，而非“对象是什么”。接口强调的是<strong>功能契约</strong>，便于实现解耦与组合。</li></ul><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h3 id="成员内部类："><a href="#成员内部类：" class="headerlink" title="成员内部类："></a>成员内部类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parcell</span>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Content</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Destination</span>&#123;                    <span class="hljs-comment">// 内部类定义</span><br>        <span class="hljs-keyword">private</span> String label;<br>        Destination(String whereTo)&#123;<br>            label = whereTo;<br>        &#125;<br>        String <span class="hljs-title function_">readLabel</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> label;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ship</span><span class="hljs-params">(String dest)</span>&#123;<br>        <span class="hljs-type">Content</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Content</span>();<br>        <span class="hljs-type">Destination</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Destination</span>(dest);<br>        System.out.println(d.readLabel());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Parcell</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parcell</span>();<br>        p.ship(<span class="hljs-string">&quot;Tasmania&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="将成员内部类的实例以函数调用返回。可以看到-内部类可以对类中的私有属性进行调用"><a href="#将成员内部类的实例以函数调用返回。可以看到-内部类可以对类中的私有属性进行调用" class="headerlink" title="将成员内部类的实例以函数调用返回。可以看到 内部类可以对类中的私有属性进行调用"></a>将成员内部类的实例以函数调用返回。可以看到 内部类可以对类中的私有属性进行调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sequence</span>&#123;<br>    <span class="hljs-keyword">private</span> Object[] items;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sequence</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span>&#123;<br>        items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[size];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object x)</span>&#123;<br>        <span class="hljs-keyword">if</span>(next &lt; items.length)&#123;<br>            items[next++] = x;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SequenceSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Selector</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">end</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> i == items.length;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">current</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> items[i];<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">if</span>(i &lt; items.length)&#123;<br>                i++;<br>            &#125;<br>        &#125;<br>        &#125;<br>    <span class="hljs-keyword">public</span> Selector <span class="hljs-title function_">selector</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequenceSelector</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Sequence</span> <span class="hljs-variable">sequence</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sequence</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            sequence.add(Integer.toString(i));<br>        &#125;<br>        <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> sequence.selector();<br>        <span class="hljs-keyword">while</span>(!selector.end())&#123;<br>            System.out.print(selector.current() + <span class="hljs-string">&quot; &quot;</span>);<br>            selector.next();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Selector</span>&#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">end</span><span class="hljs-params">()</span>;<br>    Object <span class="hljs-title function_">current</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="内部类可以通过-outter-this-获取到外部类的实例"><a href="#内部类可以通过-outter-this-获取到外部类的实例" class="headerlink" title="内部类可以通过 outter.this 获取到外部类的实例"></a>内部类可以通过 outter.this 获取到外部类的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DotThis</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123; System.out.println(<span class="hljs-string">&quot;DotThis.f()&quot;</span>)&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br><span class="hljs-keyword">public</span> DotThis <span class="hljs-title function_">outer</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> DotThis.<span class="hljs-built_in">this</span> ;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> Inner <span class="hljs-title function_">inner</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">DotThis</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DotThis</span>();<br>DotThis.<span class="hljs-type">Inner</span> <span class="hljs-variable">dti</span> <span class="hljs-operator">=</span> dt.inner();<br>dti.outer().f();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="而-外部类可以通过-outter的实例-new-创建内部类的实例"><a href="#而-外部类可以通过-outter的实例-new-创建内部类的实例" class="headerlink" title="而 外部类可以通过 outter的实例 new 创建内部类的实例"></a>而 外部类可以通过 outter的实例 new 创建内部类的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DotNew</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">DotNew</span> <span class="hljs-variable">dn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DotNew</span>();<br>DotNew.<span class="hljs-type">Inner</span> <span class="hljs-variable">dni</span> <span class="hljs-operator">=</span> dn.new.Inner();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>即通过外部类的.this 获取外部类的实例</p><p><a href="http://通过外部类实例的.new/">通过外部类实例的.new</a> 创建内部类的对象</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parcel5</span> &#123;<br><span class="hljs-keyword">public</span> Destination <span class="hljs-title function_">destination</span><span class="hljs-params">(String s )</span>&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PDestination</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Destination</span>&#123;<br><span class="hljs-keyword">private</span> String label;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">PDestination</span><span class="hljs-params">(String whereTo)</span>&#123;<br>label = whereTo;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">readLabel</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> label;&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PDestination</span>(s);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Parcel5</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parcel5</span>();<br><span class="hljs-type">Destination</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> p.destination(<span class="hljs-string">&quot;Tasmania&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类提供了 一种实现 即不用通过正式的类声明，而是直接通过实现接口方法的方式创建一个满足要求的对象来进行使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span>  <span class="hljs-title class_">Parcel7</span>&#123;<br><span class="hljs-keyword">public</span> Contents <span class="hljs-title function_">contents</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contents</span>()&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> i; &#125;<br>&#125;;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Parcel7</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parcel7</span>();<br><span class="hljs-type">Contents</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p.contents();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设计内部类的目的-："><a href="#设计内部类的目的-：" class="headerlink" title="设计内部类的目的 ："></a>设计内部类的目的 ：</h3><h3 id="1-逻辑关联和作用域管理"><a href="#1-逻辑关联和作用域管理" class="headerlink" title="1. 逻辑关联和作用域管理"></a>1. <strong>逻辑关联和作用域管理</strong></h3><ul><li>当一个类的定义仅对另一个类有意义时，就可以将它定义为内部类。</li><li>内部类的存在<strong>强化了“组合而非继承”的关系</strong>，让你表达“这个类只属于那个类”的语义。</li></ul><h3 id="2-访问外部类的私有成员"><a href="#2-访问外部类的私有成员" class="headerlink" title="2. 访问外部类的私有成员"></a>2. <strong>访问外部类的私有成员</strong></h3><ul><li>内部类可以<strong>无障碍访问外部类的所有成员</strong>（包括 <code>private</code> 字段和方法）。</li><li>这提供了一种灵活的方式来“增强”外部类功能，而<strong>不依赖继承</strong>。</li></ul><h3 id="3-封装和隐藏"><a href="#3-封装和隐藏" class="headerlink" title="3. 封装和隐藏"></a>3. <strong>封装和隐藏</strong></h3><ul><li>内部类本质上是<strong>外部类的一部分实现细节</strong>，可以不暴露给外部用户。</li></ul><h3 id="4-对事件处理-回调逻辑的支持"><a href="#4-对事件处理-回调逻辑的支持" class="headerlink" title="4. 对事件处理&#x2F;回调逻辑的支持"></a>4. <strong>对事件处理&#x2F;回调逻辑的支持</strong></h3><ul><li>在 GUI 编程中（如 Swing），匿名内部类、局部内部类常用于事件监听器，实现响应逻辑。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程 I 基础</title>
    <link href="/2025/04/21/Java%E7%BC%96%E7%A8%8B-I-%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/04/21/Java%E7%BC%96%E7%A8%8B-I-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>———— 基于《On Java》  </p><h2 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a><strong>什么是对象？</strong></h2><p>在许多编程书籍和技术博客中，对象常被定义为“一个真实存在的实体”或“方法和属性的集合”。</p><p>然而，这些定义往往只停留在表层，并未真正解释“<strong>什么是对象</strong>”这一核心问题。比如，“实体”本身是什么意思？为什么属性和方法的组合可以称为一个‘对象’？带着这些问题，我们可以从设计层面重新思考对象的本质。</p><h3 id="设计层面：对象是面向目的的实体特征与行为的抽象。"><a href="#设计层面：对象是面向目的的实体特征与行为的抽象。" class="headerlink" title="设计层面：对象是面向目的的实体特征与行为的抽象。"></a><strong>设计层面：对象是面向目的的实体特征与行为的抽象。</strong></h3><h3 id="什么是实体？"><a href="#什么是实体？" class="headerlink" title="什么是实体？"></a><strong>什么是实体？</strong></h3><p>动物是不是一种实体？房屋是不是一种实体？房屋？比特币呢？笛卡尔的“我思故我在”呢？</p><p>实体并不一定是以“真实存在”作为必要条件的，实体的重要特征是“一种可描述的概念”。比如“独角兽”是一只长有犄角和翅膀的马，比如“西方的恶龙覆盖有厚厚的鳞片能够喷吐火焰”。这些概念的重点不是“真实存在”，而是“可描述”。推而广之，一些抽象概念也可以作为“实体”，比如 FIFO的队列，代理模式中的代理概念。</p><p>这样我们就可以得到实体的定义 “一种可描述的概念”（无论它是否真的存在）</p><h3 id="那么什么是对象？"><a href="#那么什么是对象？" class="headerlink" title="那么什么是对象？"></a><strong>那么什么是对象？</strong></h3><p>我们永远没办法将一个实体完整地用计算机语言去描述。但可以将特征和行为抽象出来，作为我们用计算机去模拟这个物体的方法。这暗含着对象设计是面向功能的，有取舍的。因为我们实际关注的不是实体到底是怎么样的，而是关注实体通过哪些特征和行为达成了我们想要的结果。当我们考虑一头牛的时候，在虚拟世界里，我们不会去考虑牛住在哪里，何时休息。考虑的是我们为了达成目的，需要”供应“什么，“产出”什么。所以我们在设计时真正构建的对象是以目的为核心，对实体特征和行为的抽象。目的是我们的最终结果，而实体的特征和行为是为了达成目的所必须的组件</p><h3 id="实现层面：对象是经过结构化组织的内存。"><a href="#实现层面：对象是经过结构化组织的内存。" class="headerlink" title="实现层面：对象是经过结构化组织的内存。"></a><strong>实现层面：对象是经过结构化组织的内存。</strong></h3><h3 id="内存与对象"><a href="#内存与对象" class="headerlink" title="内存与对象"></a><strong>内存与对象</strong></h3><p>程序员对内存和程序结构拥有近乎完全的控制权。他们可以自由地决定每一个内存地址的用途，这在空间受限的场景中显得尤为高效，可以最大限度地压榨出每一字节的潜力。但也导致了一些问题：</p><p>在功能设计的初期就需要周全的考虑对象（结构体）的设计，不然会加大后期的维护，重构，新增功能的复杂度。</p><p>编程人员对程序有绝对的权限，意味着相同的功能可能会设计不同的系统来处理相同的流程，如内存分配&#x2F;回收。消息处理。对于多人开发的大型系统会增加系统的复杂度。</p><p>在这一层面上，一些更现代的编程语言选择放弃了C语言的“自由“，现代系统的设计都是层次化的，当我进行上层数据的处理时，仍然要去关心最底层的内存是如何排布的显然是一个不够高效的做法。因此它们开始去预定义一些结构化的内存，从”内存交给你，你来从0开始完成系统“，到“由我提供一些基础组件，你在这个基础之上组织系统”。通过对内存块的结构化设计，将“设计-实现”的问题，变成了“组织-实现”。</p><p>另一方面因为所有基础模块是编程语言预先定义的，所以在后期使用时，作为内存-系统的中间层（如一些虚拟机程序），可以对系统中的内存使用进行更好的控制，这样既可以通过系统的管理，将已加载的功能模块灵活复用，也可以更好的提供系统级的监控管理，像垃圾回收，对象的动态加载创建等，对于更上层的编程人员来说，进行类设计，对象设计。反而是一些顺便带来的好处。</p><h3 id="那么什么是面向对象？"><a href="#那么什么是面向对象？" class="headerlink" title="那么什么是面向对象？"></a><strong>那么什么是面向对象？</strong></h3><p>当我们明白了对象是一种可描述的概念，并且对象设计的核心是面向功能的，以及为什么使用对象而不是直接使用内存来设计我们的系统。那么面向对象就是在设计系统时，首先完成对系统功能的抽象，将系统的实现变为多个核心对象之间的消息通信和方法调用。如：</p><p>对数据进行存储和维护而设计的类，如用户类，仓库类</p><p>对数据组织结构进行抽象的类，如数据包类，工厂类</p><p>以某种操作流程为核心建模的设计的类，队列、栈</p><p>通过这种方式，我们不仅构建了更具结构化的系统，同时也提升了系统的可读性、可维护性与可扩展性 —— 这正是面向对象设计的核心价值所在。</p><h2 id="一些扩展性设计内容"><a href="#一些扩展性设计内容" class="headerlink" title="一些扩展性设计内容"></a>一些扩展性设计内容</h2><h3 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h3><p>允许向对象发出请求，让它执行一些操作，对于你想要解决的问题中的任何元素，你都可以在程序中用对象来呈现</p><h3 id="一段程序实际上就是多个对象通过发送消息来通知彼此要干什么"><a href="#一段程序实际上就是多个对象通过发送消息来通知彼此要干什么" class="headerlink" title="一段程序实际上就是多个对象通过发送消息来通知彼此要干什么"></a>一段程序实际上就是多个对象通过发送消息来通知彼此要干什么</h3><p>通过将现有的几个对象打包在一起，你就创建了一种新的对象。</p><h3 id="每一个对象都有类型。"><a href="#每一个对象都有类型。" class="headerlink" title="每一个对象都有类型。"></a>每一个对象都有类型。</h3><p>每个对象都是通过类生成的实例，类 就等同于 类型，一个类最为显著的特征是 你可以发送什么消息给它</p><h3 id="同一个类型的对象可以接收相同的消息"><a href="#同一个类型的对象可以接收相同的消息" class="headerlink" title="同一个类型的对象可以接收相同的消息"></a>同一个类型的对象可以接收相同的消息</h3><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><h2 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ATypeName</span> &#123;<br><span class="hljs-comment">// 类具体实现</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类中允许定义两类元素-方法和属性"><a href="#类中允许定义两类元素-方法和属性" class="headerlink" title="类中允许定义两类元素: 方法和属性"></a>类中允许定义两类元素: 方法和属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataOnly</span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">double</span> d ;<br><span class="hljs-type">boolean</span> b ;<br>&#125;<br><br><span class="hljs-type">DataOnly</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOnly</span>();<br><span class="hljs-comment">/* DataOnly    类声明</span><br><span class="hljs-comment"> * data        变量名</span><br><span class="hljs-comment"> * new         关键字用于 申请内存，调用初始化方法，返回指向该对象的指针</span><br><span class="hljs-comment"> * DataOnly()  调用类创建实现的对象</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="通过”-”-访问对象的成员"><a href="#通过”-”-访问对象的成员" class="headerlink" title="通过”.” 访问对象的成员"></a>通过”.” 访问对象的成员</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">data.i = <span class="hljs-number">47</span>;<br>data.d = <span class="hljs-number">1.1</span>;<br>data.b = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>基本类型的初始化</p><p>java中会自动进行类中定义的变量的初始化</p><p>函数中的局部变量不会主动进行初始化，但是会被jvm检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span>           <span class="hljs-literal">false</span> <br><span class="hljs-type">char</span>              \u0000 <span class="hljs-literal">null</span><br><span class="hljs-title function_">byte</span>              <span class="hljs-params">(<span class="hljs-type">byte</span>)</span><span class="hljs-number">0</span><br><span class="hljs-type">short</span>             (<span class="hljs-type">short</span>)<span class="hljs-number">0</span><br><span class="hljs-type">int</span>               <span class="hljs-number">0</span><br><span class="hljs-type">long</span>              <span class="hljs-number">0L</span><br><span class="hljs-type">float</span>             <span class="hljs-number">0.0f</span><br><span class="hljs-type">double</span>            <span class="hljs-number">0.0d</span><br></code></pre></td></tr></table></figure><h1 id="方法，参数以及返回值"><a href="#方法，参数以及返回值" class="headerlink" title="方法，参数以及返回值"></a>方法，参数以及返回值</h1><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ReturnType <span class="hljs-title function_">methodName</span><span class="hljs-params">(<span class="hljs-comment">/* 参数列表 */</span>)</span>&#123;<br><span class="hljs-comment">// 方法体</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义一个带参的方法"><a href="#定义一个带参的方法" class="headerlink" title="定义一个带参的方法"></a>定义一个带参的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">storage</span> <span class="hljs-params">(Strings s)</span>&#123;<br><span class="hljs-keyword">return</span> s.length() * <span class="hljs-number">2</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h2><p>通过static关键字来对 类中的属性和方法进行管理，使它们从属于类，直接与类进行绑定。这样在使用时可以直接通过调用类来完成对这些属性和方法的设置与绑定。</p><p>这里可以结合我们的上一节进行思考，即通过static 关键字使得 对应的方法和属性存储在类结构中的静态字段，并且在类加载阶段就通过索引完成了与类的绑定。</p><p>当类中的静态属性或者方法被调用时，也会触发类的初始化</p><p>定义一个静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticTest</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">47</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Java程序的示例"><a href="#Java程序的示例" class="headerlink" title="Java程序的示例"></a>Java程序的示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//objects/HelloDate.java</span><br><span class="hljs-keyword">import</span> java.util.* ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloDate</span>&#123;<br><span class="hljs-keyword">public</span> staic <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.print(<span class="hljs-string">&quot;Hello, it&#x27;s: &quot;</span>)<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// import 向文件中导入需要的库</span><br><span class="hljs-comment">// public class HelloDate&#123;&#125;  </span><br><span class="hljs-comment">// 声明一个公有类，这意味着允许其他所有对象对这个类进行访问</span><br><span class="hljs-comment">// class 定义这是一个类 HelloDate 类名 后续是该类的代码块</span><br><span class="hljs-comment">// public static void main(String[] args)</span><br><span class="hljs-comment">// 定义了一个静态公有方法main，这意味着它是由从类中调用的。返回值是void</span><br><span class="hljs-comment">// 后续是参数列表，声明了接收一个字符数组 args 作为参数。后续是函数的函数体</span><br><span class="hljs-comment">// System.out.println() </span><br><span class="hljs-comment">// 调用了来自System.out库中的println() 方法，它接收一个字符信息并且在打印后换行</span><br><br></code></pre></td></tr></table></figure><p>java文件需要进行一个编译&#x2F;执行的过程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">javac HelloDate.java <span class="hljs-comment"># 将java文件编译为字节码文件HelloData.class</span><br>java HelloData       <span class="hljs-comment"># 执行编译后的文件</span><br><span class="hljs-comment"># 在较新版本的java 中可以直接使用java 执行java文件</span><br>java HelloData.java<br><br><span class="hljs-comment"># 两种情况均会输出 ：</span><br>Hello , it<span class="hljs-string">&#x27;s Sat Apr 19 16:53:22 CST 2025</span><br></code></pre></td></tr></table></figure><p>编程风格 </p><p>类名通常遵循大驼峰命名法</p><p>类似 ： AllTheColosOfTheRainbow  首字母大写</p><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="左值与右值"><a href="#左值与右值" class="headerlink" title="左值与右值"></a>左值与右值</h2><p>在使用操作符赋值时，需要确定 “&#x3D;” 两边的能力。</p><p>左值 ： 必须是一个独特的命名变量</p><p>右值 ： 可以是任何常量，变量或者可以产生值的表达式</p><p>左值具有特殊性，即可以通过左值确定的查询到右值的内容</p><p>而右值必须是一个可返回的值。（即存在的值）</p><h2 id="当左值指向一个对象"><a href="#当左值指向一个对象" class="headerlink" title="当左值指向一个对象"></a>当左值指向一个对象</h2><p>一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tank</span>&#123;<br><span class="hljs-type">int</span>  level ;<br>  <span class="hljs-comment">// static int level ;</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Assignment</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Tank</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tank</span>();<br><span class="hljs-comment">//Tank t2 = t1 ;</span><br><span class="hljs-type">Tank</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tank</span>();<br>t1.level = <span class="hljs-number">9</span> ;<br>t2.level = <span class="hljs-number">47</span> ;<br>System.out.println(<span class="hljs-string">&quot;1: t1.level &quot;</span>+t1.level+<span class="hljs-string">&quot;,t2.level: &quot;</span>+ t2.level);<br>t1.level = <span class="hljs-number">27</span>;<br>System.out.println(<span class="hljs-string">&quot;3: t1.level &quot;</span>+t1.level+<span class="hljs-string">&quot;,t2.level: &quot;</span>+ t2.level);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 情况1 level 没有被 static 修饰，那么它会作为一个实例变量被处理，</span><br><span class="hljs-comment">// 当Tank t1 和Tank t2 分布创建了对应的Tank() 对象时，t1.level 和t2.level是互相独立的</span><br><span class="hljs-comment">// 情况2 将level作为一个静态变量处理，那么它会随着类加载被初始化为0.</span><br><span class="hljs-comment">// 创建的t1,t2两个实例中查询到的都是同一个level变量，所以当t2修改level时，t1中也会产生响应的修改</span><br><span class="hljs-comment">// 情况3 创建了t1的对象，并创建t2指向t1。 这时t1和t2都是对new Tank()的引用</span><br><span class="hljs-comment">// 所以当t1修改了level的值时，过程是t1 查询到它引用的对象中level变量的值，并修改</span><br><span class="hljs-comment">// 这时的t2也是指向该对象的，所以当t1修改后，t2去查询变量的值时已经变为了修改后的值。</span><br></code></pre></td></tr></table></figure><p>方法调用中的别面馆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Letter</span> &#123;<br><span class="hljs-type">char</span> c;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PassObject</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(Letter y)</span>&#123;<br>y.c = <span class="hljs-string">&#x27;z&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Letter</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Letter</span>();<br>x.c = <span class="hljs-string">&#x27;a&#x27;</span>;<br>System.out.println(<span class="hljs-string">&quot;1: x.c: &quot;</span>+ x.c);<br>f(x);<br>System.out.println(<span class="hljs-string">&quot;2: x.c: &quot;</span>+ x.c);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当传入一个对象作为函数的参数时，对该对象的属性进行修改，也会对原对象产生修改。</p><p>本质是因为向函数传递的值本身就是一个对象的地址，即使是作为副本被传进去，仍然会获取到源对象</p><h1 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.* ;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathOps</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">47</span>);<br><span class="hljs-type">int</span> i , j , k ;<br>j = rand.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>System.out.println(<span class="hljs-string">&quot;j : &quot;</span>+ j );<br>k = rand.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>System.out.println(<span class="hljs-string">&quot;j : &quot;</span>+ j );<br>i = j + k ;<br>System.out.println(<span class="hljs-string">&quot;j + k : &quot;</span> + i );<br>i = j - k ;<br>System.out.println(<span class="hljs-string">&quot;j - k : &quot;</span> + i );<br>i = k / j ;<br>System.out.println(<span class="hljs-string">&quot;j / k : &quot;</span> + i );<br>i = k * j ;<br>System.out.println(<span class="hljs-string">&quot;j * k : &quot;</span> + i );<br>i = k % j ;<br>System.out.println(<span class="hljs-string">&quot;j % k : &quot;</span> + i );<br>j %= k;<br>System.out.println(<span class="hljs-string">&quot;j %= k : &quot;</span> + j );<br><span class="hljs-type">float</span> u,v,w ;<br>v = rand.nextFloat();<br>System.out.pruntln(<span class="hljs-string">&quot;v : &quot;</span>+ v );<br>w = rand.nextFloat();<br>System.out.pruntln(<span class="hljs-string">&quot;w : &quot;</span>+ w );<br>u = v + w ;<br>System.out.pruntln(<span class="hljs-string">&quot;v + w : &quot;</span> + u );<br>u = v - w ;<br>System.out.pruntln(<span class="hljs-string">&quot;v - w : &quot;</span> + u );<br>u = w / v ;<br>System.out.pruntln(<span class="hljs-string">&quot;v / w : &quot;</span> + u );<br>u = w * v ;<br>System.out.pruntln(<span class="hljs-string">&quot;v * w : &quot;</span> + u );<br>u = w % v ;<br>System.out.pruntln(<span class="hljs-string">&quot;v % w : &quot;</span> + u );<br>v %= w;<br>System.out.pruntln(<span class="hljs-string">&quot;v %= w : &quot;</span> + v );<br>&#125;<br>&#125;<br><span class="hljs-comment">// nextInt() 获取一个随机整数， nextFloat()获取一个随机浮点数</span><br></code></pre></td></tr></table></figure><h1 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h1><p>“ - ” 反转变量符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span> ;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> -i ; <span class="hljs-comment">// c = -4 ;</span><br></code></pre></td></tr></table></figure><p>“++” 自增操作符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span> ;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + i++ ;         <span class="hljs-comment">// i++ 先返回i原值参与运算，再将i自增</span><br>System.out.println(<span class="hljs-string">&quot;c: &quot;</span>+c+<span class="hljs-string">&quot;, i: &quot;</span>+i);  <span class="hljs-comment">// 输出 6，5</span><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + ++i ;         <span class="hljs-comment">// ++i  先对i进行自增运算，再进行外部运算</span><br>System.out.println(<span class="hljs-string">&quot;d: &quot;</span>+d+<span class="hljs-string">&quot;, i: &quot;</span>+i);  <span class="hljs-comment">// 输出 8, 6</span><br></code></pre></td></tr></table></figure><p>“ - - ” 自减运算 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span> ;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + i-- ;         <span class="hljs-comment">// i++ 先返回i原值参与运算，再将i自增</span><br>System.out.println(<span class="hljs-string">&quot;c: &quot;</span>+c+<span class="hljs-string">&quot;, i: &quot;</span>+i); <span class="hljs-comment">// 输出 6，3</span><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + --i ;         <span class="hljs-comment">// ++i  先对i进行自增运算，再进行外部运算</span><br>System.out.println(<span class="hljs-string">&quot;d: &quot;</span>+d+<span class="hljs-string">&quot;, i: &quot;</span>+i);  <span class="hljs-comment">// 输出 4, 2</span><br></code></pre></td></tr></table></figure><h1 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h1><h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><p>“&#x3D;&#x3D;” 用于 判断两个对象的地址是否一致，</p><p>.equals 用于判断 两个对象的值是否一致</p><p>在java 9 以及以后的版本中 ：</p><p>-127 - 127   作为缓存整数值，当使用 value 或valueof 时，会使用同一个int对象。所以这时的 value和 valueOf 都会返回true</p><p>128 +  则都需要通过 new 来创建  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Equivalence</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String desc , Integer n1 , Integer n2)</span>&#123;<br>System.out.println(desc + <span class="hljs-string">&quot;:&quot;</span>);<br>System.out.println(<br><span class="hljs-string">&quot;%d==%d %b %b%n&quot;</span>, n1 , n2 , n1 == n2 , n1.equals(n2));<br>&#125;<br><span class="hljs-meta">@SuppressWarnings(&quot;deprecation&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> value ;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> value ;<br>show(<span class="hljs-string">&quot;Automatic&quot;</span>,i1,i2);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(value);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(value);<br>show(<span class="hljs-string">&quot;new Integer()&quot;</span>,r1,r2);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> Integer.valueOf(value);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> Integer.valueOf(value);<br>show(<span class="hljs-string">&quot;Integer.valueOf()&quot;</span>, v1 , v2);<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> value ;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> value ;<br>System.out.println(<span class="hljs-string">&quot;Primitive int :&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;%d==%d %b%n&quot;</span>, x, y, x == y);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>test(<span class="hljs-number">127</span>);<br>test(<span class="hljs-number">128</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bool</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Random</span> <span class="hljs-variable">rnd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">47</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> rnd.nextInt(<span class="hljs-number">100</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> rnd.nextInt(<span class="hljs-number">100</span>);<br>System.out.println(<span class="hljs-string">&quot;i=&quot;</span>+i);<br>System.out.println(<span class="hljs-string">&quot;j=&quot;</span>+j);<br>System.out.println(<span class="hljs-string">&quot;i &gt; j is &quot;</span> + (i&gt;j) );<br>System.out.println(<span class="hljs-string">&quot;i &lt; j is &quot;</span> + (i&lt;j) );<br>System.out.println(<span class="hljs-string">&quot;i&gt;=j is &quot;</span> + (i&gt;=j) );<br>System.out.println(<span class="hljs-string">&quot;i&lt;=j is &quot;</span> + (i&lt;=j) );<br>System.out.println(<span class="hljs-string">&quot;i==j is &quot;</span> + (i==j) );<br>System.out.println(<span class="hljs-string">&quot;i!=j is &quot;</span> + (i!=j) );<br>System.out.println(<span class="hljs-string">&quot;i&lt;10 &amp;&amp; j&gt;10 is &quot;</span> + ((i&lt;<span class="hljs-number">10</span>) &amp;&amp; (j&gt;<span class="hljs-number">10</span>))  );<br>System.out.println(<span class="hljs-string">&quot;i&lt;10 || j&gt;10 is &quot;</span> + ((i&lt;<span class="hljs-number">10</span>) || (j&gt;<span class="hljs-number">10</span>))  );<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="短路"><a href="#短路" class="headerlink" title="短路"></a>短路</h2><p>当进行逻辑运算时，中间的某个条件为false, 就不会再去执行后续条件的判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShortCircuit</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test1</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;test1(&quot;</span>+val+<span class="hljs-string">&quot;)&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;result: &quot;</span>+(val&lt;<span class="hljs-number">1</span>));<br><span class="hljs-keyword">return</span> val&lt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;test2(&quot;</span>+val+<span class="hljs-string">&quot;)&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;result: &quot;</span>+(val&lt;<span class="hljs-number">2</span>));<br><span class="hljs-keyword">return</span> val&lt;<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test3</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;test3(&quot;</span>+val+<span class="hljs-string">&quot;)&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;result: &quot;</span>+(val&lt;<span class="hljs-number">3</span>));<br><span class="hljs-keyword">return</span> val&lt;<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> test1(<span class="hljs-number">0</span>) &amp;&amp; test2(<span class="hljs-number">2</span>) &amp;&amp; test3(<span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-string">&quot;expression is &quot;</span> + b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h2><p>可以通过一些字面值来表示某些对象的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x2f</span>;  <span class="hljs-comment">//十六进制</span><br>System.out.println(<span class="hljs-string">&quot;i1 : &quot;</span>+Integer.toBinaryString(i1));<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x2F</span>; <span class="hljs-comment">//十六进制</span><br>System.out.println(<span class="hljs-string">&quot;i2 : &quot;</span>+Integer.toBinaryString(i2));<br><span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0177</span>; <span class="hljs-comment">//八进制</span><br>System.out.println(<span class="hljs-string">&quot;i3 : &quot;</span>+Integer.toBinaryString(i3));<br><span class="hljs-type">char</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xffff</span>; <span class="hljs-comment">//十六进制</span><br>System.out.println(<span class="hljs-string">&quot;r : &quot;</span>+Integer.toBinaryString(r));<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7f</span>; <span class="hljs-comment">//八进制</span><br>System.out.println(<span class="hljs-string">&quot;b : &quot;</span>+Integer.toBinaryString(b));<br><span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7fff</span>; <span class="hljs-comment">//十六进制</span><br>System.out.println(<span class="hljs-string">&quot;s : &quot;</span>+Integer.toBinaryString(s));<br><span class="hljs-type">long</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">200L</span>; <br><span class="hljs-type">long</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200l</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>System.out.println(<span class="hljs-string">&quot;n1 : &quot;</span>+Long.toBinaryString(n1));<br>System.out.println(<span class="hljs-string">&quot;n2 : &quot;</span>+Long.toBinaryString(n2));<br>System.out.println(<span class="hljs-string">&quot;n3 : &quot;</span>+Long.toBinaryString(n3));<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="按位运算和位运算"><a href="#按位运算和位运算" class="headerlink" title="按位运算和位运算"></a>按位运算和位运算</h2><p>按位运算是以二进制形式，对每一位进行与或非</p><p>位运算是直接操作值的位移运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ;<br>System.out.println((i&amp;j));     <span class="hljs-comment">// 与   不同输出0, 相同输出1 所以输出0</span><br>System.out.println((i|j));     <span class="hljs-comment">// 或   有1取1  输出 15</span><br>System.out.println((i^j));     <span class="hljs-comment">// 非   不同输出1, 相同输出0 所以输出15</span><br>System.out.println((j&lt;&lt;<span class="hljs-number">1</span>));    <span class="hljs-comment">// 位运算   向左移1位  即 01 -&gt; 10</span><br>System.out.println((j&gt;&gt;<span class="hljs-number">1</span>));    <span class="hljs-comment">// 位运算   向右移1位  即 10 -&gt; 01</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><p>通过使用 ？ 来进行判断的快速赋值 。 这时要求  两个值必须存在返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> &gt; <span class="hljs-number">3</span> ? <span class="hljs-number">4</span> : <span class="hljs-number">5</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><p>if <statement>… else 根据条件判断决定执行的流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span> ;<br><span class="hljs-keyword">if</span> (a==<span class="hljs-number">3</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;a is 3&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a==<span class="hljs-number">4</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;a is 4&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;a is not 3&quot;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br><br><span class="hljs-keyword">while</span>(a&gt;<span class="hljs-number">5</span>)&#123;<br>a++;<br>&#125;<br><span class="hljs-comment">// while 循环 </span><br><span class="hljs-keyword">do</span> &#123;<br>a++;<br>&#125;<span class="hljs-keyword">while</span>(a&gt;<span class="hljs-number">5</span>);<br><span class="hljs-comment">// do while 循环  代码块至少会被执行一次</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>a++;<br>&#125;<br><span class="hljs-comment">// for 循环 , for中允许使用“,” 定义多个值</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用for … in 来进行迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Literals</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a : f)&#123;<br>System.out.println(a);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环中的控制符"><a href="#循环中的控制符" class="headerlink" title="循环中的控制符"></a>循环中的控制符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">break</span> <span class="hljs-comment">// 跳出当前循环</span><br><span class="hljs-keyword">continue</span> <span class="hljs-comment">// 跳过本次循环的后续步骤，继续循环</span><br><span class="hljs-keyword">return</span> <span class="hljs-comment">// 从函数中返回</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">somenum</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br><span class="hljs-keyword">while</span> (a &lt; <span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">if</span>(a ==<span class="hljs-number">6</span> )&#123;<br>a++;<br><span class="hljs-keyword">continue</span>;        <span class="hljs-comment">// 跳过后续流程，执行下一次循环</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == <span class="hljs-number">7</span>)&#123;<br>a++;<br><span class="hljs-keyword">break</span>;           <span class="hljs-comment">// 跳出循环</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == <span class="hljs-number">8</span>)&#123;<br><span class="hljs-keyword">return</span> a ;       <span class="hljs-comment">//  直接返回</span><br>&#125;<br>a++;<br>&#125;<br><span class="hljs-keyword">return</span> a ;<br>&#125;<br><br><span class="hljs-comment">// 因为当a==7时  a继续自增了 之后break -&gt; return 。所以最后输出 8</span><br></code></pre></td></tr></table></figure><h2 id="swtich-多条件分支时可以使用switch"><a href="#swtich-多条件分支时可以使用switch" class="headerlink" title="swtich 多条件分支时可以使用switch"></a>swtich 多条件分支时可以使用switch</h2><p>也可以使用字符串进行分支选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">somenum</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br><span class="hljs-keyword">while</span> (a &lt;= <span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">switch</span>(a)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span> :<br>System.out.println(<span class="hljs-string">&quot;a is 6&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span> :<br>System.out.println(<span class="hljs-string">&quot;a is 7&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span> :<br>System.out.println(<span class="hljs-string">&quot;a is 8&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span> :<br>System.out.println(<span class="hljs-string">&quot;a is 9&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span> :<br>System.out.println(<span class="hljs-string">&quot;a is not 6,7,8,9&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>a++;<br>&#125;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">return</span> a ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 VIIII Web框架 Flask</title>
    <link href="/2025/04/18/Python%E7%BC%96%E7%A8%8B-VIIII-Web%E6%A1%86%E6%9E%B6-Flask/"/>
    <url>/2025/04/18/Python%E7%BC%96%E7%A8%8B-VIIII-Web%E6%A1%86%E6%9E%B6-Flask/</url>
    
    <content type="html"><![CDATA[<p>跟着Flask文档，编写一个基于Flask的Web 服务器</p><h1 id="启动Flask"><a href="#启动Flask" class="headerlink" title="启动Flask"></a>启动Flask</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello,World&quot;</span><br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> FLASK_APP=hello.py  <br>python -m flask run<br>使 flask 服务器开始运行<br></code></pre></td></tr></table></figure><p>这里主要定义了一个路由“&#x2F;” 和 调用方法的关系。启动服务器后对对应的路径进行访问</p><p>通过指定 —host&#x3D;0.0.0.0 允许操作系统监听所有公开IP的请求</p><h2 id="路由中的变量定义"><a href="#路由中的变量定义" class="headerlink" title="路由中的变量定义"></a>路由中的变量定义</h2><table><thead><tr><th><code>string</code></th><th>（缺省值） 接受任何不包含斜杠的文本</th></tr></thead><tbody><tr><td><code>int</code></td><td>接受正整数</td></tr><tr><td><code>float</code></td><td>接受正浮点数</td></tr><tr><td><code>path</code></td><td>类似 <code>string</code> ，但可以包含斜杠</td></tr><tr><td><code>uuid</code></td><td>接受 UUID 字符串</td></tr></tbody></table><h2 id="url-for"><a href="#url-for" class="headerlink" title="url_for()"></a>url_for()</h2><p>url_for 可以通过具体的函数名返回其所对应的资源路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profile</span>(<span class="hljs-params">username</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&#125;\&#x27;s profile&#x27;</span>.<span class="hljs-built_in">format</span>(escape(username))<br><span class="hljs-keyword">with</span> app.test_request_context():<br><span class="hljs-built_in">print</span>(url_for(<span class="hljs-string">&#x27;profile&#x27;</span>,username=<span class="hljs-string">&#x27;Codfish&#x27;</span>))  <span class="hljs-comment"># 输出/user/codfish</span><br></code></pre></td></tr></table></figure><h2 id="定义http请求方法对应的处理"><a href="#定义http请求方法对应的处理" class="headerlink" title="定义http请求方法对应的处理"></a>定义http请求方法对应的处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">return</span> do_the_login()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> show_the_login_form()<br></code></pre></td></tr></table></figure><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p><strong><code>url_for(&#39;static&#39;, filename=&#39;style.css&#39;)</code></strong></p><p>静态文件和路径的映射</p><h2 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&#x27;</span></span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/name&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>)<br><span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;hello.html&#x27;</span>,name=name)<br><br></code></pre></td></tr></table></figure><p>模板可以用来直接向其中填充调用方法中的变量信息，模板会帮助进行后期的替换</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flaskimport request<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br><span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>f = request.files[<span class="hljs-string">&#x27;the_file&#x27;</span>]<br>f.save(<span class="hljs-string">&#x27;/var/www/uploads/uploaded_file.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里说的是接收文件上传请求将文件保存到服务器。<br>f &#x3D; request.files[‘the_file’]  从请求中获取文件信息</p><p>f.save(‘&#x2F;var&#x2F;www&#x2F;uploads&#x2F;uploaded_file.txt’)  将文件保存到目标路径</p><h2 id="获取Cookies"><a href="#获取Cookies" class="headerlink" title="获取Cookies"></a>获取Cookies</h2><p>request中存在一个对象用来存储所有的cookies </p><p>这里是 获取名为username的cookies信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    username = request.cookies.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    <span class="hljs-comment"># use cookies.get(key) instead of cookies[key] to not get a</span><br>    <span class="hljs-comment"># KeyError if the cookie is missing.</span><br></code></pre></td></tr></table></figure><p>对应的向客户端设置cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> make_response<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    resp = make_response(render_template(...))<br>    resp.set_cookie(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;the username&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp<br></code></pre></td></tr></table></figure><h2 id="使用重定向-，转移到另一个路径"><a href="#使用重定向-，转移到另一个路径" class="headerlink" title="使用重定向 ，转移到另一个路径"></a>使用重定向 ，转移到另一个路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> abort, redirect, url_for<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="将用户跳转到错误页面"><a href="#将用户跳转到错误页面" class="headerlink" title="将用户跳转到错误页面"></a>将用户跳转到错误页面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">abort(<span class="hljs-number">401</span>) <span class="hljs-comment"># 返回 401 错误页面</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">404</span></span>) </span><span class="hljs-comment"># 定制出错页面</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">page_not_found</span>(<span class="hljs-params">error</span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;page_not_found.html&#x27;</span>), <span class="hljs-number">404</span>   <span class="hljs-comment"># 最后返回的是状态码</span><br></code></pre></td></tr></table></figure><h2 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h2><p>支持多种返回类型自动转换</p><p>响应对象   →  直接返回</p><p>字符串 → 包装字符串和缺省参数 返回</p><p>字典  → 使用jsonfy创建一个返回对象</p><p>元组 → 接收类型为（response，status） (response,headers) 以及（response,status,headers）类型的项目 会将信息组装成新的响应</p><p>或者使用make_response() 构建响应返回</p><p>或者  直接 返回json 字段</p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>session 对象用于储存同用户的多个请求的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, redirect, url_for, escape, request<br><br>app = Flask(__name__)<br><br><span class="hljs-comment"># Set the secret key to some random bytes. Keep this really secret!</span><br>app.secret_key = <span class="hljs-string">b&#x27;_5#y2L&quot;F4Q8z\n\xec]/&#x27;</span>          <span class="hljs-comment">#使用前需要设置密钥</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">in</span> session:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Logged in as %s&#x27;</span> % escape(session[<span class="hljs-string">&#x27;username&#x27;</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are not logged in&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        session[<span class="hljs-string">&#x27;username&#x27;</span>] = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;form method=&quot;post&quot;&gt;</span><br><span class="hljs-string">            &lt;p&gt;&lt;input type=text name=username&gt;</span><br><span class="hljs-string">            &lt;p&gt;&lt;input type=submit value=Login&gt;</span><br><span class="hljs-string">        &lt;/form&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    <span class="hljs-comment"># remove the username from the session if it&#x27;s there</span><br>    session.pop(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">app.logger.debug(<span class="hljs-string">&#x27;A value for debugging&#x27;</span>)<br>app.logger.warning(<span class="hljs-string">&#x27;A warning occurred (%d apples)&#x27;</span>, <span class="hljs-number">42</span>)<br>app.logger.error(<span class="hljs-string">&#x27;An error occurred&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Web后端框架的核心功能在于</p><p>HTTP请求处理 - 将请求文本处理为请求对象</p><p>路由资源 - 在框架中定义路由资源添加的方法，以及如何根据请求查找到对应的路径</p><p>响应构建 - 请求结束后的响应是如何组装的，以什么形式返回响应</p><p>扩展功能 - 一些协助构建整个服务的扩展功能，比如模板渲染，动态资源路径</p><h1 id="WSGI-（Web-Server-Gateway-Interface）"><a href="#WSGI-（Web-Server-Gateway-Interface）" class="headerlink" title="WSGI （Web Server Gateway Interface）"></a>WSGI （Web Server Gateway Interface）</h1><p>wsgi 是定义 web server（可以理解为端口监听，线程管理，以及socket的部分） 如何与实际应用（http请求处理，报文头分析等具体的函数处理部分）交互的接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">application</span>(<span class="hljs-params">environ, start_response</span>):<br><span class="hljs-comment"># environ 是请求的数据信息, start_reponse 是webserver 的回调函数</span><br>...<br><span class="hljs-comment"># 接收到请求体后的功能处理部分</span><br><br>    <span class="hljs-comment"># 调用回调函数，告诉服务器响应的状态码和头部</span><br>    start_response(<span class="hljs-string">&quot;200 OK&quot;</span>, [(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/plain&quot;</span>)])<br>    <br>    <span class="hljs-comment"># 返回响应体（是一个可迭代对象）</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">b&quot;Hello, WSGI World!&quot;</span>]<br><br></code></pre></td></tr></table></figure><p>这里定义了 web server 需要将请求内容以及一个用于向其写入状态码信息和响应头的回调函数传入。在接口内部需要进行请求处理，处理完毕后，调用回调函数写入状态码和响应头</p><p>最终将响应体通过return 返回。</p><h2 id="Flask-的wsgi实现"><a href="#Flask-的wsgi实现" class="headerlink" title="Flask 的wsgi实现"></a>Flask 的wsgi实现</h2><p>flask 对于wsgi的实现主要有3部分</p><ol><li>定义了一个请求对象<code>RequestContext</code>，将请求体中的内容封装到对象中。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestContext</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, app, environ</span>):<br>        <span class="hljs-variable language_">self</span>.request = app.request_class(environ)   <span class="hljs-comment"># 构造 Request 对象</span><br>        <span class="hljs-variable language_">self</span>.session = app.open_session(<span class="hljs-variable language_">self</span>.request)<br>        <span class="hljs-variable language_">self</span>.app = app<br>        ...<br></code></pre></td></tr></table></figure><ol><li><p>定义了一个上下文栈，将请求对象压入栈中</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> werkzeug.local <span class="hljs-keyword">import</span> LocalStack<br><br>_request_ctx_stack = LocalStack()<br><br></code></pre></td></tr></table></figure></li><li><p>定义了一个代理对象request，使flask不必真正的将RequestContext 对象传入函数，而是通过代理获取外部的作用域来查询RequestContext中的属性</p></li><li><p>构建了app 这样一个可调用对象来实现wsgi接口，底层是通过wsgi_app 函数来完成整个过程的执行，app对象本身是为了存储一些中间状态</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flask</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, environ, start_response</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.wsgi_app(environ, start_response)<br></code></pre></td></tr></table></figure><h2 id="实现一个轻量框架"><a href="#实现一个轻量框架" class="headerlink" title="实现一个轻量框架"></a>实现一个轻量框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> wsgiref.simple_server <span class="hljs-keyword">import</span> make_server<br><span class="hljs-keyword">from</span> werkzeug.local <span class="hljs-keyword">import</span> LocalStack, LocalProxy<br><br><span class="hljs-comment"># === 上下文栈 ===</span><br>_request_ctx_stack = LocalStack()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_lookup_request</span>():<br>    top = _request_ctx_stack.top<br>    <span class="hljs-keyword">if</span> top <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;No request context&quot;</span>)<br>    <span class="hljs-keyword">return</span> top[<span class="hljs-string">&#x27;request&#x27;</span>]<br><br><span class="hljs-comment"># 全局代理变量</span><br>request = LocalProxy(_lookup_request)<br><br><span class="hljs-comment"># === Request 和 Response 封装 ===</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, environ</span>):<br>        <span class="hljs-variable language_">self</span>.method = environ[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.path = environ[<span class="hljs-string">&#x27;PATH_INFO&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.environ = environ<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Response</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, body, status=<span class="hljs-string">&quot;200 OK&quot;</span>, headers=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-variable language_">self</span>.body = [body.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)]<br>        <span class="hljs-variable language_">self</span>.status = status<br>        <span class="hljs-variable language_">self</span>.headers = headers <span class="hljs-keyword">or</span> [(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html&quot;</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, environ, start_response</span>):<br>        start_response(<span class="hljs-variable language_">self</span>.status, <span class="hljs-variable language_">self</span>.headers)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.body<br><br><span class="hljs-comment"># === Flask Mini 框架核心 ===</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MiniFlask</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.routes = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">route</span>(<span class="hljs-params">self, path</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">f</span>):<br>            <span class="hljs-variable language_">self</span>.routes[path] = f<br>            <span class="hljs-keyword">return</span> f<br>        <span class="hljs-keyword">return</span> decorator<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wsgi_app</span>(<span class="hljs-params">self, environ, start_response</span>):<br>        <span class="hljs-comment"># 构造 request 上下文并压入栈</span><br>        req = Request(environ)<br>        _request_ctx_stack.push(&#123;<span class="hljs-string">&#x27;request&#x27;</span>: req&#125;)<br>        <span class="hljs-keyword">try</span>:<br>            handler = <span class="hljs-variable language_">self</span>.routes.get(req.path)<br>            <span class="hljs-keyword">if</span> handler <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;404 Not Found&quot;</span>, <span class="hljs-string">&quot;404 NOT FOUND&quot;</span>)(<br>                    environ, start_response<br>                )<br>            result = handler()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(result, Response):<br>                <span class="hljs-keyword">return</span> result(environ, start_response)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> Response(<span class="hljs-built_in">str</span>(result))(environ, start_response)<br>        <span class="hljs-keyword">finally</span>:<br>            _request_ctx_stack.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, environ, start_response</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.wsgi_app(environ, start_response)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">5000</span></span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Running on http://<span class="hljs-subst">&#123;host&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">with</span> make_server(host, port, <span class="hljs-variable language_">self</span>) <span class="hljs-keyword">as</span> httpd:<br>            httpd.serve_forever()<br><br><span class="hljs-comment"># === 示例使用 ===</span><br>app = MiniFlask()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Hello, your method is <span class="hljs-subst">&#123;request.method&#125;</span>&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/hi&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hi</span>():<br>    <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;&lt;h1&gt;Hi there!&lt;/h1&gt;&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br></code></pre></td></tr></table></figure><p>这里面实现了我们上述的几个关键点</p><ol><li>定义了 对http请求的封装</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, environ</span>):<br>        <span class="hljs-variable language_">self</span>.method = environ[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.path = environ[<span class="hljs-string">&#x27;PATH_INFO&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.environ = environ<br></code></pre></td></tr></table></figure><ol><li>定义了一个上下文栈，在消息到达时，将请求存储上下文栈，响应后将请求弹出</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">_request_ctx_stack = LocalStack()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_lookup_request</span>():<br>    top = _request_ctx_stack.top<br>    <span class="hljs-keyword">if</span> top <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;No request context&quot;</span>)<br>    <span class="hljs-keyword">return</span> top[<span class="hljs-string">&#x27;request&#x27;</span>]<br><br></code></pre></td></tr></table></figure><ol><li>一个对于上下文栈中请求的代理</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">request = LocalProxy(_lookup_request)<br></code></pre></td></tr></table></figure><ol><li>实现 wsgi接口，接收请求环境信息和回调函数，返回最终的响应体</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wsgi_app</span>(<span class="hljs-params">self, environ, start_response</span>):<br>    <span class="hljs-comment"># 构造 request 上下文并压入栈</span><br>    req = Request(environ)<br>    _request_ctx_stack.push(&#123;<span class="hljs-string">&#x27;request&#x27;</span>: req&#125;)<br>    <span class="hljs-keyword">try</span>:<br>        handler = <span class="hljs-variable language_">self</span>.routes.get(req.path)<br>        <span class="hljs-keyword">if</span> handler <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;404 Not Found&quot;</span>, <span class="hljs-string">&quot;404 NOT FOUND&quot;</span>)(<br>                environ, start_response<br>            )<br>        result = handler()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(result, Response):<br>            <span class="hljs-keyword">return</span> result(environ, start_response)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Response(<span class="hljs-built_in">str</span>(result))(environ, start_response)<br>    <span class="hljs-keyword">finally</span>:<br>        _request_ctx_stack.pop()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 VIII HTTP服务</title>
    <link href="/2025/04/17/Python%E7%BC%96%E7%A8%8B-VIII-HTTP%E6%9C%8D%E5%8A%A1/"/>
    <url>/2025/04/17/Python%E7%BC%96%E7%A8%8B-VIII-HTTP%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="网络与应用层"><a href="#网络与应用层" class="headerlink" title="网络与应用层"></a>网络与应用层</h1><p>从服务处理的角度来看，网络的核心目的在于<strong>通过协议控制，实现请求端与服务端之间数据的完整交互</strong>。</p><p>对请求端和服务端而言，中间层的报文封装、转发、路由等行为是不可感知的。<strong>网络层和传输层共同构建了一个抽象的“一致交互环境”</strong>，使得远端传输的数据能够被“原封不动地”接收并存储到本地缓存，供应用逻辑处理。</p><p>正因为中间网络的不可见性与“穿透性”，网络层与传输层的协议设计更强调<strong>通用性与可靠性</strong>。它们的关注点在于数据的可靠传递与顺序控制，而不是数据的具体内容，因此协议结构通常具有<strong>严格的头部格式与字段定义</strong>，以保证设备间的互通与协议的一致性。</p><p>相较之下，<strong>应用层协议更关注的是“如何处理数据”</strong>。它所需考虑的，是服务需要哪些输入字段、输出以何种格式表达。因而，应用层协议具备更强的<strong>灵活性与语义扩展性</strong>，核心是围绕字段的<strong>定义、解析与业务映射</strong>，完成服务端与请求端的语义协同。</p><p>网络层和传输层协议通常强调<strong>字段的控制意义和状态管理功能</strong>，例如通过设置特定位（如 TCP 的 SYN、ACK、FIN）来标识连接状态或数据传输的阶段，以及通过 IP 层的 TTL、标志位等控制报文的转发行为。</p><p>相比之下，应用层协议更强调<strong>字段的语义描述性</strong>，即字段用于表达请求的操作类型、参数内容或格式要求，具体的状态（如会话是否有效、登录是否成功）通常由客户端和服务端通过各自的逻辑来维护。应用层字段本身通常<strong>不维护传输状态</strong>，而是作为触发状态变化或状态校验的依据。</p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="HTTP协议是什么？"><a href="#HTTP协议是什么？" class="headerlink" title="HTTP协议是什么？"></a>HTTP协议是什么？</h2><p>HTTP 是一种基于请求-响应模式的应用层协议，客户端通过构建结构化的请求报文（包括请求方法、资源路径、请求头和可选的请求体）来描述其访问意图，服务端根据这些信息进行解析、路由、处理，并生成结构化的响应返回。</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>HTTP请求包含三部分</p><p>1.请求行：说明请求类型（GET、POST 等）、资源路径和协议版本。</p><p>请求行描述了 请求的资源对象，以及请求的方法。</p><p>2.请求头：携带客户端环境、请求意图、身份验证、缓存规则等元数据。</p><p>请求头描述了一些交互的控制信息，</p><p>3.请求体（可选）：例如 POST 请求中发送的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">请求示例<br><br>GET /index.html HTTP/1.1<br>Host: [www.example.com](http://www.example.com/)<br>User-Agent: MyBrowser/2.0<br>Connection: keep-alive<br>Accept: text/html<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">响应示例 <br><br>HTTP/1.1 200 OK<br>Content-Type: text/html<br>Content-Length: 75<br>Cache-Control: max-age=3600<br>Connection: keep-alive<br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, HTTP/1.1!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Python的HTTP实现示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>HOST = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>   <span class="hljs-comment"># 监听所有地址</span><br>PORT = <span class="hljs-number">4623</span>       <span class="hljs-comment"># 监听端口</span><br>PATH_ROUTE = &#123;&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">path_add</span>(<span class="hljs-params">path_name</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wapper</span>(<span class="hljs-params">func</span>) :<br>        PATH_ROUTE[path_name] = func<br>    <span class="hljs-keyword">return</span> wapper<br><br><span class="hljs-meta">@path_add(<span class="hljs-params"><span class="hljs-string">&quot;/home&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_home_method</span>(<span class="hljs-params">conn</span>):<br>    response_body = <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World! Here is home page&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><br>    response = (<br>        <span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n&quot;</span><br>        <span class="hljs-string">f&quot;Content-Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(response_body.encode())&#125;</span>\r\n&quot;</span><br>        <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span><br>        <span class="hljs-string">&quot;Connection: close\r\n&quot;</span><br>        <span class="hljs-string">&quot;\r\n&quot;</span><br>        <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;response_body&#125;</span>&quot;</span><br>    )<br><br>    conn.sendall(response.encode())<br>    conn.close()<br><br><span class="hljs-meta">@path_add(<span class="hljs-params"><span class="hljs-string">&quot;/index&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_index_method</span>(<span class="hljs-params">conn</span>):<br>    response_body = <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World! Here is index page&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><br>    response = (<br>        <span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n&quot;</span><br>        <span class="hljs-string">f&quot;Content-Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(response_body.encode())&#125;</span>\r\n&quot;</span><br>        <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span><br>        <span class="hljs-string">&quot;Connection: close\r\n&quot;</span><br>        <span class="hljs-string">&quot;\r\n&quot;</span><br>        <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;response_body&#125;</span>&quot;</span><br>    )<br><br>    conn.sendall(response.encode())<br>    conn.close()<br><br><span class="hljs-comment"># 创建 socket</span><br>server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>server_socket.bind((HOST, PORT))<br>server_socket.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;HTTP Server running at http://<span class="hljs-subst">&#123;HOST&#125;</span>:<span class="hljs-subst">&#123;PORT&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    client_conn, client_addr = server_socket.accept()<br>    request = client_conn.recv(<span class="hljs-number">1024</span>).decode()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n----- Received request from <span class="hljs-subst">&#123;client_addr&#125;</span> -----&quot;</span>)<br>    <span class="hljs-built_in">print</span>(request.strip())<br>    <br>    content = request.splitlines()<br>    method,path,protocol = content[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot; &quot;</span>)<br>    rout_name = path.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> rout_name <span class="hljs-keyword">in</span> PATH_ROUTE :<br>        PATH_ROUTE[rout_name]()<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span> :<br><br>        <span class="hljs-comment"># 构造 HTTP 响应内容</span><br>        response_body = <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><br>        response = (<br>            <span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n&quot;</span><br>            <span class="hljs-string">f&quot;Content-Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(response_body.encode())&#125;</span>\r\n&quot;</span><br>            <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span><br>            <span class="hljs-string">&quot;Connection: close\r\n&quot;</span><br>            <span class="hljs-string">&quot;\r\n&quot;</span><br>            <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;response_body&#125;</span>&quot;</span><br>        )<br><br>        client_conn.sendall(response.encode())<br>        client_conn.close()<br><br></code></pre></td></tr></table></figure><p>可以看到 其工作流程：</p><ol><li>创建TCP 服务器，绑定网卡地址和端口地址</li></ol><p>2.开始监听外部请求</p><p>3.定义循环来处理接收到的消息</p><p>4.接收到的http请求被处理成字符串 请求头一般包含 方法，路径，协议版本 和一些头控制信息</p><ol start="5"><li>可以通过请求头解析出对应的路径，这里设计了一个装饰器，将被装饰的函数添加到整体的路由字典中，当请求头中的字段存在于字典中时执行对应的函数，否则执行默认函数。默认函数会将默认的响应头和HTML字段，对http请求做出响应。</li></ol><p>整体上HTTP的工作流程是 ：</p><p>服务器监听→ 服务端发起请求→ 服务端分析文本信息，路由到请求的目标资源，执行对应的函数，将数据返回给请求端，关闭socket。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 VII 网络编程</title>
    <link href="/2025/04/17/Python%E7%BC%96%E7%A8%8B-VII-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/04/17/Python%E7%BC%96%E7%A8%8B-VII-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是网络？"><a href="#什么是网络？" class="headerlink" title="什么是网络？"></a>什么是网络？</h1><p>是OSI的7层模型？ 还是TCP&#x2F;IP 协议簇？wifi&#x2F;移动通信的空口互联？ 又或者是内核进程的虚拟数据转发？</p><ul><li>网络的本质基于预定义的通信协议通过物理介质（或虚拟物理介质如虚拟端口，虚拟mac地址）在设备间进行数据传输的一种组织结构。<ul><li>网络是“有层次”的，无论是固网通信还是空口通信。数据包的传输都在进行一个“封装-解封装”的过程</li><li>网络是“动态”的，端到端的网络通信，需要网卡持续监听外部网络接收到的数据包，并通过中断触发内核来对数据包进行处理</li></ul></li></ul><h1 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP&#x2F;IP协议栈"></a>TCP&#x2F;IP协议栈</h1><p>在其他的网络内容会具体介绍网络的转发和传输。这里只是简单讲解下TCP&#x2F;IP 协议</p><p>网络是一种基于多层通信的数据传输模式</p><p>网络模型一开始由OSI 预先定义 即7层网络结构 ：</p><p>物理层：                                                   比特流的传输、电气特性、机械特性</p><p>数据链路层：                                          将比特率转换为物理信号。并进行基础的网络设备控制</p><p>网络层：                                                   提供数据的转发，寻址。以及基础的网络质量检测</p><p>传输层：                                                   封装，承载数据。与对端设备建立连接通道。进行数据传输</p><p>会话层：                                                   管理会话连接的建立、维护和终止</p><p>表示层：                                                   处理数据格式转换、加密解密、压缩解压缩</p><p>应用层：                                                   设计应用数据结构如何在设备间进行连接，处理，解析                                                </p><p>在实现层面上应用较多的是TCP&#x2F;IP协议栈，设计了4层网络结构 ：</p><p>链路层：                                                   数据到介质的转换，通常由网卡等硬件进行。</p><p>网络层：                                                   进行数据的转发，寻址。以及基础的网络质量检测</p><p>传输层：                                                   封装，承载数据。与对端建立连接。进行数据传输</p><p>应用层：                                                   设计应用数据结构如何在设备间进行连接，处理，解析 </p><p>在数据传输过程中，每一层都具备对应的头部，来更好的控制数据的转发和对应协议的识别。</p><p>通过这种设计，允许将一端的信息&#x2F;代码&#x2F;数据传输到另外一端，并被解析执行。</p><h1 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h1><p>socket 起源于linux概念，国内一般称为套接字。它实际上是一种linux内核网络协议栈上的描述符资源。也可以理解为一种网络协议接口，通过socket,我们可以创建多种不同的网络协议，并将数据使用各种网络协议传输到对端，而不需要去考虑每种协议的具体实现。</p><h1 id="socket-底层实现的简单描述"><a href="#socket-底层实现的简单描述" class="headerlink" title="socket 底层实现的简单描述"></a>socket 底层实现的简单描述</h1><p>上面我们已经说明了socket是一种网络协议接口，它对上提供了数据层，网络层数据传输的功能。对下提供了发送数据包所必须的IP，端口，协议头设计。</p><p>在实现上。网络协议栈中，在这一层定义了sock接口。然后定义了通用的C函数指针，再在不同的传输层协议上根据不同的协议描述进行不同的实现。在收发包时，在sock层拆封网络层协议头，识别网络层中的协议号，将数据包转发给对应的结构去处理。转发到对应结构后，通过强制转换，转换为对应的协议数据包来进行进一步的数据解析</p><h2 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h2><p>通常使用的比较多的是UDP协议和TCP协议</p><h3 id="UDP（协议号17）"><a href="#UDP（协议号17）" class="headerlink" title="UDP（协议号17）"></a>UDP（协议号17）</h3><p>UDP协议，通常被认为是无连接的，因为协议本身只定义了原，目端口号信息。将应用层数据写入UDP数据包中，传输到对端的设备的目的端口，不存在连接过程和保活，重传等用来保证数据完整性的设计。但是可以在其上层进行这些可靠性设计。所以UDP优点是传输效率高，无论是数据发送层面还是包信息利用率上。而缺点是无连接，当发送掉包时，会导致整个数据不完整，需要在应用层再进行完整性确认。</p><h3 id="TCP（协议号6）"><a href="#TCP（协议号6）" class="headerlink" title="TCP（协议号6）"></a>TCP（协议号6）</h3><p>TCP协议，与UDP不同，TCP中定义了复杂的控制字段，并设计了状态机来标识TCP传输过程中的每一个阶段，它提供了连接过程，重传，保活等机制来在传输层保护数据的完整性。在TCP中，数据是流式传输的。它并非UDP那样进行用户的写入-打包-发送。而是存在两个 接收&#x2F;发送的缓存队列，每次从其中获取一定量的字符发送到对端。</p><h1 id="Python中的socket"><a href="#Python中的socket" class="headerlink" title="Python中的socket"></a>Python中的socket</h1><p>python中同样提供了socket的标准库用于进行网络编程</p><p>一个最简单的UDP echo server 实现 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)                 <br><span class="hljs-comment">#创建socket对象，AF_INET 指定了使用IP协议，SOCK_DGRAM指定是UDP</span><br>sock.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">5560</span>))<br><span class="hljs-comment">#绑定IP地址和端口号 本地主机使用127.0.0.1</span><br>buffer = <span class="hljs-number">10240</span><br><span class="hljs-comment">#设置接收缓存块的大小，接收到的数据包会被存放在缓存中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;server start&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> : <span class="hljs-comment">#设置接收/发送循环</span><br>    message,addr = sock.recvfrom(buffer)      <span class="hljs-comment">#从socket中接收数据，返回值为一个接收到的信息和ip地址和端口的元组</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;recevie message <span class="hljs-subst">&#123;message.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)&#125;</span> from <span class="hljs-subst">&#123;addr&#125;</span>&quot;</span>)      <span class="hljs-comment">#从数据包解码字符串并打印</span><br>    send_message = <span class="hljs-string">f&quot;recevie message <span class="hljs-subst">&#123;message.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)&#125;</span> from <span class="hljs-subst">&#123;addr&#125;</span>&quot;</span>.encode()<br>    sock.sendto(send_message,addr)      <span class="hljs-comment">#将收到的信息发送回原地址</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 客户端</span><br><span class="hljs-keyword">import</span> socket <br>buff = <span class="hljs-number">10240</span><br>sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>    message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入消息:&quot;</span>)<br>    sock.sendto(message.encode(),(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">5560</span>))<br>    message,addr = sock.recvfrom(buff)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;receive message <span class="hljs-subst">&#123;message&#125;</span> from <span class="hljs-subst">&#123;addr&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>这其中有几个主要过程 ： </p><p>1.调用socket函数，传入协议族，数据类型，返回 socket结构体。它本身是一种多态实现，帮助我们屏蔽了UDP，TCP甚至网络层协议的差异性，根据我们传递的参数创建对应的UDP或者TCP套接字实例</p><p>2.当我们传入的是AF_INET，SOCK_DGRAM时，返回的是一个UDP 套接字对象。</p><p>3.将套接字对象与对应的网卡进行绑定，（端口号是内核用于转发数据报的逻辑标识。当服务器收到目的地址为127.0.0.1 端口号为5560的 UDP包时，会将数据包转发给对应的上层应用程序处理，实际上就是将拆除协议头的数据报文写入 socket 接收缓冲区中）</p><p>4.设置了接收数据所使用的缓存大小</p><p>5.设置while 循环 使用 recvfrom 获取数据，接收到的是对端传来的字节数据和对端的地址端口信息</p><ol start="6"><li>使用sendto 向目标地址发送数据。</li></ol><p>socket 过程常用函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">server = socket.socket()  <span class="hljs-comment"># 定义协议族和协议信息，返回对应的协议套接字实例</span><br>server.bind((ip,port))  <span class="hljs-comment"># 将套接字与网卡进行绑定</span><br>server.recvfrom(buffer_size) <span class="hljs-comment">#接收经过buffer_size限制大小的数据，返回字节消息和远端的IP 端口信息</span><br>server.sendto(message,addr) <span class="hljs-comment">#向目标网络发送数据，传入待发送的字符和远端的IP 端口信息</span><br>server.listen() <span class="hljs-comment">#用于TCP,执行后打开对应的网络端口监听</span><br>server.accept() <span class="hljs-comment">#当创建的TCP接收到连接请求后，通过这个方法返回一个socket的子链接公用底层的端口和IP信息</span><br>sock.recv()     <span class="hljs-comment">#因为TCP 是有连接的，确认绑定关系后，不需要再指定IP和端口信息</span><br>sock.send()     <span class="hljs-comment">#同上</span><br>client.connect((ip,port)) <span class="hljs-comment">#TCP客户端的调用，指定对端地址和端口进行TCP连接</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 VI 多任务处理</title>
    <link href="/2025/04/16/Python%E7%BC%96%E7%A8%8B-VI-%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86/"/>
    <url>/2025/04/16/Python%E7%BC%96%E7%A8%8B-VI-%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统视角下的任务执行"><a href="#操作系统视角下的任务执行" class="headerlink" title="操作系统视角下的任务执行"></a>操作系统视角下的任务执行</h1><p>在操作系统中，所有的程序都是以<strong>进程或线程的形式</strong>被调度执行的。</p><h3 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h3><p>进程是程序被加载到内存后的运行时实例，是操作系统进行资源分配和调度的基本单位。</p><p>进程负责管理其所需的各种资源，包括但不限于用户空间中的代码段、堆、栈、动态链接库，以及通过内核中的 <code>task_struct</code> 结构体关联的系统资源，例如命名空间、文件挂载点、网络接口、用户权限、信号处理、共享内存和信号量等。</p><h3 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h3><p>线程是进程内的一个执行单元，是操作系统调度的最小单位。</p><p>线程与进程的区别在于资源的共享方式：</p><p>多个线程可以共享同一个进程的用户空间资源（如内存、文件描述符、信号处理器等），但每个线程依然会拥有自己独立的 <code>task_struct</code>、内核栈和调度上下文。</p><p>在线程创建时，可以通过 <code>clone()</code> 系统调用指定共享哪些资源，从而实现不同粒度的资源隔离或共享。</p><h3 id="什么是任务调度？"><a href="#什么是任务调度？" class="headerlink" title="什么是任务调度？"></a>什么是任务调度？</h3><p>操作系统通过 <code>task_struct</code> 结构体来描述每一个可调度实体（无论是进程还是线程）。</p><p>当一个进程或线程被创建时，内核会为其分配一个 <code>task_struct</code>，并将其加入调度器的就绪队列中，等待 CPU 分配时间片进行执行。</p><h3 id="多线程对调度的影响"><a href="#多线程对调度的影响" class="headerlink" title="多线程对调度的影响"></a>多线程对调度的影响</h3><p>由于每个线程都对应一个独立的 <code>task_struct</code>，因此操作系统会将它们作为<strong>独立的调度实体</strong>进行调度。</p><p>例如：</p><p>假设系统中共有 10 个任务（调度实体）在等待 CPU，而某进程只包含一个线程，那么它获得 CPU 的概率约为 1&#x2F;10。</p><p>当该进程创建了一个新线程后，它就拥有了两个 <code>task_struct</code>，调度概率提升至约 2&#x2F;11，从而提高了该进程整体的执行频率和并发能力。</p><p>这种方式尤其适用于多核处理器架构，能够实现多个线程在不同 CPU 核心上同时运行，提升整体性能和响应速度。</p><h1 id="Python中的多任务处理"><a href="#Python中的多任务处理" class="headerlink" title="Python中的多任务处理"></a>Python中的多任务处理</h1><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>如上面所讲，多线程就是通过在系统层面使用clone指定共享资源区在内核创建新的task_struct 增加被系统调度的可能性，在python中，使用threading模块来构建python的多线程应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例1 创建函数，将函数添加到多线程对象中启动多线程</span><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>,<span class="hljs-number">100</span>):                                       <br>        <span class="hljs-built_in">print</span>(i)<br><br>session1 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread1&quot;</span>)          <span class="hljs-comment">#创建线程1,指定线程1执行的方法</span><br>session2 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread2&quot;</span>)          <span class="hljs-comment">#创建线程2,指定线程2执行的方法</span><br>session1.start()                                                  <span class="hljs-comment">#创建c层面的线程结构</span><br>session2.start()                                                  <span class="hljs-comment">#创建c层面的线程结构</span><br>session1.join()                                                   <span class="hljs-comment">#执行线程1</span><br>session2.join()                                                   <span class="hljs-comment">#执行线程2</span><br><span class="hljs-comment"># session1和session2 分别正常输出</span><br></code></pre></td></tr></table></figure><p>这时，session1和session2 分别正常输出，因为函数中所使用的变量都是在栈中创建的，而不同线程的栈空间是相互独立的，所以不存在影响。</p><p>调用同一个对象读写时 这时就会出现输出与目标输出不一致的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例2 创建一个类，通过操作类中的属性，来查看多线程操作时可能出现的问题</span><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">count1</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num</span>):<br>        <span class="hljs-variable language_">self</span>.num = num<br>a = count1(<span class="hljs-number">0</span>)<br>test_max = <span class="hljs-number">10000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">count_t, <span class="hljs-built_in">max</span></span>):<br>    <span class="hljs-keyword">while</span> count_t.num &lt; <span class="hljs-built_in">max</span>:                <br>        time.sleep(<span class="hljs-number">0.001</span>)               <span class="hljs-comment">#增加执行时间，增加线程切换的可能性</span><br>        count_t.num += <span class="hljs-number">1</span><br><br>session1 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread1&quot;</span>,args=(a,test_max))<br>session2 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread2&quot;</span>,args=(a,test_max))<br>session3 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread3&quot;</span>,args=(a,test_max))<br>session4 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread4&quot;</span>,args=(a,test_max))<br>session5 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread5&quot;</span>,args=(a,test_max))<br><br>session1.start()<br>session2.start()<br>session3.start()<br>session4.start()<br>session5.start()<br><br>session1.join()<br>session2.join()<br>session3.join()<br>session4.join()<br>session5.join()<br><br><span class="hljs-comment"># 输出 10005（不固定）</span><br></code></pre></td></tr></table></figure><p>基于类继承实现多线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例3 基于类继承实现多线程</span><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">anum</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num</span>):<br>        <span class="hljs-variable language_">self</span>.num = num<br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">count1</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num,<span class="hljs-built_in">max</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.num = num<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">max</span> = <span class="hljs-built_in">max</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.num.num&lt;<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">max</span>:<br>            time.sleep(<span class="hljs-number">0.001</span>) <br>            <span class="hljs-variable language_">self</span>.num.num += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br>num1 = anum(<span class="hljs-number">0</span>)<br>session1 = count1(num1,<span class="hljs-number">1000</span>)<br>session2 = count1(num1,<span class="hljs-number">1000</span>)<br>session3 = count1(num1,<span class="hljs-number">1000</span>)<br>session4 = count1(num1,<span class="hljs-number">1000</span>)<br>session5 = count1(num1,<span class="hljs-number">1000</span>)<br>session1.start()<br>session2.start()<br>session3.start()<br>session4.start()<br>session5.start()<br>session1.join()<br>session2.join()<br>session3.join()<br>session4.join()<br>session5.join()<br><span class="hljs-built_in">print</span>(num1.num)<br><span class="hljs-comment"># 最终结果同样存在问题</span><br></code></pre></td></tr></table></figure><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>在Python中，支持两种多进程的创建方式 ：</p><ol><li>通过fork 创建进程  即复制当前进程创建一个进程</li><li>spawn ， 重新加载解释器创建进程</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> multiprocessing<br>multiprocessing.set_start_method(<span class="hljs-string">&quot;spawn&quot;</span>)  <span class="hljs-comment"># 设置解释器创建进程  </span><br>multiprocessing.set_start_method(<span class="hljs-string">&quot;fork&quot;</span>)  <span class="hljs-comment"># 设置fork创建进程</span><br></code></pre></td></tr></table></figure><p>进程的创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用Process 传入worker函数在新进程中执行</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> running in PID: <span class="hljs-subst">&#123;os.getpid()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    processes = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        p = Process(target=worker, args=(<span class="hljs-string">f&#x27;Process-<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>,))<br>        processes.append(p)<br>        p.start()<br><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> processes:<br>        p.join()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 继承Process类 ， 重写run方法创建进程</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProcess</span>(<span class="hljs-title class_ inherited__">Process</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> running in PID: <span class="hljs-subst">&#123;os.getpid()&#125;</span>&quot;</span>)<br><br>p = MyProcess(<span class="hljs-string">&quot;CustomProcess&quot;</span>)<br>p.start()<br>p.join()<br></code></pre></td></tr></table></figure><h2 id="再次理解多进程-多线程"><a href="#再次理解多进程-多线程" class="headerlink" title="再次理解多进程&#x2F;多线程"></a>再次理解多进程&#x2F;多线程</h2><p>我们可以看到多进程或者多线程在python中的实现都是通过 传入函数-启动线程&#x2F;进程对象，或者继承thread或process类，重写run方法来实现的。这本质上对应着‘通过载入函数&#x2F;对象定义创建可调度体’这一过程</p><p>同时要注意的是，Python文件中定义的线程&#x2F;进程创建过程并不能与执行后的行为直接关联。对于线程来说，创建过程是 加载Python文件到内存中，创建线程，创建后的所有线程仍然可以使用文件中定义的对象。但是需要注意线程安全问题。而对于进程来说，当进程被创建后，在系统层面上是创建了一个原解释器的副本(fork) 或者 一个新的python解释器进程（spawn）。这时新进程已经和原进程的内存空间进行了隔离。相当于将 Python文件的副本加载到了两个进程中，各自的后续修改和使用已经完全隔离，如果需要进程交互，则需要进行一些进程间通信的设计。</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程是一种异步编程设计，首先它将定义好的任务顺序执行到等待点，如何将任务注册到任务等待队列中当条件达成后，唤醒等待队列中的任务继续执行。协程不依赖系统时间片调度，而采用协作式调度模式（cooperative scheduling）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name, delay</span>):                                       <span class="hljs-comment">#定义了一个异步函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> 开始执行&quot;</span>)                                       <span class="hljs-comment">#前半部分执行</span><br>    <span class="hljs-keyword">await</span> asyncio.sleep(delay)                                       <span class="hljs-comment">#await将栈帧挂起</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> 执行结束（等待了 <span class="hljs-subst">&#123;delay&#125;</span> 秒）&quot;</span>)                     <span class="hljs-comment">#等待过后继续执行</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 并发运行多个协程</span><br>    <span class="hljs-keyword">await</span> asyncio.gather(                           <br>        task(<span class="hljs-string">&quot;任务A&quot;</span>, <span class="hljs-number">2</span>),                                      <br>        task(<span class="hljs-string">&quot;任务B&quot;</span>, <span class="hljs-number">1</span>),<br>        task(<span class="hljs-string">&quot;任务C&quot;</span>, <span class="hljs-number">3</span>)<br>    )<br><br>asyncio.run(main())<br><span class="hljs-comment"># 定义了多个协程执行。</span><br><span class="hljs-comment"># 其执行过程为 taskA , taskB, taskC 被python解释器解释,按次序执行,执行到await后被挂起,注册到事件循环的“挂起任务队列”中</span><br></code></pre></td></tr></table></figure><h1 id="多任务处理的局限性"><a href="#多任务处理的局限性" class="headerlink" title="多任务处理的局限性"></a>多任务处理的局限性</h1><h2 id="多线程的问题-线程安全问题"><a href="#多线程的问题-线程安全问题" class="headerlink" title="多线程的问题- 线程安全问题"></a>多线程的问题- 线程安全问题</h2><p>多线程可以提高程序被执行的效率，但是在经过CPU执行后回写的过程中，因为线程是共享内存资源的，所以会存在资源的写入问题。</p><p>程序的实际运行过程并非简单的执行-写入。而是分步骤：</p><ul><li>加载内存器中的值到寄存器</li><li>寄存器执行运算，返回运算结果</li><li>将运算结果写回内存</li></ul><p>而在多个线程执行时，如果都对同一块内存进行处理，这个结果是不可预知的，会出现：</p><ul><li>加载内存器中的值到寄存器（线程1）</li><li>寄存器执行运算，返回运算结果（线程1）</li><li>CPU资源被抢占，发生上下文切换，切换至线程2执行</li><li>加载内存器中的值到寄存器（线程2）</li><li>寄存器执行运算，返回运算结果（线程2）</li><li>将运算结果写回内存，线程2退出，切换至线程1执行</li><li>将运算结果写回内存（线程1）</li></ul><p>这可能导致数据被覆盖，造成操作丢失（即‘写冲突’）</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>锁是一种由操作系统定义的同步原语。保护了一个线程在访问内存时，将其他尝试获取该资源的线程阻塞，直到处理资源的线程释放它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">count1</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num</span>):<br>        <span class="hljs-variable language_">self</span>.lock = threading.Lock()<br>        <span class="hljs-variable language_">self</span>.num = num<br>a = count1(<span class="hljs-number">0</span>)<br>test_max = <span class="hljs-number">10000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">count_t, <span class="hljs-built_in">max</span></span>):<br>    <span class="hljs-keyword">while</span> count_t.num &lt; <span class="hljs-built_in">max</span>:                <br>        time.sleep(<span class="hljs-number">0.001</span>)<br>        count_t.lock.acquire()<br>        <span class="hljs-keyword">if</span> count_t.num &gt;= <span class="hljs-built_in">max</span> :<br>            count_t.lock.release()<br>            <span class="hljs-keyword">break</span><br>        count_t.num += <span class="hljs-number">1</span><br>        count_t.lock.release()<br>session1 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread1&quot;</span>,args=(a,test_max))<br>session2 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread2&quot;</span>,args=(a,test_max))<br>session3 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread3&quot;</span>,args=(a,test_max))<br>session4 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread4&quot;</span>,args=(a,test_max))<br>session5 = threading.Thread(target=count,name=<span class="hljs-string">&quot;thread5&quot;</span>,args=(a,test_max))<br><br>session1.start()<br>session2.start()<br>session3.start()<br>session4.start()<br>session5.start()<br><br>session1.join()<br>session2.join()<br>session3.join()<br>session4.join()<br>session5.join()<br></code></pre></td></tr></table></figure><p>还有如信号量，允许设置当前最多可以执行的线程数量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">sem_t</span> = threading.<span class="hljs-built_in">Semaphore</span>(<span class="hljs-number">1</span>)<br><span class="hljs-type">sem_t</span>.<span class="hljs-built_in">acquire</span>()  # 请求信号量<br><span class="hljs-type">sem_t</span>.<span class="hljs-built_in">release</span>()  # 释放信号量<br><br></code></pre></td></tr></table></figure><p>以及一些其他的用来保证线程安全的设计</p><h1 id="多线程问题-数据通信"><a href="#多线程问题-数据通信" class="headerlink" title="多线程问题 - 数据通信"></a>多线程问题 - 数据通信</h1><p>对于多个进程来说，因为每个进程的管理的资源是相互独立的，所以就不存在执行结果被其他进程覆盖的可能性。但是又会出现另一个问题，因为即使多个进程之间的操作是互相独立的，不同进程间需要通过一些方法进行数据传递，才能完成通信。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列是通过定义了一个数据结构，在两个进程间完成收发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>(<span class="hljs-params">q</span>):<br>    q.put(<span class="hljs-string">&quot;你好&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;收到：&quot;</span>, q.get())<br><br>q = Queue()<br>Process(target=producer, args=(q,)).start()<br>Process(target=consumer, args=(q,)).start()<br><br></code></pre></td></tr></table></figure><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道定义了点对点的 进程间通信方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Pipe<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">conn</span>):<br>    conn.send(<span class="hljs-string">&quot;hello&quot;</span>)<br>    conn.close()<br><br>parent_conn, child_conn = Pipe()<br>Process(target=worker, args=(child_conn,)).start()<br><span class="hljs-built_in">print</span>(parent_conn.recv())<br><br></code></pre></td></tr></table></figure><h3 id="一些共享内存页-映射表-比如Value-Array或者SharedMemory"><a href="#一些共享内存页-映射表-比如Value-Array或者SharedMemory" class="headerlink" title="一些共享内存页&#x2F;映射表 比如Value,Array或者SharedMemory"></a>一些共享内存页&#x2F;映射表 比如Value,Array或者SharedMemory</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Value, Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">v</span>):<br>    v.value += <span class="hljs-number">1</span><br><br>v = Value(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># &#x27;i&#x27; = int           # 实际上是直接使用了内核中的内存存储了这个变量</span><br>p = Process(target=add, args=(v,))<br>p.start()<br>p.join()<br><span class="hljs-built_in">print</span>(v.value)<br><br></code></pre></td></tr></table></figure><h3 id="基于系统的文件描述符-缓冲结构"><a href="#基于系统的文件描述符-缓冲结构" class="headerlink" title="基于系统的文件描述符&#x2F;缓冲结构"></a>基于系统的文件描述符&#x2F;缓冲结构</h3><p>文件： 一个进程向系统写入文件，另一个进程接收文件并读取</p><p>Socket： 套接字，通过网络协议栈转发</p><p>不过实现原理都是基于操作系统中的一些内存映射机制，或者实现在内核内的缓存机制来完成的。任务处理设计整体的使用场景较为复杂，且很多都依赖于实际场景的设计实现，后期再进一步扩充这一部分内容。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 V 模块与库</title>
    <link href="/2025/04/16/Python%E7%BC%96%E7%A8%8B-V-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%BA%93/"/>
    <url>/2025/04/16/Python%E7%BC%96%E7%A8%8B-V-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>在Python中，是以模块进行代码组织的。单独的python文件，由多个python文件组成的文件夹。都可以作为模块导入其他文件中，这样在其他文件中定义的函数或者类就可以在当前文件中进行使用，方便程序设计人员更好的组织整个工程的结构。</p><p>一些导入模块的方式 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Person <span class="hljs-keyword">import</span> Person                    <span class="hljs-comment">#从Person.py模块中导入Person类</span><br><span class="hljs-keyword">from</span> Anmial <span class="hljs-keyword">import</span> Dog                       <span class="hljs-comment">#从Anmial文件夹中导入Dog模块</span><br><span class="hljs-keyword">from</span> Anmial.Dog <span class="hljs-keyword">import</span> dog                   <span class="hljs-comment">#从Anmial文件夹的Dog模块中导入dog类</span><br><span class="hljs-keyword">from</span> Anmial.Cat <span class="hljs-keyword">import</span> cat <span class="hljs-keyword">as</span> mimi           <span class="hljs-comment">#从Anmial文件夹的cat模块中导入cat类,并设计别名 mimi</span><br></code></pre></td></tr></table></figure><h1 id="库"><a href="#库" class="headerlink" title="库"></a>库</h1><p>一些被设计好的Python文件模块被称为库，即一个提供特定功能的python 函数&#x2F;类仓库</p><p>库通常分为两种:</p><p>随Python一起安装的，提供了一些核心功能的库 被称为官方库，通常存储在</p><p>Python\Python313\Lib</p><p>一些优秀的，可以提供扩展功能的 被称为第三方库，通常存储在</p><p>Python\Python313\Lib\site-packages</p><h2 id="第三方库可以通过pip-的python库管理工具来安装"><a href="#第三方库可以通过pip-的python库管理工具来安装" class="headerlink" title="第三方库可以通过pip 的python库管理工具来安装"></a>第三方库可以通过pip 的python库管理工具来安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install requests                      <span class="hljs-comment"># 安装requests库</span><br>pip uninstall requests                    <span class="hljs-comment"># 卸载requests库</span><br>pip <span class="hljs-built_in">list</span>                                  <span class="hljs-comment"># 查询已安装的python第三方库</span><br></code></pre></td></tr></table></figure><h1 id="官方库"><a href="#官方库" class="headerlink" title="官方库"></a>官方库</h1><p>介绍一些比较常用的官方库</p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>time库主要用来获取unix时间，以及执行暂停</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>time.time()                               <span class="hljs-comment"># 获取当前的unix时间</span><br>time.strftime(<span class="hljs-string">&quot;%Y %m %d -%H:%M:%S&quot;</span>)  <span class="hljs-comment"># 按照给定的字符串格式输出时间，默认将当前unix时间按格式输出</span><br>time.strptime(<span class="hljs-string">&quot;2017-12-08:5-32-11&quot;</span>,<span class="hljs-string">&quot;%Y-%m-%d:%H-%M-%S&quot;</span>)) <span class="hljs-comment"># 将接收到的时间字符拆分位元组</span><br>time.sleep(<span class="hljs-number">1</span>)                         <span class="hljs-comment"># 休眠时间 传入秒</span><br></code></pre></td></tr></table></figure><h2 id="os"><a href="#os" class="headerlink" title="os"></a>os</h2><p>os库提供了一些基于当前操作系统的操作，也提供了多种向系统终端执行命令的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.mkdir()               <span class="hljs-comment">#创建文件夹</span><br>os.chdir()               <span class="hljs-comment">#修改当前路径</span><br>os.getcwd()              <span class="hljs-comment">#获取当前的路径</span><br>os.system(<span class="hljs-string">&quot;dir&quot;</span>)         <span class="hljs-comment">#向系统发送命令</span><br></code></pre></td></tr></table></figure><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>json 库是用于json文件的处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hello.json&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f :<br>    content1 = json.load(f)<br><span class="hljs-comment"># 直接加载文件到python</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hello.json&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f :<br>    content2 = f.read()<br>    content2 = json.loads(content2)<br><span class="hljs-comment"># 将字符串解析为dict </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;goodbye.json&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f :<br>    json.dump(content1, f)<br><span class="hljs-comment"># 将字符串解析为json写入文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;goodby2e.json&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f :<br>    json.dump(content2,f,indent=<span class="hljs-number">4</span>)<br> <span class="hljs-comment"># 直接向文件对象中写入</span><br></code></pre></td></tr></table></figure><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><p>re是用于对文本进行正则表达式匹配</p><p>正则表达式是一种字符匹配规则，通过一些通配符的组合来达成筛选符合结构规则的数据</p><p>一些常用的通配规则</p><p>[0-9] [\d]  匹配所有0-9的整数字符</p><p>. 匹配任意字符</p><p>.*匹配一个到多个任意字符</p><p>[a-z] 匹配小写字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>a = <span class="hljs-string">&quot;456jaoijgeio123feqagvbjm&quot;</span><br><br><span class="hljs-built_in">print</span>(re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;[1-9]&#123;3&#125;&quot;</span>,a ).group(<span class="hljs-number">0</span>))  <span class="hljs-comment"># 通过.group 获取匹配到的文本</span><br>d = re.finditer(<span class="hljs-string">&quot;[1-9]&#123;3&#125;&quot;</span>,a )           <span class="hljs-comment"># 使用finditer会会的一个匹配对象的可迭代对象</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d :<br>    <span class="hljs-built_in">print</span>(i.group())                     <span class="hljs-comment"># 访问可迭代对象</span><br></code></pre></td></tr></table></figure><h2 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a>argparse</h2><p>argpare 库 允许自定义参数，并对传入的参数进行解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><br><span class="hljs-comment"># 创建 ArgumentParser 对象</span><br>parser = argparse.ArgumentParser(description=<span class="hljs-string">&quot;Simple calculator&quot;</span>)<br><br><span class="hljs-comment"># 添加参数</span><br>parser.add_argument(<span class="hljs-string">&quot;--x&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;First integer&quot;</span>)<br>parser.add_argument(<span class="hljs-string">&quot;--y&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Second integer&quot;</span>)<br>parser.add_argument(<span class="hljs-string">&quot;--op&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&quot;add&quot;</span>, choices=[<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-string">&quot;sub&quot;</span>, <span class="hljs-string">&quot;mul&quot;</span>, <span class="hljs-string">&quot;div&quot;</span>], <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Operation&quot;</span>)<br><br><span class="hljs-comment"># 解析参数</span><br>args = parser.parse_args()<br><br><span class="hljs-comment"># 执行运算</span><br><span class="hljs-keyword">if</span> args.op == <span class="hljs-string">&quot;add&quot;</span>:<br>    result = args.x + args.y<br><span class="hljs-keyword">elif</span> args.op == <span class="hljs-string">&quot;sub&quot;</span>:<br>    result = args.x - args.y<br><span class="hljs-keyword">elif</span> args.op == <span class="hljs-string">&quot;mul&quot;</span>:<br>    result = args.x * args.y<br><span class="hljs-keyword">elif</span> args.op == <span class="hljs-string">&quot;div&quot;</span>:<br>    result = args.x / args.y<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br><br><span class="hljs-comment">#示例</span><br><br>python calc.py --x <span class="hljs-number">3</span> --y <span class="hljs-number">5</span> --op add <br><span class="hljs-comment"># 执行3+5 ，并返回结果</span><br></code></pre></td></tr></table></figure><h2 id="configparser"><a href="#configparser" class="headerlink" title="configparser"></a>configparser</h2><p>configparser库用于对 配置文件（.ini）进行读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">例如 ：<br>[database]<br>host = localhost<br>port = <span class="hljs-number">3306</span><br>user = root<br>password = <span class="hljs-number">123456</span><br><br>[logging]<br>level = DEBUG<br>logfile = app.log<br><br><span class="hljs-keyword">import</span> configparser<br><br><span class="hljs-comment"># 创建配置解析器</span><br>config = configparser.ConfigParser()<br><br><span class="hljs-comment"># 读取配置文件</span><br>config.read(<span class="hljs-string">&quot;config.ini&quot;</span>)<br><br><span class="hljs-comment"># 获取具体值</span><br>host = config.get(<span class="hljs-string">&quot;database&quot;</span>, <span class="hljs-string">&quot;host&quot;</span>)<br>port = config.getint(<span class="hljs-string">&quot;database&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>)<br>log_level = config.get(<span class="hljs-string">&quot;logging&quot;</span>, <span class="hljs-string">&quot;level&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Database host: <span class="hljs-subst">&#123;host&#125;</span>&quot;</span>)       <span class="hljs-comment"># localhost</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Database port: <span class="hljs-subst">&#123;port&#125;</span>&quot;</span>)       <span class="hljs-comment"># 3306</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Log level: <span class="hljs-subst">&#123;log_level&#125;</span>&quot;</span>)      <span class="hljs-comment"># DEBUG</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 IV 数据与函数扩展</title>
    <link href="/2025/04/15/Python%E7%BC%96%E7%A8%8B-IV-%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95/"/>
    <url>/2025/04/15/Python%E7%BC%96%E7%A8%8B-IV-%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<p><em>python中，定义了一些有用的特性帮助编程人员丰富功能的处理过程</em></p><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>在 类设计思想中 有一条开闭原则 “对扩展开放，对修改关闭”。 在前面的内容中，我们已经讨论过一些 python对于封装特性的处理。 这里的装饰器就是用于对已定义类进行功能扩展的一种方法。</p><p>如property 通过为方法装饰property,可以将方法伪装成属性调用，而不是直接对类中的属性进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.__name = name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.__name<br><span class="hljs-meta">    @name.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.__name = name<br>        <br>        <br>preson1 = person(<span class="hljs-string">&quot;wang&quot;</span>)<br><span class="hljs-built_in">print</span>(preson1.name)<br><span class="hljs-comment"># output wang</span><br>preson1.name = <span class="hljs-string">&quot;zhao&quot;</span><br><span class="hljs-built_in">print</span>(preson1.name)<br><span class="hljs-comment"># output zhao</span><br></code></pre></td></tr></table></figure><p>由这个例子可以看出，通过@property ，并未对原始类进行修改，但是对它最终行为产生了影响</p><h2 id="如何定义一个装饰器"><a href="#如何定义一个装饰器" class="headerlink" title="如何定义一个装饰器"></a>如何定义一个装饰器</h2><p>装饰器的本质是定义一个函数 接收一个函数作为参数， 并在函数内部再定义一个函数，将接收进来的参数在该函数内执行，最终返回该函数</p><p>因为之前讨论过 “__call__” 方法在接收参数这方面和函数一致，所以有两种定义方法</p><p>装饰器的基础定义 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_hello</span>(<span class="hljs-params">func</span>):                              <span class="hljs-comment"># 定义装饰函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wapper</span>(<span class="hljs-params">*args ,**kwargs</span>) :                 <span class="hljs-comment"># 定义内部函数, 在这一层接收原函数的参数</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello user&quot;</span>)                   <span class="hljs-comment"># 执行函数前的预处理</span><br>            func(*args ,**kwargs)                 <span class="hljs-comment"># 函数执行 </span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;goodbye user&quot;</span>)                 <span class="hljs-comment"># 函数结束</span><br>    <span class="hljs-keyword">return</span> wapper                                 <span class="hljs-comment"># 将构建的函数作为返回值</span><br><br><span class="hljs-meta">@add_hello                                        </span><span class="hljs-comment"># 将装饰器添加在函数定义上</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base_function</span>(<span class="hljs-params">parameter</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;this is a parmeter <span class="hljs-subst">&#123;parameter&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this is a base function&quot;</span>) <br><br><br>base_function(<span class="hljs-string">&quot;hello&quot;</span>)<br><br><span class="hljs-comment"># 执行 </span><br><span class="hljs-comment"># hello user                                      # 预处理</span><br><span class="hljs-comment"># this is a parmeter hello                        # 函数代码块执行</span><br><span class="hljs-comment"># this is a base function                         # 函数代码块执行</span><br><span class="hljs-comment"># goodbye user                                    # 结束</span><br><br></code></pre></td></tr></table></figure><p>扩展1 : 装饰器本身也可以接收参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*outter_args,**outter_kwargs</span>):            <span class="hljs-comment"># 定义装饰函数，这一层接收装饰器参数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_hello</span>(<span class="hljs-params">func</span>):                          <span class="hljs-comment"># 定义内部函数, 这一层接收函数</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wapper</span>(<span class="hljs-params">*args ,**kwargs</span>) :             <span class="hljs-comment"># 定义实际的装饰器函数, 接收函数的变量</span><br>                <span class="hljs-built_in">print</span>(outter_args[<span class="hljs-number">0</span>])             <span class="hljs-comment"># 打印接收到的装饰器参数</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello user&quot;</span>)               <span class="hljs-comment"># 预处理</span><br>                func(*args ,**kwargs)             <span class="hljs-comment"># 函数执行</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;goodbye user&quot;</span>)             <span class="hljs-comment"># 结束</span><br>        <span class="hljs-keyword">return</span> wapper                             <span class="hljs-comment"># 返回装饰器函数</span><br>    <span class="hljs-keyword">return</span> add_hello                              <span class="hljs-comment"># 返回外层函数</span><br><br><span class="hljs-meta">@add(<span class="hljs-params"><span class="hljs-string">&quot;hi&quot;</span></span>)                                        </span><span class="hljs-comment"># 添加带参装饰器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base_function</span>(<span class="hljs-params">parameter</span>):                     <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;this is a parmeter <span class="hljs-subst">&#123;parameter&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this is a base function&quot;</span>) <br><br><br>base_function(<span class="hljs-string">&quot;hello&quot;</span>)                    <br><br><span class="hljs-comment"># 输出                                             </span><br><span class="hljs-comment"># hi                                              # 接收到的装饰器参数</span><br><span class="hljs-comment"># hello user                                      # 预处理</span><br><span class="hljs-comment"># this is a parmeter hello                        # 函数代码执行</span><br><span class="hljs-comment"># this is a base function                         # 函数代码执行</span><br><span class="hljs-comment"># goodbye user                                    # 结束</span><br></code></pre></td></tr></table></figure><p>扩展2：装饰器装饰在类上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*outter_args,**outter_kwargs</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_hello</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wapper</span>(<span class="hljs-params">*args ,**kwargs</span>) :<br>                <span class="hljs-built_in">print</span>(outter_args[<span class="hljs-number">0</span>])<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello user&quot;</span>)<br>                m = func(*args ,**kwargs)         <span class="hljs-comment"># 主要要将实例创建的对象返回，这里执行的实际上是对象的初始化</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;goodbye user&quot;</span>)<br>                <span class="hljs-keyword">return</span> m <br>        <span class="hljs-keyword">return</span> wapper<br>    <span class="hljs-keyword">return</span> add_hello<br><br><span class="hljs-meta">@add(<span class="hljs-params"><span class="hljs-string">&quot;hi&quot;</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;class person is on initing&quot;</span>)<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self,message</span>):<br>        <span class="hljs-built_in">print</span>(message)<br><br>p = person()<br>p(<span class="hljs-string">&quot;hello&quot;</span>)<br><br><span class="hljs-comment"># 输出                                             </span><br><span class="hljs-comment"># hi                                              # 打印接收到的装饰器参数</span><br><span class="hljs-comment"># hello user                                      # 预处理</span><br><span class="hljs-comment"># class person is on initing                      # 类调用</span><br><span class="hljs-comment"># goodbye user                                    # 结束</span><br><span class="hljs-comment"># hello                                           # 实例的调用</span><br></code></pre></td></tr></table></figure><p>装饰器是一种语法糖，其本质是通过多层嵌套函数实现的运行时函数增强机制。</p><p>顺序是 定义函数传入装饰器参数-定义函数传入函数-定义函数传入原函数参数-定义函数传入原函数。然后再逐层返回，另外就是用到了python的作用域机制，即定义的内部函数对外部的局部变量是可以访问的</p><p>扩展3 ：使用类定义装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">add</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):                      <span class="hljs-comment"># 接收的装饰器 参数 相当于执行了初始化</span><br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self,func</span>):                      <span class="hljs-comment"># 接收函数</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wapper</span>(<span class="hljs-params">*args,**kwargs</span>):               <span class="hljs-comment"># 接收函数的参数</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name)                      <span class="hljs-comment"># 获取到的实例属性</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello user&quot;</span>)                   <span class="hljs-comment"># 预处理</span><br>            func(*args)                           <span class="hljs-comment"># 执行函数</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;goodby user&quot;</span>)                  <span class="hljs-comment"># 结束</span><br>        <span class="hljs-keyword">return</span> wapper                             <span class="hljs-comment"># 返回函数</span><br><br><span class="hljs-meta">@add(<span class="hljs-params"><span class="hljs-string">&quot;codfish&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base_function</span>(<span class="hljs-params">parameter</span>):                     <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;this is a parmeter <span class="hljs-subst">&#123;parameter&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this is a base function&quot;</span>) <br><br>base_function(<span class="hljs-string">&quot;base_parameter&quot;</span>)<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-comment"># codfish                                         # 接收到的装饰器参数</span><br><span class="hljs-comment"># hello user                                      # 预处理</span><br><span class="hljs-comment"># this is a parmeter base_parameter               # 函数执行</span><br><span class="hljs-comment"># this is a base function                         # 函数执行</span><br><span class="hljs-comment"># goodby user                                     # 结束</span><br></code></pre></td></tr></table></figure><p>可以看到以类作为装饰器的大体逻辑是一致的 无非就是 函数和参数传入位置发生了变化</p><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>迭代器是一种让创建的实例获得如列表或者元组等结构一样，允许使用for 循环遍历整个数据结构中的元素的特性。其本质是通过实现两个魔术方法实现的 “__iter__” 和 “__next__”</p><p>“__iter__” 会返回一个可迭代对象</p><p>“__next__” 则是会获取可迭代对象中的下一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">num_group</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.num = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.num+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.num &gt; <span class="hljs-number">10</span> :<br>            <span class="hljs-keyword">raise</span> StopIteration<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.num<br>    <br><br>a = num_group()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a))                                   <span class="hljs-comment"># 既可以通过next(a) 获取迭代对象中的下一个返回</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:                                      <span class="hljs-comment"># 也可以通过遍历来完成迭代对象的值遍历</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>与 通过列表中查询数据不同，Python 还提供了一个组件 yield来生成数据。</p><p>在一个函数中定义了yield关键字后，该函数被称为生成器。</p><p>当执行到该函数时，会返回一个生成器对象。这个生成器对象会保留其执行所使用的栈帧结构。</p><p>当运行到yield关键字时，会将值返回，生成器对象暂停，并完整保留当前的执行状态。当生成器对象的代码执行完毕后，生成器对象会退出等待GC回收。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">num=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>        <span class="hljs-keyword">yield</span> num                                 <span class="hljs-comment"># 声明了yield,python 会将这个函数作为生成器处理</span><br>        <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">10</span> :<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">100</span><br>        num+=<span class="hljs-number">1</span><br>        <br>b = count()                                       <span class="hljs-comment"># 执行函数返回一个生成器对象</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b :<br>    <span class="hljs-built_in">print</span>(i)                                      <span class="hljs-comment"># for 循环会持续调用生成器的 __next__() 方法，直到捕获到 StopIteration 异常，表示迭代结束。</span><br></code></pre></td></tr></table></figure><h1 id="内建的作用域设置函数-setattr-getattr-delattr"><a href="#内建的作用域设置函数-setattr-getattr-delattr" class="headerlink" title="内建的作用域设置函数 setattr,getattr,delattr"></a>内建的作用域设置函数 setattr,getattr,delattr</h1><p>在python中命名空间决定了一个对象都可以访问哪些对象，而通过setattr,getattr和delattr 可以直接对对象的命名空间进行操作，来修改对象的访问权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>:                                     <span class="hljs-comment"># 定义一个类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):                      <span class="hljs-comment"># 重写构造函数</span><br>        <span class="hljs-variable language_">self</span>.name = name <br><br><span class="hljs-built_in">delattr</span>(person,<span class="hljs-string">&quot;__init__&quot;</span>)                        <span class="hljs-comment"># 删除person类中的构造函数定义</span><br>someone = person()                                <span class="hljs-comment"># 对象正常创建</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>:                                     <span class="hljs-comment"># 定义空累 person</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):                          <span class="hljs-comment"># 定义全局方法 __init__</span><br>    <span class="hljs-variable language_">self</span>.name = name <br><span class="hljs-built_in">setattr</span>(person,<span class="hljs-string">&quot;__init__&quot;</span>,__init__)               <span class="hljs-comment"># 将方法设置到person的命名空间</span><br>c = person(<span class="hljs-string">&quot;wang&quot;</span>)                                <span class="hljs-comment"># 正常实例化</span><br><span class="hljs-built_in">print</span>(c.name)                                     <span class="hljs-comment"># 输出 “wang”</span><br></code></pre></td></tr></table></figure><p>从这里我们可以看出 python中的类和方法的关系是松散绑定的。</p><p>并且还是实时的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>:<br>    <span class="hljs-keyword">pass</span><br>person1 = person(<span class="hljs-string">&quot;wang&quot;</span>)                          <span class="hljs-comment"># person1创建失败</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>    <span class="hljs-variable language_">self</span>.name = name <br><span class="hljs-built_in">setattr</span>(person,<span class="hljs-string">&quot;__init__&quot;</span>,__init__)<br>person2 = person(<span class="hljs-string">&quot;wang&quot;</span>)                          <span class="hljs-comment"># person2创建成功</span><br><span class="hljs-built_in">print</span>(c.name)<br></code></pre></td></tr></table></figure><p>由此我们也可以看出python 在执行阶段是逐行解释的</p><p>利用这个特性，可以对python的代码进行流程控制等操作</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 III 魔术方法</title>
    <link href="/2025/04/15/Python-%E7%BC%96%E7%A8%8B-III-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
    <url>/2025/04/15/Python-%E7%BC%96%E7%A8%8B-III-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><em>Python中用于对对象进行的一些控制和通用处理 是通过魔术方法来实现</em></p><h1 id="什么是魔术方法"><a href="#什么是魔术方法" class="headerlink" title="什么是魔术方法"></a>什么是魔术方法</h1><p>通过__function_name__ 来定义魔术方法，但是需要注意通常的魔术方法是python预置的，所以function_name通常是python中定义过的魔术方法名。</p><p>Python的魔术方法如果没有在类中进行定义，则是被隐式定义的（或者说由基类继承而来）</p><p>如最常见的__init__ 也是一个魔术方法。它发生在Python实例的构建阶段，通过__init__ 来完成对类定义属性的初始赋值 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#定义一个 类的初始化方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>) :<br> <span class="hljs-variable language_">self</span>.name = name<br></code></pre></td></tr></table></figure><p>这样 name就从一个局部变量成为一个person实例的实例属性</p><h1 id="“-new-”"><a href="#“-new-”" class="headerlink" title="“__new__”"></a>“__new__”</h1><p>不太常用，但在进行类设计过程中用到的__new__ 也是一个魔术方法，它发生在初始化之前，用于向堆中申请内存，以及对实例的创建过程进行控制，返回的是类的实例（将创建的内存空间返回），最常见的是单例模式的定义 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">knife</span> :<br>    _instance = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 类变量，保存单例实例</span><br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>      <span class="hljs-keyword">if</span> cls._instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>          <span class="hljs-comment"># 创建唯一实例</span><br>          cls._instance = <span class="hljs-built_in">super</span>(knife, cls).__new__(cls)<br>      <span class="hljs-keyword">return</span> cls._instance<br></code></pre></td></tr></table></figure><h1 id="“-str-”"><a href="#“-str-”" class="headerlink" title="“__str__”"></a>“__str__”</h1><p>“__str__”  用于重写对象的字符串打印</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name        <span class="hljs-comment"># 将打印字符定义为self.name，不然则返回person对象的内存地址</span><br><br><span class="hljs-built_in">print</span>(person(<span class="hljs-string">&quot;wang&quot;</span>))<br></code></pre></td></tr></table></figure><h1 id="“-eq-”"><a href="#“-eq-”" class="headerlink" title="“__eq__”"></a>“__eq__”</h1><p>“__eq__”等一些魔术方法，用于重新定义运算处理的逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>        <span class="hljs-variable language_">self</span>.age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.age==value.age<br><br>c = person(<span class="hljs-string">&quot;wang&quot;</span>,<span class="hljs-number">26</span>)<br>d = person(<span class="hljs-string">&quot;zhao&quot;</span>,<span class="hljs-number">26</span>)<br><span class="hljs-built_in">print</span>(c == d )<br></code></pre></td></tr></table></figure><h1 id="“-len-”"><a href="#“-len-”" class="headerlink" title="“__len__”"></a>“__len__”</h1><p>还有一些魔术方法用于处理一些内置函数的调用,当某些内置函数被调用时，实际调用的这些魔术方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>        <span class="hljs-variable language_">self</span>.age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>np = person(<span class="hljs-string">&quot;zhao&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(np))    <span class="hljs-comment">#重新定义了__len__ ,会根据方法的返回值返回，这里打印0</span><br><br></code></pre></td></tr></table></figure><h1 id="“enter-“-“-exit-”"><a href="#“enter-“-“-exit-”" class="headerlink" title="“enter “ &#x2F; “ __exit__”"></a>“<strong>enter</strong> “ &#x2F; “ __exit__”</h1><p>“<strong>enter</strong> ”&#x2F; “__exit__” 主要在使用with语句 时的会触发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyResource</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打开资源&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;释放资源&quot;</span>)<br><br><span class="hljs-keyword">with</span> MyResource() <span class="hljs-keyword">as</span> r:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;处理中...&quot;</span>)<br>  <br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-comment"># 打开资源</span><br><span class="hljs-comment"># 处理中...</span><br><span class="hljs-comment"># 释放资源</span><br></code></pre></td></tr></table></figure><h1 id="“-call-”"><a href="#“-call-”" class="headerlink" title="“__call__”"></a>“__call__”</h1><p>“<strong>call__” 方法允许对象创建的实例变为可调用的，即允许向实例传入参数，使实例也可以进行一些功能的处理。__call</strong> 和 函数在传入参数执行的行为上是一致的，但是在调用和查询方面的具体实现不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">button</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,status=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-variable language_">self</span>.status = status<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.status :<br>            <span class="hljs-variable language_">self</span>.status = <span class="hljs-literal">False</span> <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the light is closed&quot;</span>)<br>        <span class="hljs-keyword">else</span> : <br>            <span class="hljs-variable language_">self</span>.status =<span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the light is on&quot;</span>)<br><br>light_button =button()        <span class="hljs-comment"># 创建button 实例</span><br>light_button()                <span class="hljs-comment"># 执行实例 status : False -&gt; True</span><br>light_button()                <span class="hljs-comment"># 执行实例 status : True -&gt; False</span><br><span class="hljs-comment"># 输出</span><br><span class="hljs-comment"># the light is on</span><br><span class="hljs-comment"># the light is closed</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 II 面向对象</title>
    <link href="/2025/04/15/Python%E7%BC%96%E7%A8%8B-II-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2025/04/15/Python%E7%BC%96%E7%A8%8B-II-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p><em>Python 是一门面向对象的语言，但是我们仍需要讨论的是 什么是<strong>面向对象</strong>？</em></p><h1 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a>什么是对象？</h1><p>在许多编程书籍和技术博客中，对象常被定义为“一个真实存在的实体”或“方法和属性的集合”。</p><p>然而，这些定义往往只停留在表层，并未真正解释“<strong>什么是对象</strong>”这一核心问题。比如，“实体”本身是什么意思？为什么属性和方法的组合可以称为一个‘对象’？带着这些问题，我们可以从设计层面重新思考对象的本质。</p><h2 id="设计层面：对象是面向目的的实体特征与行为的抽象"><a href="#设计层面：对象是面向目的的实体特征与行为的抽象" class="headerlink" title="设计层面：对象是面向目的的实体特征与行为的抽象"></a>设计层面：对象是面向目的的实体特征与行为的抽象</h2><h3 id="什么是实体？"><a href="#什么是实体？" class="headerlink" title="什么是实体？"></a>什么是实体？</h3><p>动物是不是一种实体？房屋是不是一种实体？房屋？比特币呢？笛卡尔的“我思故我在”呢？</p><p>实体并不一定是以“真实存在”作为必要条件的，实体的重要特征是“一种可描述的概念”。比如“独角兽”是一只长有犄角和翅膀的马，比如“西方的恶龙覆盖有厚厚的鳞片能够喷吐火焰”。这些概念的重点不是“真实存在”，而是“可描述”。推而广之，一些抽象概念也可以作为“实体”，比如 FIFO的队列，代理模式中的代理概念。</p><p>这样我们就可以得到实体的定义 “一种可描述的概念”（无论它是否真的存在）</p><h3 id="那么什么是对象？"><a href="#那么什么是对象？" class="headerlink" title="那么什么是对象？"></a>那么什么是对象？</h3><p>我们永远没办法将一个实体完整地用计算机语言去描述。但可以将特征和行为抽象出来，作为我们用计算机去模拟这个物体的方法。这暗含着对象设计是面向功能的，有取舍的。因为我们实际关注的不是实体到底是怎么样的，而是关注实体通过哪些特征和行为达成了我们想要的结果。当我们考虑一头牛的时候，在虚拟世界里，我们不会去考虑牛住在哪里，何时休息。考虑的是我们为了达成目的，需要”供应“什么，“产出”什么。所以我们在设计时真正构建的对象是以目的为核心，对实体特征和行为的抽象。目的是我们的最终结果，而实体的特征和行为是为了达成目的所必须的组件</p><h2 id="实现层面：对象是经过结构化组织的内存"><a href="#实现层面：对象是经过结构化组织的内存" class="headerlink" title="实现层面：对象是经过结构化组织的内存"></a>实现层面：对象是经过结构化组织的内存</h2><h3 id="内存与对象"><a href="#内存与对象" class="headerlink" title="内存与对象"></a>内存与对象</h3><p>程序员对内存和程序结构拥有近乎完全的控制权。他们可以自由地决定每一个内存地址的用途，这在空间受限的场景中显得尤为高效，可以最大限度地压榨出每一字节的潜力。但也导致了一些问题：</p><ol><li>在功能设计的初期就需要周全的考虑对象（结构体）的设计，不然会加大后期的维护，重构，新增功能的复杂度。</li><li>编程人员对程序有绝对的权限，意味着相同的功能可能会设计不同的系统来处理相同的流程，如内存分配&#x2F;回收。消息处理。对于多人开发的大型系统会增加系统的复杂度。</li></ol><p>在这一层面上，一些更现代的编程语言选择放弃了C语言的“自由“，现代系统的设计都是层次化的，当我进行上层数据的处理时，仍然要去关心最底层的内存是如何排布的显然是一个不够高效的做法。因此它们开始去预定义一些结构化的内存，从”内存交给你，你来从0开始完成系统“，到“由我提供一些基础组件，你在这个基础之上组织系统”。通过对内存块的结构化设计，将“设计-实现”的问题，变成了“组织-实现”。</p><p>另一方面因为所有基础模块是编程语言预先定义的，所以在后期使用时，作为内存-系统的中间层（如一些虚拟机程序），可以对系统中的内存使用进行更好的控制，这样既可以通过系统的管理，将已加载的功能模块灵活复用，也可以更好的提供系统级的监控管理，像垃圾回收，对象的动态加载创建等，对于更上层的编程人员来说，进行类设计，对象设计。反而是一些顺便带来的好处。</p><h3 id="那么什么是面向对象？"><a href="#那么什么是面向对象？" class="headerlink" title="那么什么是面向对象？"></a>那么什么是面向对象？</h3><p>当我们明白了对象是一种可描述的概念，并且对象设计的核心是面向功能的，以及为什么使用对象而不是直接使用内存来设计我们的系统。那么面向对象就是在设计系统时，首先完成对系统功能的抽象，将系统的实现变为多个核心对象之间的消息通信和方法调用。如：</p><ul><li>对数据进行存储和维护而设计的类，如用户类，仓库类</li><li>对数据组织结构进行抽象的类，如数据包类，工厂类</li><li>以某种操作流程为核心建模的设计的类，队列、栈</li></ul><p>通过这种方式，我们不仅构建了更具结构化的系统，同时也提升了系统的可读性、可维护性与可扩展性 —— 这正是面向对象设计的核心价值所在。</p><h1 id="谈谈Python"><a href="#谈谈Python" class="headerlink" title="谈谈Python"></a>谈谈Python</h1><p>当我们完全的理解了什么是面向对象之后，这时我们又要再回过头来，谈谈为什么Python是面向对象的。</p><h2 id="Python的对象"><a href="#Python的对象" class="headerlink" title="Python的对象"></a>Python的对象</h2><p>在我看来，Python的对象设计可以用变态来形容。在它的程序中的任何变量&#x2F;对象&#x2F;实例都是被作为结构化的内存存储在系统当中的，并且可以便捷的访问。它提供了一种怪异的自由度，像一家杂货店，仿佛在告诉你，只要你想找任何商品（对象）。都可以便捷的帮你找到，只提供对象的交付，生命周期管理，剩下的任何内容都交由你处理。</p><h2 id="作为“组织者”的我们"><a href="#作为“组织者”的我们" class="headerlink" title="作为“组织者”的我们"></a>作为“组织者”的我们</h2><p>于是，作为使用 Python 的开发者，我们不再是单纯的“编写者”，而更像是<strong>系统的组织者与行为的策划者</strong>。</p><p>我们面对的不是一块空白的内存，而是一张庞杂却灵活的工具清单——类、函数、装饰器、生成器、魔术方法、元类……Python 把构建系统所需的砖瓦都提前摆好，而我们需要做的，是以<strong>对象为基石，以功能为目标</strong>，组织它们构建出一个可运行、可维护、可理解的系统。</p><p>另外虽然面向对象提供了结构化的设计方式，但在某些场景下，简单的函数或模块化设计可能更高效，Python的灵活性允许开发者自由选择。</p><h2 id="封装，继承和多态"><a href="#封装，继承和多态" class="headerlink" title="封装，继承和多态"></a>封装，继承和多态</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装指的是 ，当对象已经被设计为一个完整的整体时，内部的一些属性或方法不再能作为公共功能提供给外界调用。在Python中表现为对方法，类的伪私有化，属性的封装和内部函数的闭包设计</p><ul><li><strong>方法和类的伪私有化</strong></li></ul><p>当将方法设置为__function_name后，执行过程中会将方法名替换为_ClassName__name,避免方法被直接调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.public_var = <span class="hljs-string">&quot;我是公开的&quot;</span><br>        <span class="hljs-variable language_">self</span>.__private_var = <span class="hljs-string">&quot;我是&#x27;私有&#x27;的&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__private_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这是&#x27;私有&#x27;方法&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>属性的封装</strong></li></ul><p>将属性设置为私有属性,通过方法调用来完成属性的设置。避免了属性直接通过”.”获取到被篡改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, score</span>):<br>        <span class="hljs-variable language_">self</span>._name = name    <span class="hljs-comment"># 使用单下划线表示不应直接访问</span><br>        <span class="hljs-variable language_">self</span>._score = score  <span class="hljs-comment"># 使用单下划线表示不应直接访问</span><br>    <br><span class="hljs-meta">    @property  </span><span class="hljs-comment"># 读取器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._name<br>    <br><span class="hljs-meta">    @property  </span><span class="hljs-comment"># 读取器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">score</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._score<br>    <br><span class="hljs-meta">    @score.setter  </span><span class="hljs-comment"># 设置器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">score</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(value, <span class="hljs-built_in">int</span>):<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;成绩必须是整数&quot;</span>)<br>        <span class="hljs-keyword">if</span> value &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> value &gt; <span class="hljs-number">100</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;成绩必须在0到100之间&quot;</span>)<br>        <span class="hljs-variable language_">self</span>._score = value<br></code></pre></td></tr></table></figure><ul><li>闭包</li></ul><p>闭包提供了一个隐藏函数内部实现，将数据在内部处理的方法，只在外部定义返回的变量，而将具体的过程放在内部进行处理，让外部无非直接访问内部的执行逻辑。python中的闭包不是典型的 OOP 封装，但它提供了类似‘数据私有性’的能力，因此可以理解为一种过程式封装形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">counter_factory</span>(<span class="hljs-params">start=<span class="hljs-number">0</span>, step=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-comment"># 在外部函数中定义的变量</span><br>    count = start<br>    <br>    <span class="hljs-comment"># 内部函数，形成闭包</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>():<br>        <span class="hljs-comment"># 使用nonlocal关键字，表明我们要修改外部函数的变量</span><br>        <span class="hljs-keyword">nonlocal</span> count<br>        <span class="hljs-comment"># 保存当前值</span><br>        current = count<br>        <span class="hljs-comment"># 更新计数</span><br>        count += step<br>        <span class="hljs-comment"># 返回计数值</span><br>        <span class="hljs-keyword">return</span> current<br>    <br>    <span class="hljs-comment"># 返回内部函数，不执行它</span><br>    <span class="hljs-keyword">return</span> counter<br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承指的是，当一个子类对父类进行继承之后，子类拥有了对父类的所有方法和属性的访问权限。(对经过私有声明的属性和方法可以以特殊形式访问到)。这就完成了is-a 的关系，继承通常用于在同一类别下子类的快速创建，以及为多态的实现提供可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_sound</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;一些声音&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;显示动物信息&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;名称：<span class="hljs-subst">&#123;self.name&#125;</span>, 年龄：<span class="hljs-subst">&#123;self.age&#125;</span>岁&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;狗类，继承自动物类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, breed</span>):<br>        <span class="hljs-comment"># 调用父类的__init__方法</span><br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        <span class="hljs-variable language_">self</span>.breed = breed  <span class="hljs-comment"># 狗的品种</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_sound</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;重写父类的方法&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;汪汪汪！&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;扩展父类的方法&quot;&quot;&quot;</span><br>        basic_info = <span class="hljs-built_in">super</span>().info()<br>        <span class="hljs-comment"># 添加子类特有的信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;basic_info&#125;</span>, 品种：<span class="hljs-subst">&#123;self.breed&#125;</span>&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wag_tail</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;子类特有的方法&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span>摇了摇尾巴&quot;</span><br><span class="hljs-comment"># 创建实例并测试</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 创建一个Animal实例</span><br>    generic_animal = Animal(<span class="hljs-string">&quot;小动物&quot;</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(generic_animal.info())<br>    <span class="hljs-built_in">print</span>(generic_animal.make_sound())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">30</span>)<br>    <span class="hljs-comment"># 创建一个Dog实例</span><br>    my_dog = Dog(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;金毛&quot;</span>)<br>    <span class="hljs-comment"># 测试继承的属性和方法</span><br>    <span class="hljs-built_in">print</span>(my_dog.info())  <span class="hljs-comment"># 使用重写的方法</span><br>    <span class="hljs-built_in">print</span>(my_dog.make_sound())  <span class="hljs-comment"># 使用重写的方法</span><br>    <span class="hljs-built_in">print</span>(my_dog.wag_tail())  <span class="hljs-comment"># 使用子类特有的方法</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态指的是，当一个函数接收父类型作为参数时，通过传入继承自父类的子类。调用同一个方法会得到不同的行为，在python中，因为弱类型的实现，不太好关注到多态的明显特征。因为在函数调用时，python并不是以传入的对象是否继承自某个父类，而是以传入的对象是否具备某种方法来进行执行。所以如果想实现更标准的多态，需要对传入的对象进行类型上的判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># 基类中的方法是抽象的</span><br><br><span class="hljs-comment"># 定义子类，继承自Animal</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;汪汪!&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;喵喵!&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;嘎嘎!&quot;</span><br><br><span class="hljs-comment"># 多态函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">animal_sound</span>(<span class="hljs-params">animal</span>):<br>    <span class="hljs-comment"># 同一个函数调用会根据对象的实际类型产生不同的结果</span><br>    <span class="hljs-comment"># 这就是多态的体现</span><br>    <span class="hljs-keyword">return</span> animal.speak()<br><br><span class="hljs-comment"># 创建不同动物的实例</span><br>dog = Dog()<br>cat = Cat()<br>duck = Duck()<br><br><span class="hljs-comment"># 使用相同的函数调用不同类型的对象</span><br><span class="hljs-built_in">print</span>(animal_sound(dog))  <span class="hljs-comment"># 输出: 汪汪!</span><br><span class="hljs-built_in">print</span>(animal_sound(cat))  <span class="hljs-comment"># 输出: 喵喵!</span><br><span class="hljs-built_in">print</span>(animal_sound(duck))  <span class="hljs-comment"># 输出: 嘎嘎!</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Devops</title>
    <link href="/2025/04/15/Devops/"/>
    <url>/2025/04/15/Devops/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试技术</title>
    <link href="/2025/04/15/%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
    <url>/2025/04/15/%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>测试技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2025/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2025/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2025/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编程 I 基础</title>
    <link href="/2025/04/14/Python%E7%BC%96%E7%A8%8B-I/"/>
    <url>/2025/04/14/Python%E7%BC%96%E7%A8%8B-I/</url>
    
    <content type="html"><![CDATA[<h1 id="Python编程-I"><a href="#Python编程-I" class="headerlink" title="Python编程 I"></a>Python编程 I</h1><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br><span class="hljs-comment"># 函数(&quot;传入参数&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h3><p>我们可以设置一个变量名再将其打印 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">message = <span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><h3 id="命名要求和风格"><a href="#命名要求和风格" class="headerlink" title="命名要求和风格"></a>命名要求和风格</h3><p>变量名接受的字符 ： 大小写字母，数字，下划线。数字不能在首位出现</p><p>风格：</p><p>大驼峰式(常用于类定义，函数定义) ：  ThisIsAVariableDefine</p><p>小驼峰式(常用于类定义，函数定义) ：  thisIsAVariableDefin</p><p>下划线风格(常用于变量声明)  :  my_variable</p><p>变量名尽可能起得容易理解。</p><h3 id="变量是什么"><a href="#变量是什么" class="headerlink" title="变量是什么"></a>变量是什么</h3><p>在我们的最初讨论中，变量是一个通过映射与实际对象建立关系的标识符。</p><p>当然目前可以理解为一个标签用来寻找我们真正想处理的内容</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是一种python的<strong>数据类型</strong></p><p>直接就可以定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&quot;string&quot;</span><br>str1.upper()  <span class="hljs-comment"># 将字符串转换为全部大写，输出 ： STRING</span><br>str1.lower()  <span class="hljs-comment"># 将字符串转换为全部小写，输出 ： string</span><br>str1.title()  <span class="hljs-comment"># 将字符串转换为首字母大写，输出 ：String</span><br></code></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>python 提供多种字符串的输出方式</p><p>同时可以使用’\char’ 来在字符串中添加转义字符</p><p>\t 制表符</p><p>\n 换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">StringA = <span class="hljs-string">&quot;a&quot;</span><br>StringB = <span class="hljs-string">&quot;b&quot;</span><br>StringC = <span class="hljs-string">&quot;c&quot;</span><br>StringD = <span class="hljs-string">&quot;d&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello %s&quot;</span> % StringA)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello &quot;</span>+StringB)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hello <span class="hljs-subst">&#123;StringC&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(StringD))<br><span class="hljs-comment"># 输出 ：</span><br><span class="hljs-comment"># hello a</span><br><span class="hljs-comment"># hello b</span><br><span class="hljs-comment"># hello c</span><br><span class="hljs-comment"># hello d</span><br></code></pre></td></tr></table></figure><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>整数</p><p>python支持数学运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a,b,c,d = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <br><span class="hljs-built_in">print</span>(a+b)      <span class="hljs-comment"># 加法 输出 3</span><br><span class="hljs-built_in">print</span>(a-b)      <span class="hljs-comment"># 减法 输出 -1</span><br><span class="hljs-built_in">print</span>(b*c)      <span class="hljs-comment"># 乘法 输出 6</span><br><span class="hljs-built_in">print</span>(c/d)      <span class="hljs-comment"># 除法 输出3/4</span><br><span class="hljs-built_in">print</span>(d//<span class="hljs-number">4</span>)     <span class="hljs-comment"># 整除  输出1</span><br><span class="hljs-built_in">print</span>(d%c)      <span class="hljs-comment"># 取余数 输出1</span><br><span class="hljs-built_in">print</span>(d**b)     <span class="hljs-comment"># 计算平方 输出 16</span><br></code></pre></td></tr></table></figure><p>浮点数</p><p>同样支持数学运算，在有浮点数参与的计算种会被自动转化为浮点数</p><p>常量</p><p>Python 中通常用大写来标记一个量为常量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">MAX_VALUE = <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>python 使用两种风格的注释  单行注释 #  和  多行注释 “”” … “””</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单行注释</span><br><span class="hljs-string">&quot;&quot;&quot; 多行</span><br><span class="hljs-string">注释 &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表是一种能够容纳多个元素的数据结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">lst1 = <span class="hljs-built_in">list</span>()  <span class="hljs-comment">#显式创建空列表</span><br>lst2 = []      <span class="hljs-comment">#隐式创建空列表</span><br></code></pre></td></tr></table></figure><p>python中的列表不会限制列表中元素的类型，也不会限制整个列表的长度</p><p>一些通用函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">lst1 = <span class="hljs-built_in">list</span>()<br>lst2 = [<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>]<br> <br>lst1.append(<span class="hljs-number">1</span>)                 <span class="hljs-comment"># 向列表中添加元素              [1]</span><br>lst1.append(<span class="hljs-string">&quot;hi&quot;</span>)              <span class="hljs-comment"># 添加其他类型的元素            [1, &#x27;hi&#x27;]</span><br>lst1.remove(<span class="hljs-number">1</span>)                 <span class="hljs-comment"># 删除列表中的元素              [&#x27;hi&#x27;]</span><br>lst1.extend(lst2)              <span class="hljs-comment"># 将lst2中的元素添加到lst1      [&#x27;hi&#x27;, 2, 5, 8, 9, 7, 6, 2, 3, 9]</span><br>lst1.reverse()                 <span class="hljs-comment"># 反转列表                      [9, 3, 2, 6, 7, 9, 8, 5, 2, &#x27;hi&#x27;]</span><br>lst1.pop()                     <span class="hljs-comment"># 弹出末尾元素赋值给变量         [9, 3, 2, 6, 7, 9, 8, 5, 2]</span><br></code></pre></td></tr></table></figure><h1 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h1><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>对于想读取列表中的每个元素，可以使用for in 来进行读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst2 :       <span class="hljs-comment"># i作为临时变量使用用来获取lst2中的元素</span><br>    <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot;,&quot;</span>)      <span class="hljs-comment"># end=  设置输出的结束符</span><br><span class="hljs-comment"># 输出 2,5,8,9,7,6,2,3,9,</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(lst2)):  <span class="hljs-comment"># 也可以使用range来完成循环，每次执行会将i增加1</span><br>    <span class="hljs-built_in">print</span>(lst2[i],end=<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-comment"># 输出 2,5,8,9,7,6,2,3,9,</span><br><span class="hljs-comment"># range的范围是前闭后开</span><br><span class="hljs-built_in">range</span> 还可以按步长输出<br></code></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>当需要创建类似 [1,2,3,4,5,6,7,8,9]的列表时，可以直接通过for循环创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">lst3 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>,<span class="hljs-number">10</span>)] <br><span class="hljs-comment"># 创建列表 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></code></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>如果想获取列表中的部分元素可以通过下标对某位置的元素进行获取 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lst3[<span class="hljs-number">0</span>]    <span class="hljs-comment"># 获取第一个元素 即0</span><br>lst3[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]  <span class="hljs-comment"># 获取第3-5个元素的子列表</span><br>lst3[::-<span class="hljs-number">1</span>] <span class="hljs-comment"># 获取反转列表</span><br></code></pre></td></tr></table></figure><h2 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h2><p>有些情况下需要对列表进行复制操作，这时需要考虑是否会对源列表有影响</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lst0 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]                   <span class="hljs-comment">#定义了一个列表的数据结构</span><br>lst4 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,lst0]      <span class="hljs-comment">#添加到另一个列表中</span><br>lst5 = lst4[::]                  <span class="hljs-comment">#复制列表lst4到lst5</span><br>lst5[-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>                  <span class="hljs-comment">#修改5中的lst0</span><br><span class="hljs-built_in">print</span>(lst0)                      <span class="hljs-comment"># 输出[2,2,3] 发现lst0也被改动了。</span><br></code></pre></td></tr></table></figure><p>这是因为python中 复制列表时，传递过去的都是变量的值，但是对于引用变量（可以理解为包含多个元素的变量，如列表），返回的是该变量的存储位置。所以当修改该变量中的值的时候，还是对原对象进行了修改。所以在复制列表等引用数据类型的时候需要:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lst0 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>lst4 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,lst0]<br>lst6 = copy.deepcopy(lst4)        <span class="hljs-comment">#遍历元素，判断存在引用类型的元素，创建新引用元素加入列表</span><br>lst6[-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(lst0)<br></code></pre></td></tr></table></figure><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>在python中，元组是对于一组不可变数据的类型称呼，被定义的元组在后续的使用中不可以被修改</p><p>这种设计是对应一些数据的只读属性，防止后期被篡改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = （<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>）           <span class="hljs-comment">#使用圆括号定义元组</span><br>tuple2 = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>               <span class="hljs-comment">#隐式定义元组</span><br>tuple3 = <span class="hljs-number">1</span>,                  <span class="hljs-comment">#或者使用,定义只有一个元素的元组</span><br></code></pre></td></tr></table></figure><p>元组也支持前述中列表的遍历，切片操作。只是不能修改其中的数据，这是由解释器控制的</p><h1 id="判断表达式"><a href="#判断表达式" class="headerlink" title="判断表达式"></a>判断表达式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a =<span class="hljs-string">&#x27;c&#x27;</span><br><span class="hljs-keyword">if</span> a == <span class="hljs-string">&#x27;a&#x27;</span> :                            <span class="hljs-comment"># 判断条件1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s is here&quot;</span> % a)<br><span class="hljs-keyword">elif</span> a == <span class="hljs-string">&#x27;b&#x27;</span>  :                      <span class="hljs-comment"># 判断条件2 可以跟多个else if + 判断条件</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> is here&quot;</span>)<br><span class="hljs-keyword">else</span> :                                   <span class="hljs-comment"># 其他情况</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; is here&quot;</span>.<span class="hljs-built_in">format</span>(a))<br></code></pre></td></tr></table></figure><h2 id="判断条件"><a href="#判断条件" class="headerlink" title="判断条件"></a>判断条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">!= 不等于<br>== 等于<br><span class="hljs-keyword">is</span> 用于引用变量判断是否是同一个对象<br><span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> 用于引用变量判断是否非同一个对象<br><span class="hljs-keyword">in</span> 判断某元素是否中是否包含该元素<br><span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> 判断某元素是否不含有某元素<br><span class="hljs-literal">True</span>  值为真<br><span class="hljs-literal">False</span> 值为假<br><br></code></pre></td></tr></table></figure><h2 id="多条件处理"><a href="#多条件处理" class="headerlink" title="多条件处理"></a>多条件处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">and</span>  <span class="hljs-string">&quot;且&quot;</span> 拼接多个条件判断<br><span class="hljs-keyword">or</span>   <span class="hljs-string">&quot;或&quot;</span> 拼接多个条件判断<br><br></code></pre></td></tr></table></figure><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典是一种键值对的结构 通过对应的键可以进行值的访问。</p><p>字典可以接收任意的元素作为键和值，但是要保证键的唯一性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = <span class="hljs-built_in">dict</span>()                        <span class="hljs-comment">#显式创建</span><br>dict2 = &#123;<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;                <span class="hljs-comment">#隐式创建</span><br>dict3 = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;codfish&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;28&quot;</span>&#125;<br>dict3.update(dict2)                   <span class="hljs-comment">#将dict2中的键值对更新到dict3中</span><br>dict3[<span class="hljs-string">&quot;name&quot;</span>]                         <span class="hljs-comment">#获取键name对应的值</span><br>dict3[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;someone&quot;</span>             <span class="hljs-comment">#设置修改name键对应的值</span><br>dict3.get(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;default value&quot;</span>)     <span class="hljs-comment">#获取一个键的值,不存在对应键的时候返回默认值</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dict3.keys():                <span class="hljs-comment">#遍历打印所有的键</span><br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dict3.values():              <span class="hljs-comment">#遍历打印所有的值</span><br>    <span class="hljs-built_in">print</span>(j)<br><br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> dict3.items() :            <span class="hljs-comment">#通过.items 获取键和值</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;your <span class="hljs-subst">&#123;k&#125;</span> is <span class="hljs-subst">&#123;v&#125;</span>&quot;</span>)<br> <br></code></pre></td></tr></table></figure><h1 id="接收输入"><a href="#接收输入" class="headerlink" title="接收输入"></a>接收输入</h1><p>python中使用“input” 接收数据，返回的是一个字符串类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input your age&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(age))   <span class="hljs-comment"># type返回变量的类型， 输出为&lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>除了使用for 之外，还可以使用while进行循环控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">counter = <span class="hljs-number">10</span><br><span class="hljs-keyword">while</span> counter &gt; <span class="hljs-number">3</span> :<br><span class="hljs-keyword">if</span> counter == <span class="hljs-number">6</span> :<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;current is %d &quot;</span> % counter)          <br><span class="hljs-keyword">elif</span> counter == <span class="hljs-number">7</span> :<br>  <span class="hljs-keyword">continue</span>                          <span class="hljs-comment">#跳过本次循环,循环继续</span><br><span class="hljs-keyword">elif</span> counter == <span class="hljs-number">4</span> :<br><span class="hljs-keyword">break</span>                             <span class="hljs-comment">#跳出while循环执行后续工作流</span><br><span class="hljs-keyword">else</span> :<br>  <span class="hljs-built_in">print</span>(counter) <br>  <br>输出:<br>PS D:\Software&gt; python .\anmial.py<br><span class="hljs-number">10</span><br><span class="hljs-number">9</span><br><span class="hljs-number">8</span><br>current <span class="hljs-keyword">is</span> <span class="hljs-number">6</span> <br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数是一段执行特定功能的代码块，当某些功能在多个位置重复使用时，使用函数可以提高代码复用，提升编程效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python 中的函数定义</span><br><span class="hljs-keyword">def</span>              <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name</span>):<br><span class="hljs-comment">#函数声明保留字  函数名   参数信息</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hello <span class="hljs-subst">&#123;name&#125;</span>&quot;</span>)<br> <br>say_hello(<span class="hljs-string">&quot;codfish&quot;</span>)  <span class="hljs-comment">#调用函数 输出 hello codfish</span><br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>python的 参数支持灵活的定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>()    <span class="hljs-comment"># 无参情况</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name</span>)  <span class="hljs-comment"># 传入一个参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name,time=<span class="hljs-string">&quot;evening&quot;</span></span>) <span class="hljs-comment"># 传入多个参数，且有默认值的参数，有默认值的参数需要位于最后。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name,*args</span>)  <span class="hljs-comment"># 接收name 和多个参数，返回一个元组arg给函数处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name,**kwargs</span>)  <span class="hljs-comment"># 将传入的指定变量名的参数作为一个字典变量kwargs 传入函数处理</span><br>  <br></code></pre></td></tr></table></figure><h2 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h2><p>形式参数 是用来说明函数功能，作为替代符，使得函数功能的定义完整</p><p>实际参数 是真正需要被处理的参数。</p><p>在这里  实参同样要注意 值和引用的问题，当传入引用对象的时候，函数 操作的仍然是你的实际对象。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>python 可以接收任意类型的值作为返回值返回给接收它的变量，也可以返回多个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_test</span>():                 <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>              <span class="hljs-comment">#也可以接收多个值的返回，本质是元组的映射</span><br>a,b,c,d,e = return_test()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>在面向对象编程中，类是用来描述一类具有相同功能或组件的事物的抽象模板，通过在类中定义属性和方法（类中的函数），来完成对事物功能的抽象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>          <span class="hljs-comment"># 定义类 Dog</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):        <span class="hljs-comment"># __init__ 用于为后续创建的狗的实例赋值</span><br><span class="hljs-variable language_">self</span>.name = name         <br><span class="hljs-variable language_">self</span>.age = age<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> is barking&quot;</span>)  <span class="hljs-comment"># 小狗具备的功能</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">walk</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> is walking&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>类作为抽象事务的模板，那么由类创造的实例就是对具体事务在计算机上的抽象，通过对类的调用，我们可以得到该类的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dog =  Dog(<span class="hljs-string">&quot;旺柴&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)   <span class="hljs-comment"># 创建了一只名叫旺柴的3岁的狗</span><br><span class="hljs-built_in">print</span>(dog.name)          <span class="hljs-comment"># 打印狗的名字</span><br>dog.bark()               <span class="hljs-comment"># 执行狗叫的方法</span><br></code></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>在python中，使用open&#x2F;close关键字来进行 文件的操作开闭操作</p><p>通过encoding 指定文件的字符集</p><p>通过 ‘rwa’ 指定文件的读写模式 r 只读 w只写 a追加 r以字节序读取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> content :       <span class="hljs-comment">#打开文件,使用with时 不需要使用close关闭这个作用域结束后会自动关闭文件</span><br>    a = content.read()                                    <span class="hljs-comment">#读取文件内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))                                        <span class="hljs-comment">#文件内容默认以字符串类型被读取</span><br></code></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>在程序执行过程中，接收到了不符合预期的参数等一些情况会使得程序产生异常。我们可以通过</p><p>try-except-finally 来完成异常的捕捉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span> :<br>    <span class="hljs-number">8</span>/<span class="hljs-number">0</span>                                     <span class="hljs-comment"># 触发除数异常</span><br><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e  :            <span class="hljs-comment"># 将异常接收为一个异常对象，可以进行打印或者返回</span><br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;it&#x27;s done&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的加载过程与内存模型</title>
    <link href="/2025/04/14/Python%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/04/14/Python%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python的加载过程与内存模型-CPython实现"><a href="#Python的加载过程与内存模型-CPython实现" class="headerlink" title="Python的加载过程与内存模型(CPython实现)"></a>Python的加载过程与内存模型(CPython实现)</h1><h1 id="Python的加载过程"><a href="#Python的加载过程" class="headerlink" title="Python的加载过程"></a>Python的加载过程</h1><p><img src="https://i.111666.best/image/vJcRKHO4PyR94YrSC7j0IS.png" alt="image"></p><h2 id="编译时"><a href="#编译时" class="headerlink" title="编译时"></a>编译时</h2><p>Python 与其他语言一样也具有编译过程 ，将Python文件转换为字节码文件供解释器进行下一步的处理。进行语义分析，语法分析，具象生成树，抽象生成树，最终将文件转换为字节码。</p><p>对对象的预处理:</p><p>对于左值（变量名）会在编译期被加入名称表（<code>co_names</code>），并加入到 一个名称表元组中。</p><p>对于右侧创建的变量，根据类型的不同，加入到常量表中。</p><p>将全局变量替换为名称表中的索引，而索引映射了对应的常量对象指针</p><p>在python文件中的变量声明”a &#x3D; 3”  变成了 “名字表中‘a’的内存地址  指向了常量表中‘3’的内存地址”</p><p>为了操作更加方便灵活，类定义中的类变量则直接被装载到类的命名空间进行管理。</p><p>将局部变量替换为局部变量表+插槽</p><h2 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h2><p>将python字节码文件加载到虚拟机。不同的python组件会执行不同的装载行为。最终将对象加载到命名空间，进行执行。</p><h1 id="组件加载过程"><a href="#组件加载过程" class="headerlink" title="组件加载过程"></a>组件加载过程</h1><p>Python的加载逻辑是将文件中定义的内容 转换为 各个层级维护的命名空间中的映射关系。进行调用时 通过查询命名空间，找到对应的待执行内容(类，方法，变量)，执行。</p><h2 id="组件和类的加载"><a href="#组件和类的加载" class="headerlink" title="组件和类的加载:"></a>组件和类的加载:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    x = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val</span>):<br>        <span class="hljs-variable language_">self</span>.val = val<br></code></pre></td></tr></table></figure><p>等价于 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">namespace = &#123;&#125;<br><span class="hljs-built_in">exec</span>(code_object_for_class_A, <span class="hljs-built_in">globals</span>(), namespace)<br>A = <span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;A&quot;</span>, (<span class="hljs-built_in">object</span>,), namespace)<br></code></pre></td></tr></table></figure><p>组件和类的加载过程：</p><p>定义一个了命名空间（内存申请）</p><p>使用code_object 加载类A中的元素定义到命名空间</p><p>再在外层将类与该命名空间绑定（实际上也将A添加到外部的命名空间）</p><p>cpython 使用code_object这个对象实现了向类中添加其所属元素的加载过程</p><h2 id="函数-方法"><a href="#函数-方法" class="headerlink" title="函数&#x2F;方法"></a>函数&#x2F;方法</h2><p>方法中同样会创建一个code object 对象，但是不会将变量-引用转换成k-v模式加入到函数的命名空间，而是作为字节码存储在命名空间中，当方法被执行时，函数会调用字节码文件执行，创建一系列的参数元组，然后通过索引→key→value 的调用方式查询待处理的对象</p><h2 id="实例的创建"><a href="#实例的创建" class="headerlink" title="实例的创建"></a>实例的创建</h2><p>在python中创建一个实例 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br><span class="hljs-variable language_">self</span>.name = name <br><br>nobody = person(<span class="hljs-string">&quot;nobody&quot;</span>)<br><span class="hljs-comment"># 1. 隐式调用了__new__ 方法 person.__new__(person,name), </span><br><span class="hljs-comment"># 查询类命名空间中的__new__new 方法并执行,接收参数传入，是因为在实例构造期间，传入的参数并不一定只是进行字段的初始化，</span><br><span class="hljs-comment"># 也可能参与实例的构造过程</span><br><span class="hljs-comment"># 2. 调用__init__ 方法， person.__init__(self,name),</span><br><span class="hljs-comment"># 查询定义的__init__方法，接收传入参数并对对象中的字段进行初始化。</span><br></code></pre></td></tr></table></figure><h2 id="函数的执行"><a href="#函数的执行" class="headerlink" title="函数的执行"></a>函数的执行</h2><p>在python中调用一个方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello &quot;</span>, name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;variable in func say_hello &quot;</span>+say_hello.__code__.co_varnames[<span class="hljs-number">0</span>])<br>    say_hello(<span class="hljs-string">&quot;codfish&quot;</span>)<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-comment">#&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000016CCC307850&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;d:\\Software\\age.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;say_hello&#x27;: &lt;function say_hello at 0x0000016CCC2DFB00&gt;&#125;</span><br><span class="hljs-comment"># 对应 外部的locals()</span><br><span class="hljs-comment"># variable in func say_hello name</span><br><span class="hljs-comment"># 对应 print(&quot;variable in func say_hello &quot;+say_hello.__code__.co_varnames[0]) 打印say_hello</span><br><span class="hljs-comment"># 函数中的常量池信息0</span><br><span class="hljs-comment">#&#123;&#x27;name&#x27;: &#x27;codfish&#x27;&#125;</span><br><span class="hljs-comment"># 函数内部的locals()</span><br><span class="hljs-comment"># hello  codfish</span><br><span class="hljs-comment"># 函数的最终打印</span><br><span class="hljs-comment"># 因为python 函数中的对象表是会多次创建的，所以函数中保留的是code_object 字节码，每次都</span><br><span class="hljs-comment"># 会执行创建对象表的过程。</span><br><span class="hljs-comment"># 1. 打印本地的命名空间</span><br><span class="hljs-comment"># 2. 查询函数中的参数信息-&gt;name</span><br><span class="hljs-comment"># 3. 执行say_hello，可以从命名空间中查询到say_hello并执行</span><br><span class="hljs-comment"># 4. 打印内部的命名空间，可以看到name与codfish 进行了绑定</span><br><span class="hljs-comment"># 5. 执行print打印name，内部是用索引去查询name对应的实参，但仍然维护了一个命名空间</span><br></code></pre></td></tr></table></figure><h2 id="方法的执行"><a href="#方法的执行" class="headerlink" title="方法的执行"></a>方法的执行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">someone</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.name=name<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__dict__)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello &quot;</span>, <span class="hljs-variable language_">self</span>.name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())            <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;variable in func say_hello &quot;</span>+someone.say_hello.__code__.co_varnames[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;someone&#x27;s namespace:&quot;</span>,someone.__dict__)<br>    someone(<span class="hljs-string">&#x27;codfish&#x27;</span>).say_hello()<br> <span class="hljs-comment"># 输出</span><br> <span class="hljs-comment"># &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;someone&#x27;, &#x27;__firstlineno__&#x27;: 1&#125;</span><br> <span class="hljs-comment"># Python 的类定义和函数定义都是“执行过程”，不是声明语法。</span><br> <span class="hljs-comment"># 当解释器遇到 class MyClass:，它就立即执行整个类体中的代码，从上到下顺序执行。</span><br> <span class="hljs-comment"># def 代表执行加载这个函数定义到命名空间中</span><br> <span class="hljs-comment"># &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;someone&#x27;, &#x27;__firstlineno__&#x27;: 1, &#x27;__init__&#x27;: &lt;function someone.__init__ at 0x000001C90E681440&gt;, &#x27;say_hello&#x27;: &lt;function someone.say_hello at 0x000001C90E6E4720&gt;&#125;</span><br> <span class="hljs-comment"># 执行过程 只会执行类声明次一级的代码，函数定义的代码块会作为字节码被存储到__code__中</span><br> <span class="hljs-comment"># &#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x000001C90E6F7850&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;d:\\Software\\age.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;someone&#x27;: &lt;class &#x27;__main__.someone&#x27;&gt;&#125;</span><br> <span class="hljs-comment"># 全局命名空间</span><br> <span class="hljs-comment"># variable in func say_hello self</span><br> <span class="hljs-comment"># 查询到的第一个参数，对于方法第一个参数为self.</span><br> <span class="hljs-comment"># someone&#x27;s namespace: &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__firstlineno__&#x27;: 1, &#x27;__init__&#x27;: &lt;function someone.__init__ at 0x000001C90E681440&gt;, &#x27;say_hello&#x27;: &lt;function someone.say_hello at 0x000001C90E6E4720&gt;, &#x27;__static_attributes__&#x27;: (&#x27;name&#x27;,), &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;someone&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;someone&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span><br> <span class="hljs-comment"># 装载后的类命名空间</span><br> <span class="hljs-comment"># &#123;&#x27;self&#x27;: &lt;__main__.someone object at 0x000001C90E5E70E0&gt;, &#x27;name&#x27;: &#x27;codfish&#x27;&#125;</span><br> <span class="hljs-comment"># 初始化方法__init__的命名空间</span><br> <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;codfish&#x27;&#125;</span><br> <span class="hljs-comment"># 实例的命名空间</span><br> <span class="hljs-comment"># &#123;&#x27;self&#x27;: &lt;__main__.someone object at 0x000001C90E5E70E0&gt;&#125;</span><br> <span class="hljs-comment"># 由函数维护的命名空间</span><br> <span class="hljs-comment"># hello  codfish</span><br> <span class="hljs-comment"># 最终打印</span><br></code></pre></td></tr></table></figure><h2 id="命名空间的查询"><a href="#命名空间的查询" class="headerlink" title="命名空间的查询"></a>命名空间的查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">locals</span>() <span class="hljs-comment"># 当前作用域（动态）当前栈帧中的局部变量字典查看当前函数、类体、模块的局部变量</span><br><span class="hljs-built_in">globals</span>() <span class="hljs-comment"># 当前模块级作用域当前模块的全局变量字典查看模块的全局变量、函数、类等</span><br>__dict__ <span class="hljs-comment"># 对象自身的属性字典显式定义的变量（不含继承/内建属性）查看对象自己的属性</span><br><span class="hljs-built_in">dir</span>()     <span class="hljs-comment"># 对象+继承链所有可访问属性名的列表（字符串）补全、IDE 自动提示、调试</span><br></code></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>python是通过命名空间来管理每个对象的访问权限的。</p><p>所以调用都遵循着 当调用函数，类时，查询当前层的命名空间，检索对应的函数名，类名信息。找到对应的函数，类的位置，进行执行。</p><p>那么我们可以看看python是如何实现多态的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">anmial</span> :<br><span class="hljs-comment"># 创建基类，定义eat方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&quot; eat nothing, still hungry&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">duck</span>(<span class="hljs-title class_ inherited__">anmial</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name=<span class="hljs-string">&quot;duck&quot;</span></span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br><span class="hljs-comment">#        super().__init__(name)</span><br><span class="hljs-comment"># 定义子类继承基类，传递name 子类的self.name 和 使用super().__init__(name)对父类的self</span><br><span class="hljs-comment"># 进行初始化效果相同，说明self仍然是同一个实例（内存对象）。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span>(<span class="hljs-title class_ inherited__">anmial</span>) :<br><span class="hljs-comment"># 定义子类猫，重写eat方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name=<span class="hljs-string">&quot;cat&quot;</span></span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&quot; eat some fish&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span>(<span class="hljs-title class_ inherited__">anmial</span>):<br><span class="hljs-comment"># 定义子类狗，重新eat方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name=<span class="hljs-string">&quot;dog&quot;</span></span>):<br>        <span class="hljs-variable language_">self</span>.name = name <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&quot; eat some bones&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ghost</span> :<br><span class="hljs-comment"># 定义普通类鬼，具有相同的方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name=<span class="hljs-string">&quot;ghost&quot;</span></span>) :<br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name+ <span class="hljs-string">&quot; eat some blood&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> :<br><span class="hljs-comment"># 定义普通类人，不具备eat方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name=<span class="hljs-string">&quot;person&quot;</span></span>) :<br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">want_eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name+ <span class="hljs-string">&quot; eat some noodls&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">toldAnmialToEat</span>(<span class="hljs-params">anmial</span>):<br><span class="hljs-comment"># 定义了一个函数接收传入的基类，调用eat方法</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>    anmial.eat()<br><br>toldAnmialToEat(duck())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(duck))<br>toldAnmialToEat(cat())<br>toldAnmialToEat(dog())<br>toldAnmialToEat(ghost())<br>toldAnmialToEat(person())<br><span class="hljs-comment"># 执行</span><br><span class="hljs-comment"># &#123;&#x27;anmial&#x27;: &lt;__main__.duck object at 0x000002A92EFA6F90&gt;&#125;</span><br><span class="hljs-comment"># duck eat nothing, still hungry</span><br><span class="hljs-comment"># duck 未实现自己的方法所以使用了父类的方法</span><br><span class="hljs-comment"># [&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__firstlineno__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__getstate__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__static_attributes__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;eat&#x27;]</span><br><span class="hljs-comment"># duck 由父类继承了eat 方法</span><br><span class="hljs-comment"># &#123;&#x27;anmial&#x27;: &lt;__main__.cat object at 0x000002A92EFA6F90&gt;&#125;</span><br><span class="hljs-comment"># cat eat some fish</span><br><span class="hljs-comment"># 调用了cat的方法</span><br><span class="hljs-comment"># &#123;&#x27;anmial&#x27;: &lt;__main__.dog object at 0x000002A92EFA6F90&gt;&#125;</span><br><span class="hljs-comment"># dog eat some bones</span><br><span class="hljs-comment"># 调用了dog的方法</span><br><span class="hljs-comment"># &#123;&#x27;anmial&#x27;: &lt;__main__.ghost object at 0x000002A92EFA6F90&gt;&#125;</span><br><span class="hljs-comment"># ghost eat some blood</span><br><span class="hljs-comment"># 调用了ghost的方法</span><br><span class="hljs-comment"># &#123;&#x27;anmial&#x27;: &lt;__main__.person object at 0x000002A92EFA6F90&gt;&#125;</span><br><span class="hljs-comment"># Traceback (most recent call last):</span><br><span class="hljs-comment"># person 不具备此方法，报错</span><br></code></pre></td></tr></table></figure><p>可以看出 </p><p>1.子类会从父类那里继承它没有重新的方法。</p><p>2.当子类重写了方法后，会执行子类的方法</p><ol start="3"><li><p>非子类但具有相同方法的类也可以正确执行，说明函数的定义只是声明式约束，不会进行类的检查</p></li><li><p>当传入的类不具备方法时，会报错。由3，4说明还是根据命名空间中的功能列表来进行的函数执行</p></li></ol><h1 id="变量，引用，类型和对象"><a href="#变量，引用，类型和对象" class="headerlink" title="变量，引用，类型和对象"></a>变量，引用，类型和对象</h1><p>通过分析，我们可以看到Python中的所有对象都是由命名空间来组织和维护的。</p><p><strong>变量</strong> ： python中的变量名在字节码中是以名称索引的形式出现，并存于名称表中。</p><p><strong>引用</strong> ： 引用在python中表现为一种“间接”的引用，它不是通过标识符→实际对象的地址指针→获取实际的对象。而是通过创建了标识符对象→标识符加入name表→实际对象加入常量表→通过命名空间完成映射绑定。再通过命名空间中的k-v关系查询到实际被调用的对象。</p><p><strong>类型</strong> ： Python是弱类型语言的正是基于这种引用的实现来构建的。虽然在底层Python的对象依然是存在类型的，但键与值之间的关系是基于映射关系，而不是指针。由于键值映射的动态性，类型检查在运行时进行，名称本身不携带类型信息</p><p><strong>对象</strong> ：同样是因为这种引用的构建，Python中的一切皆对象实施的更加彻底——- 变量名也是作为对象存储的。这样的设计让我们不必深入底层才能获取到类，函数的创建信息，只需要找到其中的映射关系，就能对类或者函数中的属性进行操作修改。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java的加载过程与内存模型</title>
    <link href="/2025/04/12/Java%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/04/12/Java%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java的加载过程与内存模型"><a href="#Java的加载过程与内存模型" class="headerlink" title="Java的加载过程与内存模型"></a>Java的加载过程与内存模型</h1><h1 id="Java加载组件"><a href="#Java加载组件" class="headerlink" title="Java加载组件"></a>Java加载组件</h1><p><img src="https://i.111666.best/image/ZCNHcuLH23gTkkNwTwgjfA.png" alt="image"></p><h2 id="编译时"><a href="#编译时" class="headerlink" title="编译时"></a>编译时</h2><p>进行java文件的编译，最终转换为字节码文件</p><h2 id="类加载时"><a href="#类加载时" class="headerlink" title="类加载时"></a>类加载时</h2><ul><li>类加载器(ClassLoader)：负责加载类文件</li><li>加载(Loading)：读取类文件并创建二进制表示</li><li>连接(Linking)：分为三个子步骤<ul><li>验证：确保类文件结构正确</li><li>准备：为静态变量分配内存并设置初始值</li><li>解析：将符号引用转换为直接引用</li></ul></li><li>初始化(Initialization)：执行类的静态初始化代码</li><li>使用(Using)：程序中使用类</li><li>卸载(Unload)：类被JVM卸载</li></ul><h2 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h2><ul><li>JVM运行时内存区：<ul><li>元空间(Metaspace)：存储类信息、常量和静态变量</li><li>堆(Heap)：存储对象实例和数组</li><li>虚拟机栈(JVM Stack)：包含方法调用的栈帧和局部变量表</li><li>程序计数器(PC Register)：记录当前执行的指令地址</li></ul></li><li>执行引擎(Execution Engine)：<ul><li>解释器(Interpreter)：逐条解释执行字节码</li><li>JIT编译器：将热点代码编译为本地机器码，提高执行效率</li><li>垃圾回收器(GC)：自动管理内存，回收不再使用的对象</li><li>本地方法接口(JNI)：调用本地方法</li><li>本地方法库：C&#x2F;C++实现的方法和操作系统API</li></ul></li><li>执行过程：<ul><li>加载类的字节码</li><li>解析字节码</li><li>根据代码热度决定使用解释执行或JIT编译</li><li>执行生成的机器码</li><li>必要时调用系统API</li><li>自动进行内存管理和垃圾回收</li></ul></li></ul><h1 id="Java代码块的存储位置和加载流程"><a href="#Java代码块的存储位置和加载流程" class="headerlink" title="Java代码块的存储位置和加载流程"></a>Java代码块的存储位置和加载流程</h1><h2 id="类加载流程"><a href="#类加载流程" class="headerlink" title="类加载流程"></a>类加载流程</h2><h3 id="编译时-1"><a href="#编译时-1" class="headerlink" title="编译时"></a>编译时</h3><p>将 Java 源文件编译为字节码文件（.class），期间编译器为每个方法建立局部变量表，<br>使用插槽（slot）索引来管理变量引用和原始类型的存储。</p><p>编译器根据方法类型（静态&#x2F;成员方法）和变量来源（this、参数、局部变量）决定变量在局部变量表中的排布顺序。</p><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><p>类加载器将 class 文件加载到 JVM，并在元空间中构建 class 元信息（如 instanceKlass）<br>将字段、方法、常量池、接口等信息组织到元空间结构中。</p><p>静态方法、final 方法、private 方法在加载时即可确定其调用目标，无需在运行时通过虚方法表进行分派。</p><p>JVM 构建字段布局信息（field layout），根据字段描述符计算字段在类和对象中的偏移地址。</p><p>同时将类常量池中的符号引用解析为直接引用（符号引用 → 具体类、字段或方法的内存地址）。</p><h3 id="运行时-1"><a href="#运行时-1" class="headerlink" title="运行时"></a>运行时</h3><p>当类首次被主动使用（如 new 操作）时，如果尚未初始化，则触发 <code>&lt;clinit&gt;</code> 静态初始化流程。</p><p>JVM 执行静态变量初始化和静态代码块，初始化类的元数据。</p><p>实例化时，JVM 查询该类实例所需的内存布局，并向堆内存申请对应大小空间。</p><p>JVM 在执行构造函数前，会先执行成员变量的初始化表达式和实例初始化块。</p><p>这些初始化代码由编译器编译时插入到 <code>&lt;init&gt;</code> 构造方法的开头。</p><p>构造函数执行时，按局部变量表加载 this 引用和方法参数，进入对象初始化流程。</p><p>JVM  根据字段描述符数组的偏移量以及继承结构，为每个成员变量分配偏移地址，按偏移将数据写入堆中对象实例。</p><p>构造函数执行完成后，将对象的引用（oop 指针）返回给调用者，通常压入操作数栈以供后续使用。</p><p>调用实例方法时，JVM 通过对象中的类元数据指针访问虚方法表（vtable），<br>按方法签名找到对应方法的偏移并执行。</p><p>static,final,private方法 在前期进行了静态绑定，不需要查询虚方法表，通过静态绑定（确定方法地址）执行</p><h2 id="Java成员组件的存储位置和执行时间点"><a href="#Java成员组件的存储位置和执行时间点" class="headerlink" title="Java成员组件的存储位置和执行时间点"></a>Java成员组件的存储位置和执行时间点</h2><table><thead><tr><th>类型</th><th>定义方式</th><th>执行时间点</th><th>存储位置</th><th>描述</th></tr></thead><tbody><tr><td>静态常量</td><td><code>static final</code> 修饰字段</td><td>编译期内联 或 类加载时</td><td>字节码中为常量池引用；可能内联进调用类</td><td>编译器常将其内联优化，若为编译期常量，不依赖类初始化</td></tr><tr><td>静态变量</td><td><code>static</code> 修饰的字段</td><td>类加载时，初始化阶段</td><td>存储在元空间</td><td>所有对象共享；存在于元空间中</td></tr><tr><td>静态初始化块</td><td><code>static &#123; ... &#125;</code></td><td>类加载时，静态变量之后</td><td>存储在元空间</td><td>通常用于复杂的静态初始化逻辑</td></tr><tr><td>实例变量</td><td>普通字段（无 <code>static</code>）</td><td>对象创建时，构造器之前</td><td>存储在堆上</td><td>每个对象独立拥有</td></tr><tr><td>初始化块</td><td><code>&#123; ... &#125;</code> （非 static）</td><td>对象创建时，实例变量之后、构造器之前</td><td>存储在堆上</td><td>主要用于多个构造器共享的初始化代码</td></tr><tr><td>构造器</td><td><code>ClassName(...) &#123; ... &#125;</code></td><td>对象创建时，初始化块之后</td><td>存储在元空间</td><td>实例构造函数，用于完成对象的最终初始化</td></tr><tr><td>方法（成员方法）</td><td><code>public void method() &#123; ... &#125;</code></td><td>被调用时执行</td><td>存储在元空间</td><td>普通成员函数</td></tr><tr><td>静态方法</td><td><code>public static void method() &#123;&#125;</code></td><td>被调用时执行</td><td>存储在元空间</td><td>不依赖对象即可调用的方法</td></tr></tbody></table><h1 id="类模板在内存中的布局"><a href="#类模板在内存中的布局" class="headerlink" title="类模板在内存中的布局"></a>类模板在内存中的布局</h1><p><img src="https://i.111666.best/image/eYQb80Ibcp8dKCKG71JnVA.png" alt="image"></p><h2 id="变量，引用，类型和对象"><a href="#变量，引用，类型和对象" class="headerlink" title="变量，引用，类型和对象"></a>变量，引用，类型和对象</h2><p>通过上面的分析，我们可以看出 ：</p><p>Java 文件中声明的变量名，本质上是对对象的引用标识。在编译和加载过程中，它们会被转化为对具体内存位置的间接访问方式：<br>静态变量会在类加载后映射为元空间中的字段引用；<br>局部变量则被分配到局部变量表中的索引（slot），在运行时与具体对象地址建立关联。</p><p>这使我们可以重新理解 Java 的多态定义：父类类型的引用可以指向子类对象。编译器仅根据引用的静态类型进行方法合法性校验，而对象在运行时的实际类型仍然是子类。当调用实例方法时，JVM 会根据对象实际类型查找其虚方法表（vtable），以确定最终调用的具体方法实现。父类引用的作用仅在于提供一种统一的行为接口，而不关注行为的具体实现。</p><p>所以 ，在java中 ： </p><p>变量名（引用） → 编译，加载后被编译为直接引用或局部变量表中的索引</p><p>类型 → 变量的声明类型决定了其可用的操作（行为接口），而对象的实际类型由右侧的实例化过程决定，并影响运行时的动态方法分派。</p><p>对象 → 对象的存储和行为依赖于修饰词声明和对象的具体创建过程，会分布在 </p><ul><li>代码（常量数值直接嵌入）</li><li>常量池（static final 修饰的非数值类型）</li><li>元空间（静态变量）</li><li>堆（new 或反射构建的对象）</li><li>栈（局部变量）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C的加载过程与内存模型</title>
    <link href="/2025/04/11/C%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/04/11/C%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h1><h3 id="预处理→编译→汇编→链接→装载→执行"><a href="#预处理→编译→汇编→链接→装载→执行" class="headerlink" title="预处理→编译→汇编→链接→装载→执行"></a>预处理→编译→汇编→链接→装载→执行</h3><h3 id="预处理-处理以-开头的预处理指令，例如-include、-define、-ifdef-等。"><a href="#预处理-处理以-开头的预处理指令，例如-include、-define、-ifdef-等。" class="headerlink" title="预处理 : 处理以 # 开头的预处理指令，例如 #include、#define、#ifdef 等。"></a>预处理 : 处理以 <code>#</code> 开头的预处理指令，例如 <code>#include</code>、<code>#define</code>、<code>#ifdef</code> 等。</h3><ul><li>宏展开</li><li>文件包含展开</li><li>条件编译判断</li></ul><h3 id="编译-将预处理后的-C-代码转换成汇编代码。"><a href="#编译-将预处理后的-C-代码转换成汇编代码。" class="headerlink" title="编译 : 将预处理后的 C 代码转换成汇编代码。"></a>编译 : 将预处理后的 C 代码转换成汇编代码。</h3><ul><li>语法分析（解析语法结构）</li><li>语义分析（变量类型检查）</li></ul><h3 id="汇编-将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。"><a href="#汇编-将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。" class="headerlink" title="汇编 : 将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。"></a>汇编 : 将汇编代码转换为目标文件（二进制格式），还不是最终的可执行程序。</h3><h3 id="链接-将一个或多个-o-文件与所需的库文件（比如标准库-libc）合并，解决函数调用、变量引用等符号地址。"><a href="#链接-将一个或多个-o-文件与所需的库文件（比如标准库-libc）合并，解决函数调用、变量引用等符号地址。" class="headerlink" title="链接 : 将一个或多个 .o 文件与所需的库文件（比如标准库 libc）合并，解决函数调用、变量引用等符号地址。"></a>链接 : 将一个或多个 <code>.o</code> 文件与所需的库文件（比如标准库 <code>libc</code>）合并，解决函数调用、变量引用等符号地址。</h3><h3 id="装载-将链接生成的可执行文件加载到内存中，准备好运行环境。"><a href="#装载-将链接生成的可执行文件加载到内存中，准备好运行环境。" class="headerlink" title="装载 : 将链接生成的可执行文件加载到内存中，准备好运行环境。"></a>装载 : 将链接生成的可执行文件加载到内存中，准备好运行环境。</h3><h3 id="执行-程序入口通常是-start-函数，由链接器提供，之后会调用-main-。"><a href="#执行-程序入口通常是-start-函数，由链接器提供，之后会调用-main-。" class="headerlink" title="执行 : 程序入口通常是 _start 函数，由链接器提供，之后会调用 main()。"></a>执行 : <strong>程序入口通常是 <code>_start</code> 函数</strong>，由链接器提供，之后会调用 <code>main()</code>。</h3><ul><li>用户编写的程序从 <code>main()</code> 开始运行。</li><li>程序执行时：<ul><li>初始化全局变量</li><li>执行 <code>main()</code> 函数</li><li>程序返回时调用 <code>exit()</code></li></ul></li></ul><h1 id="加载后的C语言内存结构"><a href="#加载后的C语言内存结构" class="headerlink" title="加载后的C语言内存结构"></a>加载后的C语言内存结构</h1><p>C语言通过链接和装载 将数据分布到一些固定的位置</p><p>.text 代码段 用于放置只读的字节码指令 .rodata 段也会放置在附近</p><p>.data 数据段 用于存放已经初始化全局变量和静态变量</p><p>.bss 段            用于存放未初始化和初始化为0的全局变量和静态变量。</p><p>堆区               用于存放程序执行后动态分配的内存</p><p><img src="https://i.111666.best/image/QRNWyUFQUutntsad2LJIex.png" alt="image"></p><h1 id="变量，指针与类型"><a href="#变量，指针与类型" class="headerlink" title="变量，指针与类型"></a>变量，指针与类型</h1><p>在 C 语言中，变量的声明意味着：编译器会在内存中为这个变量分配一块空间，并为它分配一个可供程序访问的“名称”或“标签”。这个标签（变量名）本质上是对该内存地址的一种<strong>静态引用方式</strong>。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> c = <span class="hljs-number">0</span> ; <br><span class="hljs-comment">// 为变量 c 分配了一个 int 类型（通常是 4 字节）的空间，并初始化为 0</span><br> <br><span class="hljs-type">char</span> a[] = &#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><span class="hljs-comment">// 分配了一个大小为 sizeof(a) 的字符数组，内存上是一块连续空间，存储了具体的字符数据</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">person</span>&#123;</span><br><span class="hljs-type">int</span> age ;<br><span class="hljs-comment">//char name[10]; 无法赋值</span><br><span class="hljs-type">char</span>* name ;<br>&#125; person;<br><span class="hljs-comment">// 为结构体变量 h 分配了一块空间，包含了 int（age）和指针（name）两个成员</span><br>person h;<br>h.name = <span class="hljs-string">&quot;codfish&quot;</span>;<br><span class="hljs-comment">//  找到结构体中的char指针类型结构name, 将该指针指向“codfish” 的地址</span><br>h.age = <span class="hljs-number">12</span>;<br><span class="hljs-comment">//  找到结构体中的intl类型age, 向其所在的内存地址写入“12”</span><br></code></pre></td></tr></table></figure><p>变量名可以看作是对该内存空间的一个<strong>静态引用标签</strong>，通过它我们可以对这块内存进行读写。</p><p>在这个视角下，“<strong>地址</strong>”本身也可以看作是一种值，而<strong>指针类型</strong>就是<strong>专门用于存储地址值的类型</strong>。指针变量的值是一个地址，通过这个地址可以间接访问另一个变量或内存区域。因此，指针本质上是一种<strong>间接寻址的变量类型</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">3</span> ;   <span class="hljs-comment">// 开辟了一块内存空间，存储的值为3</span><br><span class="hljs-type">int</span> * p = &amp;a ;  <span class="hljs-comment">// 开辟了一块内存空间, 存储的值为a的存储地址</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*p);  <span class="hljs-comment">//  打印 p 指向地址中存储的值，即 a</span><br></code></pre></td></tr></table></figure><p>在 C 语言中，<strong>左值（lvalue）</strong>代表的是一个可寻址、可写入的内存位置，是程序运行中频繁操作的对象。而<strong>右值（rvalue）</strong>通常是一个临时值，不具备可寻址性，用完即弃。</p><p>例如：</p><ul><li>变量 <code>a</code> 是左值，你可以取地址 <code>&amp;a</code>，也可以对它赋值。</li><li>表达式 <code>a + 1</code> 是右值，它是一个计算结果，不能取地址。</li><li>字符串 <code>&quot;codfish&quot;</code> 是一个右值常量，其内容在编译期就固定，通常被保存在 <strong>只读数据段（.rodata）</strong> 中。</li></ul><p>因此：</p><blockquote><p>左值是程序运行时可操作的内存实体，而右值更多地体现为临时性和只读性。其中某些右值（如字符串字面量、常量表达式）确实会保存在 .rodata 段中，但大多数右值只是临时计算结果，可能存在于寄存器中，或者根本不会在物理内存中长期保留。</p></blockquote><p>最后回到上文，在结构体中如果定义的char name[10]；则无法使用字符串直接完成初始化。因为这时 结构体中定义的是一个 10个字节长度 char 数组，而接收的右值是一个字符指针。两边的类型并不能匹配，所以无法完成赋值，只能对该数组中的每一位分别进行赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">human.name[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;C&#x27;</span>;<br>human.name[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;o&#x27;</span>;<br>human.name[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;d&#x27;</span>;<br>human.name[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;f&#x27;</span>;<br>human.name[<span class="hljs-number">4</span>] = <span class="hljs-string">&#x27;i&#x27;</span>;<br>human.name[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;s&#x27;</span>;<br>human.name[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>human.name[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>  <br><span class="hljs-comment">// 输出</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ myc]# ./test<br>hello ,<span class="hljs-number">12</span> years old<span class="hljs-string">&#x27;s  Codfish</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bash 快捷指令清单</title>
    <link href="/2025/04/10/Bash-%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <url>/2025/04/10/Bash-%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h1 id="光标移动类"><a href="#光标移动类" class="headerlink" title="光标移动类"></a>光标移动类</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + A</code></td><td>移动光标到行首</td></tr><tr><td><code>Ctrl + E</code></td><td>移动光标到行尾</td></tr><tr><td><code>Alt + B</code></td><td>向左移动一个单词</td></tr><tr><td><code>Alt + F</code></td><td>向右移动一个单词</td></tr><tr><td><code>Ctrl + B</code></td><td>向左移动一个字符</td></tr><tr><td><code>Ctrl + F</code></td><td>向右移动一个字符</td></tr><tr><td><code>Ctrl + XX</code></td><td>在行首与当前位置之间跳转</td></tr></tbody></table><h1 id="编辑命令类"><a href="#编辑命令类" class="headerlink" title="编辑命令类"></a>编辑命令类</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + U</code></td><td>删除从光标到行首的内容</td></tr><tr><td><code>Ctrl + K</code></td><td>删除从光标到行尾的内容</td></tr><tr><td><code>Ctrl + W</code></td><td>删除光标前一个“词”</td></tr><tr><td><code>Alt + D</code></td><td>删除光标后的一个“词”</td></tr><tr><td><code>Ctrl + D</code></td><td>删除光标所在字符（或退出 shell）</td></tr><tr><td><code>Ctrl + H</code></td><td>删除光标前一个字符（退格）</td></tr><tr><td><code>Ctrl + T</code></td><td>交换光标前的两个字符</td></tr><tr><td><code>Alt + T</code></td><td>交换光标前后两个词</td></tr></tbody></table><h1 id="剪切与粘贴"><a href="#剪切与粘贴" class="headerlink" title="剪切与粘贴"></a>剪切与粘贴</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + U/K/W</code></td><td>剪切内容，会保存在剪贴板中</td></tr><tr><td><code>Ctrl + Y</code></td><td>粘贴（插入）刚才剪切的内容</td></tr><tr><td><code>Alt + Y</code></td><td>粘贴历史中更早的剪切内容（循环）</td></tr></tbody></table><h1 id="历史命令操作"><a href="#历史命令操作" class="headerlink" title="历史命令操作"></a>历史命令操作</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + R</code></td><td>反向搜索历史命令</td></tr><tr><td><code>Ctrl + S</code></td><td>正向搜索历史命令（可能需配置）</td></tr><tr><td><code>Ctrl + P</code></td><td>上一条历史命令（等同 ↑）</td></tr><tr><td><code>Ctrl + N</code></td><td>下一条历史命令（等同 ↓）</td></tr><tr><td><code>Alt + .</code></td><td>插入上一条命令的最后一个参数</td></tr></tbody></table><h1 id="命令行组合操作"><a href="#命令行组合操作" class="headerlink" title="命令行组合操作"></a>命令行组合操作</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl + O</code></td><td>执行当前命令并加载下一条历史命令</td></tr><tr><td><code>Ctrl + L</code></td><td>清屏（等同 <code>clear</code> 命令）</td></tr><tr><td><code>Ctrl + G</code></td><td>退出当前操作（如搜索、粘贴等）</td></tr></tbody></table><h1 id="补全与自动化"><a href="#补全与自动化" class="headerlink" title="补全与自动化"></a>补全与自动化</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>补全命令、文件或路径</td></tr><tr><td><code>Alt + ?</code></td><td>显示所有可能的补全项</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis 部署与查询命令</title>
    <link href="/2025/04/10/Redis-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/10/Redis-%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis的安装部署"><a href="#Redis的安装部署" class="headerlink" title="Redis的安装部署"></a>Redis的安装部署</h1><p>使用系统的包管理器来安装redis ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install redis <br></code></pre></td></tr></table></figure><p>或者直接通过容器拉取redis容器 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br>docker run -d   --name my-redis   -p 6379:6379   redis:latest<br></code></pre></td></tr></table></figure><h1 id="Redis-文件配置"><a href="#Redis-文件配置" class="headerlink" title="Redis 文件配置"></a>Redis 文件配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# whereis redis<br>redis: /usr/lib64/redis /etc/redis.conf<br><br><span class="hljs-comment"># 重要配置</span><br><span class="hljs-built_in">bind</span> 127.0.0.1 ::1 <br><span class="hljs-comment"># 配置环回口监听， 如果需要从外部访问要改为 bind 0.0.0.0</span><br>port 6379  <br><span class="hljs-comment"># 传输端口，默认6379</span><br>daemonize no  <br><span class="hljs-comment"># 是否作为后台进程执行，默认是no 即前台运行</span><br>requirepass yourpassword<br><span class="hljs-comment"># 配置数据库密码</span><br><span class="hljs-comment"># 启动redis 服务器</span><br>redis-server  path/your_redis.conf<br><span class="hljs-comment"># 需要使用自定义的配置文件启动，自定义配置才会生效</span><br></code></pre></td></tr></table></figure><h1 id="配置Redis作为服务在服务器上启动"><a href="#配置Redis作为服务在服务器上启动" class="headerlink" title="配置Redis作为服务在服务器上启动"></a>配置Redis作为服务在服务器上启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置.services文件</span><br>[Unit]<br>Description=Redis In-Memory Data Store<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/usr/bin/redis-server /etc/my_redis/redis.conf <span class="hljs-comment"># 定义启动项</span><br>ExecStop=/usr/bin/redis-cli -a yourpassword shutdown <span class="hljs-comment"># 定义结束过程</span><br>Restart=always<br>User=redis<br>Group=redis<br><br><span class="hljs-comment"># Optional: Make sure redis has permission to write to the PID/log/data files</span><br>RuntimeDirectory=redis<br>RuntimeDirectoryMode=0755<br><br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-comment">#需要注意配置为linux服务时，要将daemonize设置为no</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-comment">#重新加载守护进程配置</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> redis<br><span class="hljs-comment">#配置redis开机启动</span><br><span class="hljs-built_in">sudo</span> systemctl start redis<br><span class="hljs-comment">#启动redis</span><br>redis-cli -p your_port -a your_password <br><span class="hljs-comment">#进入redis</span><br></code></pre></td></tr></table></figure><h1 id="Redis支持的数据结构与常用查询"><a href="#Redis支持的数据结构与常用查询" class="headerlink" title="Redis支持的数据结构与常用查询"></a>Redis支持的数据结构与常用查询</h1><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><p>KEYS 查看符合模板的所有key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 匹配符含义</span><br><span class="hljs-comment"># *匹配任意个字符</span><br>127.0.0.1:6380&gt; keys *<br> 1) <span class="hljs-string">&quot;people&quot;</span><br> 2) <span class="hljs-string">&quot;b&quot;</span><br> 3) <span class="hljs-string">&quot;25&quot;</span><br> 4) <span class="hljs-string">&quot;user&quot;</span><br><span class="hljs-comment"># ?匹配任意单个字符</span><br>127.0.0.1:6380&gt; keys ?<br>1) <span class="hljs-string">&quot;b&quot;</span><br><span class="hljs-comment"># [abc]匹配 a 或 b 或 c</span><br>127.0.0.1:6380&gt; keys [eb]<br>1) <span class="hljs-string">&quot;b&quot;</span><br>2) <span class="hljs-string">&quot;e&quot;</span><br></code></pre></td></tr></table></figure><p>DEL 删除一个指定的key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; del e<br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>EXISTS 判断key是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; exists b<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; exists e<br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><p>EXPIRE 给一个key设置有效期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">EXPIRE  item  scends<br>TTL <span class="hljs-comment"># 查询剩余有效期</span><br>127.0.0.1:6380&gt; <span class="hljs-built_in">set</span> a 5<br>OK<br>127.0.0.1:6380&gt; expire a 10<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) 8<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6380&gt; ttl a<br>(<span class="hljs-built_in">integer</span>) -2<br>127.0.0.1:6380&gt; get a<br>(nil)<br></code></pre></td></tr></table></figure><h2 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h2><p>String</p><ul><li>string</li><li>int</li><li>float</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>set&#x2F;get 设置&#x2F;获取 k-v 键值对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> key value<br><span class="hljs-comment"># 设置 k-v 键值对</span><br>get key <br>- value<br><span class="hljs-comment"># 获取对应key的值</span><br></code></pre></td></tr></table></figure><p>mset&#x2F;mget 同时设置&#x2F;获取多组键值对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; mset z 15 y 12 x 18<br>OK<br>127.0.0.1:6380&gt; mget z y x<br>1) <span class="hljs-string">&quot;15&quot;</span><br>2) <span class="hljs-string">&quot;12&quot;</span><br>3) <span class="hljs-string">&quot;18&quot;</span><br><br></code></pre></td></tr></table></figure><p>incr 指定对应键的值自增</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; incr z<br>(<span class="hljs-built_in">integer</span>) 16<br></code></pre></td></tr></table></figure><p>incrby 自增自定义步长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; incrby z 8<br>(<span class="hljs-built_in">integer</span>) 24<br></code></pre></td></tr></table></figure><p>incrbyfloat 增加浮点数数值步长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; incrbyfloat z 0.5<br><span class="hljs-string">&quot;24.5&quot;</span><br></code></pre></td></tr></table></figure><p>setnx  设置值，如果该key已经存在数值，则不会修改原值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; setnx z 12<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6380&gt; get z<br><span class="hljs-string">&quot;24.5&quot;</span><br></code></pre></td></tr></table></figure><p>setex 设置k-v 并设置超时时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; setex z 10 18<br>OK<br>127.0.0.1:6380&gt; ttl z<br>(<span class="hljs-built_in">integer</span>) 8<br>127.0.0.1:6380&gt; ttl z<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; ttl z<br>(<span class="hljs-built_in">integer</span>) -2<br>127.0.0.1:6380&gt; get z<br>(nil)<br></code></pre></td></tr></table></figure><h2 id="Hash-哈希表（散列表）"><a href="#Hash-哈希表（散列表）" class="headerlink" title="Hash 哈希表（散列表）"></a>Hash 哈希表（散列表）</h2><p>hset&#x2F;hget  向哈希表中设置&#x2F;读取k-v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hset m name luccy<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; hget m name<br><span class="hljs-string">&quot;luccy&quot;</span><br></code></pre></td></tr></table></figure><p>hmset&#x2F;hmget 向哈希表中一次性设置多对k-v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hmset o age 12 name joi<br>OK<br>127.0.0.1:6380&gt; hmget o age name<br>1) <span class="hljs-string">&quot;12&quot;</span><br>2) <span class="hljs-string">&quot;joi&quot;</span><br></code></pre></td></tr></table></figure><p>hgetall 获取hask中的所有键值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hgetall o<br>1) <span class="hljs-string">&quot;age&quot;</span><br>2) <span class="hljs-string">&quot;12&quot;</span><br>3) <span class="hljs-string">&quot;name&quot;</span><br>4) <span class="hljs-string">&quot;joi&quot;</span><br></code></pre></td></tr></table></figure><p>hkeys&#x2F;hvals获取所有键&#x2F;值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hkeys o<br>1) <span class="hljs-string">&quot;age&quot;</span><br>2) <span class="hljs-string">&quot;name&quot;</span><br>127.0.0.1:6380&gt; hvals o<br>1) <span class="hljs-string">&quot;12&quot;</span><br>2) <span class="hljs-string">&quot;joi&quot;</span><br></code></pre></td></tr></table></figure><p>HINCRBY 向hash中的某个键指定步长自增</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hincrby o age 3<br>(<span class="hljs-built_in">integer</span>) 15<br></code></pre></td></tr></table></figure><p>HSETNX 向hash中的某个键设置值，如果已经存在值，则保留原值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; hsetnx o age 18<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6380&gt; hget o age<br><span class="hljs-string">&quot;15&quot;</span><br></code></pre></td></tr></table></figure><h2 id="List-列表（实现为一个双向链表）"><a href="#List-列表（实现为一个双向链表）" class="headerlink" title="List 列表（实现为一个双向链表）"></a>List 列表（实现为一个双向链表）</h2><p>LPUSH&#x2F;LPOP 从左侧插入&#x2F;弹出值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; lpush q 28 29 30<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6380&gt; lpop q 1<br>1) <span class="hljs-string">&quot;30&quot;</span><br><span class="hljs-comment"># 插入多个值时，是依次从左侧插入值，所以30处于链表头部</span><br></code></pre></td></tr></table></figure><p>RPUSH&#x2F;RPOP 从右侧插入&#x2F;弹出值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; rpush q 18 19 20<br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6380&gt; rpop q 1<br>1) <span class="hljs-string">&quot;20&quot;</span><br><span class="hljs-comment"># 右侧插入多个值时，每个新插入的值插入在尾部，所以20处于尾部</span><br></code></pre></td></tr></table></figure><p>LRANGE key start end 查询给出范围内的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; lrange q 0 4<br>1) <span class="hljs-string">&quot;29&quot;</span><br>2) <span class="hljs-string">&quot;28&quot;</span><br>3) <span class="hljs-string">&quot;18&quot;</span><br>4) <span class="hljs-string">&quot;19&quot;</span><br></code></pre></td></tr></table></figure><p>BLPOP  设置阻塞时间的右侧弹出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; blpop q 5<br>(nil)<br>(5.07s)<br><span class="hljs-comment"># 注意这里弹出超过list长度的值会弹出最右侧的值</span><br></code></pre></td></tr></table></figure><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h2><p>SADD 向set中添加元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sadd p 1 2 3 4 5<br>(<span class="hljs-built_in">integer</span>) 5<br></code></pre></td></tr></table></figure><p>SREM  移除set中的元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; srem p 1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; sinter p<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br></code></pre></td></tr></table></figure><p>SCARD  返回set中元素的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; scard p<br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><p>SISMEMBER key member 判断是否存在于set中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sismember p 5<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; sismember p 6<br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><p>SMEMBERS 获取所有成员</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; smembers p<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br></code></pre></td></tr></table></figure><p>SINTER key1 key2  求key1 与key2的交集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; smembers p<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br>127.0.0.1:6380&gt; sadd j 2 5 8 9 12<br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6380&gt; sinter p j<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;5&quot;</span><br></code></pre></td></tr></table></figure><p>SDIFF    差集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sdiff p j<br>1) <span class="hljs-string">&quot;3&quot;</span><br>2) <span class="hljs-string">&quot;4&quot;</span><br>127.0.0.1:6380&gt; sdiff j p<br>1) <span class="hljs-string">&quot;8&quot;</span><br>2) <span class="hljs-string">&quot;9&quot;</span><br>3) <span class="hljs-string">&quot;12&quot;</span><br><span class="hljs-comment"># 左并联</span><br></code></pre></td></tr></table></figure><p>SUNION 求key1 key2 的并集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; sunion p j<br>1) <span class="hljs-string">&quot;2&quot;</span><br>2) <span class="hljs-string">&quot;3&quot;</span><br>3) <span class="hljs-string">&quot;4&quot;</span><br>4) <span class="hljs-string">&quot;5&quot;</span><br>5) <span class="hljs-string">&quot;8&quot;</span><br>6) <span class="hljs-string">&quot;9&quot;</span><br>7) <span class="hljs-string">&quot;12&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Sortedset-有序集合"><a href="#Sortedset-有序集合" class="headerlink" title="Sortedset 有序集合"></a>Sortedset 有序集合</h2><p>ZADD  key score member 设置权重并添加成员</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zadd r 24 48<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6380&gt; zadd r 17 56 19 62 4 77<br></code></pre></td></tr></table></figure><p>ZREM key member</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrem r 48<br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>ZSCORE key member  获取成员权重</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zscore r 77<br><span class="hljs-string">&quot;4&quot;</span><br></code></pre></td></tr></table></figure><p>ZRANK key member 获取成员序号 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrank r 62<br>(<span class="hljs-built_in">integer</span>) 3<br></code></pre></td></tr></table></figure><p>ZCARD key 获取元素个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zcard r<br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><p>ZCOUNT key min max 根据权重获取数据的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zcard r<br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><p>ZINCRBY  根据成员，向其权重自增 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zincrby r 2 62<br><span class="hljs-string">&quot;21&quot;</span><br></code></pre></td></tr></table></figure><p>ZRANGE  根据排序筛选范围内的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrange r 2 90<br>1) <span class="hljs-string">&quot;36&quot;</span><br>2) <span class="hljs-string">&quot;56&quot;</span><br>3) <span class="hljs-string">&quot;62&quot;</span><br><br></code></pre></td></tr></table></figure><p>ZRANGEBYSCORE根据权重筛选范围内的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zrangebyscore r 2 90<br>1) <span class="hljs-string">&quot;52&quot;</span><br>2) <span class="hljs-string">&quot;77&quot;</span><br>3) <span class="hljs-string">&quot;36&quot;</span><br>4) <span class="hljs-string">&quot;56&quot;</span><br>5) <span class="hljs-string">&quot;62&quot;</span><br></code></pre></td></tr></table></figure><p>ZDIFF 取多个有序集合的差集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zdiff 2 s r<br>1) <span class="hljs-string">&quot;82&quot;</span><br>2) <span class="hljs-string">&quot;63&quot;</span><br>3) <span class="hljs-string">&quot;48&quot;</span><br></code></pre></td></tr></table></figure><p>ZINTER 取多个有序集合的交集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zinter 3 s r t<br>1) <span class="hljs-string">&quot;56&quot;</span><br></code></pre></td></tr></table></figure><p>ZUNION 取多个有序集合的并集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; zunion 3 s r t<br>1) <span class="hljs-string">&quot;52&quot;</span><br>2) <span class="hljs-string">&quot;76&quot;</span><br>3) <span class="hljs-string">&quot;77&quot;</span><br>4) <span class="hljs-string">&quot;36&quot;</span><br>5) <span class="hljs-string">&quot;82&quot;</span><br>6) <span class="hljs-string">&quot;62&quot;</span><br>7) <span class="hljs-string">&quot;63&quot;</span><br>8) <span class="hljs-string">&quot;48&quot;</span><br>9) <span class="hljs-string">&quot;56&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell VIII 观测</title>
    <link href="/2025/04/09/Shell-VIII-%E8%A7%82%E6%B5%8B/"/>
    <url>/2025/04/09/Shell-VIII-%E8%A7%82%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<p>留坑 perf和ebpf</p>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell VII VIM</title>
    <link href="/2025/04/09/Shell-VII-VIM/"/>
    <url>/2025/04/09/Shell-VII-VIM/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-VII-VIM-md"><a href="#Shell-VII-VIM-md" class="headerlink" title="Shell-VII-VIM.md"></a>Shell-VII-VIM.md</h1><h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><p><strong>Vim</strong> 是一个高度可定制的 <strong>文本编辑器</strong></p><h1 id="启动与退出"><a href="#启动与退出" class="headerlink" title="启动与退出"></a>启动与退出</h1><h2 id="VIM支持三种模式-："><a href="#VIM支持三种模式-：" class="headerlink" title="VIM支持三种模式 ："></a>VIM支持三种模式 ：</h2><ul><li>**普通模式 (Normal)**：默认模式，用于浏览和操作文本。</li><li>**插入模式 (Insert)**：输入文本，按 <code>i</code> 进入。</li><li>**命令模式 (Command-line)**：输入冒号 <code>:</code> 命令。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>vim filename        <span class="hljs-comment"># 打开文件</span><br>vim +n filename     <span class="hljs-comment"># 打开文件并跳转到第n行</span><br><br><span class="hljs-comment"># 退出:</span><br><span class="hljs-comment">#- `:q`：退出</span><br><span class="hljs-comment">#- `:q!`：强制退出不保存</span><br><span class="hljs-comment">#- `:w`：保存</span><br><span class="hljs-comment">#- `:wq` 或 `ZZ`：保存并退出</span><br><span class="hljs-comment">#- `:x`：与 `:wq` 相同</span><br><span class="hljs-comment">#- `:e!`：放弃修改并重新加载</span><br></code></pre></td></tr></table></figure><h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><h3 id="1-基本移动"><a href="#1-基本移动" class="headerlink" title="1. 基本移动"></a>1. 基本移动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">`h`：左，`l`：右，`j`：下，`k`：上<br>`0`：行首，`^`：首个非空字符，`$`：行尾<br>`w`：下一个词，`b`：前一个词，`e`：词尾<br></code></pre></td></tr></table></figure><h3 id="2-高速移动"><a href="#2-高速移动" class="headerlink" title="2. 高速移动"></a>2. 高速移动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">`gg`：跳转到文件开头<br>`G`：跳转到文件末尾<br>`nG`：跳到第 n 行<br>`H`/`M`/`L`：屏幕顶部/中部/底部<br>`Ctrl-d`/`Ctrl-u`：向下/向上滚动半页<br>`%`：匹配括号跳转<br></code></pre></td></tr></table></figure><h1 id="插入与删除"><a href="#插入与删除" class="headerlink" title="插入与删除"></a>插入与删除</h1><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">`i`：当前字符前<br>`I`：行首<br>`a`：当前字符后<br>`A`：行尾<br>`o`：当前行下方新开一行<br>`O`：当前行上方新开一行<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">`x`：删除当前字符<br>`<span class="hljs-built_in">dd</span>`：删除当前行<br>`dw`：删除一个词<br>`d$`：删除至行尾<br>`d0`：删除至行首<br></code></pre></td></tr></table></figure><h1 id="复制、粘贴、撤销"><a href="#复制、粘贴、撤销" class="headerlink" title="复制、粘贴、撤销"></a>复制、粘贴、撤销</h1><h3 id="复制（Yank）"><a href="#复制（Yank）" class="headerlink" title="复制（Yank）"></a>复制（Yank）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">`yy`：复制当前行<br>`yw`：复制一个词<br>`y$`：复制至行尾<br>`v`：进入可视模式，选择后 `y`<br></code></pre></td></tr></table></figure><h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">`p` ：粘贴<br></code></pre></td></tr></table></figure><h3 id="撤销与重做"><a href="#撤销与重做" class="headerlink" title="撤销与重做"></a>撤销与重做</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">`u`：撤销<br>`Ctrl-r`：重做<br></code></pre></td></tr></table></figure><h1 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h1><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">`/pattern`：向下查找<br>`?pattern`：向上查找<br>`n`/`N`：下一个/上一个匹配<br></code></pre></td></tr></table></figure><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">vim<br>复制编辑<br><span class="hljs-symbol">:%s/old/new/g</span>        <span class="hljs-comment"># 替换整篇文件中所有匹配</span><br><span class="hljs-symbol">:</span><span class="hljs-number">1</span>,<span class="hljs-number">10</span>s/old/new/g     <span class="hljs-comment"># 替换第1至10行</span><br><span class="hljs-symbol">:%s/old/new/gc</span>       <span class="hljs-comment"># 替换前确认</span><br><br></code></pre></td></tr></table></figure><h1 id="窗口与标签页"><a href="#窗口与标签页" class="headerlink" title="窗口与标签页"></a>窗口与标签页</h1><h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">`:<span class="hljs-built_in">split</span>` 或 `:sp`：水平分屏<br>`:vsplit` 或 `:vsp`：垂直分屏<br>`Ctrl-w w`：在窗口间切换<br>`Ctrl-w h/j/k/l`：方向切换<br>`Ctrl-w q`：关闭当前窗口<br></code></pre></td></tr></table></figure><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">`:tabnew filename`：新建标签页<br>`:tabn` / `:tabp`：下一个/上一个标签页<br>`gt` / `gT`：标签页切换<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell VI Shell编程</title>
    <link href="/2025/04/09/Shell-VI-Shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/04/09/Shell-VI-Shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-VI-Shell编程-md"><a href="#Shell-VI-Shell编程-md" class="headerlink" title="Shell-VI-Shell编程.md"></a>Shell-VI-Shell编程.md</h1><h1 id="什么是Shell编程？"><a href="#什么是Shell编程？" class="headerlink" title="什么是Shell编程？"></a>什么是Shell编程？</h1><p>Shell 编程是一种基于 Shell 解释器语法规则，结合环境变量和命令行参数，通过组织和控制系统命令以实现自动化任务与进程管理的脚本语言。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>父进程的变量在子进程中不可见，需要使用export声明需要的变量或者使用 . <a href="http://child.sh/">child.sh</a> 执行</p><p>shell中声明变量赋值变量名必须严格紧贴赋值符合“&#x3D;”</p><h2 id="基础变量"><a href="#基础变量" class="headerlink" title="基础变量"></a>基础变量</h2><p>Shell(bash)本身提供了一些基础变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$?                      <span class="hljs-comment">#储存了上一次的执行结果，用于对步骤执行结果的判断</span><br><span class="hljs-variable">$1</span>-<span class="hljs-variable">$9</span>                   <span class="hljs-comment">#储存了传入的位置参数</span><br><span class="hljs-variable">$#</span>                      <span class="hljs-comment">#传递的参数个数</span><br><span class="hljs-variable">$@</span>                      <span class="hljs-comment">#传递的所有参数</span><br>$*                      <span class="hljs-comment">#传递的所有参数 ，作为一个整体</span><br>$$                      <span class="hljs-comment">#进程的pid</span><br>$!                      <span class="hljs-comment">#上一个后台命令的pid</span><br><span class="hljs-variable">$_</span>                      <span class="hljs-comment">#上一个命令的最后一个参数</span><br><span class="hljs-variable">$IFS</span>                  <span class="hljs-comment">#输入字段分隔符（默认是空格、Tab、换行）</span><br><span class="hljs-variable">$RANDOM</span>                <span class="hljs-comment">#生成一个0~32767 的随机数</span><br><span class="hljs-variable">$LINENO</span>                 <span class="hljs-comment">#当前脚本中的行号</span><br><span class="hljs-variable">$UID</span> / <span class="hljs-variable">$EUID</span>          <span class="hljs-comment">#当前用户的 UID（真实/有效）</span><br><span class="hljs-variable">$PWD</span>                  <span class="hljs-comment">#当前目录</span><br><span class="hljs-variable">$HOME</span>                  <span class="hljs-comment">#当前用户的主目录</span><br><span class="hljs-variable">$PATH</span>                  <span class="hljs-comment">#系统查找命令的路径列表</span><br><span class="hljs-variable">$SHELL</span>                <span class="hljs-comment">#当前默认的 shell 路径</span><br></code></pre></td></tr></table></figure><p>通过使用上述的变量，编写第一个shell脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;Give me a name: &quot;</span> name<br><span class="hljs-built_in">echo</span> hello <span class="hljs-variable">$name</span><br><span class="hljs-built_in">echo</span> your home path is <span class="hljs-variable">$HOME</span><br><span class="hljs-built_in">echo</span> current <span class="hljs-built_in">dir</span> is <span class="hljs-variable">$PWD</span><br><br>Give me a name: Codfish<br>hello Codfish<br>your home path is /root<br>current <span class="hljs-built_in">dir</span> is /home/codfish/my_bash<br></code></pre></td></tr></table></figure><h2 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=<span class="hljs-string">&quot;Alice&quot;</span>              <span class="hljs-comment"># 普通变量（默认是字符串）</span><br><span class="hljs-built_in">declare</span> -i age=18         <span class="hljs-comment"># 整数变量</span><br><span class="hljs-built_in">readonly</span> pi=3.14          <span class="hljs-comment"># 只读变量</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/new    <span class="hljs-comment"># 环境变量</span><br>arr=(apple banana cherry) <span class="hljs-comment"># 数组变量</span><br><span class="hljs-built_in">declare</span> -A user           <span class="hljs-comment"># 关联数组（Bash 4+）</span><br>user[<span class="hljs-built_in">id</span>]=001<br></code></pre></td></tr></table></figure><h1 id="引用和执行"><a href="#引用和执行" class="headerlink" title="引用和执行"></a>引用和执行</h1><h2 id="’’，”“，以及"><a href="#’’，”“，以及" class="headerlink" title="&#96;&#96; ,’’，”“，以及$(())"></a>&#96;&#96; ,’’，”“，以及$(())</h2><p>以上都可以作为字符串向shell脚本中的变量赋值。</p><p>反引号 <code>  </code>   ： 获取命令执行后的结果作为变量的值(过时)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hi=<span class="hljs-string">&quot;hello&quot;</span><br>hi1=`<span class="hljs-built_in">echo</span> hello`<br><br>result : hello<br></code></pre></td></tr></table></figure><p>单引号‘’ ： 输出字符串，完全不解析 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>hi2=<span class="hljs-string">&#x27;echo $hi&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi2</span><br><br>result : <span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi1</span><br></code></pre></td></tr></table></figure><p>双引号‘’ ： 输出含变量空格信息 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hi3=<span class="hljs-string">&quot;echo <span class="hljs-variable">$hi</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi3</span><br><br>result : <span class="hljs-built_in">echo</span> hello<br></code></pre></td></tr></table></figure><p>$()’ ： 获取命令执行后的结果作为变量的值,支持嵌套</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hi4=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$hi4</span><br><br>result : hello<br></code></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>算术运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">+   <span class="hljs-comment">#加法</span><br>-   <span class="hljs-comment">#减法</span><br>*    <span class="hljs-comment">#乘法</span><br>/    <span class="hljs-comment">#除法（整数除法）</span><br>%   <span class="hljs-comment">#取余</span><br>++ <span class="hljs-comment">#自增（前/后都支持）</span><br>-- <span class="hljs-comment">#自减</span><br>** <span class="hljs-comment">#幂运算（Bash 4.0+ 支持）</span><br></code></pre></td></tr></table></figure><p>整数比较运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-eq <span class="hljs-comment">#等于</span><br>-ne <span class="hljs-comment">#不等于</span><br>-gt  <span class="hljs-comment">#大于</span><br>-lt <span class="hljs-comment">#小于</span><br>-ge <span class="hljs-comment">#大于等于</span><br>-le <span class="hljs-comment">#小于等于</span><br></code></pre></td></tr></table></figure><p>字符比较运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">= 或 == <span class="hljs-comment">#字符串相等</span><br>!=     <span class="hljs-comment">#字符串不等</span><br>&lt;       <span class="hljs-comment">#字典序小于（仅 [[ ]]）</span><br>&gt;       <span class="hljs-comment">#字典序大于（仅 [[ ]]）</span><br>-z     <span class="hljs-comment">#字符串为空</span><br>-n     <span class="hljs-comment">#字符串非空</span><br></code></pre></td></tr></table></figure><p>逻辑运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">用于 []<br>-a    <span class="hljs-comment">#AND（与）</span><br>-o    <span class="hljs-comment">#OR（或）</span><br>用于 [[]] 或(())<br>&amp;&amp;    <span class="hljs-comment">#与</span><br>`<br>!      <span class="hljs-comment">#非（取反）</span><br></code></pre></td></tr></table></figure><p>文件测试运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">-e            <span class="hljs-comment">#文件存在</span><br>-f            <span class="hljs-comment">#是普通文件</span><br>-d            <span class="hljs-comment">#是目录</span><br>-L            <span class="hljs-comment">#是符号链接</span><br>-r            <span class="hljs-comment">#有读权限</span><br>-w            <span class="hljs-comment">#有写权限</span><br>-x            <span class="hljs-comment">#有执行权限</span><br>-s            <span class="hljs-comment">#文件非空</span><br>file1 -nt file2<span class="hljs-comment">#file1 比 file2 新</span><br>file1 -ot file2<span class="hljs-comment">#file1 比 file2 旧</span><br></code></pre></td></tr></table></figure><p>位运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&amp;             <span class="hljs-comment">#按位与</span><br>^             <span class="hljs-comment">#按位异或</span><br>~             <span class="hljs-comment">#按位取反</span><br>&lt;&lt;           <span class="hljs-comment">#左移</span><br>&gt;&gt;           <span class="hljs-comment">#右移</span><br></code></pre></td></tr></table></figure><p>赋值运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">=             <span class="hljs-comment">#赋值</span><br>+=           <span class="hljs-comment">#加后赋值</span><br>-=           <span class="hljs-comment">#减后赋值</span><br>*=           <span class="hljs-comment">#乘后赋值</span><br>/=           <span class="hljs-comment">#除后赋值</span><br>%=           <span class="hljs-comment">#取余后赋值</span><br>&lt;&lt;=           <span class="hljs-comment">#左移后赋值</span><br>&gt;&gt;=           <span class="hljs-comment">#右移后赋值</span><br>&amp;=           <span class="hljs-comment">#位与赋值</span><br>^=           <span class="hljs-comment">#位异或赋值</span><br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>整数判断&#x2F;运算</strong></th><th><code>(( ))</code></th></tr></thead><tbody><tr><td><strong>字符串判断</strong></td><td><code>[[ ]]</code> （或 <code>[ ]</code>）</td></tr><tr><td><strong>文件测试</strong></td><td><code>[ ]</code></td></tr><tr><td><strong>组合条件（逻辑与或）</strong></td><td><code>[[ ]]</code></td></tr></tbody></table><h1 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h1><h2 id="tips-1"><a href="#tips-1" class="headerlink" title="tips"></a>tips</h2><p>变量不能紧贴判断符号[ ]</p><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ condition1 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-comment"># condition1为真执行</span><br><span class="hljs-keyword">elif</span> [condition2]; <span class="hljs-keyword">then</span><br><span class="hljs-comment"># condition2为真执行</span><br><span class="hljs-keyword">else</span><br><span class="hljs-comment"># 条件均不满足时执行</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> $变量 <span class="hljs-keyword">in</span><br>    模式1)<br>        命令1<br>        ;;<br>    模式2)<br>        命令2<br>        ;;<br>    *)<br>        默认命令<br>        ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> val1 val2 val3; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 循环体</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> ((i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)); <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> [ 条件 ]; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 循环体</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="until语句"><a href="#until语句" class="headerlink" title="until语句"></a>until语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">until</span> [ 条件 ]; <span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 循环体</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="break-中断并跳出当前循环"><a href="#break-中断并跳出当前循环" class="headerlink" title="break 中断并跳出当前循环"></a>break 中断并跳出当前循环</h3><h3 id="continue-跳过本次循环执行下一次循环"><a href="#continue-跳过本次循环执行下一次循环" class="headerlink" title="continue 跳过本次循环执行下一次循环"></a>continue 跳过本次循环执行下一次循环</h3><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> myfunc &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello from myfunc&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">myfunc</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello from myfunc&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数传入"><a href="#参数传入" class="headerlink" title="参数传入"></a>参数传入</h3><blockquote><p>Shell 函数不需要事先声明类型，调用时直接以空格分隔传递参数，函数内部用 $1、$2 等方式访问。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">greet</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$1</span>!&quot;</span><br>&#125;<br><br>greet <span class="hljs-string">&quot;Alice&quot;</span>  <span class="hljs-comment"># 输出：Hello, Alice!</span><br><br></code></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p><code>return</code> 用于返回状态码（0~255），而 <code>echo</code> 用于将值输出给命令替换（<code>$(...)</code>）来接收。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">check_even</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ $(( <span class="hljs-variable">$1</span> % <span class="hljs-number">2</span> )) -eq 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">return</span> 0<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">return</span> 1<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>check_even 4<br><span class="hljs-built_in">echo</span> $?<br><span class="hljs-comment"># 或者 接收echo的输出</span><br><span class="hljs-function"><span class="hljs-title">check_even2</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ $(( <span class="hljs-variable">$1</span> % <span class="hljs-number">2</span> )) -eq 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;even&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;odd&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>res=$(check_even2 5)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$res</span><br><br></code></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 允许定义局部变量</span><br><span class="hljs-function"><span class="hljs-title">myfunc</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> var=<span class="hljs-string">&quot;secret&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Inside: <span class="hljs-variable">$var</span>&quot;</span><br>&#125;<br>myfunc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Outside: <span class="hljs-variable">$var</span>&quot;</span>   <span class="hljs-comment"># var 不存在</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell V grep sed awk</title>
    <link href="/2025/04/09/Shell-V-grep-sed-awk/"/>
    <url>/2025/04/09/Shell-V-grep-sed-awk/</url>
    
    <content type="html"><![CDATA[<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>Shell中 提供了“|” 的管道实现，来帮助用户更快捷的处理过程流</p><p>当运行 a | b | c 后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Parent Process<br>├── fork() --&gt; Child 1 runs `a`<br>│    stdout --&gt; pipe1[1]<br>├── fork() --&gt; Child 2 runs `b`<br>│    stdin &lt;-- pipe1[0], stdout --&gt; pipe2[1]<br>├── fork() --&gt; Child 3 runs `c`<br>     stdin &lt;-- pipe2[0]<br></code></pre></td></tr></table></figure><p>当a命令在向b进行输出后，b就已经开始执行了。</p><p>通过管道的连接，可以让我们更加灵活的获取目标值</p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>grep 支持全局的文本查询和检索</p><p>grep 支持定义搜索内容 + 文件进行筛选</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;partten&quot;</span>  file<br></code></pre></td></tr></table></figure><p>也可以通过其他命令得到stdout 使用管道进行检索</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> file | grep <span class="hljs-string">&quot;partten&quot;</span><br></code></pre></td></tr></table></figure><p>常用的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -i  忽略查询的大小写</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -i a<br>aAbBcCdDeEfF<br><span class="hljs-comment"># -o  只返回匹配规则的值</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -o a<br>a<br><span class="hljs-comment"># -v  反向筛选</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -v a<br>gG hH iI jJ kK lL<br>mM nN<br><span class="hljs-comment"># 基本正则匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -G [A-Z]<br>aA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br><span class="hljs-comment"># 扩展正则匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt | grep -E [a-zA-Z]&#123;2&#125;<br>aA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br><br></code></pre></td></tr></table></figure><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><p>sed 是一个文本替换工具</p><p>sed也可以设置规则 替换文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ hello]# sed <span class="hljs-string">&quot;s/a/A/&quot;</span> hello.txt<br>AA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br></code></pre></td></tr></table></figure><p>也可以接收stdout，修改流中的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;s/a/A/&#x27;</span><br>AA bB cC dD eE fF<br>gG hH iI jJ kK lL<br>mM nN<br></code></pre></td></tr></table></figure><p>注意直接使用 sed 进行替换并不会修改原文本内容，需要修改文本内容需要加”-i”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;[num]s/old/new/[g]&#x27;</span>  进行全局/某一行替换 <br><span class="hljs-string">&#x27;[num]d&#x27;</span>              不显示/删除某一行<br><span class="hljs-string">&#x27;[num][i|a]\[text]&#x27;</span>   在某行前/后 追加文本<br><span class="hljs-string">&#x27;-n  &quot;[num],[num]p&quot;&#x27;</span>  打印行区间文本<br><span class="hljs-string">&#x27;-e&#x27;</span>                  多个执行文本规则      <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#sed &#x27;s/old/new/&#x27;只替换每行第一个匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;s/a/A/&#x27;</span><br>AA bB cC dD eE fF<br>AA hH iI jJ kK lL<br>mM nN<br><span class="hljs-comment"># sed &#x27;s/old/new/g&#x27;替换每行所有匹配</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;s/b/B/g&#x27;</span><br>aA BB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN BB BBB<br><span class="hljs-comment"># sed &#x27;2s/old/new/&#x27;只替换第3行的匹配项</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;3s/b/B/g&#x27;</span><br>aA bB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN BB BBB<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;3s/b/B/&#x27;</span><br>aA bB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN BB bbb<br><span class="hljs-comment"># sed &#x27;2d&#x27;删除第2行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;2d&#x27;</span><br>aA bB cC dD eE fF<br>mM nN bB bbb<br><span class="hljs-comment"># sed &#x27;/^$/d&#x27;删除所有空行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt<br>aA bB cC dD eE fF<br><br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;/^$/d&#x27;</span><br>aA bB cC dD eE fF<br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><span class="hljs-comment">#sed -n &#x27;5p&#x27;只输出第3行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  -n 3p<br>aA hH iI jJ kK lL<br><span class="hljs-comment">#sed -n &#x27;5,10p&#x27;输出第1到3行</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  -n <span class="hljs-string">&#x27;1,3p&#x27;</span><br>aA bB cC dD eE fF<br><br>aA hH iI jJ kK lL<br><span class="hljs-comment"># sed &#x27;1i\This is a new line&#x27;在第1行前插入</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;1i\hello&#x27;</span><br>hello<br>aA bB cC dD eE fF<br><br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><span class="hljs-comment">#sed &#x27;1a\This is after line 3&#x27;在第1行后追加</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  <span class="hljs-string">&#x27;1a\hello&#x27;</span><br>aA bB cC dD eE fF<br>hello<br><br>aA hH iI jJ kK lL<br>mM nN bB bbb<br><span class="hljs-comment">#sed -e &#x27;1d&#x27; -e &#x27;s/foo/bar/g&#x27;删除第1行并替换所有 aA为 zZ</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cat</span> hello.txt  | sed  -e <span class="hljs-string">&#x27;1d&#x27;</span> -e  <span class="hljs-string">&#x27;s/aA/zZ/g&#x27;</span><br><br>zZ hH iI jJ kK lL<br>mM nN bB bbb<br><br></code></pre></td></tr></table></figure><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><p>awk是一种 用于文本处理的脚本语言，它接收每一行输入，并按规则匹配，最终打印</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;pattern &#123; action &#125;&#x27;</span>  filename <br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> filename | awk <span class="hljs-string">&#x27;pattern &#123;action&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>变量 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$0</span>当前行内容<br>$[num]第num列（字段）<br>NF当前行的字段数量<br>NR当前是第几行<br>FS输入字段分隔符（默认是空格）<br>OFS输出字段分隔符（默认也是空格）<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># awk 可以分为多段执行</span><br>awk <span class="hljs-string">&#x27;BEGIN &#123;&#125; &#123;&#125;  END &#123;&#125;&#x27;</span><br><span class="hljs-comment"># BEGIN 开始时执行一次的代码段， END 结束时执行一次的代码段</span><br><span class="hljs-comment"># 行信息放在外面，列信息在&#123;&#125;中操作</span><br><span class="hljs-comment"># &#x27;BEGIN&#x27;，&#x27;END&#x27; 只能进行 分隔符定义，变量赋值</span><br><span class="hljs-comment"># 在中间&#123;&#125; 外面可以设置 NR== 定义行号</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">打印第九列<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l | awk <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span><br>a<br>ate<br>b<br>c<br>d<br>e<br>f<br>g<br>h<br>hello.txt<br>i<br>j<br>k<br>l<br>m<br>n<br>打印第一行<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l | awk <span class="hljs-string">&#x27;NR==2&#123;print &#125;&#x27;</span><br>-rw-r--r-- 1 root root  0 Apr 10 13:58 a<br><br></code></pre></td></tr></table></figure><h1 id="混合查询"><a href="#混合查询" class="headerlink" title="混合查询"></a>混合查询</h1><p>查询一下redis的安装时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# ps -aux | grep -v <span class="hljs-string">&quot;grep&quot;</span> | grep redis | sed <span class="hljs-string">&#x27;s/redis/myredis/&#x27;</span> | grep -v <span class="hljs-string">&quot;sed&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span><br>Apr08<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell IV 网络相关命令</title>
    <link href="/2025/04/09/Shell-IV-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/09/Shell-IV-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-IV-网络相关命令"><a href="#Shell-IV-网络相关命令" class="headerlink" title="Shell-IV-网络相关命令"></a>Shell-IV-网络相关命令</h1><h1 id="什么是网络？"><a href="#什么是网络？" class="headerlink" title="什么是网络？"></a>什么是网络？</h1><p>是OSI的7层模型？ 还是TCP&#x2F;IP 协议簇？wifi&#x2F;移动通信的空口互联？ 又或者是内核进程的虚拟数据转发？</p><ul><li>网络的本质基于预定义的通信协议通过物理介质（或虚拟物理介质如虚拟端口，虚拟mac地址）在设备间进行数据传输的一种组织结构。<ul><li>网络是“有层次”的，无论是固网通信还是空口通信。数据包的传输都在进行一个“封装-解封装”的过程</li><li>网络是“动态”的，端到端的网络通信，需要网卡持续监听外部网络接收到的数据包，并通过中断触发内核来对数据包进行处理</li></ul></li></ul><p>具体的可以查看后续的网络协议解析</p><h1 id="IP-网卡查询"><a href="#IP-网卡查询" class="headerlink" title="IP&#x2F;网卡查询"></a>IP&#x2F;网卡查询</h1><h2 id="ifconfig-old"><a href="#ifconfig-old" class="headerlink" title="ifconfig (old)"></a>ifconfig (old)</h2><p>ifconfig 提供了简单的查询网卡以及ip信息的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500 <span class="hljs-comment">#网络帧大小，决定了转发的二层网络包的最大长度</span><br>        inet 172.16.243.147  netmask 255.255.240.0  broadcast 172.16.255.255 <br>        <span class="hljs-comment">#  ipv4 地址         掩码                   广播地址</span><br>        inet6 fe80::216:3eff:fe4e:4cd3  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        <span class="hljs-comment">#  ipv6 地址                    掩码</span><br>        ether 00:16:3e:4e:4c:d3  txqueuelen 1000  (Ethernet)<br>        <span class="hljs-comment">#  以太网mac地址                 最大传输队列长度</span><br>        RX packets 4986558  bytes 3656623569 (3.4 GiB)<br>        <span class="hljs-comment">#  接收到的数据统计</span><br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        <span class="hljs-comment">#  异常，丢包统计</span><br>        TX packets 3390873  bytes 827044117 (788.7 MiB)<br>        <span class="hljs-comment">#  发送的数据统计</span><br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><span class="hljs-comment">#  异常，丢包统计</span><br></code></pre></td></tr></table></figure><h2 id="ip-addr"><a href="#ip-addr" class="headerlink" title="ip addr"></a>ip addr</h2><p>新一代的ip 网络查询&#x2F;配置命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:16:3e:4e:4c:d3 brd ff:ff:ff:ff:ff:ff<br>    altname enp0s5<br>    altname ens5<br>    inet 172.16.243.147/20 brd 172.16.255.255 scope global dynamic noprefixroute eth0<br>       valid_lft 1891653623sec preferred_lft 1891653623sec<br>    inet6 fe80::216:3eff:fe4e:4cd3/64 scope <span class="hljs-built_in">link</span><br>       valid_lft forever preferred_lft forever<br>       <br>       <br>ip addr add 10.0.0.1/24 dev eth0          <span class="hljs-comment"># 添加 IP</span><br>ip addr del 10.0.0.1/24 dev eth0          <span class="hljs-comment"># 删除 IP</span><br>ip addr flush dev eth0                    <span class="hljs-comment"># 清空 IP</span><br>ip addr show                              <span class="hljs-comment"># 查看所有地址</span><br>ip addr show dev eth0                     <span class="hljs-comment"># 查看某网卡的地址信息         </span><br><br></code></pre></td></tr></table></figure><h2 id="ip-link"><a href="#ip-link" class="headerlink" title="ip link"></a>ip link</h2><p>查询 网络链路状态，虚拟网卡配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# ip <span class="hljs-built_in">link</span> show<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:16:3e:4e:4c:d3 brd ff:ff:ff:ff:ff:ff<br>    altname enp0s5<br>    altname ens5<br>   <br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c up                      <span class="hljs-comment"># 设置网络接口打开</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c down                    <span class="hljs-comment"># 设置网络接口关闭</span><br>ip <span class="hljs-built_in">link</span> add veth-c <span class="hljs-built_in">type</span> veth peer name veth-br  <span class="hljs-comment"># 设置虚拟网络（定义的一对peer veth网络）</span><br>ip <span class="hljs-built_in">link</span> del veth-c                         <span class="hljs-comment"># 删除网络</span><br></code></pre></td></tr></table></figure><h2 id="ip-netns"><a href="#ip-netns" class="headerlink" title="ip netns"></a>ip netns</h2><p>创建&#x2F;设置 linux 网络命名空间 </p><p>网络命名可以将其所在进程的网络与宿主机进行隔离</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip netns add net1                          <span class="hljs-comment"># 添加网络命名空间</span><br>ip netns <span class="hljs-built_in">exec</span> net1 ip addr                 <span class="hljs-comment"># 在宿主机向命名空间内执行命令</span><br></code></pre></td></tr></table></figure><h1 id="寻址-路由"><a href="#寻址-路由" class="headerlink" title="寻址&#x2F;路由"></a>寻址&#x2F;路由</h1><p>IP所处的网络层 主要负责接入网络的设备寻址和数据转发</p><h2 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h2><p>arp 协议是工作在数据链路层-网络层中间的 数据协议，其通过广播模式向广播域内所有设备请求其所需ip地址对应的mac地址，通常用于网络接入（查找网关），和冲突检测（是否有同ip设备上线同一局域网）。使用arp 命令可以查看本地的ip地址映射表项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# arp -a<br>? (10.88.0.11) at be:34:94:fb:34:f6 [ether] on cni-podman0<br>? (10.88.0.10) at &lt;incomplete&gt; on cni-podman0<br><br></code></pre></td></tr></table></figure><h2 id="ip-route"><a href="#ip-route" class="headerlink" title="ip route"></a>ip route</h2><p>提供了本地路由的查询功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# ip route<br>default via 172.16.255.253 dev eth0 proto dhcp src 172.16.243.147 metric 100<br><span class="hljs-comment"># 网段  网关                   网卡                源地址</span><br>10.88.0.0/16 dev cni-podman0 proto kernel scope <span class="hljs-built_in">link</span> src 10.88.0.1<br>172.16.240.0/20 dev eth0 proto kernel scope <span class="hljs-built_in">link</span> src 172.16.243.147 metric 100<br><br>ip route add 10.0.0.0/24 via 192.168.1.1 dev eth0  <span class="hljs-comment"># 添加路由</span><br>ip route del 10.0.0.0/24                           <span class="hljs-comment"># 删除路由</span><br><br></code></pre></td></tr></table></figure><h1 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h1><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -tuln        <span class="hljs-comment">#显示所有正在监听的 TCP/UDP 端口（数字显示）</span><br>netstat -tulnp      <span class="hljs-comment">#显示监听端口及对应进程 PID/名称</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# netstat -tulnp<br>Active Internet connections (only servers)<br>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name<br><span class="hljs-comment">#协议 接收队列 发送队列  地址                   传输的外部地址                    进程号/进程</span><br>tcp        0      0 0.0.0.0:6380            0.0.0.0:*               LISTEN      1018202/redis-serve<br>tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd<br><br>netstat -an          <span class="hljs-comment">#显示所有连接（包括监听 + 活跃连接）</span><br>Proto RefCnt Flags       Type       State         I-Node   Path<br><span class="hljs-comment">#协议 引用次数 状态      传输类型    状态          inode编号 路径</span><br>unix  2      [ ACC ]     STREAM     LISTENING     18400306 /run/systemd/private<br>unix  2      [ ]         DGRAM                    17763560 /run/user/0/systemd/notify<br><br>netstat -r          <span class="hljs-comment">#显示路由表（等同于 route -n）</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# netstat -r<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface<br><span class="hljs-comment">#目的网段       网关            掩码         TCP最大传输大小和窗口大小     接口</span><br>default         _gateway        0.0.0.0         UG        0 0          0 eth0<br>10.88.0.0       0.0.0.0         255.255.0.0     U         0 0          0 cni-podman0<br>172.16.240.0    0.0.0.0         255.255.240.0   U         0 0          0 eth0<br><br>netstat -i           <span class="hljs-comment">#显示所有网卡接口的统计数据（收发包、丢包等）</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# netstat -i<br>Kernel Interface table<br>Iface             MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg<br><span class="hljs-comment">#接口         最大传输 接收正常  异常   丢包   溢出    发送正常   异常  丢包   溢出</span><br>cni-podman0      1500    44683      0      0 0         53354      0      0      0 BMRU<br>eth0             1500  4990035      0      0 0       3393020      0      0      0 BMRU<br>lo              65536  1215234      0      0 0       1215234      0      0      0 LRU<br>vethfcdc13a0     1500    37461      0      0 0         45818      0      0      0 BMRU<br><br>netstat -s          <span class="hljs-comment">#显示协议数据统计（TCP/UDP/ICMP等）</span><br></code></pre></td></tr></table></figure><h2 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h2><p>socket 信息查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">ss -t        <span class="hljs-comment"># 查询tcp 信息</span><br>ss -u        <span class="hljs-comment"># 查询udp 信息</span><br>ss -tulnp    <span class="hljs-comment"># 查询tcp/udp 以及端口和进程信息</span><br>Netid     State      Recv-Q     Send-Q         Local Address:Port           Peer Address:Port     Process<br><span class="hljs-comment">#协议id    状态      接收统计    发送统计          本地ip地址:端口              对端ip地址:端口      进程信息                         </span><br>udp       UNCONN     0          0                    0.0.0.0:111                 0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">5</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">34</span>))<br>udp       UNCONN     0          0                  127.0.0.1:323                 0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;chronyd&quot;,pid=<span class="hljs-number">574</span>,fd=<span class="hljs-number">5</span>))<br>udp       UNCONN     0          0                       [::]:111                    [::]:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">7</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">36</span>))<br>udp       UNCONN     0          0                      [::1]:323                    [::]:*         <span class="hljs-built_in">users</span>:((&quot;chronyd&quot;,pid=<span class="hljs-number">574</span>,fd=<span class="hljs-number">6</span>))<br>tcp       LISTEN     0          511                  0.0.0.0:6380                0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;redis-server&quot;,pid=<span class="hljs-number">1018202</span>,fd=<span class="hljs-number">6</span>))<br>tcp       LISTEN     0          4096                 0.0.0.0:111                 0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">4</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">33</span>))<br>tcp       LISTEN     0          511                  0.0.0.0:80                  0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;nginx&quot;,pid=<span class="hljs-number">990145</span>,fd=<span class="hljs-number">6</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990144</span>,fd=<span class="hljs-number">6</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990143</span>,fd=<span class="hljs-number">6</span>))<br>tcp       LISTEN     0          128                  0.0.0.0:22                  0.0.0.0:*         <span class="hljs-built_in">users</span>:((&quot;sshd&quot;,pid=<span class="hljs-number">1021</span>,fd=<span class="hljs-number">3</span>))<br>tcp       LISTEN     0          4096                    [::]:111                    [::]:*         <span class="hljs-built_in">users</span>:((&quot;rpcbind&quot;,pid=<span class="hljs-number">537</span>,fd=<span class="hljs-number">6</span>),(&quot;systemd&quot;,pid=<span class="hljs-number">1</span>,fd=<span class="hljs-number">35</span>))<br>tcp       LISTEN     0          511                     [::]:80                     [::]:*         <span class="hljs-built_in">users</span>:((&quot;nginx&quot;,pid=<span class="hljs-number">990145</span>,fd=<span class="hljs-number">7</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990144</span>,fd=<span class="hljs-number">7</span>),(&quot;nginx&quot;,pid=<span class="hljs-number">990143</span>,fd=<span class="hljs-number">7</span>))<br>tcp       LISTEN     0          128                     [::]:22                     [::]:*         <span class="hljs-built_in">users</span>:((&quot;sshd&quot;,pid=<span class="hljs-number">1021</span>,fd=<span class="hljs-number">4</span>))<br><br></code></pre></td></tr></table></figure><h1 id="连通性-请求查询"><a href="#连通性-请求查询" class="headerlink" title="连通性&#x2F;请求查询"></a>连通性&#x2F;请求查询</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>ping命令用来检查ip是否可以与对端正常通信，底层使用的是icmp协议。icmp协议中定义了一个字段（ttl  time to live 存活时间）。这里的time 是在网络中传输时，没经过一个网络设备则会-1。当为0时数据包被丢弃。linux中的ping持续执行，window 会请求4次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping 8.8.8.8<br>64 bytes from 8.8.8.8: icmp_seq=1 ttl=54 <span class="hljs-keyword">time</span>=30.4 ms<br>ping -c 5  8.8.8.8         <span class="hljs-comment">#  向8.8.8.8 ip 发起5次ping 请求</span><br>ping -I eth0 8.8.8.8       <span class="hljs-comment">#  指定网卡eth0 发起ping 请求</span><br></code></pre></td></tr></table></figure><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ _posts]# nslookup baidu.com<br>Server:         100.100.2.136<br>Address:        100.100.2.136#53<br><br>Non-authoritative answer:<br>Name:   baidu.com<br>Address: 39.156.66.10<br>Name:   baidu.com<br>Address: 110.242.68.66<br><br></code></pre></td></tr></table></figure><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>通过命令行创建http请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl www.baidu.com<br><br>curl -d <span class="hljs-string">&quot;username=user&amp;password=pass&quot;</span> https://example.com/login<br><span class="hljs-comment"># 携带消息体发送post 请求</span><br>curl -X POST https://api.example.com/data \<br>     -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>     -d <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30&#125;&#x27;</span><br><span class="hljs-comment"># 传递json 数据</span><br>curl -o file.txt https://example.com/file.txt<br><span class="hljs-comment"># 下载文件到本地</span><br>curl --cookie <span class="hljs-string">&quot;session=abc123&quot;</span> https://example.com<br><span class="hljs-comment"># 定义cookie信息</span><br>curl -I https://example.com<br><span class="hljs-comment"># 获取响应头</span><br>curl -i https://example.com<br><span class="hljs-comment"># 获取响应</span><br>curl -L https://short.url/link<br><span class="hljs-comment"># 跟踪重定向</span><br>curl -F <span class="hljs-string">&quot;file=@localfile.txt&quot;</span> https://example.com/upload<br><span class="hljs-comment"># 上传文件</span><br><span class="hljs-comment"># 其他参数 :</span><br><span class="hljs-comment"># -v：详细模式（debug 信息）</span><br><span class="hljs-comment"># -s：静默模式（不输出进度条）</span><br><span class="hljs-comment"># -sS：静默但出错时显示错误信息（常用组合）</span><br><span class="hljs-comment"># -w &#x27;%&#123;http_code&#125;&#x27;：输出 HTTP 状态码</span><br><span class="hljs-comment"># -k：忽略 HTTPS 证书错误（测试用）</span><br></code></pre></td></tr></table></figure><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://example.com/file.zip<br><span class="hljs-comment"># 获取文件</span><br>wget -O newname.zip https://example.com/file.zip<br><span class="hljs-comment"># 保存文件</span><br>wget -c https://example.com/large.iso<br><span class="hljs-comment"># 断点续传</span><br>wget -r https://example.com/<br><span class="hljs-comment"># 递归下载</span><br>wget --mirror --convert-links --adjust-extension --page-requisites --no-parent https://example.com<br><span class="hljs-comment"># 下载到本地，离线浏览</span><br>wget --header=<span class="hljs-string">&quot;Authorization: Bearer TOKEN123&quot;</span> https://api.example.com/data.json<br>wget --user=admin --password=123 https://example.com/protected/file.zip<br><span class="hljs-comment"># 配置认证信息</span><br>wget -i urls.txt<br><br></code></pre></td></tr></table></figure><h2 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h2><p>简易tcp连接工具 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -l 1234         <span class="hljs-comment"># 创建TCP 服务器</span><br>nc localhost 1234  <span class="hljs-comment"># 连接</span><br>nc -l 1234 &gt; received.txt <span class="hljs-comment"># 开启窗口发送数据</span><br>nc [ip] 1234 &lt; file.txt   <span class="hljs-comment"># 向服务端端口发送的数据</span><br><br></code></pre></td></tr></table></figure><h2 id="iperf"><a href="#iperf" class="headerlink" title="iperf"></a>iperf</h2><p>流量性能测试工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">iperf -s                     <span class="hljs-comment">#开启服务端，默认监听5021端口</span><br>iperf -c  [ip]               <span class="hljs-comment">#向目的端口发送10s tcp流量</span><br>iperf -c server_ip -u -b 100M#向服务端发送100M的 udp流量<br><br>-r  <span class="hljs-comment">#双向测试</span><br>-P  <span class="hljs-comment">#多线程</span><br></code></pre></td></tr></table></figure><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><p>数据流量捕获工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i eth0    <span class="hljs-comment"># 捕获指定端口</span><br>tcpdump host [ip]  <span class="hljs-comment"># 获取目标ip的流量</span><br>tcpdump port       <span class="hljs-comment"># 监听指定端口 </span><br>tcpdump -i eth0 src 192.168.1.1 and dst port 80  <span class="hljs-comment">#接收源为192.168.1.1的 目的端口为80的包</span><br>tcpdump -w capture.pcap -i eth0  <span class="hljs-comment">#捕获包到文件</span><br>tcpdump -i eth0 udp port 53   <span class="hljs-comment">#捕获dns 流量包</span><br><br><span class="hljs-comment"># -i &lt;接口&gt;: 指定要监听的网络接口（如 eth0, wlan0）</span><br><span class="hljs-comment"># -c &lt;数量&gt;: 限制捕获的数据包数量</span><br><span class="hljs-comment"># -n: 不将地址解析为主机名（提高性能）</span><br><span class="hljs-comment"># -t: 不显示时间戳</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell III 内存/IO/文件系统相关命令</title>
    <link href="/2025/04/09/Shell-III-%E5%86%85%E5%AD%98-IO-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/09/Shell-III-%E5%86%85%E5%AD%98-IO-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="free-查看内存使用"><a href="#free-查看内存使用" class="headerlink" title="free 查看内存使用"></a>free 查看内存使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# free -h<br>              total        used        free      shared  buff/cache   available<br>Mem:          1.8Gi       499Mi       747Mi       2.0Mi       784Mi       1.3Gi<br>Swap:            0B          0B          0B<br><br></code></pre></td></tr></table></figure><h1 id="iostat-查看-CPU-和磁盘-I-O-性能"><a href="#iostat-查看-CPU-和磁盘-I-O-性能" class="headerlink" title="iostat 查看 CPU 和磁盘 I&#x2F;O 性能"></a>iostat 查看 CPU 和磁盘 I&#x2F;O 性能</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# iostat<br>Linux 5.10.134-18.al8.x86_64 (iZbp19tqlmjz1dmnm8w43uZ)  04/10/2025      _x86_64_        (2 CPU)<br><br>avg-cpu:  %user   %<span class="hljs-built_in">nice</span> %system %iowait  %steal   %idle<br>           0.87    0.00    0.49    0.01    0.00   98.62<br><br>Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>vda               0.82         6.03        12.57   10324570   21525204<br><br></code></pre></td></tr></table></figure><h1 id="lsblk-显示块设备信息"><a href="#lsblk-显示块设备信息" class="headerlink" title="lsblk 显示块设备信息"></a>lsblk 显示块设备信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# lsblk<br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>vda    253:0    0   40G  0 disk<br>├─vda1 253:1    0    2M  0 part<br>├─vda2 253:2    0  200M  0 part /boot/efi<br>└─vda3 253:3    0 39.8G  0 part /<br><br></code></pre></td></tr></table></figure><h1 id="df-查看设备与目录的挂载关系，使用情况"><a href="#df-查看设备与目录的挂载关系，使用情况" class="headerlink" title="df 查看设备与目录的挂载关系，使用情况"></a>df 查看设备与目录的挂载关系，使用情况</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# <span class="hljs-built_in">df</span> -h<br>Filesystem      Size  Used Avail Use% Mounted on<br>devtmpfs        916M     0  916M   0% /dev<br>tmpfs           936M   84K  936M   1% /dev/shm<br>tmpfs           936M  764K  935M   1% /run<br>tmpfs           936M     0  936M   0% /sys/fs/cgroup<br>/dev/vda3        40G   14G   25G  36% /<br>/dev/vda2       200M  5.8M  195M   3% /boot/efi<br>tmpfs           188M     0  188M   0% /run/user/0<br>shm              63M     0   63M   0% /var/lib/containers/storage/overlay-containers/1936bab81ca270b4558231e4a09ddb43a3274744bbfcf280791138efb612ffd0/userdata/shm<br>overlay          40G   14G   25G  36% /var/lib/containers/storage/overlay/0a4e05c5de62dfb74f643f918af2c216ef814b2a8ad5cd1b60ac96d4c514c654/merged<br><br></code></pre></td></tr></table></figure><h1 id="du-path-h-遍历文件目录，查看占用空间大小"><a href="#du-path-h-遍历文件目录，查看占用空间大小" class="headerlink" title="du [path] -h 遍历文件目录，查看占用空间大小"></a>du [path] -h 遍历文件目录，查看占用空间大小</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ codfish]# <span class="hljs-built_in">du</span> /home/codfish/hello/ -h<br>12K     /home/codfish/hello/<br><br></code></pre></td></tr></table></figure><h1 id="lsof-查看哪些进程在访问当前文件目录"><a href="#lsof-查看哪些进程在访问当前文件目录" class="headerlink" title="lsof 查看哪些进程在访问当前文件目录"></a>lsof 查看哪些进程在访问当前文件目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">COMMAND     PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME<br>bash    1022674 root  cwd    DIR  253,3     4096 1184776 .   <span class="hljs-comment"># shell 在当前目录执行</span><br>lsof    1022812 root  cwd    DIR  253,3     4096 1184776 .   <span class="hljs-comment"># shel执行lsof创建的进程在当前目录</span><br>lsof    1022813 root  cwd    DIR  253,3     4096 1184776 .   <span class="hljs-comment"># lsof 创建的子进程</span><br><br>COMMAND发起该文件访问的进程名（可执行文件名）<br>PID    进程 ID<br>TID    线程 ID（Thread ID）— 某些工具如 lsof -T 或 proc 工具可能列出具体线程<br>TASKCMD如果有线程，每个线程的名字（比如 Java 线程名、C++的 pthread 名称等）<br>USER  拥有该进程的用户<br>FD    文件描述符（File Descriptor），比如 cwd, mem, txt, 0u, 1w 等<br>TYPE  打开的文件类型，比如：REG（普通文件），DIR（目录），CHR（字符设备），FIFO（管道）等<br>DEVICE文件所在设备的主次设备号，格式通常为 major:minor（比如 8:1 代表 /dev/sda1）<br>SIZE/OFF文件的大小或文件偏移量<br>NODE  文件在设备上的 inode 编号<br>NAME  文件名（或资源名），即被访问的实际对象路径<br></code></pre></td></tr></table></figure><h1 id="mount-完成-块设备-文件系统-资源挂载"><a href="#mount-完成-块设备-文件系统-资源挂载" class="headerlink" title="mount 完成 块设备-文件系统-资源挂载"></a>mount 完成 块设备-文件系统-资源挂载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/sdb1  <span class="hljs-comment"># 定义块设备的文件系统</span><br>mount /dev/sdb1 /mnt/mydisk  <span class="hljs-comment"># 挂载文件系统到挂载点</span><br><br><span class="hljs-comment"># 或者直接 指定文件系统到挂载点</span><br>mount -t &lt;文件系统类型&gt; &lt;设备&gt; &lt;挂载点&gt;<br>mount -t proc proc /proc<br><span class="hljs-comment"># 挂载进程 这里的/proc</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell II 进程相关命令</title>
    <link href="/2025/04/09/%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/04/09/%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h1><blockquote><p>进程可以看作是操作系统对资源的基本调度单位，通过进程的调度机制，系统得以协调各项任务的执行。</p></blockquote><p>进程的调用流程 → 通过父进程创建子进程创建新的堆栈结构 → 子进程加载自身需要的资源到堆栈中 → 堆栈中执行命令 → 执行到main函数返回或者进程异常退出</p><h1 id="ps-查看进程指令"><a href="#ps-查看进程指令" class="headerlink" title="ps  查看进程指令"></a>ps  查看进程指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">参数列表<br>-e 或 -A  显示所有进程<br>-f        完整格式<br>-u        指定用户进程<br>-x        无终端进程<br>-o      自定义输出字段<br>-C        指定程序进程<br><br>ps -ef    全部进程<br>ps aux    全部进程 BSD风格<br>ps -u     指定用户进程<br><br>ps aux | awk <span class="hljs-string">&quot;NR&lt;=2&quot;</span><br>USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root           1  0.0  0.5  21500 11112 ?        Ss   Mar21   0:16 /usr/lib/systemd/systemd --system --deserialize 23<br><br>字段信息<br>USER :  用户名<br>PID :   进程号<br>%CPU :  CPU占用率<br>%MEM :  内存使用率<br>VSZ  :  虚拟内存大小<br>RSS  :  实际占用内存<br>TTY  :  无终端为 ？<br>START : 启动时间<br>TIME  : 占用CPU的时间<br>CMD  :  执行的命令<br>STAT :  进程状态<br><br>STAT状态含义<br>R正在运行<br>S休眠中（可中断）<br>D不可中断的休眠<br>T停止（如 Ctrl+Z）<br>Z僵尸进程<br>X死亡状态<br><br></code></pre></td></tr></table></figure><h1 id="top-动态打印所有进程的性能指标"><a href="#top-动态打印所有进程的性能指标" class="headerlink" title="top 动态打印所有进程的性能指标"></a>top 动态打印所有进程的性能指标</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">top - 22:12:10 up 19 days,  8:24,  1 user,  load average: 0.00, 0.00, 0.00<br><span class="hljs-comment"># 22:12:10 → 当前系统时间。</span><br><span class="hljs-comment"># up 19 days, 8:24 → 系统已经运行了 19 天 8 小时 24 分钟。</span><br><span class="hljs-comment"># 1 user → 当前登录系统的用户数。</span><br><span class="hljs-comment"># load average: 0.00, 0.00, 0.00 → 系统平均负载：</span><br><span class="hljs-comment"># 分别表示过去 1 分钟、5 分钟、15 分钟的平均负载（任务队列长度）。等待执行的任务个数</span><br> <br>Tasks: 111 total,   1 running, 110 sleeping,   0 stopped,   0 zombie<br><span class="hljs-comment"># 111 total → 当前系统总共的进程数。</span><br><span class="hljs-comment"># 1 running → 正在运行的进程（状态是 R）。</span><br><span class="hljs-comment"># 110 sleeping → 休眠状态的进程（大多数进程处于这个状态）。</span><br><span class="hljs-comment"># 0 stopped → 被终止或挂起（T）的进程数。</span><br><span class="hljs-comment"># 0 zombie → 僵尸进程数，应该为 0，非 0 可能代表父进程没处理子进程退出状态。</span><br>%Cpu(s):  0.3 us,  0.2 sy,  0.0 ni, 99.2 <span class="hljs-built_in">id</span>,  0.0 wa,  0.2 hi,  0.2 si,  0.0 st<br><span class="hljs-comment"># us用户态（user）进程占用 CPU 百分比（不包括 nice）</span><br><span class="hljs-comment"># sy内核态（system）进程占用 CPU 百分比</span><br><span class="hljs-comment"># ni用户进程 nice 优先级调整后占用的 CPU 百分比</span><br><span class="hljs-comment"># id空闲（idle）CPU 百分比（越高越空闲）</span><br><span class="hljs-comment"># wa等待 I/O 的时间占比（例如磁盘慢时）</span><br><span class="hljs-comment"># hi硬中断（hardware IRQ）占用</span><br><span class="hljs-comment"># si软中断（software IRQ）占用</span><br><span class="hljs-comment"># st被虚拟机偷走的 CPU（steal time）</span><br>MiB Mem :   1871.0 total,    761.0 free,    498.8 used,    770.9 buff/cache<br><span class="hljs-comment"># total总内存</span><br><span class="hljs-comment"># free未使用的内存</span><br><span class="hljs-comment"># used实际已用的内存（不包括 cache/buffer）</span><br><span class="hljs-comment"># buff/cache系统缓存和缓冲使用的内存（可回收）</span><br>MiB Swap:      0.0 total,      0.0 free,      0.0 used.   1372.2 avail Mem<br><span class="hljs-comment"># total交换分区总量（你这里没有启用 swap）</span><br><span class="hljs-comment"># free空闲的 swap 空间</span><br><span class="hljs-comment"># used已用 swap 空间</span><br><span class="hljs-comment"># avail Mem可用内存：包含 free + reclaimable cache，更真实地反映可用内存</span><br><br> PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND<br> 1239 root      20   0  222028  97448   7212 S   0.7   5.1 216:30.97 AliYunDunMonito<br><br></code></pre></td></tr></table></figure><h1 id="vmstat-查看系统内存，IO-CPU信息"><a href="#vmstat-查看系统内存，IO-CPU信息" class="headerlink" title="vmstat  查看系统内存，IO, CPU信息"></a>vmstat  查看系统内存，IO, CPU信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">vmstat<br>procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="hljs-keyword">in</span>   cs us sy <span class="hljs-built_in">id</span> wa st<br> 2  0      0 778652 103472 686320    0    0     3     6    7    8  1  0 99  0  0<br><br>procs 进程<br>r可运行进程数（run queue），表示 CPU 等待队列长度<br>b正在等待 I/O 的进程数量（blocked）<br><br>memory 内存<br>swpd使用的 swap 空间（单位 KB）<br>free空闲物理内存<br>buff用作 buffer 的内存（主要缓存块设备元数据）<br>cache用作 cache 的内存（主要缓存文件内容）<br><br>swap 交换<br>si从 swap 中读入的数据量（KB/s）<br>so写入 swap 的数据量（KB/s）<br><br>io 磁盘读写<br>bi从块设备读入数据的速率（block <span class="hljs-keyword">in</span>，KB/s）<br>bo写到块设备的数据速率（block out，KB/s）<br><br>system 系统级操作<br><span class="hljs-keyword">in</span>每秒中断次数（包括硬件中断 + 软件中断）<br>cs每秒上下文切换次数（context switch）<br><br>cpu  cpu时间百分比<br>us用户态 CPU 使用百分比<br>sy内核态 CPU 使用百分比<br><span class="hljs-built_in">id</span>空闲时间百分比<br>wa等待 I/O 百分比（高说明 I/O 慢）<br>st被虚拟机“偷走”的 CPU 时间（只在虚拟化环境中有用）<br></code></pre></td></tr></table></figure><h1 id="pidstat"><a href="#pidstat" class="headerlink" title="pidstat"></a>pidstat</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">pidstat -p 1239 1 1<br>查询 进程号1239的信息<br>Linux 5.10.134-18.al8.x86_64 (iZbp19tqlmjz1dmnm8w43uZ)  04/09/2025      _x86_64_        (2 CPU)<br><br>10:56:06 PM   UID       PID    %usr %system  %guest   %<span class="hljs-built_in">wait</span>    %CPU   CPU  Command<br>10:56:07 PM     0      1239    0.99    0.00    0.00    0.00    0.99     1  AliYunDunMonito<br><br>UID拥有该进程的用户 ID<br>PID进程 ID<br>%usr用户态 CPU 使用百分比<br>%system内核态 CPU 使用百分比<br>%CPU总 CPU 占用（usr + system）<br>CPU运行该进程的 CPU 核心编号<br>Command可执行文件名（进程名）<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell I 概念与基本命令</title>
    <link href="/2025/04/09/Shell-1/"/>
    <url>/2025/04/09/Shell-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h1 id="什么是Shell"><a href="#什么是Shell" class="headerlink" title="什么是Shell ?"></a>什么是Shell ?</h1><p>Shell 是一种应用于linux系统的命令行解释器工具的通称。（功能实现层面）</p><ul><li>用户向shell 发出命令时<ul><li>1 如果是内置命令，则直接在当前进程执行内置命令。（内置命令如cd,echo,可以使用type查询）</li><li>2如果是非内置命令，则fork() 一个子进程，在子进程中执行用户输入的命令。</li></ul></li></ul><p>Shell 是新用户接入服务器后启动的默认挂起程序。 （应用层面）</p><ul><li>应用执行完毕后，会关闭进程。为了使用户可以正常与服务器交互，<ul><li>需要一个进程在前台挂起，持续等待用户输入命令</li></ul></li></ul><p>Shell 是作用于用户和操作系统内核间的中间程序，为用户提供服务，执行操作系统功能。（系统架构层面）</p><ul><li>许多程序需要通过系统调用来实现其功能，而允许用户直接访问内核功能是不安全的。所以通过shell命令来进行系统调用完成系统。</li></ul><p><img src="https://i.111666.best/image/P9kPm8BDRhogLaekV6yAYq.png" alt="image"></p><h1 id="Shell-的执行格式"><a href="#Shell-的执行格式" class="headerlink" title="Shell 的执行格式"></a>Shell 的执行格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">    <span class="hljs-comment">#               command                                - parameter                 value </span><br><br><span class="hljs-comment">#系统提示符         shell命令或其他可执行程序               选项                        传入的参数</span><br></code></pre></td></tr></table></figure><p>独立的命令的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  当通过 yum , dnf (centos)或者 apt(ubuntu) 进行命令安装后</span><br><span class="hljs-comment">#  对应的命令会放置在/user/bin 文件目录下。 shell命令执行时会去该目录下寻找</span><br><span class="hljs-comment">#  如 [root@iZbp19tqlmjz1dmnm8w43uZ ~]# unzip</span><br><span class="hljs-comment">#  -bash: /usr/bin/unzip: No such file or directory</span><br><span class="hljs-comment">#  有些程序安装后 并不会直接安装到/user/bin 需要创建软链接 将程序映射到/user/bin 目录</span><br>   <span class="hljs-built_in">ln</span>             -s            /user/local/bin/xxx   /user/bin/xxx<br><span class="hljs-comment">#  创建链接      指定为软链接    安装目录               链接</span><br></code></pre></td></tr></table></figure><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="清空屏幕打印-clear"><a href="#清空屏幕打印-clear" class="headerlink" title="清空屏幕打印 - clear"></a>清空屏幕打印 - clear</h2><ul><li>只是将输入置于顶端</li></ul><h2 id="回显打印-echo"><a href="#回显打印-echo" class="headerlink" title="回显打印 - echo"></a>回显打印 - echo</h2><h2 id="查看当前工作目录-pwd"><a href="#查看当前工作目录-pwd" class="headerlink" title="查看当前工作目录 - pwd"></a>查看当前工作目录 - pwd</h2><h2 id="查看返回路径中的文件名-basename"><a href="#查看返回路径中的文件名-basename" class="headerlink" title="查看返回路径中的文件名 - basename"></a>查看返回路径中的文件名 - basename</h2><ul><li>basename [ path ] [ suffix ]</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ ~]# <span class="hljs-built_in">touch</span> hello.world<br>[root@iZbp19tqlmjz1dmnm8w43uZ ~]# <span class="hljs-built_in">basename</span> /root/hello.world .world<br>hello<br><br></code></pre></td></tr></table></figure><h2 id="查询目录下的内容-ls"><a href="#查询目录下的内容-ls" class="headerlink" title="查询目录下的内容 - ls"></a>查询目录下的内容 - ls</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-l <span class="hljs-comment">#以长格式显示文件信息（权限、所有者、组、大小、修改时间等）</span><br>-a <span class="hljs-comment">#显示所有文件，包括隐藏文件（以 . 开头的文件）</span><br>-h <span class="hljs-comment">#与 -l 一起使用，以人类可读的方式显示文件大小（KB、MB、GB）</span><br>-t <span class="hljs-comment">#按修改时间排序（最新的在前）</span><br>-r <span class="hljs-comment">#反向排序</span><br>-R <span class="hljs-comment">#递归地列出子目录中的文件</span><br></code></pre></td></tr></table></figure><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>linux中 文件的 读，写，执行权限 被设置为了3种 ： 所有者，所属用户组，其他用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 当使用ls -l 时,可以看到当前目录下的文件权限描述</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rw-r--r-- 1 root root 7 Mar 28 00:44 hello.txt<br><br><span class="hljs-comment"># &quot;-&quot; 表示是一个文件 其他类型如 d:目录，l:链接，b:块设备，c:字符设备文件</span><br><span class="hljs-comment"># rwx  分别代表r 可读 w 可写 x 可执行</span><br><span class="hljs-comment"># 所以上述 hello.txt 文件 代表 当前文件是一个普通文件，可以被用户所有者读写，所属用户组和其他用户可读</span><br><span class="hljs-comment"># 使用chmod 来修改用户权限 权限表示为比特置位。当授予所有权限时为 4+2+1 = 7</span><br><span class="hljs-comment"># 所以 授予所有者执行权限为:</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> +100 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxr--r-- 1 root root 7 Mar 28 00:44 hello.txt<br><span class="hljs-comment"># 授予其他用户读写权限为:</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> +006 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxr--rw- 1 root root 7 Mar 28 00:44 hello.txt<br><span class="hljs-comment"># 去除所属用户组读权限为:</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwx---rw- 1 root root 7 Mar 28 00:44 hello.txt<br><br></code></pre></td></tr></table></figure><h2 id="用户访问权限"><a href="#用户访问权限" class="headerlink" title="用户访问权限"></a>用户访问权限</h2><p>在文件的inode中存储了4字节的文件权限内容描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">        -             <br><span class="hljs-comment">#文件类型(1 字节 -,d,l,b,c)  #uid gid sticky(3位)  rwx rwx rwx  </span><br></code></pre></td></tr></table></figure><p>所以当我们想要访问文件时</p><ol><li>查看当前用户是否具有当前文件的读写执行权限，使用chmod 添加对应的权限（影响最小</li><li>使用chown ， chgrp 修改文件所有者 ，所属组 来获得权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwx---rw- 1 root root 7 Mar 28 00:44 hello.txt<br><span class="hljs-comment"># 当前文件 所有者具有读写执行权限，其他用户具有读写权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> -006 hello.txt<br><span class="hljs-comment"># 清除其他用户权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# su cod<br><span class="hljs-comment"># 切换到其他用户，用户无法执行读写</span><br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br><span class="hljs-built_in">cat</span>: hello.txt: Permission denied<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">echo</span> hello &gt;hello.txt<br>bash: hello.txt: Permission denied<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">exit</span><br><span class="hljs-built_in">exit</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chown</span> cod hello.txt<br><span class="hljs-comment"># 切换文件所有这为cod, cod用户得到了读写权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# su cod<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br>你好<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">echo</span> hello &gt; hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span> +070 hello.txt<br><span class="hljs-comment"># 向文件添加所属组的访问权限</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxrwx--- 1 root root 6 Apr  9 17:45 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chgrp</span> cod hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chown</span> root hello.txt<br><span class="hljs-comment"># 修改所属组为cod,所有者为root,使用所属组访问</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwxrwx--- 1 root cod 6 Apr  9 17:45 hello.txt<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# su cod<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br>hello<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">echo</span> 你好 &gt;hello.txt<br>[cod@iZbp19tqlmjz1dmnm8w43uZ hello]$ <span class="hljs-built_in">cat</span> hello.txt<br>你好<br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">chmod</span>+7777 hello.txt<br><span class="hljs-comment"># 修改所有置位，可以看到所有者和所属组变为s</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">ls</span> -l<br>total 4<br>-rwsrwsrwt 1 root cod 7 Apr  9 18:07 hello.txt<br><br></code></pre></td></tr></table></figure><h2 id="切换目录-cd"><a href="#切换目录-cd" class="headerlink" title="切换目录 - cd"></a>切换目录 - cd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ codfish]# <span class="hljs-built_in">cd</span> hello/<br><span class="hljs-comment"># 移动到hello目录</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ hello]# <span class="hljs-built_in">cd</span> ..<br><span class="hljs-comment"># 返回上级目录</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ codfish]# <span class="hljs-built_in">cd</span> ~<br><span class="hljs-comment"># 返回home目录</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ ~]#<br><br></code></pre></td></tr></table></figure><h2 id="拷贝文件或目录-cp"><a href="#拷贝文件或目录-cp" class="headerlink" title="拷贝文件或目录 - cp"></a>拷贝文件或目录 - cp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">cp</span> hello hello2<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>hello  hello2<br><br></code></pre></td></tr></table></figure><h2 id="创建文件目录-mkdir"><a href="#创建文件目录-mkdir" class="headerlink" title="创建文件目录 - mkdir"></a>创建文件目录 - mkdir</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mkdir</span> hi<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mkdir</span> -p one/two<br><span class="hljs-comment"># 递归创建</span><br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">cd</span> one/two/<br>[root@iZbp19tqlmjz1dmnm8w43uZ two]#<br><br></code></pre></td></tr></table></figure><h2 id="移动文件或目录-mv"><a href="#移动文件或目录-mv" class="headerlink" title="移动文件或目录  - mv"></a>移动文件或目录  - mv</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>hello2  hello<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mv</span> hello hi<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>hello2  hi<br><br></code></pre></td></tr></table></figure><h2 id="删除文件或目录-rm"><a href="#删除文件或目录-rm" class="headerlink" title="删除文件或目录 - rm"></a>删除文件或目录 - rm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">rm</span> hi<br><span class="hljs-built_in">rm</span>: remove regular empty file <span class="hljs-string">&#x27;hi&#x27;</span>? y<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">mkdir</span> hi<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">rm</span> -r hi<br><span class="hljs-built_in">rm</span>: remove directory <span class="hljs-string">&#x27;hi&#x27;</span>? y<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">rm</span> -rf hi<br><span class="hljs-comment"># 递归删除目录及文件</span><br><br></code></pre></td></tr></table></figure><h2 id="创建空文件-touch"><a href="#创建空文件-touch" class="headerlink" title="创建空文件 - touch"></a>创建空文件 - touch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">touch</span> file<br>[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">ls</span><br>file<br></code></pre></td></tr></table></figure><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><p>cat  直接查看整个文件的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">cat</span> file<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td></tr></table></figure><p>more  交互式查看文件内容</p><p>less</p><p>head  从头部查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">head</span> -n 3 file<br>1<br>2<br>3<br><br></code></pre></td></tr></table></figure><p>tail 从尾部查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">tail</span> -n 3 file<br>8<br>9<br>10<br></code></pre></td></tr></table></figure><h2 id="查看文件-目录-实际信息-（inode-block-地址）-stat"><a href="#查看文件-目录-实际信息-（inode-block-地址）-stat" class="headerlink" title="查看文件&#x2F;目录 实际信息 （inode&#x2F;block 地址）- stat"></a>查看文件&#x2F;目录 实际信息 （inode&#x2F;block 地址）- stat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ cod]# <span class="hljs-built_in">stat</span> file<br>  File: file<br>  Size: 21              Blocks: 8          IO Block: 4096   regular file<br>Device: fd03h/64771d    Inode: 1224103     Links: 1<br>Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)<br>Access: 2025-04-09 21:05:51.065782226 +0800<br>Modify: 2025-04-09 21:05:49.079699125 +0800<br>Change: 2025-04-09 21:05:49.081699209 +0800<br> Birth: 2025-04-09 21:05:49.079699125 +0800<br><br></code></pre></td></tr></table></figure><h2 id="查看文件信息-file"><a href="#查看文件信息-file" class="headerlink" title="查看文件信息 - file"></a>查看文件信息 - file</h2><h2 id="压缩-解压缩-tar-czf-xzf"><a href="#压缩-解压缩-tar-czf-xzf" class="headerlink" title="压缩&#x2F;解压缩  - tar(czf&#x2F;xzf)"></a>压缩&#x2F;解压缩  - tar(czf&#x2F;xzf)</h2>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器网络</title>
    <link href="/2025/04/06/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/04/06/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="Veth"><a href="#Veth" class="headerlink" title="Veth"></a>Veth</h2><p>veth（Virtual Ethernet）是Linux中的一种虚拟网络设备，它工作在第二层（数据链路层），主要用于连接不同的网络命名空间（network namespaces）。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>veth设备总是成对出现，类似于一根网线的两端。当数据包从一端发出后，会立即从另一端收到。这种特性使它成为连接不同网络命名空间的理想工具。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ol><li><strong>成对创建</strong>：veth设备必须成对创建，一端发送的数据会从另一端接收。</li><li><strong>跨命名空间通信</strong>：veth对的两端可以位于不同的网络命名空间中，是Linux实现网络虚拟化的基础设施。</li><li><strong>无状态</strong>：veth设备本身不存储任何状态信息，仅作为数据的传输通道。</li><li><strong>支持标准网络操作</strong>：可以为veth设备配置IP地址、添加路由、设置防火墙规则等。</li></ol><h3 id="Veth工作模式"><a href="#Veth工作模式" class="headerlink" title="Veth工作模式"></a>Veth工作模式</h3><p><img src="https://i.111666.best/image/cd1vfax0o2HRKQWO1OAGwY.png" alt="image"></p><p>veth 的宿主端接口，在未接入 bridge 且配置 IP 时，可类比为 VLAN 子网的默认网关；</p><p>而当加入 bridge 时，它就退化成纯二层接入口，成为 bridge 内部以太帧转发的端口，不应再承担 IP 层通信角色。</p><h3 id="Veth设备端配置"><a href="#Veth设备端配置" class="headerlink" title="Veth设备端配置"></a>Veth设备端配置</h3><p>宿主机配置网络→创建容器→将网络加入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#宿主机 </span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> add veth-c <span class="hljs-built_in">type</span> veth peer name veth-br  <span class="hljs-comment"># 配置结伴网络</span><br><span class="hljs-built_in">sudo</span> ip addr add  192.168.100.100/24  dev  veth-br <span class="hljs-comment">#配置ip 信息</span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-br up<br><br><span class="hljs-comment">#创建容器后，在宿主机查询容器进程，添加网络到宿主机</span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c netns 968998<br><br><span class="hljs-comment">#容器</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-c up<br>ip addr add 192.168.100.100/24 dev veth-c<br></code></pre></td></tr></table></figure><p>创建网络命名空间→创建veth网络→添加veth网络到网络命名空空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 宿主机添加网络命名空间 net1</span><br>ip netns add net1<br><span class="hljs-comment"># 添加veth 网络</span><br>ip <span class="hljs-built_in">link</span> add veth1 <span class="hljs-built_in">type</span> veth peer name veth1_p<br><span class="hljs-comment"># 绑定veth网络到网络命名空间 net1</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth1 netns net1<br>ip addr add 192.168.100.100/24 dev veth1_p<br><br><span class="hljs-comment">#通过命令执行</span><br>ip netns <span class="hljs-built_in">exec</span> net1 ip addr<br>ip netns <span class="hljs-built_in">exec</span> net1 ip addr add 192.168.100.102/24 dev veth1<br>ip netns <span class="hljs-built_in">exec</span> net1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth1 up<br></code></pre></td></tr></table></figure><p>网桥配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 宿主机 创建 namespace</span><br>ip netns add ns1<br>ip netns add ns2<br><br><span class="hljs-comment"># 创建 veth pair</span><br>ip <span class="hljs-built_in">link</span> add veth-a <span class="hljs-built_in">type</span> veth peer name veth-a-ns<br>ip <span class="hljs-built_in">link</span> add veth-b <span class="hljs-built_in">type</span> veth peer name veth-b-ns<br><br><span class="hljs-comment"># 放进 namespace</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a-ns netns ns1<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b-ns netns ns2<br><br><span class="hljs-comment"># 设置 IP</span><br>ip netns <span class="hljs-built_in">exec</span> ns1 ip addr add 192.168.100.10/24 dev veth-a-ns<br>ip netns <span class="hljs-built_in">exec</span> ns2 ip addr add 192.168.100.20/24 dev veth-b-ns<br><br><span class="hljs-comment"># 启动接口</span><br>ip netns <span class="hljs-built_in">exec</span> ns1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a-ns up<br>ip netns <span class="hljs-built_in">exec</span> ns2 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b-ns up<br>ip netns <span class="hljs-built_in">exec</span> ns1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> lo up<br>ip netns <span class="hljs-built_in">exec</span> ns2 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> lo up<br><br><span class="hljs-comment"># 宿主机接口 up</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a up<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b up<br><br><span class="hljs-comment"># 创建 bridge</span><br>ip <span class="hljs-built_in">link</span> add br0 <span class="hljs-built_in">type</span> bridge<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> br0 up<br>ip addr add 192.168.100.1/24 dev br0<br><br><span class="hljs-comment"># 加入 bridge</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-a master br0<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth-b master br0<br><br>ip netns <span class="hljs-built_in">exec</span> ns1 ping -c 3 192.168.100.20<br>ip netns <span class="hljs-built_in">exec</span> ns1 ping -c 3 192.168.100.1<br><br></code></pre></td></tr></table></figure><h2 id="容器外部网络访问"><a href="#容器外部网络访问" class="headerlink" title="容器外部网络访问"></a>容器外部网络访问</h2><p>设置网络转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -A FORWARD -j ACCEPT<br>置位  /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p>Docker 通过向iptables写入规则 来控制 端口映射转发</p><h3 id="NAT（network-address-translation）"><a href="#NAT（network-address-translation）" class="headerlink" title="NAT（network address translation）"></a>NAT（network address translation）</h3><p>NAT (Network Address Translation) 是一种网络技术，它允许多台设备通过单个公共 IP 地址访问互联网。通过一张映射表完成内网和外网IP，端口间的转换</p><p>NAT 的主要功能和特点：</p><ol><li>地址转换：NAT 将内部网络中的私有 IP 地址转换为公共 IP 地址，使得内部网络的设备能够访问互联网</li><li>节约 IP 地址资源：由于 IPv4 地址资源有限，NAT 技术可以使多台设备共享一个公共 IP 地址，缓解了 IP 地址短缺问题</li><li>隐藏内部网络结构：NAT 可以隐藏内部网络的真实 IP 地址，提高网络安全性</li></ol><p>NAT 的主要类型：</p><ol><li>静态 NAT：一对一映射，每个私有 IP 地址对应一个固定的公共 IP 地址</li><li>动态 NAT：从公共 IP 地址池中动态分配地址</li><li>网络地址端口转换（NAPT&#x2F;PAT）：最常用的类型，多个私有 IP 地址共享一个公共 IP 地址，通过不同的端口号区分不同的连接</li></ol><h3 id="1-filter表"><a href="#1-filter表" class="headerlink" title="1.filter表"></a>1.filter表</h3><p>filter包含3个内置链用于过滤数据包，包含三个内置链：</p><ul><li>INPUT：处理发往本机的数据包</li><li>FORWARD：处理经过本机转发的数据包</li><li>OUTPUT：处理本机发出的数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 允许已建立的连接</span><br>iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<br><span class="hljs-comment"># 允许本地回环接口</span><br>iptables -A INPUT -i lo -j ACCEPT<br><span class="hljs-comment"># 允许 SSH 连接</span><br>iptables -A INPUT -p tcp --dport 22 -j ACCEPT<br><span class="hljs-comment"># 默认拒绝其他所有入站连接</span><br>iptables -P INPUT DROP<br><span class="hljs-comment"># 查询表结构</span><br>iptables -L -v<br><span class="hljs-comment"># 指定filter表查询</span><br>iptables -t filter -L -v<br></code></pre></td></tr></table></figure><h3 id="2-nat-表"><a href="#2-nat-表" class="headerlink" title="2. nat 表"></a>2. nat 表</h3><p>nat 表用于网络地址转换，包含三个内置链：</p><ul><li>PREROUTING：在路由决策前处理数据包</li><li>OUTPUT：处理本机产生的数据包</li><li>POSTROUTING：在路由决策后处理数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将内网主机的流量 NAT 到公网 IP</span><br>iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j MASQUERADE<br><span class="hljs-comment"># 端口转发</span><br>iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.100:8080<br><span class="hljs-comment"># 查询nat表</span><br>iptables -t nat -L -v<br></code></pre></td></tr></table></figure><h3 id="3-mangle-表"><a href="#3-mangle-表" class="headerlink" title="3. mangle 表"></a>3. mangle 表</h3><p>mangle 表用于特殊的数据包修改，包含五个内置链：</p><ul><li>PREROUTING：数据包进入系统时</li><li>INPUT：数据包被路由到本地时</li><li>FORWARD：转发数据包时</li><li>OUTPUT：本地生成的数据包时</li><li>POSTROUTING：数据包离开系统时</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改数据包的 TTL 值</span><br>iptables -t mangle -A POSTROUTING -o eth0 -j TTL --ttl-set 64<br><span class="hljs-comment"># 设置数据包的优先级</span><br>iptables -t mangle -A PREROUTING -p tcp --dport 22 -j TOS --set-tos 0x10<br><span class="hljs-comment"># 查询mangle表</span><br>iptables -t mangle -L -v<br></code></pre></td></tr></table></figure><h3 id="4-raw-表"><a href="#4-raw-表" class="headerlink" title="4. raw 表"></a>4. raw 表</h3><p>raw 表用于配置免于连接跟踪的例外，包含两个内置链：</p><ul><li>PREROUTING：处理刚到达的数据包</li><li>OUTPUT：处理本地生成的数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对 DNS 查询免除连接跟踪</span><br>iptables -t raw -A OUTPUT -p udp --dport 53 -j NOTRACK<br><span class="hljs-comment"># 对某些 IP 免除连接跟踪</span><br>iptables -t raw -A PREROUTING -s 192.168.1.100 -j NOTRACK<br><span class="hljs-comment"># 查询raw表</span><br>iptables -t raw -L -v<br></code></pre></td></tr></table></figure><h3 id="5-security-表"><a href="#5-security-表" class="headerlink" title="5. security 表"></a>5. security 表</h3><p>security 表用于强制访问控制网络规则（如 SELinux），包含三个内置链：</p><ul><li>INPUT：处理入站数据包</li><li>OUTPUT：处理出站数据包</li><li>FORWARD：处理转发数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置 SELinux 安全上下文标记</span><br>iptables -t security -A INPUT -p tcp --dport 80 -j SECMARK --selctx system_u:object_r:http_server_packet_t:s0<br><span class="hljs-comment"># 查询security表</span><br>iptables -t security -L -v<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>外部网络 - 宿主机 - 容器 ：</p><p>创建 veth网络，将veth网络两端绑定在宿主机和容器两端</p><p>配置网桥，将宿主机中的veth端加入到网桥中，veth自动退化为虚拟端口</p><p>宿主机使用iptables 配置 收发请求的网络数据流量 映射到容器网络。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>虚拟化技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>task-struct</title>
    <link href="/2025/04/01/task-struct/"/>
    <url>/2025/04/01/task-struct/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-内核中的-task-struct-结构详解"><a href="#Linux-内核中的-task-struct-结构详解" class="headerlink" title="Linux 内核中的 task_struct 结构详解"></a>Linux 内核中的 <code>task_struct</code> 结构详解</h1><p>task_struct 是 Linux 内核中用来表示 <strong>进程（或者线程）</strong> 的核心结构体，是操作系统调度、管理和追踪进程的基础。该结构体非常庞大，包含了大量字段，用于管理进程的各种状态。</p><hr><h2 id="🧠-task-struct-的主要组成结构（按功能分类）"><a href="#🧠-task-struct-的主要组成结构（按功能分类）" class="headerlink" title="🧠 task_struct 的主要组成结构（按功能分类）"></a>🧠 <code>task_struct</code> 的主要组成结构（按功能分类）</h2><h3 id="1-进程标识"><a href="#1-进程标识" class="headerlink" title="1. 进程标识"></a>1. 进程标识</h3><p>用于标识进程的唯一性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">pid_t</span> pid;                      <span class="hljs-comment">// 进程ID</span><br><span class="hljs-type">pid_t</span> tgid;                     <span class="hljs-comment">// 线程组ID（主线程的pid）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span> *<span class="hljs-title">thread_pid</span>;</span>        <span class="hljs-comment">// 线程ID（每个线程唯一）</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-进程状态与调度相关"><a href="#2-进程状态与调度相关" class="headerlink" title="2. 进程状态与调度相关"></a>2. 进程状态与调度相关</h3><p>包括进程状态、优先级、调度器策略等：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> state;           <span class="hljs-comment">// 当前进程状态（如 TASK_RUNNING 等）</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;            <span class="hljs-comment">// 标志位（PF_开头）</span><br><span class="hljs-type">int</span> prio;                      <span class="hljs-comment">// 动态优先级</span><br><span class="hljs-type">int</span> static_prio;               <span class="hljs-comment">// 静态优先级</span><br><span class="hljs-type">int</span> policy;                    <span class="hljs-comment">// 调度策略（如 SCHED_NORMAL）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sched_entity</span> <span class="hljs-title">se</span>;</span>        <span class="hljs-comment">// CFS调度实体</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-父子进程关系"><a href="#3-父子进程关系" class="headerlink" title="3. 父子进程关系"></a>3. 父子进程关系</h3><p>记录进程之间的层级关系：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">real_parent</span>;</span>   <span class="hljs-comment">// 创建它的进程</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">parent</span>;</span>        <span class="hljs-comment">// 当前父进程</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">children</span>;</span>         <span class="hljs-comment">// 子进程链表</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">sibling</span>;</span>          <span class="hljs-comment">// 兄弟进程链表</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-内存管理"><a href="#4-内存管理" class="headerlink" title="4. 内存管理"></a>4. 内存管理</h3><p>与地址空间和虚拟内存相关的信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span>;</span>             <span class="hljs-comment">// 进程的内存描述符（用户态）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">active_mm</span>;</span>      <span class="hljs-comment">// 当前活跃的 mm（内核线程也会设置）</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-文件系统与文件描述符表"><a href="#5-文件系统与文件描述符表" class="headerlink" title="5. 文件系统与文件描述符表"></a>5. 文件系统与文件描述符表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_struct</span> *<span class="hljs-title">fs</span>;</span>             <span class="hljs-comment">// 文件系统信息（当前目录等）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">files_struct</span> *<span class="hljs-title">files</span>;</span>       <span class="hljs-comment">// 打开的文件描述符表</span><br></code></pre></td></tr></table></figure><hr><h3 id="6-信号处理"><a href="#6-信号处理" class="headerlink" title="6. 信号处理"></a>6. 信号处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">signal_struct</span> *<span class="hljs-title">signal</span>;</span>     <span class="hljs-comment">// 所属线程组的信号处理结构</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sighand_struct</span> *<span class="hljs-title">sighand</span>;</span>   <span class="hljs-comment">// 信号处理函数</span><br><span class="hljs-type">sigset_t</span> blocked;                 <span class="hljs-comment">// 当前屏蔽的信号</span><br></code></pre></td></tr></table></figure><hr><h3 id="7-命名空间（Namespace）"><a href="#7-命名空间（Namespace）" class="headerlink" title="7. 命名空间（Namespace）"></a>7. 命名空间（Namespace）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> *<span class="hljs-title">nsproxy</span>;</span>          <span class="hljs-comment">// 各类命名空间的统一接口</span><br></code></pre></td></tr></table></figure><hr><h3 id="8-CPU-和上下文切换相关"><a href="#8-CPU-和上下文切换相关" class="headerlink" title="8. CPU 和上下文切换相关"></a>8. CPU 和上下文切换相关</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_struct</span> <span class="hljs-title">thread</span>;</span>      <span class="hljs-comment">// 存储CPU寄存器等上下文信息</span><br><span class="hljs-type">int</span> on_cpu;                       <span class="hljs-comment">// 是否在CPU上运行</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cpumask</span> *<span class="hljs-title">cpus_allowed</span>;</span>     <span class="hljs-comment">// 允许运行在哪些CPU上</span><br></code></pre></td></tr></table></figure><hr><h3 id="9-时间统计"><a href="#9-时间统计" class="headerlink" title="9. 时间统计"></a>9. 时间统计</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">u64 utime;                        <span class="hljs-comment">// 用户态运行时间</span><br>u64 stime;                        <span class="hljs-comment">// 内核态运行时间</span><br></code></pre></td></tr></table></figure><hr><h3 id="10-Cgroup-与资源限制"><a href="#10-Cgroup-与资源限制" class="headerlink" title="10. Cgroup 与资源限制"></a>10. Cgroup 与资源限制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">css_set</span> *<span class="hljs-title">cgroups</span>;</span>          <span class="hljs-comment">// 所属的 cgroup 集合</span><br></code></pre></td></tr></table></figure><hr><h3 id="11-调试与追踪"><a href="#11-调试与追踪" class="headerlink" title="11. 调试与追踪"></a>11. 调试与追踪</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ptrace;             <span class="hljs-comment">// 是否被 ptrace 追踪</span><br></code></pre></td></tr></table></figure><hr><h3 id="12-内核同步与锁"><a href="#12-内核同步与锁" class="headerlink" title="12. 内核同步与锁"></a>12. 内核同步与锁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">spinlock_t</span> alloc_lock;            <span class="hljs-comment">// 用于保护任务结构中的关键区域</span><br></code></pre></td></tr></table></figure><hr><h3 id="13-其他常用字段"><a href="#13-其他常用字段" class="headerlink" title="13. 其他常用字段"></a>13. 其他常用字段</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> comm[TASK_COMM_LEN];         <span class="hljs-comment">// 进程名（最多16字节）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">group_leader</span>;</span> <span class="hljs-comment">// 线程组的 leader</span><br><span class="hljs-type">int</span> exit_code;                    <span class="hljs-comment">// 退出代码</span><br></code></pre></td></tr></table></figure><hr><h2 id="🔧-小结图解（简略）"><a href="#🔧-小结图解（简略）" class="headerlink" title="🔧 小结图解（简略）"></a>🔧 小结图解（简略）</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pf">task_struct<br>├── 进程标识：pid, tgid<br>├── 状态与调度：<span class="hljs-keyword">state</span>, <span class="hljs-keyword">prio</span>, policy, se<br>├── 父子关系：<span class="hljs-keyword">parent</span>, children<br>├── 内存管理：mm, active_mm<br>├── 文件系统：files, fs<br>├── 信号处理：signal, sighand<br>├── 命名空间：nsproxy<br>├── CPU调度：thread, on_cpu<br>├── 时间统计：utime, stime<br>├── C<span class="hljs-keyword">group</span>：cgroups<br>├── 同步锁：alloc_lock<br>├── 调试追踪：ptrace<br>└── 通用信息：comm, exit_code<br></code></pre></td></tr></table></figure><hr><p>该结构体可能会在不同版本的内核中有所变动，但整体结构和这些功能模块是核心。</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器的实现原理</title>
    <link href="/2025/04/01/%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2025/04/01/%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="容器实现的原理"><a href="#容器实现的原理" class="headerlink" title="容器实现的原理"></a>容器实现的原理</h1><p>在Linux系统中，容器的实现本身就是一种资源隔离的方式。它通过控制进程的资源调度，访问权限来确定一项进程可以操作的资源范围，来达到隔离的目的</p><p>这其中主要使用到3个技术 ： namespace，unionfs 和cgroups</p><h1 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h1><p>namespace 是一种控制进程访问范围的结构体。在进程结构体（task_struct）中，通过nsproxy 结构 指向一个包含多种资源结构指针的结构体。</p><p>struct nsproxy :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> &#123;</span><br>    <span class="hljs-type">atomic_t</span> count;                  <span class="hljs-comment">// 引用计数</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uts_namespace</span> *<span class="hljs-title">uts_ns</span>;</span>   <span class="hljs-comment">// UTS 命名空间（主机名、域名）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipc_namespace</span> *<span class="hljs-title">ipc_ns</span>;</span>   <span class="hljs-comment">// IPC 命名空间（信号量、共享内存、消息队列）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mnt_namespace</span> *<span class="hljs-title">mnt_ns</span>;</span>   <span class="hljs-comment">// 挂载命名空间（文件系统挂载点）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid_namespace</span> *<span class="hljs-title">pid_ns_for_children</span>;</span> <span class="hljs-comment">// PID 命名空间（用于子进程）</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> *<span class="hljs-title">net_ns</span>;</span>             <span class="hljs-comment">// 网络命名空间</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CGROUPS</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_namespace</span> *<span class="hljs-title">cgroup_ns</span>;</span> <span class="hljs-comment">// 控制组命名空间</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_TIME_NS</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time_namespace</span> *<span class="hljs-title">time_ns</span>;</span>     <span class="hljs-comment">// 时间命名空间</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="各个字段的含义："><a href="#各个字段的含义：" class="headerlink" title="各个字段的含义："></a>各个字段的含义：</h2><table><thead><tr><th>字段名</th><th>描述</th></tr></thead><tbody><tr><td><code>count</code></td><td>引用计数，避免结构体被过早释放</td></tr><tr><td><code>uts_ns</code></td><td>UTS 命名空间（<code>uname -n</code>、主机名等）</td></tr><tr><td><code>ipc_ns</code></td><td>IPC 命名空间（SysV IPC，如信号量、共享内存）</td></tr><tr><td><code>mnt_ns</code></td><td>挂载命名空间（隔离的挂载视图）</td></tr><tr><td><code>pid_ns_for_children</code></td><td>当前进程的子进程将进入的 PID 命名空间</td></tr><tr><td><code>net_ns</code></td><td>网络命名空间（如网络设备、IP 地址、路由等）</td></tr><tr><td><code>cgroup_ns</code></td><td>控制组命名空间（控制组的名字空间隔离）</td></tr><tr><td><code>time_ns</code></td><td>时间命名空间（每个容器&#x2F;命名空间自己的时间视图）</td></tr></tbody></table><p>当进程被创建时，未定义的命名空间 会默认使用父进程的结构体信息（可以通过clone()来指定子进程需要绑定的命名空间）。所以当新的子进程被创建时，默认直接可以访问父进程所能使用的资源。</p><h2 id="创建新的命名空间"><a href="#创建新的命名空间" class="headerlink" title="创建新的命名空间"></a>创建新的命名空间</h2><p>通过使用 unshare 命令来创建新的命名空间。操作系统会对每种资源进行相应的初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unshare --fork --pid --mount --uts --ipc --net --user --map-root-user /bin/bash<br></code></pre></td></tr></table></figure><p><code>unshare</code> 可以让你为进程单独创建以下命名空间：</p><table><thead><tr><th>命名空间</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>UTS</td><td><code>--uts</code></td><td>主机名&#x2F;域名隔离（可以改 hostname）</td></tr><tr><td>PID</td><td><code>--pid</code></td><td>进程号隔离（新的进程树，当前进程是 PID 1）</td></tr><tr><td>Mount</td><td><code>--mount</code></td><td>文件系统挂载点隔离</td></tr><tr><td>Net</td><td><code>--net</code></td><td>网络栈隔离（独立的网络接口）</td></tr><tr><td>IPC</td><td><code>--ipc</code></td><td>进程间通信隔离</td></tr><tr><td>User</td><td><code>--user</code></td><td>用户&#x2F;权限隔离（uid&#x2F;gid 映射）</td></tr><tr><td>Cgroup</td><td><code>--cgroup</code></td><td>控制组隔离</td></tr><tr><td>Time</td><td><code>--time</code></td><td>系统时间命名空间（较新内核）</td></tr></tbody></table><p> 使用 - -mount 会将当前进程的挂载系统视图加载到新的进程中去</p><p>使用  - -mount-proc 会创建一个独立的&#x2F;proc 文件系统</p><p>进入新的命名空间后，进行资源挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">unshare --mount --net --user --map-root-user bash<br><br>mount -t tmpfs tmpfs /mnt/tmp  <span class="hljs-comment">#文件系统挂载</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> lo up <span class="hljs-comment">#网络挂载</span><br>mount -t proc proc /proc <span class="hljs-comment">#虚拟文件系统挂载</span><br><span class="hljs-comment"># --user 要么用 --map-root-user，要么自己写 uid_map</span><br></code></pre></td></tr></table></figure><p>我们得到了一个自定义资源预设命名空间的进程</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="unshare-—uts-—pid-bin-bash-需要通过—fork创建新的命名空间"><a href="#unshare-—uts-—pid-bin-bash-需要通过—fork创建新的命名空间" class="headerlink" title="unshare  —uts —pid  &#x2F;bin&#x2F;bash 需要通过—fork创建新的命名空间"></a>unshare  —uts —pid  &#x2F;bin&#x2F;bash 需要通过—fork创建新的命名空间</h3><p>使用 <code>unshare --pid</code> 创建新的 PID 命名空间后，当前进程依然处于旧命名空间，它的 PID 无法更改。因此必须通过 <code>--fork</code> 创建一个新进程，它才能真正运行在新的 PID 命名空间中，并成为该命名空间内的 PID 1。</p><h3 id="如何进入一个命名空间"><a href="#如何进入一个命名空间" class="headerlink" title="如何进入一个命名空间"></a>如何进入一个命名空间</h3><p>Linux 把每个进程当前所在的命名空间暴露在了 <code>/proc/[pid]/ns/</code> 目录下，你可以通过访问它来“进入”命名空间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br><span class="hljs-built_in">sudo</span> nsenter --target &lt;PID&gt; --net --uts --pid --mount --ipc /bin/bash<br></code></pre></td></tr></table></figure><p>可以通过 <code>bind mount</code> 的方式把 namespace 文件挂到一个路径上，实现“命名空间持久化”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /var/run/my_ns<br><span class="hljs-built_in">touch</span> /var/run/my_ns/net<br>mount --<span class="hljs-built_in">bind</span> /proc/&lt;pid&gt;/ns/net /var/run/my_ns/net<br><br></code></pre></td></tr></table></figure><h3 id="进程在不同命名空间具有不同的PID信息"><a href="#进程在不同命名空间具有不同的PID信息" class="headerlink" title="进程在不同命名空间具有不同的PID信息"></a>进程在不同命名空间具有不同的PID信息</h3><p>关键结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span> &#123;</span><br><span class="hljs-type">atomic_t</span> count;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> level;  <span class="hljs-comment">// 命名空间层级（0 = root）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span> <span class="hljs-title">tasks</span>[<span class="hljs-title">PIDTYPE_MAX</span>];</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">upid</span> <span class="hljs-title">numbers</span>[1];</span> <span class="hljs-comment">// 实际的 PID 数组（多个命名空间的 PID）</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">upid</span> &#123;</span><br>    <span class="hljs-type">int</span> nr;                      <span class="hljs-comment">// 当前 namespace 下的 PID</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid_namespace</span> *<span class="hljs-title">ns</span>;</span>   <span class="hljs-comment">// 属于哪个 namespace</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>由此 我们可以看到 unshare 是一个对进程的资源权限进行创建绑定的过程</p><h1 id="overlayfs"><a href="#overlayfs" class="headerlink" title="overlayfs"></a>overlayfs</h1><p>在实现容器文件系统时，常使用的是 <code>overlayfs</code>（属于 unionfs 类型的聚合文件系统）。用来将容器所需要的文件资源“聚合”在同一个资源目录下。</p><p>通过mount 创建文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -t overlay overlay \<br>  -o lowerdir=/mnt/lower,upperdir=/mnt/upper,workdir=/mnt/work \<br>  /mnt/merged<br><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-t overlay</code></td><td>指定文件系统类型是 <code>overlay</code></td></tr><tr><td><code>overlay</code></td><td>设备名（这里可以随便写，比如也可以写成 <code>none</code>）</td></tr><tr><td><code>-o lowerdir=...</code></td><td>指定只读的底层目录（可多个）</td></tr><tr><td><code>upperdir=...</code></td><td>指定可写的上层目录</td></tr><tr><td><code>workdir=...</code></td><td>overlayfs 需要的工作目录（中间缓存用）</td></tr><tr><td>最后的 <code>rootfs_chat/merged</code></td><td>是挂载点，即最终组合出来的目录视图</td></tr></tbody></table><p>挂载创建好后，因为该挂载存在于父进程之中，所以使用—mount创建后，新的子进程可以访问到该挂载路径</p><p>但是此时的根路径依然继承自父进程，所以需要将新进程的根进程修改为“&#x2F;”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chroot</span> rootfs_chat/merged/ <br></code></pre></td></tr></table></figure><p><code>chroot</code> 本身并不安全，不能完全隔离文件系统，需要结合 mount namespace 才能保证隔离性。否则进程可以 escape chroot。</p><h2 id="QA-1"><a href="#QA-1" class="headerlink" title="QA"></a>QA</h2><p>chroot 通过修改进程结构体中的“root” 变量，来帮助进程识别对应的根目录的</p><p>{</p><p>struct fs_struct {<br>struct path root;     &#x2F;&#x2F; 当前的根目录（对应 <code>/</code>）<br>struct path pwd;      &#x2F;&#x2F; 当前工作目录（对应 <code>.</code>）<br>};</p><h1 id="cgroups"><a href="#cgroups" class="headerlink" title="cgroups"></a>cgroups</h1><p>cgroup 是一个内核中的“资源控制树结构”，进程“加入”到这个树结构的某个节点下，进而接受控制器的约束。</p><p>结构体定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kernfs_node</span> *<span class="hljs-title">kn</span>;</span>         <span class="hljs-comment">// 在 cgroupfs 中对应的目录节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_subsys_state</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">subsys</span>[<span class="hljs-title">CGROUP_SUBSYS_COUNT</span>];</span> <span class="hljs-comment">// 控制器状态</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_parent</span> *<span class="hljs-title">parent</span>;</span>   <span class="hljs-comment">// 父 cgroup</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>控制器结构 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_subsys_state</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup</span> *<span class="hljs-title">cgroup</span>;</span>       <span class="hljs-comment">// 属于哪个 cgroup 节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_subsys</span> *<span class="hljs-title">ss</span>;</span>    <span class="hljs-comment">// 属于哪个控制器（memory, cpu等）</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>进程结构体中对cgroup的引用 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> &#123;</span><br>    ...<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">css_set</span> *<span class="hljs-title">cgroups</span>;</span>    <span class="hljs-comment">// 进程所属的 cgroup 集合（css_set）</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="cgroups限制写入"><a href="#cgroups限制写入" class="headerlink" title="cgroups限制写入"></a>cgroups限制写入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /sys/fs/cgroup/mygroup<br><span class="hljs-built_in">echo</span> 1234 &gt; /sys/fs/cgroup/mygroup/cgroup.procs  <span class="hljs-comment">#将某个进程加入资源组</span><br><span class="hljs-built_in">echo</span> 50M &gt; /sys/fs/cgroup/mygroup/memory.max  <span class="hljs-comment">#在对应的虚拟文件中设置限制值的大小</span><br><br></code></pre></td></tr></table></figure><h2 id="限制方式"><a href="#限制方式" class="headerlink" title="限制方式"></a>限制方式</h2><h3 id="1-内存限制（memory-controller）"><a href="#1-内存限制（memory-controller）" class="headerlink" title="1. 内存限制（memory controller）"></a>1. <strong>内存限制（memory controller）</strong></h3><h3 id="控制文件（cgroups-v2）："><a href="#控制文件（cgroups-v2）：" class="headerlink" title="控制文件（cgroups v2）："></a>控制文件（cgroups v2）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">memory.max        <span class="hljs-comment"># 最大内存</span><br>memory.current    <span class="hljs-comment"># 当前内存使用量</span><br>memory.swap.max   <span class="hljs-comment"># 最大 swap 使用</span><br><br></code></pre></td></tr></table></figure><h3 id="限制机制："><a href="#限制机制：" class="headerlink" title="限制机制："></a>限制机制：</h3><ul><li>每次进程分配内存（<code>malloc</code> &#x2F; <code>brk</code> &#x2F; <code>mmap</code>），内核会通过 cgroup 追踪它的页数</li><li>内核维护一个“<strong>内存账户</strong>”，记录每个 cgroup 当前使用了多少内存</li><li>当使用超过 <code>memory.max</code>：<ul><li>如果是软限制（memory.high）：内核优先回收缓存页</li><li>如果是硬限制（memory.max）：内核会拒绝分配，或者直接 OOM 杀死进程</li></ul></li></ul><hr><h3 id="2-CPU-限制（cpu-controller）"><a href="#2-CPU-限制（cpu-controller）" class="headerlink" title="2. CPU 限制（cpu controller）"></a>2. <strong>CPU 限制（cpu controller）</strong></h3><h3 id="控制文件："><a href="#控制文件：" class="headerlink" title="控制文件："></a>控制文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">cpu.max           <span class="hljs-comment"># 格式为 &quot;quota period&quot;，如 &quot;50000 100000&quot; 表示 50%</span><br>cpu.weight        <span class="hljs-comment"># 比例调度（类似 nice 值）</span><br><br></code></pre></td></tr></table></figure><h3 id="限制机制：-1"><a href="#限制机制：-1" class="headerlink" title="限制机制："></a>限制机制：</h3><ul><li>Linux 用 <strong>CFS（完全公平调度器）</strong> 管理 CPU 时间</li><li>cgroups 中每个组都维护一个“虚拟时间”和“实际用量”</li><li>当某个 cgroup 超过分配的 quota，<strong>调度器会“跳过”它的进程，让出 CPU</strong></li><li>实现类似“限速”：比如每 100ms 最多用 50ms，就等于 50% CPU</li></ul><hr><h3 id="3-IO-限制（io-controller）"><a href="#3-IO-限制（io-controller）" class="headerlink" title="3. IO 限制（io controller）"></a>3. <strong>IO 限制（io controller）</strong></h3><h3 id="控制文件：-1"><a href="#控制文件：-1" class="headerlink" title="控制文件："></a>控制文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">o.max            <span class="hljs-comment"># 限制读写速率</span><br>io.weight         <span class="hljs-comment"># 相对优先级</span><br><br></code></pre></td></tr></table></figure><h3 id="限制机制：-2"><a href="#限制机制：-2" class="headerlink" title="限制机制："></a>限制机制：</h3><ul><li>当进程访问磁盘（读&#x2F;写）时，内核通过 block 层检查它所在的 cgroup</li><li>如果当前组已达到速率上限，则排队</li><li>用的是<strong>节流算法（token bucket + deadline）</strong>，按比例分发 IO 机会</li></ul><hr><h3 id="4-进程数限制（pids-controller）"><a href="#4-进程数限制（pids-controller）" class="headerlink" title="4. 进程数限制（pids controller）"></a>4. <strong>进程数限制（pids controller）</strong></h3><h3 id="控制文件：-2"><a href="#控制文件：-2" class="headerlink" title="控制文件："></a>控制文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pids.max         <span class="hljs-comment"># 最大可创建进程数</span><br>pids.current     <span class="hljs-comment"># 当前已创建的进程数</span><br><br></code></pre></td></tr></table></figure><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">进程调用系统资源（如内存分配、CPU执行、磁盘读写）  <br>      ↓  <br>内核触发资源控制器的钩子函数（如 memory, cpu, io, pids）  <br>      ↓  <br>内核查找该进程所属的 cgroup 节点  <br>      ↓  <br>读取当前使用统计（如 memory.current、cpu.stat）  <br>      ↓  <br>与配置的限制（如 memory.max、cpu.max）做比较  <br>      ↓  <br>根据控制器的逻辑执行：<br>    ├── ✅ 允许（资源未超限）<br>    ├── 🚫 拒绝（如 fork 被拒绝）<br>    ├── 🧹 触发回收（如内存回收缓存页）<br>    └── 💣 杀死进程（如 OOM killer）<br><br></code></pre></td></tr></table></figure><h3 id="不同资源的控制方式示意："><a href="#不同资源的控制方式示意：" class="headerlink" title="不同资源的控制方式示意："></a>不同资源的控制方式示意：</h3><table><thead><tr><th>资源类型</th><th>钩子点（内核行为）</th><th>控制行为</th></tr></thead><tbody><tr><td>Memory</td><td>分配页（<code>alloc_pages</code>）</td><td>拒绝分配 &#x2F; 回收 &#x2F; OOM</td></tr><tr><td>CPU</td><td>调度器（<code>schedule</code>）</td><td>跳过调度 &#x2F; 限速</td></tr><tr><td>IO</td><td><code>submit_bio()</code> &#x2F; IO调度</td><td>节流 &#x2F; 排队</td></tr><tr><td>PIDs</td><td>创建进程（<code>fork()</code>）</td><td>直接失败</td></tr><tr><td>NetCls</td><td>发包、Qos 分类</td><td>加标签限流</td></tr><tr><td>Devices</td><td>打开文件（<code>open()</code>）</td><td>拒绝访问设备</td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>容器的创建过程</p><ol><li>创建聚合文件系统，将容器所需要的文件统一到一个文件路径下</li><li>创建命名空间，初始化命名空间中的资源路径</li><li>将父进程中创建的文件系统挂载到子进程中，将子进程根目录指向挂载目录</li><li>查询进程的PID号，创建cgroup文件，添加对该进程的资源限制。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>虚拟化技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dify的Chatflow实现</title>
    <link href="/2025/03/28/Dify%E7%9A%84Chatflow%E5%AE%9E%E7%8E%B0/"/>
    <url>/2025/03/28/Dify%E7%9A%84Chatflow%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>在上一次的基础上进行一些功能实现。</p><p>通过向大模型描述请求来完成一些服务器端的功能</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>流程 Dify Chatflow 任务流 → 自定义插件构建客户端请求 → 服务器端监听请求，解析请求并处理 →插件接收请求响应，传递结果给LLM 进行优化展示。</p><h2 id="创建任务流"><a href="#创建任务流" class="headerlink" title="创建任务流"></a>创建任务流</h2><p>创建空白应用→Chatflow</p><p>ChatFlow是由多个组件构成的工作流程</p><p><img src="https://i.111666.best/image/4MRRqKxQVG504FjR2SaGTk.png" alt="image"></p><p>在这个工作流程中，每次的对话会被作为输入参数传入到工作流中进行处理</p><p>当前实现的功能 ： </p><ol><li>查询服务器允许执行的命令行工具</li><li>由大模型分析用户指令，从提供的命令列表中组织命令流程下发到服务器端执行</li></ol><p>这里的编排</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">开始-问题分类器-情况1(向服务器端请求查询功能)-交由插件向服务器端发送查询请求-处理响应-回复<br>              -情况2(分析用户需求生成对应指令)-由插件构建请求向服务器请求执行-处理响应-回复<br></code></pre></td></tr></table></figure><h2 id="自定义插件向服务端发送请求"><a href="#自定义插件向服务端发送请求" class="headerlink" title="自定义插件向服务端发送请求"></a>自定义插件向服务端发送请求</h2><p>由 上一节中的设计流程来看我们至少需要构建两个请求 ：</p><p>1 . Get 请求  向服务端请求应用程序列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Desktop_get</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>FetchKey = <span class="hljs-string">&quot;/key&quot;</span><br>Command = <span class="hljs-string">&quot;/command&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        ip = tool_parameters.get(<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        port = tool_parameters.get(<span class="hljs-string">&quot;port&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        key = <span class="hljs-variable language_">self</span>.fetch_key(ip,port)<br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;Command&#125;</span>&quot;</span><br>        headers=&#123;<span class="hljs-string">&quot;X-Api-Key&quot;</span>:key&#125;<br>        res = requests.get(url=url,headers=headers,timeout=<span class="hljs-number">30</span>).json()<br>        <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">self</span>.create_text_message(<span class="hljs-built_in">str</span>(res[<span class="hljs-string">&quot;commands&quot;</span>])<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_key</span>(<span class="hljs-params">self,ip,port</span>) : <br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;FetchKey&#125;</span>&quot;</span><br><br>        js = requests.get(url=url,timeout=<span class="hljs-number">30</span>).json()<br>        <span class="hljs-keyword">return</span> js[<span class="hljs-string">&quot;key&quot;</span>]<br></code></pre></td></tr></table></figure><ol start="2"><li>Post 请求 向服务端发送命令执行列表，由服务端进行命令执行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>EXEC=<span class="hljs-string">&quot;/execute&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHelperTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        content = tool_parameters.get(<span class="hljs-string">&quot;text&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        ip = tool_parameters.get(<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        port = tool_parameters.get(<span class="hljs-string">&quot;port&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span><span class="hljs-subst">&#123;EXEC&#125;</span>&quot;</span><br>        <span class="hljs-built_in">print</span>(url)<br>        key = tool_parameters.get(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        headers=&#123;<span class="hljs-string">&quot;X-Api-Key&quot;</span>:key,<span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/json&quot;</span>&#125;<br>        <span class="hljs-built_in">print</span>(headers)<br>        res = requests.post(url=url,json=json.loads(content),headers=headers,timeout=<span class="hljs-number">30</span>).text<br>        <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">self</span>.create_text_message(res)<br><br></code></pre></td></tr></table></figure><h2 id="构建服务器端接口"><a href="#构建服务器端接口" class="headerlink" title="构建服务器端接口"></a>构建服务器端接口</h2><p>使用flask 构建一个接收以上请求的服务程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify, request<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> pexpect<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">require_key</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorated_function</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(request.headers)<br>        key = request.headers.get(<span class="hljs-string">&#x27;X-API-KEY&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(keys)<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> keys:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;Invalid API key&#x27;</span>&#125;), <span class="hljs-number">401</span><br>        <span class="hljs-keyword">return</span> f(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> decorated_function<br><br><span class="hljs-comment"># 密钥创建路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/key&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_key</span>():<br>    key = <span class="hljs-built_in">str</span>(uuid.uuid4())<br>    keys[key] = <span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(keys)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: key&#125;)<br><br><span class="hljs-comment"># 获取所有功能路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/command&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-meta">@require_key</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_functions</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 获取PATH环境变量中的所有可执行文件</span><br>        result = subprocess.run([<span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-string">&#x27;/server/bin&#x27;</span>], capture_output=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>)<br>        commands = result.stdout.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;commands&#x27;</span>: commands&#125;)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-built_in">str</span>(e)&#125;)<br><span class="hljs-comment"># 执行命令路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/execute&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-meta">@require_key</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    执行传入的命令并返回结果</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    data = request.json<br>    <span class="hljs-built_in">print</span>(data)<br>    commands = data.get(<span class="hljs-string">&#x27;commands&#x27;</span>)<br>    result = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> commands:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;No command provided&#x27;</span>&#125;)<br>    <br>    <span class="hljs-keyword">try</span>:<br>        shell = pexpect.spawn(<span class="hljs-string">&#x27;/bin/bash&#x27;</span>)<br>        <span class="hljs-keyword">for</span> command <span class="hljs-keyword">in</span> commands:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(command, <span class="hljs-built_in">dict</span>):<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Invalid command format&#x27;</span>&#125;)<br>            command_line = []<br>            command_line.append(command[<span class="hljs-string">&quot;command&quot;</span>])<br>            command_line.extend(command[<span class="hljs-string">&quot;args&quot;</span>])<br>            cmd = <span class="hljs-string">&quot; &quot;</span>.join(command_line)<br>            marker = <span class="hljs-string">f&quot;CMD_END_<span class="hljs-subst">&#123;<span class="hljs-built_in">hash</span>(cmd)&#125;</span>&quot;</span><br>            shell.sendline(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;cmd&#125;</span>; echo &#x27;<span class="hljs-subst">&#123;marker&#125;</span>&#x27;&quot;</span>)<br>            shell.expect(marker)<br>            <span class="hljs-comment"># 获取输出</span><br>            output = shell.before.decode().strip()<br>            <span class="hljs-built_in">print</span>(output)<br>            result.append( &#123;<br>                <span class="hljs-string">&#x27;command&#x27;</span>: cmd,<br>                <span class="hljs-string">&#x27;status&#x27;</span>:<span class="hljs-string">&#x27;success&#x27;</span>,<br>                <span class="hljs-string">&#x27;stdout&#x27;</span>: output,<br>            &#125;)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-built_in">str</span>(e)&#125;)<br>    shell.close()<br>    <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>: result&#125;)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>Get 请求返回的消息体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;hexo&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;ls&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;lscpu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;zip&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Post请求接收的消息体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ls&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-l&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;/home/codfish&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>启动本地插件调试和服务端</p><h2 id="执行工作流"><a href="#执行工作流" class="headerlink" title="执行工作流"></a>执行工作流</h2><p>向机器人请求查看服务端提供的应用列表 ： </p><p><img src="https://i.111666.best/image/lgRg7jkIDaRm4Fs8moXWkk.png" alt="image"></p><p>向机器人请求查询某个目录下的文件信息：</p><p><img src="https://i.111666.best/image/PI0vurDrzyzDKmIyPWrGCh.jpg" alt="image"></p><p>请求安装python 库：</p><p><img src="https://i.111666.best/image/fY63mSee5VABzV7CFrSHuu.png" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完成了基本功能的实现</p><p>在某些情况下提示词还是会出现异常，需要进一步优化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2+Dify 配置大模型桌面端资源访问(简单应用)</title>
    <link href="/2025/03/25/WSL2-Dify-%E9%85%8D%E7%BD%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE-%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
    <url>/2025/03/25/WSL2-Dify-%E9%85%8D%E7%BD%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE-%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>最近使用WSL2 做了dify的本地化部署。试着使用工作流的方式实现一个工作流来通过和大模型对话完成对本地资源的访问。</p><h1 id="预配置"><a href="#预配置" class="headerlink" title="预配置"></a>预配置</h1><h2 id="WSL2的本地部署"><a href="#WSL2的本地部署" class="headerlink" title="WSL2的本地部署"></a>WSL2的本地部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --list  <span class="hljs-comment"># 查询支持的wsl子系统发行版本</span><br>wsl --install <span class="hljs-comment"># 安装默认的wsl子系统</span><br></code></pre></td></tr></table></figure><p>部署完成后，配置安装apt源 ，Docker源（镜像有问题可以查询之前的文章），Git配置，以及 一些基本的命令行工具</p><h2 id="Dify-本地部署"><a href="#Dify-本地部署" class="headerlink" title="Dify 本地部署"></a>Dify 本地部署</h2><p>Github 上 <a href="https://github.com/langgenius/dify">https://github.com/langgenius/dify</a> 有部署教程，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> dify<br><span class="hljs-built_in">cd</span> docker<br><span class="hljs-built_in">cp</span> .env.example .<span class="hljs-built_in">env</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><p>安装完毕后 访问本地的<a href="http://localhost/install">http://localhost/install</a>  进行管理员配置</p><p>至此我们获得了一个部署在本地windows子系统上的dify环境</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p><img src="https://i.111666.best/image/YNLclFRYQ3PLOr79iU1PyH.png" alt="image"></p><p>目标是通过和大模型对话，识别其中的关键词来完成和自定义插件中的功能的映射关系。向本地的HTTP服务器发送对应请求。完成功能的执行</p><p>一些未来可行的扩展项</p><ol><li>更好的服务通信方式。wsl2 子系统可以直接对挂载到该系统的windows系统上的文件进行操作。所以存在更快捷方法调用本地资源。但是这可能需要dify提供更丰富的调用方式或者在docker层面上进行一些功能定制，当前只是一个可行性尝试。所以使用了 http的调用-响应模式</li><li>注册， 提供一个通用的PC平台应用发现服务。而不是通过将所有的可执行程序注册为Dify的自定义插件功能。这样更加灵活</li><li>本地的部署+自然语言的请求+插件自定义功能的解耦 目前来看相对还是比较安全。如果需要实现远程的请求调用可能需要更加安全的信息传输方式</li><li>在本地添加应用程序和文件资源的调用记录。</li></ol><h1 id="Dify的自定义插件"><a href="#Dify的自定义插件" class="headerlink" title="Dify的自定义插件"></a>Dify的自定义插件</h1><h2 id="脚手架工具初始化"><a href="#脚手架工具初始化" class="headerlink" title="脚手架工具初始化"></a>脚手架工具初始化</h2><p>官方文档</p><p><a href="https://docs.dify.ai/zh-hans/plugins/quick-start/develop-plugins/initialize-development-tools">https://docs.dify.ai/zh-hans/plugins/quick-start/develop-plugins/initialize-development-tools</a></p><p>下载 Dify的插件脚手架工具 <a href="https://github.com/langgenius/dify-plugin-daemon/tags">https://github.com/langgenius/dify-plugin-daemon/tags</a></p><p>以tools 类型为例  初始化 插件项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dify-plugin-windows-amd64 plugin init <br></code></pre></td></tr></table></figure><p><img src="https://i.111666.best/image/36KrL8MFwMSB0kHm0M7VGs.png" alt="image"><br>name 创建 插件名</p><p>author 插件作者</p><p>description 插件功能描述</p><p>语言 : python</p><p>工具 : tools  (自定义tools 类型插件</p><p><img src="https://i.111666.best/image/htD6C2oNrddvAuEyXVdmep.png" alt="image"></p><p>一些权限的设置</p><p>最终我们得到的是一个这样的工程</p><p>以下是一些比较重要的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">- _assets  <span class="hljs-comment"># 存放一些引用资源</span><br>- provider <span class="hljs-comment"># </span><br>  - someplugin.py <span class="hljs-comment"># 进行一些异常处理</span><br>- someplugin.yaml <span class="hljs-comment"># 插件功能/资源描述 </span><br>- tools    <span class="hljs-comment"># 具体的tools功能实现</span><br>- somefunction.py <span class="hljs-comment"># 具体的功能实现</span><br>- somefunction.yaml <span class="hljs-comment"># 功能/资源描述</span><br>- main.py <span class="hljs-comment"># 函数入口</span><br>- manifest.yaml <span class="hljs-comment">#  插件描述</span><br> <br></code></pre></td></tr></table></figure><h2 id="插件功能定义"><a href="#插件功能定义" class="headerlink" title="插件功能定义"></a>插件功能定义</h2><p>插件通过调用的是_invoke方法来执行对应的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Generator<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">from</span> dify_plugin <span class="hljs-keyword">import</span> Tool<br><span class="hljs-keyword">from</span> dify_plugin.entities.tool <span class="hljs-keyword">import</span> ToolInvokeMessage<br><br>BASE_URL =<span class="hljs-string">&quot;&lt;http://localhost:8080&gt;&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DestopHTool</span>(<span class="hljs-title class_ inherited__">Tool</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, tool_parameters: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:<br>        method = tool_parameters.get(<span class="hljs-string">&quot;method&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        result = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> method == <span class="hljs-string">&quot;desktop_get&quot;</span> :<br>            result = requests.get(BASE_URL).text<br>        <span class="hljs-keyword">yield</span>  <span class="hljs-variable language_">self</span>.create_text_message(<span class="hljs-string">f&#x27;调用了<span class="hljs-subst">&#123;method&#125;</span>,返回<span class="hljs-subst">&#123;result&#125;</span>&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>这里给出了一个简单的http请求调用，使用request模拟http get 请求。并返回接收到的消息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">identity:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">desktop_get</span>      <span class="hljs-comment"># 方法名</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">codfish</span><br>  <span class="hljs-attr">label:</span><br>    <span class="hljs-attr">en_US:</span> <span class="hljs-string">destop_get</span><br>    <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">destop_get</span><br>    <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">destop_get</span><br><span class="hljs-attr">description:</span><br>  <span class="hljs-attr">human:</span><br>    <span class="hljs-attr">en_US:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>  <span class="hljs-attr">llm:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br><span class="hljs-attr">parameters:</span>       <span class="hljs-comment">#自定义参数</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">url</span>     <span class="hljs-comment">#参数名</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span>  <span class="hljs-comment">#参数类型</span><br>    <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">label:</span><br>      <span class="hljs-attr">en_US:</span> <span class="hljs-string">Query</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">查询语句</span><br>      <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">Query</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">human_description:</span><br>      <span class="hljs-attr">en_US:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>      <span class="hljs-attr">zh_Hans:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>      <span class="hljs-attr">pt_BR:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">llm_description:</span> <span class="hljs-string">a</span> <span class="hljs-string">interface</span> <span class="hljs-string">design</span> <span class="hljs-string">for</span> <span class="hljs-string">destop_application_oprating</span> <br>    <span class="hljs-attr">form:</span> <span class="hljs-string">llm</span><br><span class="hljs-attr">extra:</span><br>  <span class="hljs-attr">python:</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">tools/desktop_get.py</span>  <span class="hljs-comment">#对应的python实现文件</span><br><br></code></pre></td></tr></table></figure><p>每个tools 插件允许添加多个方法，每个方法需要定义自己的模块文件(.py)和资源描述文件（.yaml）</p><p>其结构为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">tools\\</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction1.py</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction1.yaml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction2.py</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">somefunction2.yaml</span><br>  <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><h2 id="插件调试"><a href="#插件调试" class="headerlink" title="插件调试"></a>插件调试</h2><p>通过修改工作目录中的.env.example 为.env</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">INSTALL_METHOD=remote</span><br><span class="hljs-string">REMOTE_INSTALL_HOST=debug.dify.ai</span><br><span class="hljs-string">REMOTE_INSTALL_PORT=5003</span><br><span class="hljs-string">REMOTE_INSTALL_KEY=some_install_key</span><br></code></pre></td></tr></table></figure><p>将dify插件页的调试信息填充到.env中，本地执行main方法，插件会被加载到dify的插件列表中</p><p><img src="https://i.111666.best/image/TmrbwxdMkhWRuygRCXbdGp.png" alt="image"></p><h2 id="创建CHAT任务流"><a href="#创建CHAT任务流" class="headerlink" title="创建CHAT任务流"></a>创建CHAT任务流</h2><p><img src="https://i.111666.best/image/2IgA1P69jBp6amaeczz6ZT.png" alt="image"></p><p>创建大模型组件，并填入模型，国内推荐使用硅基流动。</p><p>在大模型组件中填入模型，填入系统提示词，核心目的是预期输出合理且可控，不要有多余的输出，测试的系统提示词如下(并不能很好的获取到目标方法名，需要后期再调试)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## 角色</span><br><span class="hljs-string">你是一位专业的桌面助理</span><br><span class="hljs-comment">## 任务</span><br><span class="hljs-string">当用户发送查询桌面的请求时，你可以根据对话信息检查是否返回一个调用方法</span><br><span class="hljs-comment">## 当前支持的方法表</span><br><span class="hljs-string">发起桌面请求</span> <span class="hljs-string">=</span> <span class="hljs-string">destop_get</span><br><span class="hljs-comment">## 注意</span><br><span class="hljs-string">不需要</span> <span class="hljs-string">直接回答用户请求，只需要返回一个具体的执行方法</span><br></code></pre></td></tr></table></figure><p>在后续添加自定义组件作为节点， 接收大模型的返回作为输入的参数，进行后续执行</p><p><img src="https://i.111666.best/image/TUxQf8y6eXGsVkuHSLivNL.png" alt="image"></p><p>一个基础的工作链条  启动大模型→发起请求→ 根据请求给出需要执行的方法→传递给插件执行方法→返回执行结果</p><p>大模型正确识别方法名，插件解析方法，执行对应方法。向本地启动的服务器发送请求。得到响应返回结果到对话框</p><p><img src="https://i.111666.best/image/hdRpQxHTCHkU6fLsuc3BTm.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker容器镜像源</title>
    <link href="/2025/03/21/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <url>/2025/03/21/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-容器镜像拉取的问题"><a href="#Docker-容器镜像拉取的问题" class="headerlink" title="Docker 容器镜像拉取的问题"></a>Docker 容器镜像拉取的问题</h2><p>使用docker pull 或者 docker compose up -d 拉取镜像时，经常会遇到以下问题。</p><p>Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/">https://registry-1.docker.io/v2/</a>“: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p><p>原因是镜像源失效或者速率不够导致超时</p><p>绝大部分的文章都不用看，因为失效很快</p><p>可以在Github上关注这个项目随时更新源</p><p><a href="https://github.com/dongyubin/DockerHub">https://github.com/dongyubin/DockerHub</a></p><p>然后修改本地daemon.json 配置</p><p>cat &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>   <span class="hljs-string">&quot;https://docker.mybacc.com&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-string">&quot;https://docker.1ms.run&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-string">&quot;https://dytt.online&quot;</span><br> <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>重启daemon和docker 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl restart docker <br></code></pre></td></tr></table></figure><h2 id="顺便记录下Podman的源配置"><a href="#顺便记录下Podman的源配置" class="headerlink" title="顺便记录下Podman的源配置"></a>顺便记录下Podman的源配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZbp19tqlmjz1dmnm8w43uZ containers]# <span class="hljs-built_in">cat</span> /etc/containers/registries.conf | grep -v <span class="hljs-string">&quot;#&quot;</span><br><br>unqualified-search-registries = [<span class="hljs-string">&quot;registry.access.redhat.com&quot;</span>, <span class="hljs-string">&quot;registry.redhat.io&quot;</span>, <span class="hljs-string">&quot;docker.io&quot;</span>]<br><br><br><br>[[registry]]<br>prefix = <span class="hljs-string">&quot;docker.io&quot;</span><br>location = <span class="hljs-string">&quot;docker.1ms.run&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br>[[registry.mirror]]<br>location = <span class="hljs-string">&quot;docker.mybacc.com&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br>[[registry.mirror]]<br>location = <span class="hljs-string">&quot;docker.1ms.run&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br>[[registry.mirror]]<br>location = <span class="hljs-string">&quot;dytt.online&quot;</span><br>insecure = <span class="hljs-literal">false</span><br><br><br><br>short-name-mode = <span class="hljs-string">&quot;permissive&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于HEXO的博客搭建</title>
    <link href="/2025/03/21/%E5%9F%BA%E4%BA%8EHEXO%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/03/21/%E5%9F%BA%E4%BA%8EHEXO%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="基于HEXO-FLUID-样式的博客搭建"><a href="#基于HEXO-FLUID-样式的博客搭建" class="headerlink" title="基于HEXO+FLUID 样式的博客搭建"></a>基于HEXO+FLUID 样式的博客搭建</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>7.3版本的Hexo 要求node.js 的版本在18.0以上，centos7 所能拉取到的node.js 版本在11.0 。考虑到需要处理依赖所以直接换成了alibaba cloud 系统</p></li><li><p>安装 npm和hexo-cli 命令行工具</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install npm<br>npm install hexo-cli -g<br></code></pre></td></tr></table></figure></li><li><p>Github 集成</p><p> 因为后续需要设置到github page ，所以先配置git和密钥</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>ssh-keygen  <span class="hljs-comment"># 使用ssh-keygen 创建密钥</span><br><span class="hljs-built_in">cat</span> /root/.ssh/id_rsa.pub  <span class="hljs-comment"># 从目录文件夹查询公钥， </span><br><span class="hljs-comment"># 配置到github  -&gt; settings -&gt; SSH and GPG keys -&gt; New SSH key</span><br><br>dnf install git   <span class="hljs-comment"># 安装git</span><br><br>git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;邮箱&quot;</span><br>    <br>ssh -T git@github.com  <span class="hljs-comment"># 测试到github的连接</span><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="HEXO-框架安装"><a href="#HEXO-框架安装" class="headerlink" title="HEXO 框架安装"></a>HEXO 框架安装</h2><p>初始化hexo ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myhexo/  <span class="hljs-comment">#  初始化文件夹</span><br><span class="hljs-built_in">cd</span> myhexo  <span class="hljs-comment"># 移动到博客目录</span><br>npm install hexo-deployer-git --save  <span class="hljs-comment"># 安装并存储hexo项目</span><br></code></pre></td></tr></table></figure><p>修改部署方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>         <span class="hljs-comment"># 类型是 git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span>    <br>  <span class="hljs-comment">#在github上创建username.github.io的仓库,确认仓库名是否一致！ </span><br>  <span class="hljs-comment">#这里可以使用ssh的方式，也可以使用https的方式，但是ssh更稳定</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span> <span class="hljs-comment"># 设置分支为master</span><br><br></code></pre></td></tr></table></figure><p>修改后 使用 hexo deploy 进行安装，安装过程中会提示输入用户名和密码‘</p><p>用户名就是登录账户的名称</p><p>密码需要通过 settings → Developer Settings → Personal access tokens → Generate new token 创建token  作为密码 </p><p>等待几分钟可以通过访问 <a href="https://username.github.io/">https://username.github.io</a> 查看是否创建成功</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>hexo 支持多种样式风格的插件</p><p>以安装fluid为例 ， 安装插件 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">--save</span> <span class="hljs-string">hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>这时可以将 下载对应主题文件 放到theme 文件夹，在_config.yml配置theme 为fluid</p><p>或者直接在根目录创建 _config.fluid.yml  来进行配置。 _config.fluid.yml 的配置优先级高于 _config.yml  。 一些基本配置 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#标签页主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#语言</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#时区</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#主题</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about  <span class="hljs-comment"># 关于页需要自行创建</span><br></code></pre></td></tr></table></figure><p>扩展配置可以参考 ： <a href="https://fluid-dev.github.io/hexo-fluid-docs/">https://fluid-dev.github.io/hexo-fluid-docs/</a></p><p>在调试时 可以通过</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">g</span> <span class="hljs-string">--debug</span> <span class="hljs-string">来查看具体的配置信息</span>  <span class="hljs-string">如归档标签页的配置信息</span><br><br>  <span class="hljs-attr">&quot;archive&quot;:</span> &#123;<br>    <span class="hljs-attr">&quot;banner_img&quot;:</span> <span class="hljs-string">&quot;/img/default.png&quot;</span>,   <span class="hljs-comment"># 指定背景图片</span><br>    <span class="hljs-attr">&quot;banner_img_height&quot;:</span> <span class="hljs-number">60</span>,  <span class="hljs-comment"># 图片占全屏的比例</span><br>    <span class="hljs-attr">&quot;banner_mask_alpha&quot;:</span> <span class="hljs-number">0.3</span>   <span class="hljs-comment"># 不透明度</span><br>  &#125;<span class="hljs-string">,</span><br><br></code></pre></td></tr></table></figure><p>每次修改后需要使用hexo clean 再进行 生成和部署。</p><p>然后就可以开始 创建文章了,创建后会提示你md文件的地址，就可以进行编辑了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>相关内容 ： <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
